

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Nov 04 16:16:15 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	intentry,global,class=CODE,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	dabs	1,0x7E,2
    72  0000                     
    73                           ; Version 2.00
    74                           ; Generated 27/05/2018 GMT
    75                           ; 
    76                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16F887 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  0081                     	;# 
   143  0085                     	;# 
   144  0086                     	;# 
   145  0087                     	;# 
   146  0088                     	;# 
   147  0089                     	;# 
   148  008C                     	;# 
   149  008D                     	;# 
   150  008E                     	;# 
   151  008F                     	;# 
   152  0090                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0093                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0095                     	;# 
   160  0096                     	;# 
   161  0097                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009A                     	;# 
   165  009B                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  0105                     	;# 
   171  0107                     	;# 
   172  0108                     	;# 
   173  0109                     	;# 
   174  010C                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010F                     	;# 
   179  0185                     	;# 
   180  0187                     	;# 
   181  0188                     	;# 
   182  0189                     	;# 
   183  018C                     	;# 
   184  018D                     	;# 
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  0007                     	;# 
   193  0008                     	;# 
   194  0009                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000D                     	;# 
   199  000E                     	;# 
   200  000E                     	;# 
   201  000F                     	;# 
   202  0010                     	;# 
   203  0011                     	;# 
   204  0012                     	;# 
   205  0013                     	;# 
   206  0014                     	;# 
   207  0015                     	;# 
   208  0015                     	;# 
   209  0016                     	;# 
   210  0017                     	;# 
   211  0018                     	;# 
   212  0019                     	;# 
   213  001A                     	;# 
   214  001B                     	;# 
   215  001B                     	;# 
   216  001C                     	;# 
   217  001D                     	;# 
   218  001E                     	;# 
   219  001F                     	;# 
   220  0081                     	;# 
   221  0085                     	;# 
   222  0086                     	;# 
   223  0087                     	;# 
   224  0088                     	;# 
   225  0089                     	;# 
   226  008C                     	;# 
   227  008D                     	;# 
   228  008E                     	;# 
   229  008F                     	;# 
   230  0090                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0093                     	;# 
   235  0093                     	;# 
   236  0094                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0098                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  0105                     	;# 
   249  0107                     	;# 
   250  0108                     	;# 
   251  0109                     	;# 
   252  010C                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  010E                     	;# 
   256  010F                     	;# 
   257  0185                     	;# 
   258  0187                     	;# 
   259  0188                     	;# 
   260  0189                     	;# 
   261  018C                     	;# 
   262  018D                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0008                     	;# 
   272  0009                     	;# 
   273  000A                     	;# 
   274  000B                     	;# 
   275  000C                     	;# 
   276  000D                     	;# 
   277  000E                     	;# 
   278  000E                     	;# 
   279  000F                     	;# 
   280  0010                     	;# 
   281  0011                     	;# 
   282  0012                     	;# 
   283  0013                     	;# 
   284  0014                     	;# 
   285  0015                     	;# 
   286  0015                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001B                     	;# 
   294  001C                     	;# 
   295  001D                     	;# 
   296  001E                     	;# 
   297  001F                     	;# 
   298  0081                     	;# 
   299  0085                     	;# 
   300  0086                     	;# 
   301  0087                     	;# 
   302  0088                     	;# 
   303  0089                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  008F                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0093                     	;# 
   312  0093                     	;# 
   313  0093                     	;# 
   314  0094                     	;# 
   315  0095                     	;# 
   316  0096                     	;# 
   317  0097                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009A                     	;# 
   321  009B                     	;# 
   322  009C                     	;# 
   323  009D                     	;# 
   324  009E                     	;# 
   325  009F                     	;# 
   326  0105                     	;# 
   327  0107                     	;# 
   328  0108                     	;# 
   329  0109                     	;# 
   330  010C                     	;# 
   331  010C                     	;# 
   332  010D                     	;# 
   333  010E                     	;# 
   334  010F                     	;# 
   335  0185                     	;# 
   336  0187                     	;# 
   337  0188                     	;# 
   338  0189                     	;# 
   339  018C                     	;# 
   340  018D                     	;# 
   341  0000                     	;# 
   342  0001                     	;# 
   343  0002                     	;# 
   344  0003                     	;# 
   345  0004                     	;# 
   346  0005                     	;# 
   347  0006                     	;# 
   348  0007                     	;# 
   349  0008                     	;# 
   350  0009                     	;# 
   351  000A                     	;# 
   352  000B                     	;# 
   353  000C                     	;# 
   354  000D                     	;# 
   355  000E                     	;# 
   356  000E                     	;# 
   357  000F                     	;# 
   358  0010                     	;# 
   359  0011                     	;# 
   360  0012                     	;# 
   361  0013                     	;# 
   362  0014                     	;# 
   363  0015                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0017                     	;# 
   367  0018                     	;# 
   368  0019                     	;# 
   369  001A                     	;# 
   370  001B                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  001D                     	;# 
   374  001E                     	;# 
   375  001F                     	;# 
   376  0081                     	;# 
   377  0085                     	;# 
   378  0086                     	;# 
   379  0087                     	;# 
   380  0088                     	;# 
   381  0089                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  008F                     	;# 
   386  0090                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0093                     	;# 
   391  0093                     	;# 
   392  0094                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009A                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  009F                     	;# 
   404  0105                     	;# 
   405  0107                     	;# 
   406  0108                     	;# 
   407  0109                     	;# 
   408  010C                     	;# 
   409  010C                     	;# 
   410  010D                     	;# 
   411  010E                     	;# 
   412  010F                     	;# 
   413  0185                     	;# 
   414  0187                     	;# 
   415  0188                     	;# 
   416  0189                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  0000                     	;# 
   420  0001                     	;# 
   421  0002                     	;# 
   422  0003                     	;# 
   423  0004                     	;# 
   424  0005                     	;# 
   425  0006                     	;# 
   426  0007                     	;# 
   427  0008                     	;# 
   428  0009                     	;# 
   429  000A                     	;# 
   430  000B                     	;# 
   431  000C                     	;# 
   432  000D                     	;# 
   433  000E                     	;# 
   434  000E                     	;# 
   435  000F                     	;# 
   436  0010                     	;# 
   437  0011                     	;# 
   438  0012                     	;# 
   439  0013                     	;# 
   440  0014                     	;# 
   441  0015                     	;# 
   442  0015                     	;# 
   443  0016                     	;# 
   444  0017                     	;# 
   445  0018                     	;# 
   446  0019                     	;# 
   447  001A                     	;# 
   448  001B                     	;# 
   449  001B                     	;# 
   450  001C                     	;# 
   451  001D                     	;# 
   452  001E                     	;# 
   453  001F                     	;# 
   454  0081                     	;# 
   455  0085                     	;# 
   456  0086                     	;# 
   457  0087                     	;# 
   458  0088                     	;# 
   459  0089                     	;# 
   460  008C                     	;# 
   461  008D                     	;# 
   462  008E                     	;# 
   463  008F                     	;# 
   464  0090                     	;# 
   465  0091                     	;# 
   466  0092                     	;# 
   467  0093                     	;# 
   468  0093                     	;# 
   469  0093                     	;# 
   470  0094                     	;# 
   471  0095                     	;# 
   472  0096                     	;# 
   473  0097                     	;# 
   474  0098                     	;# 
   475  0099                     	;# 
   476  009A                     	;# 
   477  009B                     	;# 
   478  009C                     	;# 
   479  009D                     	;# 
   480  009E                     	;# 
   481  009F                     	;# 
   482  0105                     	;# 
   483  0107                     	;# 
   484  0108                     	;# 
   485  0109                     	;# 
   486  010C                     	;# 
   487  010C                     	;# 
   488  010D                     	;# 
   489  010E                     	;# 
   490  010F                     	;# 
   491  0185                     	;# 
   492  0187                     	;# 
   493  0188                     	;# 
   494  0189                     	;# 
   495  018C                     	;# 
   496  018D                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000D                     	;# 
   511  000E                     	;# 
   512  000E                     	;# 
   513  000F                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0013                     	;# 
   518  0014                     	;# 
   519  0015                     	;# 
   520  0015                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001B                     	;# 
   528  001C                     	;# 
   529  001D                     	;# 
   530  001E                     	;# 
   531  001F                     	;# 
   532  0081                     	;# 
   533  0085                     	;# 
   534  0086                     	;# 
   535  0087                     	;# 
   536  0088                     	;# 
   537  0089                     	;# 
   538  008C                     	;# 
   539  008D                     	;# 
   540  008E                     	;# 
   541  008F                     	;# 
   542  0090                     	;# 
   543  0091                     	;# 
   544  0092                     	;# 
   545  0093                     	;# 
   546  0093                     	;# 
   547  0093                     	;# 
   548  0094                     	;# 
   549  0095                     	;# 
   550  0096                     	;# 
   551  0097                     	;# 
   552  0098                     	;# 
   553  0099                     	;# 
   554  009A                     	;# 
   555  009B                     	;# 
   556  009C                     	;# 
   557  009D                     	;# 
   558  009E                     	;# 
   559  009F                     	;# 
   560  0105                     	;# 
   561  0107                     	;# 
   562  0108                     	;# 
   563  0109                     	;# 
   564  010C                     	;# 
   565  010C                     	;# 
   566  010D                     	;# 
   567  010E                     	;# 
   568  010F                     	;# 
   569  0185                     	;# 
   570  0187                     	;# 
   571  0188                     	;# 
   572  0189                     	;# 
   573  018C                     	;# 
   574  018D                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000D                     	;# 
   589  000E                     	;# 
   590  000E                     	;# 
   591  000F                     	;# 
   592  0010                     	;# 
   593  0011                     	;# 
   594  0012                     	;# 
   595  0013                     	;# 
   596  0014                     	;# 
   597  0015                     	;# 
   598  0015                     	;# 
   599  0016                     	;# 
   600  0017                     	;# 
   601  0018                     	;# 
   602  0019                     	;# 
   603  001A                     	;# 
   604  001B                     	;# 
   605  001B                     	;# 
   606  001C                     	;# 
   607  001D                     	;# 
   608  001E                     	;# 
   609  001F                     	;# 
   610  0081                     	;# 
   611  0085                     	;# 
   612  0086                     	;# 
   613  0087                     	;# 
   614  0088                     	;# 
   615  0089                     	;# 
   616  008C                     	;# 
   617  008D                     	;# 
   618  008E                     	;# 
   619  008F                     	;# 
   620  0090                     	;# 
   621  0091                     	;# 
   622  0092                     	;# 
   623  0093                     	;# 
   624  0093                     	;# 
   625  0093                     	;# 
   626  0094                     	;# 
   627  0095                     	;# 
   628  0096                     	;# 
   629  0097                     	;# 
   630  0098                     	;# 
   631  0099                     	;# 
   632  009A                     	;# 
   633  009B                     	;# 
   634  009C                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  009F                     	;# 
   638  0105                     	;# 
   639  0107                     	;# 
   640  0108                     	;# 
   641  0109                     	;# 
   642  010C                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  010F                     	;# 
   647  0185                     	;# 
   648  0187                     	;# 
   649  0188                     	;# 
   650  0189                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0008                     	;# 
   662  0009                     	;# 
   663  000A                     	;# 
   664  000B                     	;# 
   665  000C                     	;# 
   666  000D                     	;# 
   667  000E                     	;# 
   668  000E                     	;# 
   669  000F                     	;# 
   670  0010                     	;# 
   671  0011                     	;# 
   672  0012                     	;# 
   673  0013                     	;# 
   674  0014                     	;# 
   675  0015                     	;# 
   676  0015                     	;# 
   677  0016                     	;# 
   678  0017                     	;# 
   679  0018                     	;# 
   680  0019                     	;# 
   681  001A                     	;# 
   682  001B                     	;# 
   683  001B                     	;# 
   684  001C                     	;# 
   685  001D                     	;# 
   686  001E                     	;# 
   687  001F                     	;# 
   688  0081                     	;# 
   689  0085                     	;# 
   690  0086                     	;# 
   691  0087                     	;# 
   692  0088                     	;# 
   693  0089                     	;# 
   694  008C                     	;# 
   695  008D                     	;# 
   696  008E                     	;# 
   697  008F                     	;# 
   698  0090                     	;# 
   699  0091                     	;# 
   700  0092                     	;# 
   701  0093                     	;# 
   702  0093                     	;# 
   703  0093                     	;# 
   704  0094                     	;# 
   705  0095                     	;# 
   706  0096                     	;# 
   707  0097                     	;# 
   708  0098                     	;# 
   709  0099                     	;# 
   710  009A                     	;# 
   711  009B                     	;# 
   712  009C                     	;# 
   713  009D                     	;# 
   714  009E                     	;# 
   715  009F                     	;# 
   716  0105                     	;# 
   717  0107                     	;# 
   718  0108                     	;# 
   719  0109                     	;# 
   720  010C                     	;# 
   721  010C                     	;# 
   722  010D                     	;# 
   723  010E                     	;# 
   724  010F                     	;# 
   725  0185                     	;# 
   726  0187                     	;# 
   727  0188                     	;# 
   728  0189                     	;# 
   729  018C                     	;# 
   730  018D                     	;# 
   731  0000                     	;# 
   732  0001                     	;# 
   733  0002                     	;# 
   734  0003                     	;# 
   735  0004                     	;# 
   736  0005                     	;# 
   737  0006                     	;# 
   738  0007                     	;# 
   739  0008                     	;# 
   740  0009                     	;# 
   741  000A                     	;# 
   742  000B                     	;# 
   743  000C                     	;# 
   744  000D                     	;# 
   745  000E                     	;# 
   746  000E                     	;# 
   747  000F                     	;# 
   748  0010                     	;# 
   749  0011                     	;# 
   750  0012                     	;# 
   751  0013                     	;# 
   752  0014                     	;# 
   753  0015                     	;# 
   754  0015                     	;# 
   755  0016                     	;# 
   756  0017                     	;# 
   757  0018                     	;# 
   758  0019                     	;# 
   759  001A                     	;# 
   760  001B                     	;# 
   761  001B                     	;# 
   762  001C                     	;# 
   763  001D                     	;# 
   764  001E                     	;# 
   765  001F                     	;# 
   766  0081                     	;# 
   767  0085                     	;# 
   768  0086                     	;# 
   769  0087                     	;# 
   770  0088                     	;# 
   771  0089                     	;# 
   772  008C                     	;# 
   773  008D                     	;# 
   774  008E                     	;# 
   775  008F                     	;# 
   776  0090                     	;# 
   777  0091                     	;# 
   778  0092                     	;# 
   779  0093                     	;# 
   780  0093                     	;# 
   781  0093                     	;# 
   782  0094                     	;# 
   783  0095                     	;# 
   784  0096                     	;# 
   785  0097                     	;# 
   786  0098                     	;# 
   787  0099                     	;# 
   788  009A                     	;# 
   789  009B                     	;# 
   790  009C                     	;# 
   791  009D                     	;# 
   792  009E                     	;# 
   793  009F                     	;# 
   794  0105                     	;# 
   795  0107                     	;# 
   796  0108                     	;# 
   797  0109                     	;# 
   798  010C                     	;# 
   799  010C                     	;# 
   800  010D                     	;# 
   801  010E                     	;# 
   802  010F                     	;# 
   803  0185                     	;# 
   804  0187                     	;# 
   805  0188                     	;# 
   806  0189                     	;# 
   807  018C                     	;# 
   808  018D                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000D                     	;# 
   823  000E                     	;# 
   824  000E                     	;# 
   825  000F                     	;# 
   826  0010                     	;# 
   827  0011                     	;# 
   828  0012                     	;# 
   829  0013                     	;# 
   830  0014                     	;# 
   831  0015                     	;# 
   832  0015                     	;# 
   833  0016                     	;# 
   834  0017                     	;# 
   835  0018                     	;# 
   836  0019                     	;# 
   837  001A                     	;# 
   838  001B                     	;# 
   839  001B                     	;# 
   840  001C                     	;# 
   841  001D                     	;# 
   842  001E                     	;# 
   843  001F                     	;# 
   844  0081                     	;# 
   845  0085                     	;# 
   846  0086                     	;# 
   847  0087                     	;# 
   848  0088                     	;# 
   849  0089                     	;# 
   850  008C                     	;# 
   851  008D                     	;# 
   852  008E                     	;# 
   853  008F                     	;# 
   854  0090                     	;# 
   855  0091                     	;# 
   856  0092                     	;# 
   857  0093                     	;# 
   858  0093                     	;# 
   859  0093                     	;# 
   860  0094                     	;# 
   861  0095                     	;# 
   862  0096                     	;# 
   863  0097                     	;# 
   864  0098                     	;# 
   865  0099                     	;# 
   866  009A                     	;# 
   867  009B                     	;# 
   868  009C                     	;# 
   869  009D                     	;# 
   870  009E                     	;# 
   871  009F                     	;# 
   872  0105                     	;# 
   873  0107                     	;# 
   874  0108                     	;# 
   875  0109                     	;# 
   876  010C                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  010F                     	;# 
   881  0185                     	;# 
   882  0187                     	;# 
   883  0188                     	;# 
   884  0189                     	;# 
   885  018C                     	;# 
   886  018D                     	;# 
   887  001A                     _RCREG	set	26
   888  0019                     _TXREG	set	25
   889  0018                     _RCSTAbits	set	24
   890  0001                     _TMR0	set	1
   891  000C                     _PIR1bits	set	12
   892  000B                     _INTCONbits	set	11
   893                           
   894                           	psect	text0
   895  0000                     __ptext0:	
   896  0008                     _LCD	set	8
   897  0007                     _PORTCbits	set	7
   898  0006                     _PORTBbits	set	6
   899  0017                     _CCP1CON	set	23
   900  0006                     _PORTB	set	6
   901  0099                     _SPBRbits	set	153
   902  0094                     _SSPSTATbits	set	148
   903  0098                     _TXSTAbits	set	152
   904  0081                     _OPTION_REGbits	set	129
   905  0085                     _TRISAbits	set	133
   906  008C                     _PIE1bits	set	140
   907  0088                     _TRISD	set	136
   908  0087                     _TRISCbits	set	135
   909  0086                     _TRISB	set	134
   910  0187                     _BAUDCTLbits	set	391
   911  0188                     _ANSEL	set	392
   912  0189                     _ANSELH	set	393
   913                           
   914                           	psect	strings
   915  1000                     __pstrings:	
   916  1000                     stringtab:	
   917  1000                     __stringtab:	
   918                           
   919                           ;	String table - string pointers are 2 bytes each
   920  1000  1BFF               	btfsc	btemp+1,7
   921  1001  280A               	ljmp	stringcode
   922  1002  1383               	bcf	3,7
   923  1003  187F               	btfsc	btemp+1,0
   924  1004  1783               	bsf	3,7
   925  1005  0800               	movf	0,w
   926  1006  0A84               	incf	4,f
   927  1007  1903               	skipnz
   928  1008  0AFF               	incf	btemp+1,f
   929  1009  0008               	return
   930  100A                     stringcode:	
   931  100A  087F               	movf	btemp+1,w
   932  100B  397F               	andlw	127
   933  100C  008A               	movwf	10
   934  100D  0804               	movf	4,w
   935  100E  0A84               	incf	4,f
   936  100F  1903               	skipnz
   937  1010  0AFF               	incf	btemp+1,f
   938  1011  0082               	movwf	2
   939  1012                     __stringbase:	
   940  1012                     __end_of__stringtab:	
   941                           
   942                           	psect	stringtext
   943  0600                     __pstringtext:	
   944  0600                     STR_100:	
   945  0600  3441               	retlw	65	;'A'
   946  0601  3454               	retlw	84	;'T'
   947  0602  342B               	retlw	43	;'+'
   948  0603  3450               	retlw	80	;'P'
   949  0604  3441               	retlw	65	;'A'
   950  0605  3449               	retlw	73	;'I'
   951  0606  3452               	retlw	82	;'R'
   952  0607  343D               	retlw	61	;'='
   953  0608  3433               	retlw	51	;'3'
   954  0609  3444               	retlw	68	;'D'
   955  060A  3442               	retlw	66	;'B'
   956  060B  3441               	retlw	65	;'A'
   957  060C  342C               	retlw	44	;','
   958  060D  3438               	retlw	56	;'8'
   959  060E  3438               	retlw	56	;'8'
   960  060F  342C               	retlw	44	;','
   961  0610  3436               	retlw	54	;'6'
   962  0611  3438               	retlw	56	;'8'
   963  0612  3437               	retlw	55	;'7'
   964  0613  3441               	retlw	65	;'A'
   965  0614  3437               	retlw	55	;'7'
   966  0615  3434               	retlw	52	;'4'
   967  0616  342C               	retlw	44	;','
   968  0617  3432               	retlw	50	;'2'
   969  0618  3430               	retlw	48	;'0'
   970  0619  340D               	retlw	13
   971  061A  340A               	retlw	10
   972  061B  3400               	retlw	0
   973  061C                     STR_106:	
   974  061C  3441               	retlw	65	;'A'
   975  061D  3454               	retlw	84	;'T'
   976  061E  342B               	retlw	43	;'+'
   977  061F  3450               	retlw	80	;'P'
   978  0620  3441               	retlw	65	;'A'
   979  0621  3449               	retlw	73	;'I'
   980  0622  3452               	retlw	82	;'R'
   981  0623  343D               	retlw	61	;'='
   982  0624  3439               	retlw	57	;'9'
   983  0625  3438               	retlw	56	;'8'
   984  0626  3444               	retlw	68	;'D'
   985  0627  3433               	retlw	51	;'3'
   986  0628  342C               	retlw	44	;','
   987  0629  3442               	retlw	66	;'B'
   988  062A  3431               	retlw	49	;'1'
   989  062B  342C               	retlw	44	;','
   990  062C  3446               	retlw	70	;'F'
   991  062D  3444               	retlw	68	;'D'
   992  062E  3434               	retlw	52	;'4'
   993  062F  3433               	retlw	51	;'3'
   994  0630  3445               	retlw	69	;'E'
   995  0631  3439               	retlw	57	;'9'
   996  0632  342C               	retlw	44	;','
   997  0633  3432               	retlw	50	;'2'
   998  0634  3430               	retlw	48	;'0'
   999  0635  340D               	retlw	13
  1000  0636  340A               	retlw	10
  1001  0637  3400               	retlw	0
  1002  0638                     STR_103:	
  1003  0638  3441               	retlw	65	;'A'
  1004  0639  3454               	retlw	84	;'T'
  1005  063A  342B               	retlw	43	;'+'
  1006  063B  3450               	retlw	80	;'P'
  1007  063C  3441               	retlw	65	;'A'
  1008  063D  3449               	retlw	73	;'I'
  1009  063E  3452               	retlw	82	;'R'
  1010  063F  343D               	retlw	61	;'='
  1011  0640  3430               	retlw	48	;'0'
  1012  0641  3430               	retlw	48	;'0'
  1013  0642  3431               	retlw	49	;'1'
  1014  0643  3433               	retlw	51	;'3'
  1015  0644  342C               	retlw	44	;','
  1016  0645  3445               	retlw	69	;'E'
  1017  0646  3446               	retlw	70	;'F'
  1018  0647  342C               	retlw	44	;','
  1019  0648  3430               	retlw	48	;'0'
  1020  0649  3430               	retlw	48	;'0'
  1021  064A  3431               	retlw	49	;'1'
  1022  064B  3434               	retlw	52	;'4'
  1023  064C  3442               	retlw	66	;'B'
  1024  064D  3442               	retlw	66	;'B'
  1025  064E  342C               	retlw	44	;','
  1026  064F  3432               	retlw	50	;'2'
  1027  0650  3430               	retlw	48	;'0'
  1028  0651  340D               	retlw	13
  1029  0652  340A               	retlw	10
  1030  0653  3400               	retlw	0
  1031  0654                     STR_102:	
  1032  0654  3441               	retlw	65	;'A'
  1033  0655  3454               	retlw	84	;'T'
  1034  0656  342B               	retlw	43	;'+'
  1035  0657  3442               	retlw	66	;'B'
  1036  0658  3449               	retlw	73	;'I'
  1037  0659  344E               	retlw	78	;'N'
  1038  065A  3444               	retlw	68	;'D'
  1039  065B  343D               	retlw	61	;'='
  1040  065C  3433               	retlw	51	;'3'
  1041  065D  3444               	retlw	68	;'D'
  1042  065E  3442               	retlw	66	;'B'
  1043  065F  3441               	retlw	65	;'A'
  1044  0660  342C               	retlw	44	;','
  1045  0661  3438               	retlw	56	;'8'
  1046  0662  3438               	retlw	56	;'8'
  1047  0663  342C               	retlw	44	;','
  1048  0664  3436               	retlw	54	;'6'
  1049  0665  3438               	retlw	56	;'8'
  1050  0666  3437               	retlw	55	;'7'
  1051  0667  3441               	retlw	65	;'A'
  1052  0668  3437               	retlw	55	;'7'
  1053  0669  3434               	retlw	52	;'4'
  1054  066A  340D               	retlw	13
  1055  066B  340A               	retlw	10
  1056  066C  3400               	retlw	0
  1057  066D                     STR_101:	
  1058  066D  3441               	retlw	65	;'A'
  1059  066E  3454               	retlw	84	;'T'
  1060  066F  342B               	retlw	43	;'+'
  1061  0670  344C               	retlw	76	;'L'
  1062  0671  3449               	retlw	73	;'I'
  1063  0672  344E               	retlw	78	;'N'
  1064  0673  344B               	retlw	75	;'K'
  1065  0674  343D               	retlw	61	;'='
  1066  0675  3433               	retlw	51	;'3'
  1067  0676  3444               	retlw	68	;'D'
  1068  0677  3442               	retlw	66	;'B'
  1069  0678  3441               	retlw	65	;'A'
  1070  0679  342C               	retlw	44	;','
  1071  067A  3438               	retlw	56	;'8'
  1072  067B  3438               	retlw	56	;'8'
  1073  067C  342C               	retlw	44	;','
  1074  067D  3436               	retlw	54	;'6'
  1075  067E  3438               	retlw	56	;'8'
  1076  067F  3437               	retlw	55	;'7'
  1077  0680  3441               	retlw	65	;'A'
  1078  0681  3437               	retlw	55	;'7'
  1079  0682  3434               	retlw	52	;'4'
  1080  0683  340D               	retlw	13
  1081  0684  340A               	retlw	10
  1082  0685  3400               	retlw	0
  1083  0686                     STR_108:	
  1084  0686  3441               	retlw	65	;'A'
  1085  0687  3454               	retlw	84	;'T'
  1086  0688  342B               	retlw	43	;'+'
  1087  0689  3442               	retlw	66	;'B'
  1088  068A  3449               	retlw	73	;'I'
  1089  068B  344E               	retlw	78	;'N'
  1090  068C  3444               	retlw	68	;'D'
  1091  068D  343D               	retlw	61	;'='
  1092  068E  3439               	retlw	57	;'9'
  1093  068F  3438               	retlw	56	;'8'
  1094  0690  3444               	retlw	68	;'D'
  1095  0691  3433               	retlw	51	;'3'
  1096  0692  342C               	retlw	44	;','
  1097  0693  3442               	retlw	66	;'B'
  1098  0694  3431               	retlw	49	;'1'
  1099  0695  342C               	retlw	44	;','
  1100  0696  3446               	retlw	70	;'F'
  1101  0697  3444               	retlw	68	;'D'
  1102  0698  3434               	retlw	52	;'4'
  1103  0699  3433               	retlw	51	;'3'
  1104  069A  3445               	retlw	69	;'E'
  1105  069B  3439               	retlw	57	;'9'
  1106  069C  340D               	retlw	13
  1107  069D  340A               	retlw	10
  1108  069E  3400               	retlw	0
  1109  069F                     STR_107:	
  1110  069F  3441               	retlw	65	;'A'
  1111  06A0  3454               	retlw	84	;'T'
  1112  06A1  342B               	retlw	43	;'+'
  1113  06A2  344C               	retlw	76	;'L'
  1114  06A3  3449               	retlw	73	;'I'
  1115  06A4  344E               	retlw	78	;'N'
  1116  06A5  344B               	retlw	75	;'K'
  1117  06A6  343D               	retlw	61	;'='
  1118  06A7  3439               	retlw	57	;'9'
  1119  06A8  3438               	retlw	56	;'8'
  1120  06A9  3444               	retlw	68	;'D'
  1121  06AA  3433               	retlw	51	;'3'
  1122  06AB  342C               	retlw	44	;','
  1123  06AC  3442               	retlw	66	;'B'
  1124  06AD  3431               	retlw	49	;'1'
  1125  06AE  342C               	retlw	44	;','
  1126  06AF  3446               	retlw	70	;'F'
  1127  06B0  3444               	retlw	68	;'D'
  1128  06B1  3434               	retlw	52	;'4'
  1129  06B2  3433               	retlw	51	;'3'
  1130  06B3  3445               	retlw	69	;'E'
  1131  06B4  3439               	retlw	57	;'9'
  1132  06B5  340D               	retlw	13
  1133  06B6  340A               	retlw	10
  1134  06B7  3400               	retlw	0
  1135  06B8                     STR_105:	
  1136  06B8  3441               	retlw	65	;'A'
  1137  06B9  3454               	retlw	84	;'T'
  1138  06BA  342B               	retlw	43	;'+'
  1139  06BB  3442               	retlw	66	;'B'
  1140  06BC  3449               	retlw	73	;'I'
  1141  06BD  344E               	retlw	78	;'N'
  1142  06BE  3444               	retlw	68	;'D'
  1143  06BF  343D               	retlw	61	;'='
  1144  06C0  3430               	retlw	48	;'0'
  1145  06C1  3430               	retlw	48	;'0'
  1146  06C2  3431               	retlw	49	;'1'
  1147  06C3  3433               	retlw	51	;'3'
  1148  06C4  342C               	retlw	44	;','
  1149  06C5  3445               	retlw	69	;'E'
  1150  06C6  3446               	retlw	70	;'F'
  1151  06C7  342C               	retlw	44	;','
  1152  06C8  3430               	retlw	48	;'0'
  1153  06C9  3430               	retlw	48	;'0'
  1154  06CA  3431               	retlw	49	;'1'
  1155  06CB  3434               	retlw	52	;'4'
  1156  06CC  3442               	retlw	66	;'B'
  1157  06CD  3442               	retlw	66	;'B'
  1158  06CE  340D               	retlw	13
  1159  06CF  340A               	retlw	10
  1160  06D0  3400               	retlw	0
  1161  06D1                     STR_104:	
  1162  06D1  3441               	retlw	65	;'A'
  1163  06D2  3454               	retlw	84	;'T'
  1164  06D3  342B               	retlw	43	;'+'
  1165  06D4  344C               	retlw	76	;'L'
  1166  06D5  3449               	retlw	73	;'I'
  1167  06D6  344E               	retlw	78	;'N'
  1168  06D7  344B               	retlw	75	;'K'
  1169  06D8  343D               	retlw	61	;'='
  1170  06D9  3430               	retlw	48	;'0'
  1171  06DA  3430               	retlw	48	;'0'
  1172  06DB  3431               	retlw	49	;'1'
  1173  06DC  3433               	retlw	51	;'3'
  1174  06DD  342C               	retlw	44	;','
  1175  06DE  3445               	retlw	69	;'E'
  1176  06DF  3446               	retlw	70	;'F'
  1177  06E0  342C               	retlw	44	;','
  1178  06E1  3430               	retlw	48	;'0'
  1179  06E2  3430               	retlw	48	;'0'
  1180  06E3  3431               	retlw	49	;'1'
  1181  06E4  3434               	retlw	52	;'4'
  1182  06E5  3442               	retlw	66	;'B'
  1183  06E6  3442               	retlw	66	;'B'
  1184  06E7  340D               	retlw	13
  1185  06E8  340A               	retlw	10
  1186  06E9  3400               	retlw	0
  1187  06EA                     STR_98:	
  1188  06EA  3441               	retlw	65	;'A'
  1189  06EB  3454               	retlw	84	;'T'
  1190  06EC  342B               	retlw	43	;'+'
  1191  06ED  344E               	retlw	78	;'N'
  1192  06EE  3441               	retlw	65	;'A'
  1193  06EF  344D               	retlw	77	;'M'
  1194  06F0  3445               	retlw	69	;'E'
  1195  06F1  343D               	retlw	61	;'='
  1196  06F2  3422               	retlw	34	;'"'
  1197  06F3  3445               	retlw	69	;'E'
  1198  06F4  3473               	retlw	115	;'s'
  1199  06F5  3463               	retlw	99	;'c'
  1200  06F6  3472               	retlw	114	;'r'
  1201  06F7  3461               	retlw	97	;'a'
  1202  06F8  3476               	retlw	118	;'v'
  1203  06F9  346F               	retlw	111	;'o'
  1204  06FA  3422               	retlw	34	;'"'
  1205  06FB  340D               	retlw	13
  1206  06FC  340A               	retlw	10
  1207  06FD  3400               	retlw	0
  1208  06FE                     STR_85:	
  1209  06FE  3441               	retlw	65	;'A'
  1210  06FF  3454               	retlw	84	;'T'
  1211  0700  342B               	retlw	43	;'+'
  1212  0701  3455               	retlw	85	;'U'
  1213  0702  3441               	retlw	65	;'A'
  1214  0703  3452               	retlw	82	;'R'
  1215  0704  3454               	retlw	84	;'T'
  1216  0705  343D               	retlw	61	;'='
  1217  0706  3439               	retlw	57	;'9'
  1218  0707  3436               	retlw	54	;'6'
  1219  0708  3430               	retlw	48	;'0'
  1220  0709  3430               	retlw	48	;'0'
  1221  070A  342C               	retlw	44	;','
  1222  070B  3430               	retlw	48	;'0'
  1223  070C  342C               	retlw	44	;','
  1224  070D  3430               	retlw	48	;'0'
  1225  070E  340D               	retlw	13
  1226  070F  340A               	retlw	10
  1227  0710  3400               	retlw	0
  1228  0711                     STR_117:	
  1229  0711  3420               	retlw	32	;' '
  1230  0712  3420               	retlw	32	;' '
  1231  0713  3420               	retlw	32	;' '
  1232  0714  3420               	retlw	32	;' '
  1233  0715  3454               	retlw	84	;'T'
  1234  0716  3452               	retlw	82	;'R'
  1235  0717  344F               	retlw	79	;'O'
  1236  0718  3443               	retlw	67	;'C'
  1237  0719  3441               	retlw	65	;'A'
  1238  071A  344E               	retlw	78	;'N'
  1239  071B  3444               	retlw	68	;'D'
  1240  071C  344F               	retlw	79	;'O'
  1241  071D  3420               	retlw	32	;' '
  1242  071E  3420               	retlw	32	;' '
  1243  071F  3420               	retlw	32	;' '
  1244  0720  3420               	retlw	32	;' '
  1245  0721  3400               	retlw	0
  1246  0722                     STR_116:	
  1247  0722  3420               	retlw	32	;' '
  1248  0723  3420               	retlw	32	;' '
  1249  0724  3420               	retlw	32	;' '
  1250  0725  3420               	retlw	32	;' '
  1251  0726  3444               	retlw	68	;'D'
  1252  0727  3445               	retlw	69	;'E'
  1253  0728  3420               	retlw	32	;' '
  1254  0729  3444               	retlw	68	;'D'
  1255  072A  3441               	retlw	65	;'A'
  1256  072B  3444               	retlw	68	;'D'
  1257  072C  344F               	retlw	79	;'O'
  1258  072D  3453               	retlw	83	;'S'
  1259  072E  3420               	retlw	32	;' '
  1260  072F  3420               	retlw	32	;' '
  1261  0730  3420               	retlw	32	;' '
  1262  0731  3420               	retlw	32	;' '
  1263  0732  3400               	retlw	0
  1264  0733                     STR_118:	
  1265  0733  3420               	retlw	32	;' '
  1266  0734  3420               	retlw	32	;' '
  1267  0735  3420               	retlw	32	;' '
  1268  0736  3449               	retlw	73	;'I'
  1269  0737  344E               	retlw	78	;'N'
  1270  0738  3446               	retlw	70	;'F'
  1271  0739  344F               	retlw	79	;'O'
  1272  073A  3452               	retlw	82	;'R'
  1273  073B  344D               	retlw	77	;'M'
  1274  073C  3441               	retlw	65	;'A'
  1275  073D  3443               	retlw	67	;'C'
  1276  073E  3441               	retlw	65	;'A'
  1277  073F  344F               	retlw	79	;'O'
  1278  0740  3420               	retlw	32	;' '
  1279  0741  3420               	retlw	32	;' '
  1280  0742  3420               	retlw	32	;' '
  1281  0743  3400               	retlw	0
  1282  0744                     STR_126:	
  1283  0744  3444               	retlw	68	;'D'
  1284  0745  3445               	retlw	69	;'E'
  1285  0746  3453               	retlw	83	;'S'
  1286  0747  3443               	retlw	67	;'C'
  1287  0748  344F               	retlw	79	;'O'
  1288  0749  344E               	retlw	78	;'N'
  1289  074A  3445               	retlw	69	;'E'
  1290  074B  3443               	retlw	67	;'C'
  1291  074C  3454               	retlw	84	;'T'
  1292  074D  3441               	retlw	65	;'A'
  1293  074E  344E               	retlw	78	;'N'
  1294  074F  3444               	retlw	68	;'D'
  1295  0750  344F               	retlw	79	;'O'
  1296  0751  3420               	retlw	32	;' '
  1297  0752  3420               	retlw	32	;' '
  1298  0753  3420               	retlw	32	;' '
  1299  0754  3400               	retlw	0
  1300  0755                     STR_124:	
  1301  0755  3420               	retlw	32	;' '
  1302  0756  3450               	retlw	80	;'P'
  1303  0757  3441               	retlw	65	;'A'
  1304  0758  3452               	retlw	82	;'R'
  1305  0759  3445               	retlw	69	;'E'
  1306  075A  3441               	retlw	65	;'A'
  1307  075B  3452               	retlw	82	;'R'
  1308  075C  3420               	retlw	32	;' '
  1309  075D  3443               	retlw	67	;'C'
  1310  075E  344F               	retlw	79	;'O'
  1311  075F  344D               	retlw	77	;'M'
  1312  0760  3420               	retlw	32	;' '
  1313  0761  3449               	retlw	73	;'I'
  1314  0762  3450               	retlw	80	;'P'
  1315  0763  3420               	retlw	32	;' '
  1316  0764  3420               	retlw	32	;' '
  1317  0765  3400               	retlw	0
  1318  0766                     STR_122:	
  1319  0766  3450               	retlw	80	;'P'
  1320  0767  3441               	retlw	65	;'A'
  1321  0768  3452               	retlw	82	;'R'
  1322  0769  3445               	retlw	69	;'E'
  1323  076A  3441               	retlw	65	;'A'
  1324  076B  3452               	retlw	82	;'R'
  1325  076C  3420               	retlw	32	;' '
  1326  076D  3420               	retlw	32	;' '
  1327  076E  3420               	retlw	32	;' '
  1328  076F  3420               	retlw	32	;' '
  1329  0770  3420               	retlw	32	;' '
  1330  0771  3420               	retlw	32	;' '
  1331  0772  3442               	retlw	66	;'B'
  1332  0773  3454               	retlw	84	;'T'
  1333  0774  3420               	retlw	32	;' '
  1334  0775  3420               	retlw	32	;' '
  1335  0776  3400               	retlw	0
  1336  0777                     STR_123:	
  1337  0777  3444               	retlw	68	;'D'
  1338  0778  3445               	retlw	69	;'E'
  1339  0779  3453               	retlw	83	;'S'
  1340  077A  3443               	retlw	67	;'C'
  1341  077B  344F               	retlw	79	;'O'
  1342  077C  344E               	retlw	78	;'N'
  1343  077D  3445               	retlw	69	;'E'
  1344  077E  3443               	retlw	67	;'C'
  1345  077F  3454               	retlw	84	;'T'
  1346  0780  3441               	retlw	65	;'A'
  1347  0781  3452               	retlw	82	;'R'
  1348  0782  3420               	retlw	32	;' '
  1349  0783  3442               	retlw	66	;'B'
  1350  0784  3454               	retlw	84	;'T'
  1351  0785  3420               	retlw	32	;' '
  1352  0786  3420               	retlw	32	;' '
  1353  0787  3400               	retlw	0
  1354  0788                     STR_115:	
  1355  0788  3420               	retlw	32	;' '
  1356  0789  3443               	retlw	67	;'C'
  1357  078A  344F               	retlw	79	;'O'
  1358  078B  344E               	retlw	78	;'N'
  1359  078C  3446               	retlw	70	;'F'
  1360  078D  3449               	retlw	73	;'I'
  1361  078E  3452               	retlw	82	;'R'
  1362  078F  344D               	retlw	77	;'M'
  1363  0790  3441               	retlw	65	;'A'
  1364  0791  3420               	retlw	32	;' '
  1365  0792  3454               	retlw	84	;'T'
  1366  0793  3452               	retlw	82	;'R'
  1367  0794  344F               	retlw	79	;'O'
  1368  0795  3443               	retlw	67	;'C'
  1369  0796  3441               	retlw	65	;'A'
  1370  0797  3420               	retlw	32	;' '
  1371  0798  3400               	retlw	0
  1372  0799                     STR_125:	
  1373  0799  3431               	retlw	49	;'1'
  1374  079A  3420               	retlw	32	;' '
  1375  079B  3432               	retlw	50	;'2'
  1376  079C  3420               	retlw	32	;' '
  1377  079D  3433               	retlw	51	;'3'
  1378  079E  3420               	retlw	32	;' '
  1379  079F  3434               	retlw	52	;'4'
  1380  07A0  3420               	retlw	32	;' '
  1381  07A1  3420               	retlw	32	;' '
  1382  07A2  3435               	retlw	53	;'5'
  1383  07A3  3420               	retlw	32	;' '
  1384  07A4  3436               	retlw	54	;'6'
  1385  07A5  3420               	retlw	32	;' '
  1386  07A6  3437               	retlw	55	;'7'
  1387  07A7  3420               	retlw	32	;' '
  1388  07A8  3438               	retlw	56	;'8'
  1389  07A9  3400               	retlw	0
  1390  07AA                     STR_121:	
  1391  07AA  3442               	retlw	66	;'B'
  1392  07AB  344C               	retlw	76	;'L'
  1393  07AC  3455               	retlw	85	;'U'
  1394  07AD  3445               	retlw	69	;'E'
  1395  07AE  3454               	retlw	84	;'T'
  1396  07AF  344F               	retlw	79	;'O'
  1397  07B0  344F               	retlw	79	;'O'
  1398  07B1  3454               	retlw	84	;'T'
  1399  07B2  3448               	retlw	72	;'H'
  1400  07B3  3420               	retlw	32	;' '
  1401  07B4  343C               	retlw	60	;'<'
  1402  07B5  342D               	retlw	45	;'-'
  1403  07B6  342D               	retlw	45	;'-'
  1404  07B7  342D               	retlw	45	;'-'
  1405  07B8  342D               	retlw	45	;'-'
  1406  07B9  343E               	retlw	62	;'>'
  1407  07BA  3400               	retlw	0
  1408  07BB                     STR_109:	
  1409  07BB  344D               	retlw	77	;'M'
  1410  07BC  344F               	retlw	79	;'O'
  1411  07BD  3444               	retlw	68	;'D'
  1412  07BE  3455               	retlw	85	;'U'
  1413  07BF  344C               	retlw	76	;'L'
  1414  07C0  344F               	retlw	79	;'O'
  1415  07C1  3420               	retlw	32	;' '
  1416  07C2  3420               	retlw	32	;' '
  1417  07C3  3444               	retlw	68	;'D'
  1418  07C4  3445               	retlw	69	;'E'
  1419  07C5  3453               	retlw	83	;'S'
  1420  07C6  3445               	retlw	69	;'E'
  1421  07C7  344A               	retlw	74	;'J'
  1422  07C8  3441               	retlw	65	;'A'
  1423  07C9  3444               	retlw	68	;'D'
  1424  07CA  344F               	retlw	79	;'O'
  1425  07CB  3400               	retlw	0
  1426  07CC                     STR_110:	
  1427  07CC  3445               	retlw	69	;'E'
  1428  07CD  3453               	retlw	83	;'S'
  1429  07CE  3454               	retlw	84	;'T'
  1430  07CF  3445               	retlw	69	;'E'
  1431  07D0  3449               	retlw	73	;'I'
  1432  07D1  3452               	retlw	82	;'R'
  1433  07D2  3441               	retlw	65	;'A'
  1434  07D3  3420               	retlw	32	;' '
  1435  07D4  3420               	retlw	32	;' '
  1436  07D5  3420               	retlw	32	;' '
  1437  07D6  3420               	retlw	32	;' '
  1438  07D7  3420               	retlw	32	;' '
  1439  07D8  3420               	retlw	32	;' '
  1440  07D9  3443               	retlw	67	;'C'
  1441  07DA  344C               	retlw	76	;'L'
  1442  07DB  3450               	retlw	80	;'P'
  1443  07DC  3400               	retlw	0
  1444  07DD                     STR_91:	
  1445  07DD  3441               	retlw	65	;'A'
  1446  07DE  3454               	retlw	84	;'T'
  1447  07DF  342B               	retlw	43	;'+'
  1448  07E0  3450               	retlw	80	;'P'
  1449  07E1  3453               	retlw	83	;'S'
  1450  07E2  3457               	retlw	87	;'W'
  1451  07E3  3444               	retlw	68	;'D'
  1452  07E4  343D               	retlw	61	;'='
  1453  07E5  3422               	retlw	34	;'"'
  1454  07E6  3430               	retlw	48	;'0'
  1455  07E7  3439               	retlw	57	;'9'
  1456  07E8  3431               	retlw	49	;'1'
  1457  07E9  3430               	retlw	48	;'0'
  1458  07EA  3422               	retlw	34	;'"'
  1459  07EB  340D               	retlw	13
  1460  07EC  340A               	retlw	10
  1461  07ED  3400               	retlw	0
  1462  07EE                     STR_68:	
  1463  07EE  3420               	retlw	32	;' '
  1464  07EF  3420               	retlw	32	;' '
  1465  07F0  3420               	retlw	32	;' '
  1466  07F1  3420               	retlw	32	;' '
  1467  07F2  3420               	retlw	32	;' '
  1468  07F3  3420               	retlw	32	;' '
  1469  07F4  3420               	retlw	32	;' '
  1470  07F5  3420               	retlw	32	;' '
  1471  07F6  3420               	retlw	32	;' '
  1472  07F7  3420               	retlw	32	;' '
  1473  07F8  3420               	retlw	32	;' '
  1474  07F9  3420               	retlw	32	;' '
  1475  07FA  3420               	retlw	32	;' '
  1476  07FB  3420               	retlw	32	;' '
  1477  07FC  3420               	retlw	32	;' '
  1478  07FD  3420               	retlw	32	;' '
  1479  07FE  3400               	retlw	0
  1480  07FF                     STR_77:	
  1481  07FF  3420               	retlw	32	;' '
  1482  0800  3420               	retlw	32	;' '
  1483  0801  3420               	retlw	32	;' '
  1484  0802  3420               	retlw	32	;' '
  1485  0803  3420               	retlw	32	;' '
  1486  0804  3420               	retlw	32	;' '
  1487  0805  3441               	retlw	65	;'A'
  1488  0806  3452               	retlw	82	;'R'
  1489  0807  3452               	retlw	82	;'R'
  1490  0808  3449               	retlw	73	;'I'
  1491  0809  3420               	retlw	32	;' '
  1492  080A  3420               	retlw	32	;' '
  1493  080B  3420               	retlw	32	;' '
  1494  080C  3420               	retlw	32	;' '
  1495  080D  3420               	retlw	32	;' '
  1496  080E  3420               	retlw	32	;' '
  1497  080F  3400               	retlw	0
  1498  0810                     STR_78:	
  1499  0810  3420               	retlw	32	;' '
  1500  0811  3420               	retlw	32	;' '
  1501  0812  3420               	retlw	32	;' '
  1502  0813  3420               	retlw	32	;' '
  1503  0814  3420               	retlw	32	;' '
  1504  0815  3445               	retlw	69	;'E'
  1505  0816  3447               	retlw	71	;'G'
  1506  0817  3455               	retlw	85	;'U'
  1507  0818  3441               	retlw	65	;'A'
  1508  0819  3441               	retlw	65	;'A'
  1509  081A  3441               	retlw	65	;'A'
  1510  081B  3420               	retlw	32	;' '
  1511  081C  3420               	retlw	32	;' '
  1512  081D  3420               	retlw	32	;' '
  1513  081E  3420               	retlw	32	;' '
  1514  081F  3420               	retlw	32	;' '
  1515  0820  3400               	retlw	0
  1516  0821                     STR_73:	
  1517  0821  3445               	retlw	69	;'E'
  1518  0822  3452               	retlw	82	;'R'
  1519  0823  3449               	retlw	73	;'I'
  1520  0824  3443               	retlw	67	;'C'
  1521  0825  3420               	retlw	32	;' '
  1522  0826  3453               	retlw	83	;'S'
  1523  0827  3441               	retlw	65	;'A'
  1524  0828  344E               	retlw	78	;'N'
  1525  0829  3454               	retlw	84	;'T'
  1526  082A  344F               	retlw	79	;'O'
  1527  082B  3453               	retlw	83	;'S'
  1528  082C  3420               	retlw	32	;' '
  1529  082D  3420               	retlw	32	;' '
  1530  082E  3420               	retlw	32	;' '
  1531  082F  3420               	retlw	32	;' '
  1532  0830  3420               	retlw	32	;' '
  1533  0831  3400               	retlw	0
  1534  0832                     STR_69:	
  1535  0832  3447               	retlw	71	;'G'
  1536  0833  3455               	retlw	85	;'U'
  1537  0834  3449               	retlw	73	;'I'
  1538  0835  342E               	retlw	46	;'.'
  1539  0836  3420               	retlw	32	;' '
  1540  0837  3452               	retlw	82	;'R'
  1541  0838  3449               	retlw	73	;'I'
  1542  0839  3442               	retlw	66	;'B'
  1543  083A  3445               	retlw	69	;'E'
  1544  083B  3449               	retlw	73	;'I'
  1545  083C  3452               	retlw	82	;'R'
  1546  083D  344F               	retlw	79	;'O'
  1547  083E  3420               	retlw	32	;' '
  1548  083F  3420               	retlw	32	;' '
  1549  0840  3420               	retlw	32	;' '
  1550  0841  3420               	retlw	32	;' '
  1551  0842  3400               	retlw	0
  1552  0843                     STR_71:	
  1553  0843  3447               	retlw	71	;'G'
  1554  0844  3441               	retlw	65	;'A'
  1555  0845  3442               	retlw	66	;'B'
  1556  0846  3452               	retlw	82	;'R'
  1557  0847  3449               	retlw	73	;'I'
  1558  0848  3445               	retlw	69	;'E'
  1559  0849  344C               	retlw	76	;'L'
  1560  084A  3420               	retlw	32	;' '
  1561  084B  3447               	retlw	71	;'G'
  1562  084C  3445               	retlw	69	;'E'
  1563  084D  344E               	retlw	78	;'N'
  1564  084E  3455               	retlw	85	;'U'
  1565  084F  3420               	retlw	32	;' '
  1566  0850  3420               	retlw	32	;' '
  1567  0851  3420               	retlw	32	;' '
  1568  0852  3420               	retlw	32	;' '
  1569  0853  3400               	retlw	0
  1570  0854                     STR_6:	
  1571  0854  3420               	retlw	32	;' '
  1572  0855  3420               	retlw	32	;' '
  1573  0856  3420               	retlw	32	;' '
  1574  0857  3420               	retlw	32	;' '
  1575  0858  3454               	retlw	84	;'T'
  1576  0859  3465               	retlw	101	;'e'
  1577  085A  3463               	retlw	99	;'c'
  1578  085B  346E               	retlw	110	;'n'
  1579  085C  346F               	retlw	111	;'o'
  1580  085D  346C               	retlw	108	;'l'
  1581  085E  346F               	retlw	111	;'o'
  1582  085F  3467               	retlw	103	;'g'
  1583  0860  3420               	retlw	32	;' '
  1584  0861  3420               	retlw	32	;' '
  1585  0862  3420               	retlw	32	;' '
  1586  0863  3420               	retlw	32	;' '
  1587  0864  3400               	retlw	0
  1588  0865                     STR_8:	
  1589  0865  3420               	retlw	32	;' '
  1590  0866  3420               	retlw	32	;' '
  1591  0867  3420               	retlw	32	;' '
  1592  0868  342D               	retlw	45	;'-'
  1593  0869  342D               	retlw	45	;'-'
  1594  086A  342D               	retlw	45	;'-'
  1595  086B  342D               	retlw	45	;'-'
  1596  086C  342D               	retlw	45	;'-'
  1597  086D  342D               	retlw	45	;'-'
  1598  086E  342D               	retlw	45	;'-'
  1599  086F  342D               	retlw	45	;'-'
  1600  0870  342D               	retlw	45	;'-'
  1601  0871  342D               	retlw	45	;'-'
  1602  0872  3420               	retlw	32	;' '
  1603  0873  3420               	retlw	32	;' '
  1604  0874  3420               	retlw	32	;' '
  1605  0875  3400               	retlw	0
  1606  0876                     STR_66:	
  1607  0876  3457               	retlw	87	;'W'
  1608  0877  3441               	retlw	65	;'A'
  1609  0878  344C               	retlw	76	;'L'
  1610  0879  344C               	retlw	76	;'L'
  1611  087A  3441               	retlw	65	;'A'
  1612  087B  3443               	retlw	67	;'C'
  1613  087C  3445               	retlw	69	;'E'
  1614  087D  3420               	retlw	32	;' '
  1615  087E  3450               	retlw	80	;'P'
  1616  087F  3449               	retlw	73	;'I'
  1617  0880  3452               	retlw	82	;'R'
  1618  0881  3445               	retlw	69	;'E'
  1619  0882  3453               	retlw	83	;'S'
  1620  0883  3420               	retlw	32	;' '
  1621  0884  3420               	retlw	32	;' '
  1622  0885  3420               	retlw	32	;' '
  1623  0886  3400               	retlw	0
  1624  0887                     STR_75:	
  1625  0887  344C               	retlw	76	;'L'
  1626  0888  3449               	retlw	73	;'I'
  1627  0889  344E               	retlw	78	;'N'
  1628  088A  3443               	retlw	67	;'C'
  1629  088B  344F               	retlw	79	;'O'
  1630  088C  344E               	retlw	78	;'N'
  1631  088D  3420               	retlw	32	;' '
  1632  088E  344E               	retlw	78	;'N'
  1633  088F  344F               	retlw	79	;'O'
  1634  0890  3456               	retlw	86	;'V'
  1635  0891  3441               	retlw	65	;'A'
  1636  0892  3449               	retlw	73	;'I'
  1637  0893  3453               	retlw	83	;'S'
  1638  0894  3420               	retlw	32	;' '
  1639  0895  3420               	retlw	32	;' '
  1640  0896  3420               	retlw	32	;' '
  1641  0897  3400               	retlw	0
  1642  0898                     STR_9:	
  1643  0898  3420               	retlw	32	;' '
  1644  0899  3420               	retlw	32	;' '
  1645  089A  3420               	retlw	32	;' '
  1646  089B  3450               	retlw	80	;'P'
  1647  089C  3461               	retlw	97	;'a'
  1648  089D  3472               	retlw	114	;'r'
  1649  089E  3465               	retlw	101	;'e'
  1650  089F  3461               	retlw	97	;'a'
  1651  08A0  346D               	retlw	109	;'m'
  1652  08A1  3465               	retlw	101	;'e'
  1653  08A2  346E               	retlw	110	;'n'
  1654  08A3  3474               	retlw	116	;'t'
  1655  08A4  346F               	retlw	111	;'o'
  1656  08A5  3420               	retlw	32	;' '
  1657  08A6  3420               	retlw	32	;' '
  1658  08A7  3420               	retlw	32	;' '
  1659  08A8  3400               	retlw	0
  1660  08A9                     STR_7:	
  1661  08A9  3420               	retlw	32	;' '
  1662  08AA  3420               	retlw	32	;' '
  1663  08AB  3420               	retlw	32	;' '
  1664  08AC  3443               	retlw	67	;'C'
  1665  08AD  346F               	retlw	111	;'o'
  1666  08AE  346E               	retlw	110	;'n'
  1667  08AF  3466               	retlw	102	;'f'
  1668  08B0  3469               	retlw	105	;'i'
  1669  08B1  3467               	retlw	103	;'g'
  1670  08B2  3475               	retlw	117	;'u'
  1671  08B3  3472               	retlw	114	;'r'
  1672  08B4  3461               	retlw	97	;'a'
  1673  08B5  3472               	retlw	114	;'r'
  1674  08B6  3420               	retlw	32	;' '
  1675  08B7  3420               	retlw	32	;' '
  1676  08B8  3420               	retlw	32	;' '
  1677  08B9  3400               	retlw	0
  1678  08BA                     STR_67:	
  1679  08BA  344D               	retlw	77	;'M'
  1680  08BB  3441               	retlw	65	;'A'
  1681  08BC  3454               	retlw	84	;'T'
  1682  08BD  3445               	retlw	69	;'E'
  1683  08BE  3455               	retlw	85	;'U'
  1684  08BF  3453               	retlw	83	;'S'
  1685  08C0  3420               	retlw	32	;' '
  1686  08C1  3450               	retlw	80	;'P'
  1687  08C2  3449               	retlw	73	;'I'
  1688  08C3  344E               	retlw	78	;'N'
  1689  08C4  3448               	retlw	72	;'H'
  1690  08C5  3445               	retlw	69	;'E'
  1691  08C6  3449               	retlw	73	;'I'
  1692  08C7  3452               	retlw	82	;'R'
  1693  08C8  344F               	retlw	79	;'O'
  1694  08C9  3420               	retlw	32	;' '
  1695  08CA  3400               	retlw	0
  1696  08CB                     STR_11:	
  1697  08CB  3420               	retlw	32	;' '
  1698  08CC  3445               	retlw	69	;'E'
  1699  08CD  346E               	retlw	110	;'n'
  1700  08CE  3476               	retlw	118	;'v'
  1701  08CF  3469               	retlw	105	;'i'
  1702  08D0  346F               	retlw	111	;'o'
  1703  08D1  3420               	retlw	32	;' '
  1704  08D2  3464               	retlw	100	;'d'
  1705  08D3  3465               	retlw	101	;'e'
  1706  08D4  3420               	retlw	32	;' '
  1707  08D5  3444               	retlw	68	;'D'
  1708  08D6  3461               	retlw	97	;'a'
  1709  08D7  3464               	retlw	100	;'d'
  1710  08D8  346F               	retlw	111	;'o'
  1711  08D9  3473               	retlw	115	;'s'
  1712  08DA  3420               	retlw	32	;' '
  1713  08DB  3400               	retlw	0
  1714  08DC                     STR_80:	
  1715  08DC  3421               	retlw	33	;'!'
  1716  08DD  342A               	retlw	42	;'*'
  1717  08DE  342D               	retlw	45	;'-'
  1718  08DF  342A               	retlw	42	;'*'
  1719  08E0  3420               	retlw	32	;' '
  1720  08E1  3445               	retlw	69	;'E'
  1721  08E2  3447               	retlw	71	;'G'
  1722  08E3  3455               	retlw	85	;'U'
  1723  08E4  3441               	retlw	65	;'A'
  1724  08E5  3441               	retlw	65	;'A'
  1725  08E6  3441               	retlw	65	;'A'
  1726  08E7  3420               	retlw	32	;' '
  1727  08E8  342A               	retlw	42	;'*'
  1728  08E9  342D               	retlw	45	;'-'
  1729  08EA  342A               	retlw	42	;'*'
  1730  08EB  3421               	retlw	33	;'!'
  1731  08EC  3400               	retlw	0
  1732  08ED                     STR_82:	
  1733  08ED  3431               	retlw	49	;'1'
  1734  08EE  3433               	retlw	51	;'3'
  1735  08EF  3420               	retlw	32	;' '
  1736  08F0  3420               	retlw	32	;' '
  1737  08F1  3420               	retlw	32	;' '
  1738  08F2  3445               	retlw	69	;'E'
  1739  08F3  3447               	retlw	71	;'G'
  1740  08F4  3455               	retlw	85	;'U'
  1741  08F5  3441               	retlw	65	;'A'
  1742  08F6  3441               	retlw	65	;'A'
  1743  08F7  3441               	retlw	65	;'A'
  1744  08F8  3420               	retlw	32	;' '
  1745  08F9  3420               	retlw	32	;' '
  1746  08FA  3420               	retlw	32	;' '
  1747  08FB  3435               	retlw	53	;'5'
  1748  08FC  3430               	retlw	48	;'0'
  1749  08FD  3400               	retlw	0
  1750  08FE                     STR_81:	
  1751  08FE  3435               	retlw	53	;'5'
  1752  08FF  3430               	retlw	48	;'0'
  1753  0900  3420               	retlw	32	;' '
  1754  0901  3420               	retlw	32	;' '
  1755  0902  3420               	retlw	32	;' '
  1756  0903  3420               	retlw	32	;' '
  1757  0904  3441               	retlw	65	;'A'
  1758  0905  3452               	retlw	82	;'R'
  1759  0906  3452               	retlw	82	;'R'
  1760  0907  3449               	retlw	73	;'I'
  1761  0908  3420               	retlw	32	;' '
  1762  0909  3420               	retlw	32	;' '
  1763  090A  3420               	retlw	32	;' '
  1764  090B  3420               	retlw	32	;' '
  1765  090C  3431               	retlw	49	;'1'
  1766  090D  3433               	retlw	51	;'3'
  1767  090E  3400               	retlw	0
  1768  090F                     STR_83:	
  1769  090F  343A               	retlw	58	;':'
  1770  0910  3433               	retlw	51	;'3'
  1771  0911  3420               	retlw	32	;' '
  1772  0912  342A               	retlw	42	;'*'
  1773  0913  342D               	retlw	45	;'-'
  1774  0914  342A               	retlw	42	;'*'
  1775  0915  3441               	retlw	65	;'A'
  1776  0916  3452               	retlw	82	;'R'
  1777  0917  3452               	retlw	82	;'R'
  1778  0918  3449               	retlw	73	;'I'
  1779  0919  342A               	retlw	42	;'*'
  1780  091A  342D               	retlw	45	;'-'
  1781  091B  342A               	retlw	42	;'*'
  1782  091C  3420               	retlw	32	;' '
  1783  091D  3458               	retlw	88	;'X'
  1784  091E  3444               	retlw	68	;'D'
  1785  091F  3400               	retlw	0
  1786  0920                     STR_79:	
  1787  0920  3458               	retlw	88	;'X'
  1788  0921  3444               	retlw	68	;'D'
  1789  0922  3420               	retlw	32	;' '
  1790  0923  342A               	retlw	42	;'*'
  1791  0924  342D               	retlw	45	;'-'
  1792  0925  342A               	retlw	42	;'*'
  1793  0926  3441               	retlw	65	;'A'
  1794  0927  3452               	retlw	82	;'R'
  1795  0928  3452               	retlw	82	;'R'
  1796  0929  3449               	retlw	73	;'I'
  1797  092A  342A               	retlw	42	;'*'
  1798  092B  342D               	retlw	45	;'-'
  1799  092C  342A               	retlw	42	;'*'
  1800  092D  3420               	retlw	32	;' '
  1801  092E  3458               	retlw	88	;'X'
  1802  092F  3444               	retlw	68	;'D'
  1803  0930  3400               	retlw	0
  1804  0931                     STR_1:	
  1805  0931  345F               	retlw	95	;'_'
  1806  0932  345F               	retlw	95	;'_'
  1807  0933  3420               	retlw	32	;' '
  1808  0934  3420               	retlw	32	;' '
  1809  0935  3420               	retlw	32	;' '
  1810  0936  3420               	retlw	32	;' '
  1811  0937  3420               	retlw	32	;' '
  1812  0938  3420               	retlw	32	;' '
  1813  0939  3420               	retlw	32	;' '
  1814  093A  3420               	retlw	32	;' '
  1815  093B  3420               	retlw	32	;' '
  1816  093C  3420               	retlw	32	;' '
  1817  093D  3420               	retlw	32	;' '
  1818  093E  3420               	retlw	32	;' '
  1819  093F  345F               	retlw	95	;'_'
  1820  0940  345F               	retlw	95	;'_'
  1821  0941  3400               	retlw	0
  1822  0942                     STR_88:	
  1823  0942  3441               	retlw	65	;'A'
  1824  0943  3454               	retlw	84	;'T'
  1825  0944  342B               	retlw	43	;'+'
  1826  0945  3449               	retlw	73	;'I'
  1827  0946  344E               	retlw	78	;'N'
  1828  0947  3451               	retlw	81	;'Q'
  1829  0948  344D               	retlw	77	;'M'
  1830  0949  343D               	retlw	61	;'='
  1831  094A  3430               	retlw	48	;'0'
  1832  094B  342C               	retlw	44	;','
  1833  094C  3435               	retlw	53	;'5'
  1834  094D  342C               	retlw	44	;','
  1835  094E  3435               	retlw	53	;'5'
  1836  094F  340D               	retlw	13
  1837  0950  340A               	retlw	10
  1838  0951  3400               	retlw	0
  1839  0952                     STR_120:	
  1840  0952  3446               	retlw	70	;'F'
  1841  0953  3472               	retlw	114	;'r'
  1842  0954  3461               	retlw	97	;'a'
  1843  0955  346D               	retlw	109	;'m'
  1844  0956  3469               	retlw	105	;'i'
  1845  0957  346E               	retlw	110	;'n'
  1846  0958  3467               	retlw	103	;'g'
  1847  0959  3420               	retlw	32	;' '
  1848  095A  3445               	retlw	69	;'E'
  1849  095B  3472               	retlw	114	;'r'
  1850  095C  3472               	retlw	114	;'r'
  1851  095D  346F               	retlw	111	;'o'
  1852  095E  3472               	retlw	114	;'r'
  1853  095F  3400               	retlw	0
  1854  0960                     STR_119:	
  1855  0960  344F               	retlw	79	;'O'
  1856  0961  3476               	retlw	118	;'v'
  1857  0962  3465               	retlw	101	;'e'
  1858  0963  3472               	retlw	114	;'r'
  1859  0964  3472               	retlw	114	;'r'
  1860  0965  3475               	retlw	117	;'u'
  1861  0966  346E               	retlw	110	;'n'
  1862  0967  3420               	retlw	32	;' '
  1863  0968  3445               	retlw	69	;'E'
  1864  0969  3472               	retlw	114	;'r'
  1865  096A  3472               	retlw	114	;'r'
  1866  096B  346F               	retlw	111	;'o'
  1867  096C  3472               	retlw	114	;'r'
  1868  096D  3400               	retlw	0
  1869  096E                     STR_112:	
  1870  096E  3420               	retlw	32	;' '
  1871  096F  3450               	retlw	80	;'P'
  1872  0970  342F               	retlw	47	;'/'
  1873  0971  3420               	retlw	32	;' '
  1874  0972  3445               	retlw	69	;'E'
  1875  0973  3473               	retlw	115	;'s'
  1876  0974  3474               	retlw	116	;'t'
  1877  0975  3465               	retlw	101	;'e'
  1878  0976  3469               	retlw	105	;'i'
  1879  0977  3472               	retlw	114	;'r'
  1880  0978  3461               	retlw	97	;'a'
  1881  0979  3420               	retlw	32	;' '
  1882  097A  3400               	retlw	0
  1883  097B                     STR_87:	
  1884  097B  3441               	retlw	65	;'A'
  1885  097C  3454               	retlw	84	;'T'
  1886  097D  342B               	retlw	43	;'+'
  1887  097E  3443               	retlw	67	;'C'
  1888  097F  344D               	retlw	77	;'M'
  1889  0980  344F               	retlw	79	;'O'
  1890  0981  3444               	retlw	68	;'D'
  1891  0982  3445               	retlw	69	;'E'
  1892  0983  343D               	retlw	61	;'='
  1893  0984  3430               	retlw	48	;'0'
  1894  0985  340D               	retlw	13
  1895  0986  340A               	retlw	10
  1896  0987  3400               	retlw	0
  1897  0988                     STR_94:	
  1898  0988  3441               	retlw	65	;'A'
  1899  0989  3454               	retlw	84	;'T'
  1900  098A  342B               	retlw	43	;'+'
  1901  098B  3452               	retlw	82	;'R'
  1902  098C  344F               	retlw	79	;'O'
  1903  098D  344C               	retlw	76	;'L'
  1904  098E  3445               	retlw	69	;'E'
  1905  098F  343D               	retlw	61	;'='
  1906  0990  3430               	retlw	48	;'0'
  1907  0991  340D               	retlw	13
  1908  0992  340A               	retlw	10
  1909  0993  3400               	retlw	0
  1910  0994                     STR_86:	
  1911  0994  3441               	retlw	65	;'A'
  1912  0995  3454               	retlw	84	;'T'
  1913  0996  342B               	retlw	43	;'+'
  1914  0997  3452               	retlw	82	;'R'
  1915  0998  344F               	retlw	79	;'O'
  1916  0999  344C               	retlw	76	;'L'
  1917  099A  3445               	retlw	69	;'E'
  1918  099B  343D               	retlw	61	;'='
  1919  099C  3431               	retlw	49	;'1'
  1920  099D  340D               	retlw	13
  1921  099E  340A               	retlw	10
  1922  099F  3400               	retlw	0
  1923  09A0                     STR_111:	
  1924  09A0  3420               	retlw	32	;' '
  1925  09A1  3445               	retlw	69	;'E'
  1926  09A2  346E               	retlw	110	;'n'
  1927  09A3  3476               	retlw	118	;'v'
  1928  09A4  3469               	retlw	105	;'i'
  1929  09A5  3461               	retlw	97	;'a'
  1930  09A6  346E               	retlw	110	;'n'
  1931  09A7  3464               	retlw	100	;'d'
  1932  09A8  346F               	retlw	111	;'o'
  1933  09A9  3420               	retlw	32	;' '
  1934  09AA  3400               	retlw	0
  1935  09AB                     STR_93:	
  1936  09AB  3441               	retlw	65	;'A'
  1937  09AC  3454               	retlw	84	;'T'
  1938  09AD  342B               	retlw	43	;'+'
  1939  09AE  3452               	retlw	82	;'R'
  1940  09AF  344D               	retlw	77	;'M'
  1941  09B0  3441               	retlw	65	;'A'
  1942  09B1  3441               	retlw	65	;'A'
  1943  09B2  3444               	retlw	68	;'D'
  1944  09B3  340D               	retlw	13
  1945  09B4  340A               	retlw	10
  1946  09B5  3400               	retlw	0
  1947  09B6                     STR_89:	
  1948  09B6  3441               	retlw	65	;'A'
  1949  09B7  3454               	retlw	84	;'T'
  1950  09B8  342B               	retlw	43	;'+'
  1951  09B9  3449               	retlw	73	;'I'
  1952  09BA  344E               	retlw	78	;'N'
  1953  09BB  3449               	retlw	73	;'I'
  1954  09BC  3454               	retlw	84	;'T'
  1955  09BD  340D               	retlw	13
  1956  09BE  340A               	retlw	10
  1957  09BF  3400               	retlw	0
  1958  09C0                     STR_114:	
  1959  09C0  3420               	retlw	32	;' '
  1960  09C1  3450               	retlw	80	;'P'
  1961  09C2  342F               	retlw	47	;'/'
  1962  09C3  3420               	retlw	32	;' '
  1963  09C4  3443               	retlw	67	;'C'
  1964  09C5  344C               	retlw	76	;'L'
  1965  09C6  3450               	retlw	80	;'P'
  1966  09C7  3420               	retlw	32	;' '
  1967  09C8  3400               	retlw	0
  1968  09C9                     STR_90:	
  1969  09C9  3441               	retlw	65	;'A'
  1970  09CA  3454               	retlw	84	;'T'
  1971  09CB  342B               	retlw	43	;'+'
  1972  09CC  3449               	retlw	73	;'I'
  1973  09CD  344E               	retlw	78	;'N'
  1974  09CE  3451               	retlw	81	;'Q'
  1975  09CF  340D               	retlw	13
  1976  09D0  340A               	retlw	10
  1977  09D1  3400               	retlw	0
  1978  09D2                     STR_47:	
  1979  09D2  3445               	retlw	69	;'E'
  1980  09D3  3453               	retlw	83	;'S'
  1981  09D4  3454               	retlw	84	;'T'
  1982  09D5  3445               	retlw	69	;'E'
  1983  09D6  3449               	retlw	73	;'I'
  1984  09D7  3452               	retlw	82	;'R'
  1985  09D8  3441               	retlw	65	;'A'
  1986  09D9  3400               	retlw	0
  1987  09DA                     STR_51:	
  1988  09DA  3450               	retlw	80	;'P'
  1989  09DB  3441               	retlw	65	;'A'
  1990  09DC  3452               	retlw	82	;'R'
  1991  09DD  3445               	retlw	69	;'E'
  1992  09DE  3441               	retlw	65	;'A'
  1993  09DF  3452               	retlw	82	;'R'
  1994  09E0  3400               	retlw	0
  1995  09E1                     STR_57:	
  1996  09E1  342E               	retlw	46	;'.'
  1997  09E2  3420               	retlw	32	;' '
  1998  09E3  3420               	retlw	32	;' '
  1999  09E4  3400               	retlw	0
  2000  09E5                     STR_58:	
  2001  09E5  3420               	retlw	32	;' '
  2002  09E6  342E               	retlw	46	;'.'
  2003  09E7  3420               	retlw	32	;' '
  2004  09E8  3400               	retlw	0
  2005  09E9                     STR_64:	
  2006  09E9  342E               	retlw	46	;'.'
  2007  09EA  342E               	retlw	46	;'.'
  2008  09EB  3420               	retlw	32	;' '
  2009  09EC  3400               	retlw	0
  2010  09ED                     STR_59:	
  2011  09ED  3420               	retlw	32	;' '
  2012  09EE  3420               	retlw	32	;' '
  2013  09EF  342E               	retlw	46	;'.'
  2014  09F0  3400               	retlw	0
  2015  09F1                     STR_65:	
  2016  09F1  342E               	retlw	46	;'.'
  2017  09F2  342E               	retlw	46	;'.'
  2018  09F3  342E               	retlw	46	;'.'
  2019  09F4  3400               	retlw	0
  2020  09F5                     STR_16:	
  2021  09F5  3431               	retlw	49	;'1'
  2022  09F6  3400               	retlw	0
  2023  09F7                     STR_14:	
  2024  09F7  3432               	retlw	50	;'2'
  2025  09F8  3400               	retlw	0
  2026  09F9                     STR_22:	
  2027  09F9  3434               	retlw	52	;'4'
  2028  09FA  3400               	retlw	0
  2029  09FB                     STR_26:	
  2030  09FB  3435               	retlw	53	;'5'
  2031  09FC  3400               	retlw	0
  2032  09FD                     STR_30:	
  2033  09FD  3436               	retlw	54	;'6'
  2034  09FE  3400               	retlw	0
  2035  09FF                     STR_34:	
  2036  09FF  3437               	retlw	55	;'7'
  2037  0A00  3400               	retlw	0
  2038  0A01                     STR_2:	
  2039  0A01  3442               	retlw	66	;'B'
  2040  0A02  3400               	retlw	0
  2041  0A03                     STR_5:	
  2042  0A03  3465               	retlw	101	;'e'
  2043  0A04  3400               	retlw	0
  2044  0A05                     STR_3:	
  2045  0A05  346C               	retlw	108	;'l'
  2046  0A06  3400               	retlw	0
  2047  0A07                     STR_4:	
  2048  0A07  3475               	retlw	117	;'u'
  2049  0A08  3400               	retlw	0
  2050  07ED                     
  2051                           ; #config settings
  2052  0000                     
  2053                           	psect	cinit
  2054  0013                     start_initialization:	
  2055  0013                     __initialization:	
  2056                           
  2057                           ; Clear objects allocated to COMMON
  2058  0013  01FC               	clrf	__pbssCOMMON& (0+127)
  2059                           
  2060                           ; Clear objects allocated to BANK0
  2061  0014  1383               	bcf	3,7	;select IRP bank0
  2062  0015  3048               	movlw	low __pbssBANK0
  2063  0016  0084               	movwf	4
  2064  0017  3055               	movlw	low (__pbssBANK0+13)
  2065  0018  160A  118A  201D  120A  118A  	fcall	clear_ram0
  2066                           
  2067                           ; Clear objects allocated to BANK1
  2068  001D  30A0               	movlw	low __pbssBANK1
  2069  001E  0084               	movwf	4
  2070  001F  30BE               	movlw	low (__pbssBANK1+30)
  2071  0020  160A  118A  201D   	fcall	clear_ram0
  2072  0023                     end_of_initialization:	
  2073                           ;End of C runtime variable initialization code
  2074                           
  2075  0023                     __end_of__initialization:	
  2076  0023  0183               	clrf	3
  2077  0024  120A  118A  2827   	ljmp	_main	;jump to C main() function
  2078                           
  2079                           	psect	bssCOMMON
  2080  007C                     __pbssCOMMON:	
  2081  007C                     _fifoHead:	
  2082  007C                     	ds	1
  2083                           
  2084                           	psect	bssBANK0
  2085  0048                     __pbssBANK0:	
  2086  0048                     _t0cont:	
  2087  0048                     	ds	2
  2088  004A                     _t0final:	
  2089  004A                     	ds	2
  2090  004C                     _fifoTail:	
  2091  004C                     	ds	1
  2092  004D                     _estadoAnteriorB3:	
  2093  004D                     	ds	1
  2094  004E                     _estadoAnteriorB2:	
  2095  004E                     	ds	1
  2096  004F                     _estadoAnteriorB1:	
  2097  004F                     	ds	1
  2098  0050                     _serial:	
  2099  0050                     	ds	1
  2100  0051                     _comp:	
  2101  0051                     	ds	1
  2102  0052                     _tdez:	
  2103  0052                     	ds	1
  2104  0053                     _tuni:	
  2105  0053                     	ds	1
  2106  0054                     _rhex:	
  2107  0054                     	ds	1
  2108                           
  2109                           	psect	bssBANK1
  2110  00A0                     __pbssBANK1:	
  2111  00A0                     _fifo:	
  2112  00A0                     	ds	30
  2113                           
  2114                           	psect	clrtext
  2115  101D                     clear_ram0:	
  2116                           ;	Called with FSR containing the base address, and
  2117                           ;	W with the last address+1
  2118                           
  2119  101D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2120  101E                     clrloop0:	
  2121  101E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2122  101F  0A84               	incf	4,f	;increment pointer
  2123  1020  0604               	xorwf	4,w	;XOR with final address
  2124  1021  1903               	btfsc	3,2	;have we reached the end yet?
  2125  1022  3400               	retlw	0	;all done for this memory range, return
  2126  1023  0604               	xorwf	4,w	;XOR again to restore value
  2127  1024  281E               	goto	clrloop0	;do the next byte
  2128                           
  2129                           	psect	cstackCOMMON
  2130  0070                     __pcstackCOMMON:	
  2131  0070                     ?_serialOut:	
  2132  0070                     ?_writeEUSART:	
  2133                           ; 1 bytes @ 0x0
  2134                           
  2135  0070                     ?_cmdLCD:	
  2136                           ; 1 bytes @ 0x0
  2137                           
  2138  0070                     ?_bordaSubidaB2:	
  2139                           ; 1 bytes @ 0x0
  2140                           
  2141  0070                     ?_bordaSubidaB3:	
  2142                           ; 1 bytes @ 0x0
  2143                           
  2144  0070                     ?_interrupt_EUSART_RX:	
  2145                           ; 1 bytes @ 0x0
  2146                           
  2147  0070                     ?_intt0_1ms:	
  2148                           ; 1 bytes @ 0x0
  2149                           
  2150  0070                     ??_intt0_1ms:	
  2151                           ; 1 bytes @ 0x0
  2152                           
  2153  0070                     ?_initTimer0:	
  2154                           ; 1 bytes @ 0x0
  2155                           
  2156  0070                     ?_resetErrorRxEUSART:	
  2157                           ; 1 bytes @ 0x0
  2158                           
  2159  0070                     ?_statusFIFO:	
  2160                           ; 1 bytes @ 0x0
  2161                           
  2162  0070                     ?_getFIFO:	
  2163                           ; 1 bytes @ 0x0
  2164                           
  2165  0070                     ?_errorRxEUSART:	
  2166                           ; 1 bytes @ 0x0
  2167                           
  2168  0070                     ?_putFIFO:	
  2169                           ; 1 bytes @ 0x0
  2170                           
  2171  0070                     ?_initSerial:	
  2172                           ; 1 bytes @ 0x0
  2173                           
  2174  0070                     ?_serialIn:	
  2175                           ; 1 bytes @ 0x0
  2176                           
  2177  0070                     ?_hexToAscii:	
  2178                           ; 1 bytes @ 0x0
  2179                           
  2180  0070                     ?_transmite:	
  2181                           ; 1 bytes @ 0x0
  2182                           
  2183  0070                     ?_logo:	
  2184                           ; 1 bytes @ 0x0
  2185                           
  2186  0070                     ?_textConfig:	
  2187                           ; 1 bytes @ 0x0
  2188                           
  2189  0070                     ?_textCMpar:	
  2190                           ; 1 bytes @ 0x0
  2191                           
  2192  0070                     ?_textCMdat:	
  2193                           ; 1 bytes @ 0x0
  2194                           
  2195  0070                     ?_textSelection1:	
  2196                           ; 1 bytes @ 0x0
  2197                           
  2198  0070                     ?_textSelection2:	
  2199                           ; 1 bytes @ 0x0
  2200                           
  2201  0070                     ?_textSelection3:	
  2202                           ; 1 bytes @ 0x0
  2203                           
  2204  0070                     ?_textSelection4:	
  2205                           ; 1 bytes @ 0x0
  2206                           
  2207  0070                     ?_textSelection5:	
  2208                           ; 1 bytes @ 0x0
  2209                           
  2210  0070                     ?_textSelection6:	
  2211                           ; 1 bytes @ 0x0
  2212                           
  2213  0070                     ?_textSelection7:	
  2214                           ; 1 bytes @ 0x0
  2215                           
  2216  0070                     ?_textSelection8:	
  2217                           ; 1 bytes @ 0x0
  2218                           
  2219  0070                     ?_textSelectionEST:	
  2220                           ; 1 bytes @ 0x0
  2221                           
  2222  0070                     ?_textSelectionCLP:	
  2223                           ; 1 bytes @ 0x0
  2224                           
  2225  0070                     ?_textLoading:	
  2226                           ; 1 bytes @ 0x0
  2227                           
  2228  0070                     ?_easterEgg:	
  2229                           ; 1 bytes @ 0x0
  2230                           
  2231  0070                     ?_initBT:	
  2232                           ; 1 bytes @ 0x0
  2233                           
  2234  0070                     ?_B1:	
  2235                           ; 1 bytes @ 0x0
  2236                           
  2237  0070                     ?_B2:	
  2238                           ; 1 bytes @ 0x0
  2239                           
  2240  0070                     ?_B3:	
  2241                           ; 1 bytes @ 0x0
  2242                           
  2243  0070                     ?_bordaSubidaB1:	
  2244                           ; 1 bytes @ 0x0
  2245                           
  2246  0070                     ?_master1:	
  2247                           ; 1 bytes @ 0x0
  2248                           
  2249  0070                     ?_slave1:	
  2250                           ; 1 bytes @ 0x0
  2251                           
  2252  0070                     ?_putLCD:	
  2253                           ; 1 bytes @ 0x0
  2254                           
  2255  0070                     ?_initLCD:	
  2256                           ; 1 bytes @ 0x0
  2257                           
  2258  0070                     ?_geral:	
  2259                           ; 1 bytes @ 0x0
  2260                           
  2261  0070                     ?_main:	
  2262                           ; 1 bytes @ 0x0
  2263                           
  2264  0070                     ?i1___awmod:	
  2265                           ; 1 bytes @ 0x0
  2266                           
  2267  0070                     i1___awmod@divisor:	
  2268                           ; 2 bytes @ 0x0
  2269                           
  2270                           
  2271                           ; 2 bytes @ 0x0
  2272  0070                     	ds	2
  2273  0072                     i1___awmod@dividend:	
  2274                           
  2275                           ; 2 bytes @ 0x2
  2276  0072                     	ds	2
  2277  0074                     ??i1___awmod:	
  2278                           
  2279                           ; 1 bytes @ 0x4
  2280  0074                     	ds	1
  2281  0075                     i1___awmod@counter:	
  2282                           
  2283                           ; 1 bytes @ 0x5
  2284  0075                     	ds	1
  2285  0076                     i1___awmod@sign:	
  2286                           
  2287                           ; 1 bytes @ 0x6
  2288  0076                     	ds	1
  2289  0077                     ??_putFIFO:	
  2290                           
  2291                           ; 1 bytes @ 0x7
  2292  0077                     	ds	4
  2293  007B                     putFIFO@c:	
  2294                           
  2295                           ; 1 bytes @ 0xB
  2296  007B                     	ds	1
  2297  007C                     ??_interrupt_EUSART_RX:	
  2298                           
  2299                           	psect	cstackBANK0
  2300  0020                     __pcstackBANK0:	
  2301                           ; 1 bytes @ 0xC
  2302                           
  2303  0020                     ??_geral:	
  2304                           
  2305                           ; 1 bytes @ 0x0
  2306  0020                     	ds	3
  2307  0023                     ??_serialOut:	
  2308  0023                     ??_writeEUSART:	
  2309                           ; 1 bytes @ 0x3
  2310                           
  2311  0023                     ??_cmdLCD:	
  2312                           ; 1 bytes @ 0x3
  2313                           
  2314  0023                     ??_bordaSubidaB3:	
  2315                           ; 1 bytes @ 0x3
  2316                           
  2317  0023                     ??_resetErrorRxEUSART:	
  2318                           ; 1 bytes @ 0x3
  2319                           
  2320  0023                     ??_errorRxEUSART:	
  2321                           ; 1 bytes @ 0x3
  2322                           
  2323  0023                     ??_serialIn:	
  2324                           ; 1 bytes @ 0x3
  2325                           
  2326  0023                     ??_hexToAscii:	
  2327                           ; 1 bytes @ 0x3
  2328                           
  2329  0023                     ?_asciiToHex:	
  2330                           ; 1 bytes @ 0x3
  2331                           
  2332  0023                     ??_initBT:	
  2333                           ; 1 bytes @ 0x3
  2334                           
  2335  0023                     ??_B1:	
  2336                           ; 1 bytes @ 0x3
  2337                           
  2338  0023                     ??_B2:	
  2339                           ; 1 bytes @ 0x3
  2340                           
  2341  0023                     ??_B3:	
  2342                           ; 1 bytes @ 0x3
  2343                           
  2344  0023                     ??_bordaSubidaB1:	
  2345                           ; 1 bytes @ 0x3
  2346                           
  2347  0023                     ??_putLCD:	
  2348                           ; 1 bytes @ 0x3
  2349                           
  2350  0023                     ?_setT0limite:	
  2351                           ; 1 bytes @ 0x3
  2352                           
  2353  0023                     ?_statusT0:	
  2354                           ; 1 bytes @ 0x3
  2355                           
  2356  0023                     ?_statusT0limite:	
  2357                           ; 2 bytes @ 0x3
  2358                           
  2359  0023                     ?___awmod:	
  2360                           ; 2 bytes @ 0x3
  2361                           
  2362  0023                     ?___lldiv:	
  2363                           ; 2 bytes @ 0x3
  2364                           
  2365  0023                     asciiToHex@a2:	
  2366                           ; 4 bytes @ 0x3
  2367                           
  2368  0023                     writeEUSART@d:	
  2369                           ; 1 bytes @ 0x3
  2370                           
  2371  0023                     setT0limite@c:	
  2372                           ; 1 bytes @ 0x3
  2373                           
  2374  0023                     ___awmod@divisor:	
  2375                           ; 2 bytes @ 0x3
  2376                           
  2377  0023                     ___lldiv@divisor:	
  2378                           ; 2 bytes @ 0x3
  2379                           
  2380                           
  2381                           ; 4 bytes @ 0x3
  2382  0023                     	ds	1
  2383  0024                     ??_bordaSubidaB2:	
  2384  0024                     ?_writeString:	
  2385                           ; 1 bytes @ 0x4
  2386                           
  2387  0024                     ??_asciiToHex:	
  2388                           ; 1 bytes @ 0x4
  2389                           
  2390  0024                     serialOut@d:	
  2391                           ; 1 bytes @ 0x4
  2392                           
  2393  0024                     serialIn@dado:	
  2394                           ; 1 bytes @ 0x4
  2395                           
  2396  0024                     hexToAscii@dado:	
  2397                           ; 1 bytes @ 0x4
  2398                           
  2399  0024                     bordaSubidaB1@resp:	
  2400                           ; 1 bytes @ 0x4
  2401                           
  2402  0024                     bordaSubidaB3@resp2:	
  2403                           ; 1 bytes @ 0x4
  2404                           
  2405  0024                     putLCD@c:	
  2406                           ; 1 bytes @ 0x4
  2407                           
  2408  0024                     writeString@str:	
  2409                           ; 1 bytes @ 0x4
  2410                           
  2411                           
  2412                           ; 2 bytes @ 0x4
  2413  0024                     	ds	1
  2414  0025                     ??_statusT0:	
  2415  0025                     ??_statusT0limite:	
  2416                           ; 1 bytes @ 0x5
  2417                           
  2418  0025                     ??_initTimer0:	
  2419                           ; 1 bytes @ 0x5
  2420                           
  2421  0025                     ??_setT0limite:	
  2422                           ; 1 bytes @ 0x5
  2423                           
  2424  0025                     ?___awdiv:	
  2425                           ; 1 bytes @ 0x5
  2426                           
  2427  0025                     serialOut@i:	
  2428                           ; 2 bytes @ 0x5
  2429                           
  2430  0025                     serialIn@i:	
  2431                           ; 1 bytes @ 0x5
  2432                           
  2433  0025                     hexToAscii@uni:	
  2434                           ; 1 bytes @ 0x5
  2435                           
  2436  0025                     asciiToHex@a1:	
  2437                           ; 1 bytes @ 0x5
  2438                           
  2439  0025                     bordaSubidaB1@estadoAtualB1:	
  2440                           ; 1 bytes @ 0x5
  2441                           
  2442  0025                     bordaSubidaB2@resp1:	
  2443                           ; 1 bytes @ 0x5
  2444                           
  2445  0025                     bordaSubidaB3@estadoAtualB3:	
  2446                           ; 1 bytes @ 0x5
  2447                           
  2448  0025                     cmdLCD@cmd:	
  2449                           ; 1 bytes @ 0x5
  2450                           
  2451  0025                     putLCD@nibble:	
  2452                           ; 1 bytes @ 0x5
  2453                           
  2454  0025                     ___awdiv@divisor:	
  2455                           ; 1 bytes @ 0x5
  2456                           
  2457  0025                     ___awmod@dividend:	
  2458                           ; 2 bytes @ 0x5
  2459                           
  2460                           
  2461                           ; 2 bytes @ 0x5
  2462  0025                     	ds	1
  2463  0026                     ??_writeString:	
  2464  0026                     ??_initSerial:	
  2465                           ; 1 bytes @ 0x6
  2466                           
  2467  0026                     hexToAscii@dez:	
  2468                           ; 1 bytes @ 0x6
  2469                           
  2470  0026                     asciiToHex@uni:	
  2471                           ; 1 bytes @ 0x6
  2472                           
  2473  0026                     bordaSubidaB2@estadoAtualB2:	
  2474                           ; 1 bytes @ 0x6
  2475                           
  2476  0026                     cmdLCD@nibble:	
  2477                           ; 1 bytes @ 0x6
  2478                           
  2479                           
  2480                           ; 1 bytes @ 0x6
  2481  0026                     	ds	1
  2482  0027                     ??_transmite:	
  2483  0027                     ?_gotoxy:	
  2484                           ; 1 bytes @ 0x7
  2485                           
  2486  0027                     ??_initLCD:	
  2487                           ; 1 bytes @ 0x7
  2488                           
  2489  0027                     ??___awmod:	
  2490                           ; 1 bytes @ 0x7
  2491                           
  2492  0027                     asciiToHex@dez:	
  2493                           ; 1 bytes @ 0x7
  2494                           
  2495  0027                     gotoxy@y:	
  2496                           ; 1 bytes @ 0x7
  2497                           
  2498  0027                     ___awdiv@dividend:	
  2499                           ; 1 bytes @ 0x7
  2500                           
  2501  0027                     ___lldiv@dividend:	
  2502                           ; 2 bytes @ 0x7
  2503                           
  2504                           
  2505                           ; 4 bytes @ 0x7
  2506  0027                     	ds	1
  2507  0028                     ??_gotoxy:	
  2508  0028                     ___awmod@counter:	
  2509                           ; 1 bytes @ 0x8
  2510                           
  2511                           
  2512                           ; 1 bytes @ 0x8
  2513  0028                     	ds	1
  2514  0029                     ??___awdiv:	
  2515  0029                     ___awmod@sign:	
  2516                           ; 1 bytes @ 0x9
  2517                           
  2518                           
  2519                           ; 1 bytes @ 0x9
  2520  0029                     	ds	1
  2521  002A                     ??_statusFIFO:	
  2522  002A                     ??_getFIFO:	
  2523                           ; 1 bytes @ 0xA
  2524                           
  2525  002A                     gotoxy@x:	
  2526                           ; 1 bytes @ 0xA
  2527                           
  2528  002A                     ___awdiv@counter:	
  2529                           ; 1 bytes @ 0xA
  2530                           
  2531                           
  2532                           ; 1 bytes @ 0xA
  2533  002A                     	ds	1
  2534  002B                     ?_writeLCD:	
  2535  002B                     ??___lldiv:	
  2536                           ; 1 bytes @ 0xB
  2537                           
  2538  002B                     writeLCD@y:	
  2539                           ; 1 bytes @ 0xB
  2540                           
  2541  002B                     ___awdiv@sign:	
  2542                           ; 1 bytes @ 0xB
  2543                           
  2544                           
  2545                           ; 1 bytes @ 0xB
  2546  002B                     	ds	1
  2547  002C                     writeLCD@ptr:	
  2548  002C                     ___awdiv@quotient:	
  2549                           ; 2 bytes @ 0xC
  2550                           
  2551  002C                     ___lldiv@quotient:	
  2552                           ; 2 bytes @ 0xC
  2553                           
  2554                           
  2555                           ; 4 bytes @ 0xC
  2556  002C                     	ds	2
  2557  002E                     ??_writeLCD:	
  2558  002E                     getFIFO@aux:	
  2559                           ; 1 bytes @ 0xE
  2560                           
  2561                           
  2562                           ; 1 bytes @ 0xE
  2563  002E                     	ds	1
  2564  002F                     writeLCD@x:	
  2565                           
  2566                           ; 1 bytes @ 0xF
  2567  002F                     	ds	1
  2568  0030                     ??_logo:	
  2569  0030                     ??_textConfig:	
  2570                           ; 1 bytes @ 0x10
  2571                           
  2572  0030                     ??_textCMpar:	
  2573                           ; 1 bytes @ 0x10
  2574                           
  2575  0030                     ??_textCMdat:	
  2576                           ; 1 bytes @ 0x10
  2577                           
  2578  0030                     ??_textSelection1:	
  2579                           ; 1 bytes @ 0x10
  2580                           
  2581  0030                     ??_textSelection2:	
  2582                           ; 1 bytes @ 0x10
  2583                           
  2584  0030                     ??_textSelection3:	
  2585                           ; 1 bytes @ 0x10
  2586                           
  2587  0030                     ??_textSelection4:	
  2588                           ; 1 bytes @ 0x10
  2589                           
  2590  0030                     ??_textSelection5:	
  2591                           ; 1 bytes @ 0x10
  2592                           
  2593  0030                     ??_textSelection6:	
  2594                           ; 1 bytes @ 0x10
  2595                           
  2596  0030                     ??_textSelection7:	
  2597                           ; 1 bytes @ 0x10
  2598                           
  2599  0030                     ??_textSelection8:	
  2600                           ; 1 bytes @ 0x10
  2601                           
  2602  0030                     ??_textSelectionEST:	
  2603                           ; 1 bytes @ 0x10
  2604                           
  2605  0030                     ??_textSelectionCLP:	
  2606                           ; 1 bytes @ 0x10
  2607                           
  2608  0030                     ??_textLoading:	
  2609                           ; 1 bytes @ 0x10
  2610                           
  2611  0030                     ??_easterEgg:	
  2612                           ; 1 bytes @ 0x10
  2613                           
  2614  0030                     ___lldiv@counter:	
  2615                           ; 1 bytes @ 0x10
  2616                           
  2617                           
  2618                           ; 1 bytes @ 0x10
  2619  0030                     	ds	1
  2620  0031                     ?_initEUSART:	
  2621  0031                     initEUSART@baudRate:	
  2622                           ; 1 bytes @ 0x11
  2623                           
  2624                           
  2625                           ; 4 bytes @ 0x11
  2626  0031                     	ds	4
  2627  0035                     ??_initEUSART:	
  2628                           
  2629                           ; 1 bytes @ 0x15
  2630  0035                     	ds	6
  2631  003B                     ??_master1:	
  2632  003B                     ??_slave1:	
  2633                           ; 1 bytes @ 0x1B
  2634                           
  2635                           
  2636                           ; 1 bytes @ 0x1B
  2637  003B                     	ds	3
  2638  003E                     ??_main:	
  2639                           
  2640                           ; 1 bytes @ 0x1E
  2641  003E                     	ds	3
  2642  0041                     main@a1:	
  2643                           
  2644                           ; 1 bytes @ 0x21
  2645  0041                     	ds	1
  2646  0042                     main@a2:	
  2647                           
  2648                           ; 1 bytes @ 0x22
  2649  0042                     	ds	1
  2650  0043                     main@t:	
  2651                           
  2652                           ; 1 bytes @ 0x23
  2653  0043                     	ds	1
  2654  0044                     main@i:	
  2655                           
  2656                           ; 1 bytes @ 0x24
  2657  0044                     	ds	1
  2658  0045                     main@a:	
  2659                           
  2660                           ; 1 bytes @ 0x25
  2661  0045                     	ds	1
  2662  0046                     main@aux:	
  2663                           
  2664                           ; 2 bytes @ 0x26
  2665  0046                     	ds	2
  2666                           
  2667                           	psect	maintext
  2668  0027                     __pmaintext:	
  2669 ;;
  2670 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2671 ;;
  2672 ;; *************** function _main *****************
  2673 ;; Defined at:
  2674 ;;		line 30 in file "main.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  a2              1   34[BANK0 ] unsigned char 
  2679 ;;  a1              1   33[BANK0 ] unsigned char 
  2680 ;;  t               1   35[BANK0 ] unsigned char 
  2681 ;;  aux             2   38[BANK0 ] unsigned int 
  2682 ;;  a               1   37[BANK0 ] unsigned char 
  2683 ;;  i               1   36[BANK0 ] unsigned char 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : B00/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2693 ;;      Params:         0       0       0       0       0
  2694 ;;      Locals:         0       7       0       0       0
  2695 ;;      Temps:          0       3       0       0       0
  2696 ;;      Totals:         0      10       0       0       0
  2697 ;;Total ram usage:       10 bytes
  2698 ;; Hardware stack levels required when called:    8
  2699 ;; This function calls:
  2700 ;;		_B1
  2701 ;;		_B2
  2702 ;;		_B3
  2703 ;;		_asciiToHex
  2704 ;;		_bordaSubidaB1
  2705 ;;		_bordaSubidaB2
  2706 ;;		_bordaSubidaB3
  2707 ;;		_cmdLCD
  2708 ;;		_easterEgg
  2709 ;;		_errorRxEUSART
  2710 ;;		_getFIFO
  2711 ;;		_initBT
  2712 ;;		_initEUSART
  2713 ;;		_initLCD
  2714 ;;		_initSerial
  2715 ;;		_initTimer0
  2716 ;;		_logo
  2717 ;;		_master1
  2718 ;;		_resetErrorRxEUSART
  2719 ;;		_serialOut
  2720 ;;		_slave1
  2721 ;;		_statusFIFO
  2722 ;;		_textCMdat
  2723 ;;		_textCMpar
  2724 ;;		_textConfig
  2725 ;;		_textLoading
  2726 ;;		_textSelection1
  2727 ;;		_textSelection2
  2728 ;;		_textSelection3
  2729 ;;		_textSelection4
  2730 ;;		_textSelection5
  2731 ;;		_textSelection6
  2732 ;;		_textSelection7
  2733 ;;		_textSelection8
  2734 ;;		_textSelectionCLP
  2735 ;;		_textSelectionEST
  2736 ;;		_transmite
  2737 ;;		_writeLCD
  2738 ;; This function is called by:
  2739 ;;		Startup code after reset
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           
  2744                           ;psect for function _main
  2745  0027                     _main:	
  2746                           
  2747                           ;main.c: 32:     initBT();
  2748                           
  2749                           ;incstack = 0
  2750                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2751  0027  160A  118A  2025  120A  118A  	fcall	_initBT
  2752                           
  2753                           ;main.c: 33:     initLCD();
  2754  002C  160A  118A  22F1  120A  118A  	fcall	_initLCD
  2755                           
  2756                           ;main.c: 34:     initTimer0();
  2757  0031  160A  118A  2118  120A  118A  	fcall	_initTimer0
  2758                           
  2759                           ;main.c: 35:     initEUSART(9600);
  2760  0036  3000               	movlw	0
  2761  0037  1283               	bcf	3,5	;RP0=0, select bank0
  2762  0038  1303               	bcf	3,6	;RP1=0, select bank0
  2763  0039  00B4               	movwf	initEUSART@baudRate+3
  2764  003A  3000               	movlw	0
  2765  003B  00B3               	movwf	initEUSART@baudRate+2
  2766  003C  3025               	movlw	37
  2767  003D  00B2               	movwf	initEUSART@baudRate+1
  2768  003E  3080               	movlw	128
  2769  003F  00B1               	movwf	initEUSART@baudRate
  2770  0040  160A  118A  24FB  120A  118A  	fcall	_initEUSART
  2771                           
  2772                           ;main.c: 36:     initSerial();
  2773  0045  160A  118A  204F  120A  118A  	fcall	_initSerial
  2774                           
  2775                           ;main.c: 39:     unsigned int aux = 0;
  2776  004A  1283               	bcf	3,5	;RP0=0, select bank0
  2777  004B  1303               	bcf	3,6	;RP1=0, select bank0
  2778  004C  01C6               	clrf	main@aux
  2779  004D  01C7               	clrf	main@aux+1
  2780                           
  2781                           ;main.c: 40:     unsigned char a = 0;
  2782  004E  01C5               	clrf	main@a
  2783                           
  2784                           ;main.c: 41:     unsigned char i = 0;
  2785  004F  01C4               	clrf	main@i
  2786                           
  2787                           ;main.c: 44:     {;main.c: 45:         switch (aux)
  2788                           
  2789                           ;main.c: 43:     while(1)
  2790  0050  2D31               	goto	l4017
  2791  0051                     l3575:	
  2792                           ;main.c: 46:         {;main.c: 47:             case 0 :
  2793                           
  2794                           
  2795                           ;main.c: 48:                 logo();
  2796  0051  120A  158A  23A2  120A  118A  	fcall	_logo
  2797  0056  29CB               	goto	L48
  2798  0057                     l3579:	
  2799                           ;main.c: 52:             case 1:
  2800                           
  2801                           ;main.c: 50:                 break;
  2802                           
  2803                           ;main.c: 49:                 aux = 1;
  2804                           
  2805                           
  2806                           ;main.c: 53:                 textConfig();
  2807  0057  160A  118A  21AF  120A  118A  	fcall	_textConfig
  2808                           
  2809                           ;main.c: 54:                 aux = 10;
  2810  005C  300A               	movlw	10
  2811  005D  2D22               	goto	L45
  2812  005E                     l3583:	
  2813                           ;main.c: 57:             case 2:
  2814                           
  2815                           ;main.c: 55:                 break;
  2816                           
  2817                           
  2818                           ;main.c: 58:                 textCMdat();
  2819  005E  160A  118A  216F  120A  118A  	fcall	_textCMdat
  2820                           
  2821                           ;main.c: 59:                 aux = 20;
  2822  0063  3014               	movlw	20
  2823  0064  2D22               	goto	L45
  2824  0065                     l3587:	
  2825                           ;main.c: 62:             case 3:
  2826                           
  2827                           ;main.c: 60:                 break;
  2828                           
  2829                           
  2830                           ;main.c: 63:                 textCMpar();
  2831  0065  160A  118A  218F  120A  118A  	fcall	_textCMpar
  2832                           
  2833                           ;main.c: 64:                 aux = 30;
  2834  006A  301E               	movlw	30
  2835  006B  2D22               	goto	L45
  2836  006C                     l3591:	
  2837                           ;main.c: 69:             case 10:
  2838                           
  2839                           ;main.c: 65:                 break;
  2840                           
  2841                           
  2842                           ;main.c: 70:                 if(bordaSubidaB1()) aux = 2;
  2843  006C  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  2844  0071  3A00               	xorlw	0
  2845  0072  1903               	skipnz
  2846  0073  287A               	goto	l3595
  2847  0074  3002               	movlw	2
  2848  0075  1283               	bcf	3,5	;RP0=0, select bank0
  2849  0076  1303               	bcf	3,6	;RP1=0, select bank0
  2850  0077  00C6               	movwf	main@aux
  2851  0078  3000               	movlw	0
  2852  0079  00C7               	movwf	main@aux+1
  2853  007A                     l3595:	
  2854                           
  2855                           ;main.c: 71:                 if(bordaSubidaB2()) aux = 3;
  2856  007A  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  2857  007F  3A00               	xorlw	0
  2858  0080  1903               	skipnz
  2859  0081  2888               	goto	l3599
  2860  0082  3003               	movlw	3
  2861  0083  1283               	bcf	3,5	;RP0=0, select bank0
  2862  0084  1303               	bcf	3,6	;RP1=0, select bank0
  2863  0085  00C6               	movwf	main@aux
  2864  0086  3000               	movlw	0
  2865  0087  00C7               	movwf	main@aux+1
  2866  0088                     l3599:	
  2867                           
  2868                           ;main.c: 72:                 if(bordaSubidaB3()) aux = 100;
  2869  0088  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  2870  008D  3A00               	xorlw	0
  2871  008E  1903               	skipnz
  2872  008F  2D31               	goto	l4017
  2873  0090  3064               	movlw	100
  2874  0091  2D22               	goto	L45
  2875  0092                     l3603:	
  2876                           ;main.c: 75:             case 20:
  2877                           
  2878                           ;main.c: 73:                 break;
  2879                           
  2880                           
  2881                           ;main.c: 76:                 if(bordaSubidaB1()) aux = 3;
  2882  0092  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  2883  0097  3A00               	xorlw	0
  2884  0098  1903               	skipnz
  2885  0099  28A0               	goto	l3607
  2886  009A  3003               	movlw	3
  2887  009B  1283               	bcf	3,5	;RP0=0, select bank0
  2888  009C  1303               	bcf	3,6	;RP1=0, select bank0
  2889  009D  00C6               	movwf	main@aux
  2890  009E  3000               	movlw	0
  2891  009F  00C7               	movwf	main@aux+1
  2892  00A0                     l3607:	
  2893                           
  2894                           ;main.c: 77:                 if(bordaSubidaB2()) aux = 1;
  2895  00A0  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  2896  00A5  3A00               	xorlw	0
  2897  00A6  1903               	skipnz
  2898  00A7  28AE               	goto	l3611
  2899  00A8  3001               	movlw	1
  2900  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  2901  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  2902  00AB  00C6               	movwf	main@aux
  2903  00AC  3000               	movlw	0
  2904  00AD  00C7               	movwf	main@aux+1
  2905  00AE                     l3611:	
  2906                           
  2907                           ;main.c: 78:                 if(bordaSubidaB3()) aux = 200;
  2908  00AE  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  2909  00B3  3A00               	xorlw	0
  2910  00B4  1903               	skipnz
  2911  00B5  2D31               	goto	l4017
  2912  00B6  30C8               	movlw	200
  2913  00B7  2D22               	goto	L45
  2914  00B8                     l3615:	
  2915                           ;main.c: 81:             case 30:
  2916                           
  2917                           ;main.c: 79:                 break;
  2918                           
  2919                           
  2920                           ;main.c: 82:                 if(bordaSubidaB1()) aux = 1;
  2921  00B8  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  2922  00BD  3A00               	xorlw	0
  2923  00BE  1903               	skipnz
  2924  00BF  28C6               	goto	l3619
  2925  00C0  3001               	movlw	1
  2926  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  2927  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  2928  00C3  00C6               	movwf	main@aux
  2929  00C4  3000               	movlw	0
  2930  00C5  00C7               	movwf	main@aux+1
  2931  00C6                     l3619:	
  2932                           
  2933                           ;main.c: 83:                 if(bordaSubidaB2()) aux = 2;
  2934  00C6  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  2935  00CB  3A00               	xorlw	0
  2936  00CC  1903               	skipnz
  2937  00CD  28D4               	goto	l3623
  2938  00CE  3002               	movlw	2
  2939  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  2940  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  2941  00D1  00C6               	movwf	main@aux
  2942  00D2  3000               	movlw	0
  2943  00D3  00C7               	movwf	main@aux+1
  2944  00D4                     l3623:	
  2945                           
  2946                           ;main.c: 84:                 if(bordaSubidaB3()) aux = 300;
  2947  00D4  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  2948  00D9  3A00               	xorlw	0
  2949  00DA  1903               	skipnz
  2950  00DB  28E2               	goto	l3627
  2951  00DC  302C               	movlw	44
  2952  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  2953  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  2954  00DF  00C6               	movwf	main@aux
  2955  00E0  3001               	movlw	1
  2956  00E1  00C7               	movwf	main@aux+1
  2957  00E2                     l3627:	
  2958                           
  2959                           ;main.c: 85:                 if(B2() & B3()) aux = 666;
  2960  00E2  160A  158A  27E0  120A  118A  	fcall	_B3
  2961  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  2962  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  2963  00E9  00BE               	movwf	??_main
  2964  00EA  160A  158A  27EB  120A  118A  	fcall	_B2
  2965  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  2966  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  2967  00F1  053E               	andwf	??_main,w
  2968  00F2  1903               	btfsc	3,2
  2969  00F3  2D31               	goto	l4017
  2970  00F4  309A               	movlw	154
  2971  00F5  00C6               	movwf	main@aux
  2972  00F6  3002               	movlw	2
  2973  00F7  2D26               	goto	L34
  2974  00F8                     l3631:	
  2975                           ;main.c: 90:             case 100:
  2976                           
  2977                           ;main.c: 86:                 break;
  2978                           
  2979                           
  2980                           ;main.c: 91:                 cmdLCD(0x01);
  2981  00F8  3001               	movlw	1
  2982  00F9  160A  118A  24A1  120A  118A  	fcall	_cmdLCD
  2983                           
  2984                           ;main.c: 92:                 writeLCD(0,0,"MODULO  DESEJADO");
  2985  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  2986  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  2987  0100  01AB               	clrf	writeLCD@y
  2988  0101  30BB               	movlw	low (STR_109| (0+32768))
  2989  0102  00AC               	movwf	writeLCD@ptr
  2990  0103  3087               	movlw	high (STR_109| (0+32768))
  2991  0104  00AD               	movwf	writeLCD@ptr+1
  2992  0105  3000               	movlw	0
  2993  0106  120A  158A  2209  120A  118A  	fcall	_writeLCD
  2994                           
  2995                           ;main.c: 93:                 writeLCD(0,1,"ESTEIRA      CLP");
  2996  010B  1283               	bcf	3,5	;RP0=0, select bank0
  2997  010C  1303               	bcf	3,6	;RP1=0, select bank0
  2998  010D  01AB               	clrf	writeLCD@y
  2999  010E  0AAB               	incf	writeLCD@y,f
  3000  010F  30CC               	movlw	low (STR_110| (0+32768))
  3001  0110  00AC               	movwf	writeLCD@ptr
  3002  0111  3087               	movlw	high (STR_110| (0+32768))
  3003  0112  00AD               	movwf	writeLCD@ptr+1
  3004  0113  3000               	movlw	0
  3005  0114  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3006                           
  3007                           ;main.c: 94:                 aux = 110;
  3008  0119  306E               	movlw	110
  3009  011A  2D22               	goto	L45
  3010  011B                     l3639:	
  3011                           ;main.c: 99:                 {;main.c: 100:                     case 0:
  3012                           
  3013                           ;main.c: 98:                 switch(i)
  3014                           
  3015                           ;main.c: 97:             case 110:
  3016                           
  3017                           ;main.c: 95:                 break;
  3018                           
  3019                           
  3020                           ;main.c: 101:                         textSelectionEST();
  3021  011B  160A  118A  244C  120A  118A  	fcall	_textSelectionEST
  3022                           
  3023                           ;main.c: 102:                         if(bordaSubidaB2()) i = 1;
  3024  0120  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  3025  0125  3A00               	xorlw	0
  3026  0126  1903               	skipnz
  3027  0127  292C               	goto	l3645
  3028  0128  1283               	bcf	3,5	;RP0=0, select bank0
  3029  0129  1303               	bcf	3,6	;RP1=0, select bank0
  3030  012A  01C4               	clrf	main@i
  3031  012B  0AC4               	incf	main@i,f
  3032  012C                     l3645:	
  3033                           
  3034                           ;main.c: 103:                         if(bordaSubidaB3()) aux = 111;
  3035  012C  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3036  0131  3A00               	xorlw	0
  3037  0132  1903               	skipnz
  3038  0133  2954               	goto	l3663
  3039  0134  306F               	movlw	111
  3040  0135  294F               	goto	L49
  3041  0136                     l3653:	
  3042                           ;main.c: 107:                     case 1:
  3043                           
  3044                           ;main.c: 105:                         break;
  3045                           
  3046                           ;main.c: 104:                         if(B1() & B2()) aux = 10;
  3047                           
  3048                           
  3049                           ;main.c: 108:                         textSelectionCLP();
  3050  0136  160A  118A  23F7  120A  118A  	fcall	_textSelectionCLP
  3051                           
  3052                           ;main.c: 109:                         if(bordaSubidaB1()) i=0;
  3053  013B  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3054  0140  3A00               	xorlw	0
  3055  0141  1903               	skipnz
  3056  0142  2946               	goto	l3659
  3057  0143  1283               	bcf	3,5	;RP0=0, select bank0
  3058  0144  1303               	bcf	3,6	;RP1=0, select bank0
  3059  0145  01C4               	clrf	main@i
  3060  0146                     l3659:	
  3061                           
  3062                           ;main.c: 110:                         if(bordaSubidaB3()) aux = 112;
  3063  0146  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3064  014B  3A00               	xorlw	0
  3065  014C  1903               	skipnz
  3066  014D  2954               	goto	l3663
  3067  014E  3070               	movlw	112
  3068  014F                     L49:	
  3069  014F  1283               	bcf	3,5	;RP0=0, select bank0
  3070  0150  1303               	bcf	3,6	;RP1=0, select bank0
  3071  0151  00C6               	movwf	main@aux
  3072  0152  3000               	movlw	0
  3073  0153  00C7               	movwf	main@aux+1
  3074  0154                     l3663:	
  3075                           
  3076                           ;main.c: 111:                         if(B1() & B2()) aux = 10;
  3077  0154  160A  158A  27EB  120A  118A  	fcall	_B2
  3078  0159  1283               	bcf	3,5	;RP0=0, select bank0
  3079  015A  1303               	bcf	3,6	;RP1=0, select bank0
  3080  015B  00BE               	movwf	??_main
  3081  015C  160A  158A  27DB  120A  118A  	fcall	_B1
  3082  0161  1283               	bcf	3,5	;RP0=0, select bank0
  3083  0162  1303               	bcf	3,6	;RP1=0, select bank0
  3084  0163  053E               	andwf	??_main,w
  3085  0164  1903               	btfsc	3,2
  3086  0165  2D31               	goto	l4017
  3087  0166  300A               	movlw	10
  3088  0167  2D24               	goto	L36
  3089  0168                     l3669:	
  3090                           ;main.c: 114:                 }
  3091                           
  3092                           ;main.c: 112:                         break;
  3093                           
  3094  0168  0844               	movf	main@i,w
  3095  0169  00BE               	movwf	??_main
  3096  016A  01BF               	clrf	??_main+1
  3097                           
  3098                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3099                           ; Switch size 1, requested type "space"
  3100                           ; Number of cases is 1, Range of values is 0 to 0
  3101                           ; switch strategies available:
  3102                           ; Name         Instructions Cycles
  3103                           ; simple_byte            4     3 (average)
  3104                           ; direct_byte           11     8 (fixed)
  3105                           ; jumptable            260     6 (fixed)
  3106                           ;	Chosen strategy is simple_byte
  3107  016B  083F               	movf	??_main+1,w
  3108  016C  3A00               	xorlw	0	; case 0
  3109  016D  1903               	skipnz
  3110  016E  2970               	goto	l4173
  3111  016F  2D31               	goto	l4017
  3112  0170                     l4173:	
  3113                           
  3114                           ; Switch size 1, requested type "space"
  3115                           ; Number of cases is 2, Range of values is 0 to 1
  3116                           ; switch strategies available:
  3117                           ; Name         Instructions Cycles
  3118                           ; simple_byte            7     4 (average)
  3119                           ; direct_byte           14     8 (fixed)
  3120                           ; jumptable            260     6 (fixed)
  3121                           ;	Chosen strategy is simple_byte
  3122  0170  083E               	movf	??_main,w
  3123  0171  3A00               	xorlw	0	; case 0
  3124  0172  1903               	skipnz
  3125  0173  291B               	goto	l3639
  3126  0174  3A01               	xorlw	1	; case 1
  3127  0175  1903               	skipnz
  3128  0176  2936               	goto	l3653
  3129  0177  2D31               	goto	l4017
  3130                           
  3131                           ;main.c: 115:                 break;
  3132  0178  2D31               	goto	l4017
  3133  0179                     l3671:	
  3134                           ;main.c: 117:             case 111:
  3135                           
  3136                           
  3137                           ;main.c: 118:                 cmdLCD(0x01);
  3138  0179  3001               	movlw	1
  3139  017A  160A  118A  24A1  120A  118A  	fcall	_cmdLCD
  3140                           
  3141                           ;main.c: 119:                 writeLCD(0,0," Enviando ");
  3142  017F  1283               	bcf	3,5	;RP0=0, select bank0
  3143  0180  1303               	bcf	3,6	;RP1=0, select bank0
  3144  0181  01AB               	clrf	writeLCD@y
  3145  0182  30A0               	movlw	low (STR_111| (0+32768))
  3146  0183  00AC               	movwf	writeLCD@ptr
  3147  0184  3089               	movlw	high (STR_111| (0+32768))
  3148  0185  00AD               	movwf	writeLCD@ptr+1
  3149  0186  3000               	movlw	0
  3150  0187  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3151                           
  3152                           ;main.c: 120:                 writeLCD(0,1," P/ Esteira ");
  3153  018C  1283               	bcf	3,5	;RP0=0, select bank0
  3154  018D  1303               	bcf	3,6	;RP1=0, select bank0
  3155  018E  01AB               	clrf	writeLCD@y
  3156  018F  0AAB               	incf	writeLCD@y,f
  3157  0190  306E               	movlw	low (STR_112| (0+32768))
  3158  0191  00AC               	movwf	writeLCD@ptr
  3159  0192  3089               	movlw	high (STR_112| (0+32768))
  3160  0193  00AD               	movwf	writeLCD@ptr+1
  3161  0194  3000               	movlw	0
  3162  0195  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3163                           
  3164                           ;main.c: 121:                 slave1();
  3165  019A  120A  158A  244C  120A  118A  	fcall	_slave1
  3166  019F  29C6               	goto	L50
  3167  01A0                     l3683:	
  3168                           ;main.c: 126:             case 112:
  3169                           
  3170                           ;main.c: 124:                 break;
  3171                           
  3172                           ;main.c: 123:                 aux = 1;
  3173                           
  3174                           ;main.c: 122:                 textLoading();
  3175                           
  3176                           
  3177                           ;main.c: 127:                 cmdLCD(0x01);
  3178  01A0  3001               	movlw	1
  3179  01A1  160A  118A  24A1  120A  118A  	fcall	_cmdLCD
  3180                           
  3181                           ;main.c: 128:                 writeLCD(0,0," Enviando ");
  3182  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  3183  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  3184  01A8  01AB               	clrf	writeLCD@y
  3185  01A9  30A0               	movlw	low (STR_111| (0+32768))
  3186  01AA  00AC               	movwf	writeLCD@ptr
  3187  01AB  3089               	movlw	high (STR_111| (0+32768))
  3188  01AC  00AD               	movwf	writeLCD@ptr+1
  3189  01AD  3000               	movlw	0
  3190  01AE  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3191                           
  3192                           ;main.c: 129:                 writeLCD(0,1," P/ CLP ");
  3193  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  3194  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  3195  01B5  01AB               	clrf	writeLCD@y
  3196  01B6  0AAB               	incf	writeLCD@y,f
  3197  01B7  30C0               	movlw	low (STR_114| (0+32768))
  3198  01B8  00AC               	movwf	writeLCD@ptr
  3199  01B9  3089               	movlw	high (STR_114| (0+32768))
  3200  01BA  00AD               	movwf	writeLCD@ptr+1
  3201  01BB  3000               	movlw	0
  3202  01BC  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3203                           
  3204                           ;main.c: 130:                 master1();
  3205  01C1  120A  158A  2301  120A  118A  	fcall	_master1
  3206  01C6                     L50:	
  3207                           
  3208                           ;main.c: 131:                 textLoading();
  3209  01C6  120A  158A  2506  120A  118A  	fcall	_textLoading
  3210  01CB                     L48:	
  3211                           
  3212                           ;main.c: 132:                 aux = 1;
  3213  01CB  3001               	movlw	1
  3214  01CC  2D22               	goto	L45
  3215  01CD                     l3695:	
  3216                           ;main.c: 139:             case 200:
  3217                           
  3218                           ;main.c: 133:                 break;
  3219                           
  3220                           
  3221                           ;main.c: 140:                 cmdLCD(0x01);
  3222  01CD  3001               	movlw	1
  3223  01CE  160A  118A  24A1  120A  118A  	fcall	_cmdLCD
  3224                           
  3225                           ;main.c: 141:                 writeLCD(0,0," CONFIRMA TROCA ");
  3226  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  3227  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  3228  01D5  01AB               	clrf	writeLCD@y
  3229  01D6  3088               	movlw	low (STR_115| (0+32768))
  3230  01D7  00AC               	movwf	writeLCD@ptr
  3231  01D8  3087               	movlw	high (STR_115| (0+32768))
  3232  01D9  00AD               	movwf	writeLCD@ptr+1
  3233  01DA  3000               	movlw	0
  3234  01DB  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3235                           
  3236                           ;main.c: 142:                 writeLCD(0,1,"    DE DADOS    ");
  3237  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  3238  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  3239  01E2  01AB               	clrf	writeLCD@y
  3240  01E3  0AAB               	incf	writeLCD@y,f
  3241  01E4  3022               	movlw	low (STR_116| (0+32768))
  3242  01E5  00AC               	movwf	writeLCD@ptr
  3243  01E6  3087               	movlw	high (STR_116| (0+32768))
  3244  01E7  00AD               	movwf	writeLCD@ptr+1
  3245  01E8  3000               	movlw	0
  3246  01E9  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3247                           
  3248                           ;main.c: 143:                 aux = 210;
  3249  01EE  30D2               	movlw	210
  3250  01EF  2D22               	goto	L45
  3251  01F0                     l3703:	
  3252                           ;main.c: 146:             case 210:
  3253                           
  3254                           ;main.c: 144:                 break;
  3255                           
  3256                           
  3257                           ;main.c: 147:                 if(B1() & B2()) aux = 20;
  3258  01F0  160A  158A  27EB  120A  118A  	fcall	_B2
  3259  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  3260  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  3261  01F7  00BE               	movwf	??_main
  3262  01F8  160A  158A  27DB  120A  118A  	fcall	_B1
  3263  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  3264  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  3265  01FF  053E               	andwf	??_main,w
  3266  0200  1903               	btfsc	3,2
  3267  0201  2A06               	goto	l3707
  3268  0202  3014               	movlw	20
  3269  0203  00C6               	movwf	main@aux
  3270  0204  3000               	movlw	0
  3271  0205  00C7               	movwf	main@aux+1
  3272  0206                     l3707:	
  3273                           
  3274                           ;main.c: 148:                 if(bordaSubidaB3())
  3275  0206  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3276  020B  3A00               	xorlw	0
  3277  020C  1903               	skipnz
  3278  020D  2D31               	goto	l4017
  3279                           
  3280                           ;main.c: 149:                 {;main.c: 150:                     cmdLCD(0x01);
  3281  020E  3001               	movlw	1
  3282  020F  160A  118A  24A1  120A  118A  	fcall	_cmdLCD
  3283                           
  3284                           ;main.c: 151:                     writeLCD(0,0,"    TROCANDO    ");
  3285  0214  1283               	bcf	3,5	;RP0=0, select bank0
  3286  0215  1303               	bcf	3,6	;RP1=0, select bank0
  3287  0216  01AB               	clrf	writeLCD@y
  3288  0217  3011               	movlw	low (STR_117| (0+32768))
  3289  0218  00AC               	movwf	writeLCD@ptr
  3290  0219  3087               	movlw	high (STR_117| (0+32768))
  3291  021A  00AD               	movwf	writeLCD@ptr+1
  3292  021B  3000               	movlw	0
  3293  021C  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3294                           
  3295                           ;main.c: 152:                     writeLCD(0,1,"   INFORMACAO   ");
  3296  0221  1283               	bcf	3,5	;RP0=0, select bank0
  3297  0222  1303               	bcf	3,6	;RP1=0, select bank0
  3298  0223  01AB               	clrf	writeLCD@y
  3299  0224  0AAB               	incf	writeLCD@y,f
  3300  0225  3033               	movlw	low (STR_118| (0+32768))
  3301  0226  00AC               	movwf	writeLCD@ptr
  3302  0227  3087               	movlw	high (STR_118| (0+32768))
  3303  0228  00AD               	movwf	writeLCD@ptr+1
  3304  0229  3000               	movlw	0
  3305  022A  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3306                           
  3307                           ;main.c: 154:                     char t = 1;
  3308  022F  1283               	bcf	3,5	;RP0=0, select bank0
  3309  0230  1303               	bcf	3,6	;RP1=0, select bank0
  3310  0231  01C3               	clrf	main@t
  3311  0232  0AC3               	incf	main@t,f
  3312                           
  3313                           ;main.c: 156:                     PORTBbits.RB4 = 0;
  3314  0233  1206               	bcf	6,4	;volatile
  3315                           
  3316                           ;main.c: 158:                     while(t)
  3317  0234  2AC3               	goto	l3741
  3318  0235                     l3719:	
  3319                           ;main.c: 161:                         {;main.c: 162:                             case 2:
      +                           writeLCD(0,1, "Overrun Error");
  3320                           
  3321                           ;main.c: 159:                     {;main.c: 160:                         switch( errorRx
      +                          EUSART() )
  3322                           
  3323  0235  01AB               	clrf	writeLCD@y
  3324  0236  0AAB               	incf	writeLCD@y,f
  3325  0237  3060               	movlw	low (STR_119| (0+32768))
  3326  0238  00AC               	movwf	writeLCD@ptr
  3327  0239  3089               	movlw	high (STR_119| (0+32768))
  3328  023A  00AD               	movwf	writeLCD@ptr+1
  3329  023B  3000               	movlw	0
  3330  023C  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3331                           
  3332                           ;main.c: 163:                                     resetErrorRxEUSART();
  3333  0241  160A  118A  2269  120A  118A  	fcall	_resetErrorRxEUSART
  3334                           
  3335                           ;main.c: 164:                                     break;
  3336  0246  2AA4               	goto	l3737
  3337  0247                     l3723:	
  3338                           ;main.c: 165:                             case 1: writeLCD(0,1, "Framing Error");
  3339                           
  3340  0247  1283               	bcf	3,5	;RP0=0, select bank0
  3341  0248  1303               	bcf	3,6	;RP1=0, select bank0
  3342  0249  01AB               	clrf	writeLCD@y
  3343  024A  0AAB               	incf	writeLCD@y,f
  3344  024B  3052               	movlw	low (STR_120| (0+32768))
  3345  024C  00AC               	movwf	writeLCD@ptr
  3346  024D  3089               	movlw	high (STR_120| (0+32768))
  3347  024E  00AD               	movwf	writeLCD@ptr+1
  3348  024F  3000               	movlw	0
  3349  0250  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3350                           
  3351                           ;main.c: 166:                                     resetErrorRxEUSART();
  3352  0255  160A  118A  2269  120A  118A  	fcall	_resetErrorRxEUSART
  3353                           
  3354                           ;main.c: 167:                                     break;
  3355  025A  2AA4               	goto	l3737
  3356  025B                     l3727:	
  3357                           ;main.c: 169:                             case 0:
  3358                           
  3359                           ;main.c: 168:                             default:
  3360                           
  3361                           
  3362                           ;main.c: 171:                                 if( statusFIFO() >= 2 )
  3363  025B  160A  118A  2133  120A  118A  	fcall	_statusFIFO
  3364  0260  1283               	bcf	3,5	;RP0=0, select bank0
  3365  0261  1303               	bcf	3,6	;RP1=0, select bank0
  3366  0262  00BE               	movwf	??_main
  3367  0263  3002               	movlw	2
  3368  0264  023E               	subwf	??_main,w
  3369  0265  1C03               	skipc
  3370  0266  2AA4               	goto	l3737
  3371                           
  3372                           ;main.c: 172:                                 {;main.c: 173:                            
      +                                   unsigned char a1 = getFIFO();
  3373  0267  160A  118A  2217  120A  118A  	fcall	_getFIFO
  3374  026C  1283               	bcf	3,5	;RP0=0, select bank0
  3375  026D  1303               	bcf	3,6	;RP1=0, select bank0
  3376  026E  00BE               	movwf	??_main
  3377  026F  083E               	movf	??_main,w
  3378  0270  00C1               	movwf	main@a1
  3379                           
  3380                           ;main.c: 174:                                     unsigned char a2 = getFIFO();
  3381  0271  160A  118A  2217  120A  118A  	fcall	_getFIFO
  3382  0276  1283               	bcf	3,5	;RP0=0, select bank0
  3383  0277  1303               	bcf	3,6	;RP1=0, select bank0
  3384  0278  00BE               	movwf	??_main
  3385  0279  083E               	movf	??_main,w
  3386  027A  00C2               	movwf	main@a2
  3387                           
  3388                           ;main.c: 175:                                     serialOut( asciiToHex( a1, a2 ) );
  3389  027B  0842               	movf	main@a2,w
  3390  027C  00BE               	movwf	??_main
  3391  027D  083E               	movf	??_main,w
  3392  027E  00A3               	movwf	asciiToHex@a2
  3393  027F  0841               	movf	main@a1,w
  3394  0280  160A  118A  21F2  120A  118A  	fcall	_asciiToHex
  3395  0285  160A  118A  207D  120A  118A  	fcall	_serialOut
  3396                           
  3397                           ;main.c: 179:                         }
  3398                           
  3399                           ;main.c: 178:                             break;
  3400                           
  3401                           ;main.c: 177:                                 }
  3402  028A  2AA4               	goto	l3737
  3403  028B                     l3735:	
  3404  028B  160A  118A  2030  120A  118A  	fcall	_errorRxEUSART
  3405  0290  1283               	bcf	3,5	;RP0=0, select bank0
  3406  0291  1303               	bcf	3,6	;RP1=0, select bank0
  3407  0292  00BE               	movwf	??_main
  3408  0293  01BF               	clrf	??_main+1
  3409                           
  3410                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3411                           ; Switch size 1, requested type "space"
  3412                           ; Number of cases is 1, Range of values is 0 to 0
  3413                           ; switch strategies available:
  3414                           ; Name         Instructions Cycles
  3415                           ; simple_byte            4     3 (average)
  3416                           ; direct_byte           11     8 (fixed)
  3417                           ; jumptable            260     6 (fixed)
  3418                           ;	Chosen strategy is simple_byte
  3419  0294  083F               	movf	??_main+1,w
  3420  0295  3A00               	xorlw	0	; case 0
  3421  0296  1903               	skipnz
  3422  0297  2A99               	goto	l4175
  3423  0298  2A5B               	goto	l3727
  3424  0299                     l4175:	
  3425                           
  3426                           ; Switch size 1, requested type "space"
  3427                           ; Number of cases is 3, Range of values is 0 to 2
  3428                           ; switch strategies available:
  3429                           ; Name         Instructions Cycles
  3430                           ; simple_byte           10     6 (average)
  3431                           ; direct_byte           17     8 (fixed)
  3432                           ; jumptable            260     6 (fixed)
  3433                           ;	Chosen strategy is simple_byte
  3434  0299  083E               	movf	??_main,w
  3435  029A  3A00               	xorlw	0	; case 0
  3436  029B  1903               	skipnz
  3437  029C  2A5B               	goto	l3727
  3438  029D  3A01               	xorlw	1	; case 1
  3439  029E  1903               	skipnz
  3440  029F  2A47               	goto	l3723
  3441  02A0  3A03               	xorlw	3	; case 2
  3442  02A1  1903               	skipnz
  3443  02A2  2A35               	goto	l3719
  3444  02A3  2A5B               	goto	l3727
  3445  02A4                     l3737:	
  3446                           
  3447                           ;main.c: 181:                         serialOut(rhex);
  3448  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  3449  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  3450  02A6  0854               	movf	_rhex,w
  3451  02A7  160A  118A  207D  120A  118A  	fcall	_serialOut
  3452                           
  3453                           ;main.c: 182:                         transmite();
  3454  02AC  160A  118A  2325  120A  118A  	fcall	_transmite
  3455                           
  3456                           ;main.c: 184:                         if(B1() & B2()) t = 0;
  3457  02B1  160A  158A  27EB  120A  118A  	fcall	_B2
  3458  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  3459  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  3460  02B8  00BE               	movwf	??_main
  3461  02B9  160A  158A  27DB  120A  118A  	fcall	_B1
  3462  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  3463  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  3464  02C0  053E               	andwf	??_main,w
  3465  02C1  1D03               	btfss	3,2
  3466  02C2  01C3               	clrf	main@t
  3467  02C3                     l3741:	
  3468                           ;main.c: 185:                     }
  3469                           
  3470                           
  3471                           ;main.c: 158:                     while(t)
  3472  02C3  0843               	movf	main@t,w
  3473  02C4  1D03               	btfss	3,2
  3474  02C5  2A8B               	goto	l3735
  3475                           
  3476                           ;main.c: 186:                     PORTBbits.RB4 = 1;
  3477  02C6  1606               	bsf	6,4	;volatile
  3478                           
  3479                           ;main.c: 187:                     aux = 2;
  3480  02C7  3002               	movlw	2
  3481  02C8  2D24               	goto	L36
  3482  02C9                     l3745:	
  3483                           ;main.c: 193:             case 300:
  3484                           
  3485                           ;main.c: 189:                 break;
  3486                           
  3487                           ;main.c: 188:                 }
  3488                           
  3489                           
  3490                           ;main.c: 194:                 cmdLCD(0x01);
  3491  02C9  3001               	movlw	1
  3492  02CA  160A  118A  24A1  120A  118A  	fcall	_cmdLCD
  3493                           
  3494                           ;main.c: 195:                 writeLCD(0,0,"BLUETOOTH <---->");
  3495  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  3496  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  3497  02D1  01AB               	clrf	writeLCD@y
  3498  02D2  30AA               	movlw	low (STR_121| (0+32768))
  3499  02D3  00AC               	movwf	writeLCD@ptr
  3500  02D4  3087               	movlw	high (STR_121| (0+32768))
  3501  02D5  00AD               	movwf	writeLCD@ptr+1
  3502  02D6  3000               	movlw	0
  3503  02D7  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3504                           
  3505                           ;main.c: 196:                 aux = 301;
  3506  02DC  302D               	movlw	45
  3507  02DD  2B58               	goto	L37
  3508  02DE                     l3751:	
  3509                           ;main.c: 199:             case 301:
  3510                           
  3511                           ;main.c: 197:                 break;
  3512                           
  3513                           
  3514                           ;main.c: 200:                 writeLCD(0,1,"PAREAR      BT  ");
  3515  02DE  01AB               	clrf	writeLCD@y
  3516  02DF  0AAB               	incf	writeLCD@y,f
  3517  02E0  3066               	movlw	low (STR_122| (0+32768))
  3518  02E1  00AC               	movwf	writeLCD@ptr
  3519  02E2  3087               	movlw	high (STR_122| (0+32768))
  3520  02E3  00AD               	movwf	writeLCD@ptr+1
  3521  02E4  3000               	movlw	0
  3522  02E5  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3523                           
  3524                           ;main.c: 201:                 if(bordaSubidaB1() || bordaSubidaB2()) aux = 302;
  3525  02EA  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3526  02EF  3A00               	xorlw	0
  3527  02F0  1D03               	skipz
  3528  02F1  2AFA               	goto	l3757
  3529  02F2  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  3530  02F7  3A00               	xorlw	0
  3531  02F8  1903               	skipnz
  3532  02F9  2B00               	goto	l3759
  3533  02FA                     l3757:	
  3534  02FA  302E               	movlw	46
  3535  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  3536  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  3537  02FD  00C6               	movwf	main@aux
  3538  02FE  3001               	movlw	1
  3539  02FF  00C7               	movwf	main@aux+1
  3540  0300                     l3759:	
  3541                           
  3542                           ;main.c: 202:                 if(bordaSubidaB3()) aux = 305;
  3543  0300  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3544  0305  3A00               	xorlw	0
  3545  0306  1903               	skipnz
  3546  0307  2CD2               	goto	l3939
  3547  0308  3031               	movlw	49
  3548  0309  2CCD               	goto	L51
  3549  030A                     l3767:	
  3550                           ;main.c: 206:             case 302:
  3551                           
  3552                           ;main.c: 204:                 break;
  3553                           
  3554                           ;main.c: 203:                  if(B1() & B2()) aux = 30;
  3555                           
  3556                           
  3557                           ;main.c: 207:                 writeLCD(0,1,"DESCONECTAR BT  ");
  3558  030A  01AB               	clrf	writeLCD@y
  3559  030B  0AAB               	incf	writeLCD@y,f
  3560  030C  3077               	movlw	low (STR_123| (0+32768))
  3561  030D  00AC               	movwf	writeLCD@ptr
  3562  030E  3087               	movlw	high (STR_123| (0+32768))
  3563  030F  00AD               	movwf	writeLCD@ptr+1
  3564  0310  3000               	movlw	0
  3565  0311  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3566                           
  3567                           ;main.c: 208:                 if(bordaSubidaB1() || bordaSubidaB2()) aux = 301;
  3568  0316  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3569  031B  3A00               	xorlw	0
  3570  031C  1D03               	skipz
  3571  031D  2B26               	goto	l3773
  3572  031E  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  3573  0323  3A00               	xorlw	0
  3574  0324  1903               	skipnz
  3575  0325  2B2C               	goto	l3775
  3576  0326                     l3773:	
  3577  0326  302D               	movlw	45
  3578  0327  1283               	bcf	3,5	;RP0=0, select bank0
  3579  0328  1303               	bcf	3,6	;RP1=0, select bank0
  3580  0329  00C6               	movwf	main@aux
  3581  032A  3001               	movlw	1
  3582  032B  00C7               	movwf	main@aux+1
  3583  032C                     l3775:	
  3584                           
  3585                           ;main.c: 209:                 if(bordaSubidaB3()) aux = 306;
  3586  032C  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3587  0331  3A00               	xorlw	0
  3588  0332  1903               	skipnz
  3589  0333  2CD2               	goto	l3939
  3590  0334  3032               	movlw	50
  3591  0335  2CCD               	goto	L51
  3592  0336                     l3783:	
  3593                           ;main.c: 214:             case 305:
  3594                           
  3595                           ;main.c: 211:                 break;
  3596                           
  3597                           ;main.c: 210:                  if(B1() & B2()) aux = 30;
  3598                           
  3599                           
  3600                           ;main.c: 215:                 cmdLCD(0x01);
  3601  0336  3001               	movlw	1
  3602  0337  160A  118A  24A1  120A  118A  	fcall	_cmdLCD
  3603                           
  3604                           ;main.c: 216:                 writeLCD(0,0," PAREAR COM IP  ");
  3605  033C  1283               	bcf	3,5	;RP0=0, select bank0
  3606  033D  1303               	bcf	3,6	;RP1=0, select bank0
  3607  033E  01AB               	clrf	writeLCD@y
  3608  033F  3055               	movlw	low (STR_124| (0+32768))
  3609  0340  00AC               	movwf	writeLCD@ptr
  3610  0341  3087               	movlw	high (STR_124| (0+32768))
  3611  0342  00AD               	movwf	writeLCD@ptr+1
  3612  0343  3000               	movlw	0
  3613  0344  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3614                           
  3615                           ;main.c: 217:                 writeLCD(0,1,"1 2 3 4  5 6 7 8");
  3616  0349  1283               	bcf	3,5	;RP0=0, select bank0
  3617  034A  1303               	bcf	3,6	;RP1=0, select bank0
  3618  034B  01AB               	clrf	writeLCD@y
  3619  034C  0AAB               	incf	writeLCD@y,f
  3620  034D  3099               	movlw	low (STR_125| (0+32768))
  3621  034E  00AC               	movwf	writeLCD@ptr
  3622  034F  3087               	movlw	high (STR_125| (0+32768))
  3623  0350  00AD               	movwf	writeLCD@ptr+1
  3624  0351  3000               	movlw	0
  3625  0352  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3626                           
  3627                           ;main.c: 218:                 aux = 310;
  3628  0357  3036               	movlw	54
  3629  0358                     L37:	
  3630  0358  1283               	bcf	3,5	;RP0=0, select bank0
  3631  0359  1303               	bcf	3,6	;RP1=0, select bank0
  3632  035A  00C6               	movwf	main@aux
  3633  035B  3001               	movlw	1
  3634  035C  2D26               	goto	L34
  3635  035D                     l3791:	
  3636                           ;main.c: 221:             case 306:
  3637                           
  3638                           ;main.c: 219:                 break;
  3639                           
  3640                           
  3641                           ;main.c: 222:                 cmdLCD(0x01);
  3642  035D  3001               	movlw	1
  3643  035E  160A  118A  24A1  120A  118A  	fcall	_cmdLCD
  3644                           
  3645                           ;main.c: 223:                 writeLCD(0,0,"DESCONECTANDO   ");
  3646  0363  1283               	bcf	3,5	;RP0=0, select bank0
  3647  0364  1303               	bcf	3,6	;RP1=0, select bank0
  3648  0365  01AB               	clrf	writeLCD@y
  3649  0366  3044               	movlw	low (STR_126| (0+32768))
  3650  0367  00AC               	movwf	writeLCD@ptr
  3651  0368  3087               	movlw	high (STR_126| (0+32768))
  3652  0369  00AD               	movwf	writeLCD@ptr+1
  3653  036A  3000               	movlw	0
  3654  036B  120A  158A  2209  120A  118A  	fcall	_writeLCD
  3655                           
  3656                           ;main.c: 225:                 _delay((unsigned long)((500)*(20000000/4000.0)));
  3657  0370  300D               	movlw	13
  3658  0371  1283               	bcf	3,5	;RP0=0, select bank0
  3659  0372  1303               	bcf	3,6	;RP1=0, select bank0
  3660  0373  00C0               	movwf	??_main+2
  3661  0374  30AF               	movlw	175
  3662  0375  00BF               	movwf	??_main+1
  3663  0376  30B5               	movlw	181
  3664  0377  00BE               	movwf	??_main
  3665  0378                     u2917:	
  3666  0378  0BBE               	decfsz	??_main,f
  3667  0379  2B78               	goto	u2917
  3668  037A  0BBF               	decfsz	??_main+1,f
  3669  037B  2B78               	goto	u2917
  3670  037C  0BC0               	decfsz	??_main+2,f
  3671  037D  2B78               	goto	u2917
  3672  037E  2B7F               	nop2
  3673  037F  2D21               	goto	L35
  3674  0380                     l3799:	
  3675                           ;main.c: 232:                 {;main.c: 233:                     case 0:
  3676                           
  3677                           ;main.c: 231:                 switch(a)
  3678                           
  3679                           ;main.c: 230:             case 310:
  3680                           
  3681                           ;main.c: 227:                 break;
  3682                           
  3683                           ;main.c: 226:                 aux = 3;
  3684                           
  3685                           
  3686                           ;main.c: 234:                         textSelection1();
  3687  0380  160A  118A  2611  120A  118A  	fcall	_textSelection1
  3688                           
  3689                           ;main.c: 235:                         if(bordaSubidaB1()) a=7;
  3690  0385  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3691  038A  3A00               	xorlw	0
  3692  038B  1903               	skipnz
  3693  038C  2B93               	goto	l3805
  3694  038D  3007               	movlw	7
  3695  038E  1283               	bcf	3,5	;RP0=0, select bank0
  3696  038F  1303               	bcf	3,6	;RP1=0, select bank0
  3697  0390  00BE               	movwf	??_main
  3698  0391  083E               	movf	??_main,w
  3699  0392  00C5               	movwf	main@a
  3700  0393                     l3805:	
  3701                           
  3702                           ;main.c: 236:                         if(bordaSubidaB2()) a=1;
  3703  0393  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  3704  0398  3A00               	xorlw	0
  3705  0399  1903               	skipnz
  3706  039A  2B9F               	goto	l3809
  3707  039B  1283               	bcf	3,5	;RP0=0, select bank0
  3708  039C  1303               	bcf	3,6	;RP1=0, select bank0
  3709  039D  01C5               	clrf	main@a
  3710  039E  0AC5               	incf	main@a,f
  3711  039F                     l3809:	
  3712                           
  3713                           ;main.c: 237:                         if(bordaSubidaB3()) aux = 311;
  3714  039F  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3715  03A4  3A00               	xorlw	0
  3716  03A5  1903               	skipnz
  3717  03A6  2CD2               	goto	l3939
  3718  03A7  3037               	movlw	55
  3719  03A8  2CCD               	goto	L51
  3720  03A9                     l3817:	
  3721                           ;main.c: 241:                     case 1:
  3722                           
  3723                           ;main.c: 239:                         break;
  3724                           
  3725                           ;main.c: 238:                         if(B1() & B2()) aux = 30;
  3726                           
  3727                           
  3728                           ;main.c: 242:                         textSelection2();
  3729  03A9  160A  118A  2674  120A  118A  	fcall	_textSelection2
  3730                           
  3731                           ;main.c: 243:                         if(bordaSubidaB1()) a=0;
  3732  03AE  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3733  03B3  3A00               	xorlw	0
  3734  03B4  1903               	skipnz
  3735  03B5  2BB9               	goto	l3823
  3736  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  3737  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  3738  03B8  01C5               	clrf	main@a
  3739  03B9                     l3823:	
  3740                           
  3741                           ;main.c: 244:                         if(bordaSubidaB2()) a=2;
  3742  03B9  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  3743  03BE  3A00               	xorlw	0
  3744  03BF  1903               	skipnz
  3745  03C0  2BC7               	goto	l3827
  3746  03C1  3002               	movlw	2
  3747  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  3748  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  3749  03C4  00BE               	movwf	??_main
  3750  03C5  083E               	movf	??_main,w
  3751  03C6  00C5               	movwf	main@a
  3752  03C7                     l3827:	
  3753                           
  3754                           ;main.c: 245:                         if(bordaSubidaB3()) aux = 312;
  3755  03C7  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3756  03CC  3A00               	xorlw	0
  3757  03CD  1903               	skipnz
  3758  03CE  2CD2               	goto	l3939
  3759  03CF  3038               	movlw	56
  3760  03D0  2CCD               	goto	L51
  3761  03D1                     l3835:	
  3762                           ;main.c: 249:                     case 2:
  3763                           
  3764                           ;main.c: 247:                         break;
  3765                           
  3766                           ;main.c: 246:                         if(B1() & B2()) aux = 30;
  3767                           
  3768                           
  3769                           ;main.c: 250:                         textSelection3();
  3770  03D1  160A  118A  26D7  120A  118A  	fcall	_textSelection3
  3771                           
  3772                           ;main.c: 251:                         if(bordaSubidaB1()) a=1;
  3773  03D6  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3774  03DB  3A00               	xorlw	0
  3775  03DC  1903               	skipnz
  3776  03DD  2BE2               	goto	l3841
  3777  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  3778  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  3779  03E0  01C5               	clrf	main@a
  3780  03E1  0AC5               	incf	main@a,f
  3781  03E2                     l3841:	
  3782                           
  3783                           ;main.c: 252:                         if(bordaSubidaB2()) a=3;
  3784  03E2  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  3785  03E7  3A00               	xorlw	0
  3786  03E8  1903               	skipnz
  3787  03E9  2BF0               	goto	l3845
  3788  03EA  3003               	movlw	3
  3789  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  3790  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  3791  03ED  00BE               	movwf	??_main
  3792  03EE  083E               	movf	??_main,w
  3793  03EF  00C5               	movwf	main@a
  3794  03F0                     l3845:	
  3795                           
  3796                           ;main.c: 253:                         if(bordaSubidaB3()) aux = 313;
  3797  03F0  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3798  03F5  3A00               	xorlw	0
  3799  03F6  1903               	skipnz
  3800  03F7  2CD2               	goto	l3939
  3801  03F8  3039               	movlw	57
  3802  03F9  2CCD               	goto	L51
  3803  03FA                     l3853:	
  3804                           ;main.c: 257:                     case 3:
  3805                           
  3806                           ;main.c: 255:                         break;
  3807                           
  3808                           ;main.c: 254:                         if(B1() & B2()) aux = 30;
  3809                           
  3810                           
  3811                           ;main.c: 258:                         textSelection4();
  3812  03FA  160A  118A  273A  120A  118A  	fcall	_textSelection4
  3813                           
  3814                           ;main.c: 259:                         if(bordaSubidaB1()) a=2;
  3815  03FF  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3816  0404  3A00               	xorlw	0
  3817  0405  1903               	skipnz
  3818  0406  2C0D               	goto	l3859
  3819  0407  3002               	movlw	2
  3820  0408  1283               	bcf	3,5	;RP0=0, select bank0
  3821  0409  1303               	bcf	3,6	;RP1=0, select bank0
  3822  040A  00BE               	movwf	??_main
  3823  040B  083E               	movf	??_main,w
  3824  040C  00C5               	movwf	main@a
  3825  040D                     l3859:	
  3826                           
  3827                           ;main.c: 260:                         if(bordaSubidaB2()) a=4;
  3828  040D  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  3829  0412  3A00               	xorlw	0
  3830  0413  1903               	skipnz
  3831  0414  2C1B               	goto	l3863
  3832  0415  3004               	movlw	4
  3833  0416  1283               	bcf	3,5	;RP0=0, select bank0
  3834  0417  1303               	bcf	3,6	;RP1=0, select bank0
  3835  0418  00BE               	movwf	??_main
  3836  0419  083E               	movf	??_main,w
  3837  041A  00C5               	movwf	main@a
  3838  041B                     l3863:	
  3839                           
  3840                           ;main.c: 261:                         if(bordaSubidaB3()) aux = 314;
  3841  041B  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3842  0420  3A00               	xorlw	0
  3843  0421  1903               	skipnz
  3844  0422  2CD2               	goto	l3939
  3845  0423  303A               	movlw	58
  3846  0424  2CCD               	goto	L51
  3847  0425                     l3871:	
  3848                           ;main.c: 265:                     case 4:
  3849                           
  3850                           ;main.c: 263:                         break;
  3851                           
  3852                           ;main.c: 262:                         if(B1() & B2()) aux = 30;
  3853                           
  3854                           
  3855                           ;main.c: 266:                         textSelection5();
  3856  0425  160A  118A  279D  120A  118A  	fcall	_textSelection5
  3857                           
  3858                           ;main.c: 267:                         if(bordaSubidaB1()) a=3;
  3859  042A  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3860  042F  3A00               	xorlw	0
  3861  0430  1903               	skipnz
  3862  0431  2C38               	goto	l3877
  3863  0432  3003               	movlw	3
  3864  0433  1283               	bcf	3,5	;RP0=0, select bank0
  3865  0434  1303               	bcf	3,6	;RP1=0, select bank0
  3866  0435  00BE               	movwf	??_main
  3867  0436  083E               	movf	??_main,w
  3868  0437  00C5               	movwf	main@a
  3869  0438                     l3877:	
  3870                           
  3871                           ;main.c: 268:                         if(bordaSubidaB2()) a=5;
  3872  0438  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  3873  043D  3A00               	xorlw	0
  3874  043E  1903               	skipnz
  3875  043F  2C46               	goto	l3881
  3876  0440  3005               	movlw	5
  3877  0441  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0442  1303               	bcf	3,6	;RP1=0, select bank0
  3879  0443  00BE               	movwf	??_main
  3880  0444  083E               	movf	??_main,w
  3881  0445  00C5               	movwf	main@a
  3882  0446                     l3881:	
  3883                           
  3884                           ;main.c: 269:                         if(bordaSubidaB3()) aux = 315;
  3885  0446  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3886  044B  3A00               	xorlw	0
  3887  044C  1903               	skipnz
  3888  044D  2CD2               	goto	l3939
  3889  044E  303B               	movlw	59
  3890  044F  2CCD               	goto	L51
  3891  0450                     l3889:	
  3892                           ;main.c: 273:                     case 5:
  3893                           
  3894                           ;main.c: 271:                         break;
  3895                           
  3896                           ;main.c: 270:                         if(B1() & B2()) aux = 30;
  3897                           
  3898                           
  3899                           ;main.c: 274:                         textSelection6();
  3900  0450  120A  158A  223B  120A  118A  	fcall	_textSelection6
  3901                           
  3902                           ;main.c: 275:                         if(bordaSubidaB1()) a=4;
  3903  0455  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3904  045A  3A00               	xorlw	0
  3905  045B  1903               	skipnz
  3906  045C  2C63               	goto	l3895
  3907  045D  3004               	movlw	4
  3908  045E  1283               	bcf	3,5	;RP0=0, select bank0
  3909  045F  1303               	bcf	3,6	;RP1=0, select bank0
  3910  0460  00BE               	movwf	??_main
  3911  0461  083E               	movf	??_main,w
  3912  0462  00C5               	movwf	main@a
  3913  0463                     l3895:	
  3914                           
  3915                           ;main.c: 276:                         if(bordaSubidaB2()) a=6;
  3916  0463  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  3917  0468  3A00               	xorlw	0
  3918  0469  1903               	skipnz
  3919  046A  2C71               	goto	l3899
  3920  046B  3006               	movlw	6
  3921  046C  1283               	bcf	3,5	;RP0=0, select bank0
  3922  046D  1303               	bcf	3,6	;RP1=0, select bank0
  3923  046E  00BE               	movwf	??_main
  3924  046F  083E               	movf	??_main,w
  3925  0470  00C5               	movwf	main@a
  3926  0471                     l3899:	
  3927                           
  3928                           ;main.c: 277:                         if(bordaSubidaB3()) aux = 316;
  3929  0471  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3930  0476  3A00               	xorlw	0
  3931  0477  1903               	skipnz
  3932  0478  2CD2               	goto	l3939
  3933  0479  303C               	movlw	60
  3934  047A  2CCD               	goto	L51
  3935  047B                     l3907:	
  3936                           ;main.c: 281:                     case 6:
  3937                           
  3938                           ;main.c: 279:                         break;
  3939                           
  3940                           ;main.c: 278:                         if(B1() & B2()) aux = 30;
  3941                           
  3942                           
  3943                           ;main.c: 282:                         textSelection7();
  3944  047B  120A  158A  229E  120A  118A  	fcall	_textSelection7
  3945                           
  3946                           ;main.c: 283:                         if(bordaSubidaB1()) a=5;
  3947  0480  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3948  0485  3A00               	xorlw	0
  3949  0486  1903               	skipnz
  3950  0487  2C8E               	goto	l3913
  3951  0488  3005               	movlw	5
  3952  0489  1283               	bcf	3,5	;RP0=0, select bank0
  3953  048A  1303               	bcf	3,6	;RP1=0, select bank0
  3954  048B  00BE               	movwf	??_main
  3955  048C  083E               	movf	??_main,w
  3956  048D  00C5               	movwf	main@a
  3957  048E                     l3913:	
  3958                           
  3959                           ;main.c: 284:                         if(bordaSubidaB2()) a=7;
  3960  048E  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  3961  0493  3A00               	xorlw	0
  3962  0494  1903               	skipnz
  3963  0495  2C9C               	goto	l3917
  3964  0496  3007               	movlw	7
  3965  0497  1283               	bcf	3,5	;RP0=0, select bank0
  3966  0498  1303               	bcf	3,6	;RP1=0, select bank0
  3967  0499  00BE               	movwf	??_main
  3968  049A  083E               	movf	??_main,w
  3969  049B  00C5               	movwf	main@a
  3970  049C                     l3917:	
  3971                           
  3972                           ;main.c: 285:                         if(bordaSubidaB3()) aux = 317;
  3973  049C  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  3974  04A1  3A00               	xorlw	0
  3975  04A2  1903               	skipnz
  3976  04A3  2CD2               	goto	l3939
  3977  04A4  303D               	movlw	61
  3978  04A5  2CCD               	goto	L51
  3979  04A6                     l3925:	
  3980                           ;main.c: 289:                     case 7:
  3981                           
  3982                           ;main.c: 287:                         break;
  3983                           
  3984                           ;main.c: 286:                         if(B1() & B2()) aux = 30;
  3985                           
  3986                           
  3987                           ;main.c: 290:                         textSelection8();
  3988  04A6  120A  118A  2599  120A  118A  	fcall	_textSelection8
  3989                           
  3990                           ;main.c: 291:                         if(bordaSubidaB1()) a=6;
  3991  04AB  160A  118A  20AF  120A  118A  	fcall	_bordaSubidaB1
  3992  04B0  3A00               	xorlw	0
  3993  04B1  1903               	skipnz
  3994  04B2  2CB9               	goto	l3931
  3995  04B3  3006               	movlw	6
  3996  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  3997  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  3998  04B6  00BE               	movwf	??_main
  3999  04B7  083E               	movf	??_main,w
  4000  04B8  00C5               	movwf	main@a
  4001  04B9                     l3931:	
  4002                           
  4003                           ;main.c: 292:                         if(bordaSubidaB2()) a=0;
  4004  04B9  160A  118A  20C9  120A  118A  	fcall	_bordaSubidaB2
  4005  04BE  3A00               	xorlw	0
  4006  04BF  1903               	skipnz
  4007  04C0  2CC4               	goto	l3935
  4008  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  4009  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  4010  04C3  01C5               	clrf	main@a
  4011  04C4                     l3935:	
  4012                           
  4013                           ;main.c: 293:                         if(bordaSubidaB3()) aux = 318;
  4014  04C4  160A  118A  20E3  120A  118A  	fcall	_bordaSubidaB3
  4015  04C9  3A00               	xorlw	0
  4016  04CA  1903               	skipnz
  4017  04CB  2CD2               	goto	l3939
  4018  04CC  303E               	movlw	62
  4019  04CD                     L51:	
  4020  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  4021  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  4022  04CF  00C6               	movwf	main@aux
  4023  04D0  3001               	movlw	1
  4024  04D1  00C7               	movwf	main@aux+1
  4025  04D2                     l3939:	
  4026                           
  4027                           ;main.c: 294:                         if(B1() & B2()) aux = 30;
  4028  04D2  160A  158A  27EB  120A  118A  	fcall	_B2
  4029  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  4030  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  4031  04D9  00BE               	movwf	??_main
  4032  04DA  160A  158A  27DB  120A  118A  	fcall	_B1
  4033  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  4034  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  4035  04E1  053E               	andwf	??_main,w
  4036  04E2  1903               	btfsc	3,2
  4037  04E3  2D31               	goto	l4017
  4038  04E4  301E               	movlw	30
  4039  04E5  2D24               	goto	L36
  4040  04E6                     l3945:	
  4041                           ;main.c: 296:                 }
  4042                           
  4043                           ;main.c: 295:                         break;
  4044                           
  4045  04E6  0845               	movf	main@a,w
  4046  04E7  00BE               	movwf	??_main
  4047  04E8  01BF               	clrf	??_main+1
  4048                           
  4049                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4050                           ; Switch size 1, requested type "space"
  4051                           ; Number of cases is 1, Range of values is 0 to 0
  4052                           ; switch strategies available:
  4053                           ; Name         Instructions Cycles
  4054                           ; simple_byte            4     3 (average)
  4055                           ; direct_byte           11     8 (fixed)
  4056                           ; jumptable            260     6 (fixed)
  4057                           ;	Chosen strategy is simple_byte
  4058  04E9  083F               	movf	??_main+1,w
  4059  04EA  3A00               	xorlw	0	; case 0
  4060  04EB  1903               	skipnz
  4061  04EC  2CEE               	goto	l4177
  4062  04ED  2D31               	goto	l4017
  4063  04EE                     l4177:	
  4064                           
  4065                           ; Switch size 1, requested type "space"
  4066                           ; Number of cases is 8, Range of values is 0 to 7
  4067                           ; switch strategies available:
  4068                           ; Name         Instructions Cycles
  4069                           ; simple_byte           25    13 (average)
  4070                           ; direct_byte           32     8 (fixed)
  4071                           ; jumptable            260     6 (fixed)
  4072                           ;	Chosen strategy is simple_byte
  4073  04EE  083E               	movf	??_main,w
  4074  04EF  3A00               	xorlw	0	; case 0
  4075  04F0  1903               	skipnz
  4076  04F1  2B80               	goto	l3799
  4077  04F2  3A01               	xorlw	1	; case 1
  4078  04F3  1903               	skipnz
  4079  04F4  2BA9               	goto	l3817
  4080  04F5  3A03               	xorlw	3	; case 2
  4081  04F6  1903               	skipnz
  4082  04F7  2BD1               	goto	l3835
  4083  04F8  3A01               	xorlw	1	; case 3
  4084  04F9  1903               	skipnz
  4085  04FA  2BFA               	goto	l3853
  4086  04FB  3A07               	xorlw	7	; case 4
  4087  04FC  1903               	skipnz
  4088  04FD  2C25               	goto	l3871
  4089  04FE  3A01               	xorlw	1	; case 5
  4090  04FF  1903               	skipnz
  4091  0500  2C50               	goto	l3889
  4092  0501  3A03               	xorlw	3	; case 6
  4093  0502  1903               	skipnz
  4094  0503  2C7B               	goto	l3907
  4095  0504  3A01               	xorlw	1	; case 7
  4096  0505  1903               	skipnz
  4097  0506  2CA6               	goto	l3925
  4098  0507  2D31               	goto	l4017
  4099                           
  4100                           ;main.c: 297:                 break;
  4101  0508  2D31               	goto	l4017
  4102  0509                     l3947:	
  4103                           ;main.c: 299:             case 311:
  4104                           
  4105  0509                     l3955:	
  4106                           ;main.c: 307:             case 312:
  4107                           
  4108                           ;main.c: 305:                 break;
  4109                           
  4110                           ;main.c: 304:                 aux = 3;
  4111                           
  4112                           ;main.c: 303:                 textLoading();
  4113                           
  4114                           ;main.c: 301:                 writeLCD(0,0," Enviando ");
  4115                           
  4116                           ;main.c: 300:                 cmdLCD(0x01);
  4117                           
  4118  0509                     l3963:	
  4119                           ;main.c: 315:             case 313:
  4120                           
  4121                           ;main.c: 313:                 break;
  4122                           
  4123                           ;main.c: 312:                 aux = 3;
  4124                           
  4125                           ;main.c: 311:                 textLoading();
  4126                           
  4127                           ;main.c: 309:                 writeLCD(0,0," Enviando ");
  4128                           
  4129                           ;main.c: 308:                 cmdLCD(0x01);
  4130                           
  4131  0509                     l3971:	
  4132                           ;main.c: 323:             case 314:
  4133                           
  4134                           ;main.c: 321:                 break;
  4135                           
  4136                           ;main.c: 320:                 aux = 3;
  4137                           
  4138                           ;main.c: 319:                 textLoading();
  4139                           
  4140                           ;main.c: 317:                 writeLCD(0,0," Enviando ");
  4141                           
  4142                           ;main.c: 316:                 cmdLCD(0x01);
  4143                           
  4144  0509                     l3979:	
  4145                           ;main.c: 331:             case 315:
  4146                           
  4147                           ;main.c: 329:                 break;
  4148                           
  4149                           ;main.c: 328:                 aux = 3;
  4150                           
  4151                           ;main.c: 327:                 textLoading();
  4152                           
  4153                           ;main.c: 325:                 writeLCD(0,0," Enviando ");
  4154                           
  4155                           ;main.c: 324:                 cmdLCD(0x01);
  4156                           
  4157  0509                     l3987:	
  4158                           ;main.c: 339:             case 316:
  4159                           
  4160                           ;main.c: 337:                 break;
  4161                           
  4162                           ;main.c: 336:                 aux = 3;
  4163                           
  4164                           ;main.c: 335:                 textLoading();
  4165                           
  4166                           ;main.c: 333:                 writeLCD(0,0," Enviando ");
  4167                           
  4168                           ;main.c: 332:                 cmdLCD(0x01);
  4169                           
  4170  0509                     l3995:	
  4171                           ;main.c: 347:             case 317:
  4172                           
  4173                           ;main.c: 345:                 break;
  4174                           
  4175                           ;main.c: 344:                 aux = 3;
  4176                           
  4177                           ;main.c: 343:                 textLoading();
  4178                           
  4179                           ;main.c: 341:                 writeLCD(0,0," Enviando ");
  4180                           
  4181                           ;main.c: 340:                 cmdLCD(0x01);
  4182                           
  4183  0509                     l4003:	
  4184                           ;main.c: 355:                 case 318:
  4185                           
  4186                           ;main.c: 353:                 break;
  4187                           
  4188                           ;main.c: 352:                 aux = 3;
  4189                           
  4190                           ;main.c: 351:                 textLoading();
  4191                           
  4192                           ;main.c: 349:                 writeLCD(0,0," Enviando ");
  4193                           
  4194                           ;main.c: 348:                 cmdLCD(0x01);
  4195                           
  4196                           
  4197                           ;main.c: 356:                 cmdLCD(0x01);
  4198  0509  3001               	movlw	1
  4199  050A  160A  118A  24A1  120A  118A  	fcall	_cmdLCD
  4200                           
  4201                           ;main.c: 357:                 writeLCD(0,0," Enviando ");
  4202  050F  1283               	bcf	3,5	;RP0=0, select bank0
  4203  0510  1303               	bcf	3,6	;RP1=0, select bank0
  4204  0511  01AB               	clrf	writeLCD@y
  4205  0512  30A0               	movlw	low (STR_111| (0+32768))
  4206  0513  00AC               	movwf	writeLCD@ptr
  4207  0514  3089               	movlw	high (STR_111| (0+32768))
  4208  0515  00AD               	movwf	writeLCD@ptr+1
  4209  0516  3000               	movlw	0
  4210  0517  120A  158A  2209  120A  118A  	fcall	_writeLCD
  4211                           
  4212                           ;main.c: 359:                 textLoading();
  4213  051C  120A  158A  2506  120A  118A  	fcall	_textLoading
  4214  0521                     L35:	
  4215                           
  4216                           ;main.c: 360:                 aux = 3;
  4217  0521  3003               	movlw	3
  4218  0522                     L45:	
  4219  0522  1283               	bcf	3,5	;RP0=0, select bank0
  4220  0523  1303               	bcf	3,6	;RP1=0, select bank0
  4221  0524                     L36:	
  4222  0524  00C6               	movwf	main@aux
  4223  0525  3000               	movlw	0
  4224  0526                     L34:	
  4225  0526  00C7               	movwf	main@aux+1
  4226                           
  4227                           ;main.c: 361:                 break;
  4228  0527  2D31               	goto	l4017
  4229  0528                     l4011:	
  4230                           ;main.c: 365:             case 666:
  4231                           
  4232                           
  4233                           ;main.c: 366:                 easterEgg();
  4234  0528  120A  158A  2603  120A  118A  	fcall	_easterEgg
  4235                           
  4236                           ;main.c: 367:                 aux = 0;
  4237  052D  1283               	bcf	3,5	;RP0=0, select bank0
  4238  052E  1303               	bcf	3,6	;RP1=0, select bank0
  4239  052F  01C6               	clrf	main@aux
  4240  0530  01C7               	clrf	main@aux+1
  4241  0531                     l4017:	
  4242                           ;main.c: 369:         }
  4243                           
  4244                           ;main.c: 368:                 break;
  4245                           
  4246                           
  4247                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  4248                           ; Switch size 1, requested type "space"
  4249                           ; Number of cases is 3, Range of values is 0 to 2
  4250                           ; switch strategies available:
  4251                           ; Name         Instructions Cycles
  4252                           ; simple_byte           10     6 (average)
  4253                           ; direct_byte           17     8 (fixed)
  4254                           ; jumptable            260     6 (fixed)
  4255                           ;	Chosen strategy is simple_byte
  4256  0531  1283               	bcf	3,5	;RP0=0, select bank0
  4257  0532  1303               	bcf	3,6	;RP1=0, select bank0
  4258  0533  0847               	movf	main@aux+1,w
  4259  0534  3A00               	xorlw	0	; case 0
  4260  0535  1903               	skipnz
  4261  0536  2D3E               	goto	l4179
  4262  0537  3A01               	xorlw	1	; case 1
  4263  0538  1903               	skipnz
  4264  0539  2D67               	goto	l4181
  4265  053A  3A03               	xorlw	3	; case 2
  4266  053B  1903               	skipnz
  4267  053C  2D93               	goto	l4183
  4268  053D  2D31               	goto	l4017
  4269  053E                     l4179:	
  4270                           
  4271                           ; Switch size 1, requested type "space"
  4272                           ; Number of cases is 13, Range of values is 0 to 210
  4273                           ; switch strategies available:
  4274                           ; Name         Instructions Cycles
  4275                           ; simple_byte           40    21 (average)
  4276                           ; jumptable            260     6 (fixed)
  4277                           ;	Chosen strategy is simple_byte
  4278  053E  0846               	movf	main@aux,w
  4279  053F  3A00               	xorlw	0	; case 0
  4280  0540  1903               	skipnz
  4281  0541  2851               	goto	l3575
  4282  0542  3A01               	xorlw	1	; case 1
  4283  0543  1903               	skipnz
  4284  0544  2857               	goto	l3579
  4285  0545  3A03               	xorlw	3	; case 2
  4286  0546  1903               	skipnz
  4287  0547  285E               	goto	l3583
  4288  0548  3A01               	xorlw	1	; case 3
  4289  0549  1903               	skipnz
  4290  054A  2865               	goto	l3587
  4291  054B  3A09               	xorlw	9	; case 10
  4292  054C  1903               	skipnz
  4293  054D  286C               	goto	l3591
  4294  054E  3A1E               	xorlw	30	; case 20
  4295  054F  1903               	skipnz
  4296  0550  2892               	goto	l3603
  4297  0551  3A0A               	xorlw	10	; case 30
  4298  0552  1903               	skipnz
  4299  0553  28B8               	goto	l3615
  4300  0554  3A7A               	xorlw	122	; case 100
  4301  0555  1903               	skipnz
  4302  0556  28F8               	goto	l3631
  4303  0557  3A0A               	xorlw	10	; case 110
  4304  0558  1903               	skipnz
  4305  0559  2968               	goto	l3669
  4306  055A  3A01               	xorlw	1	; case 111
  4307  055B  1903               	skipnz
  4308  055C  2979               	goto	l3671
  4309  055D  3A1F               	xorlw	31	; case 112
  4310  055E  1903               	skipnz
  4311  055F  29A0               	goto	l3683
  4312  0560  3AB8               	xorlw	184	; case 200
  4313  0561  1903               	skipnz
  4314  0562  29CD               	goto	l3695
  4315  0563  3A1A               	xorlw	26	; case 210
  4316  0564  1903               	skipnz
  4317  0565  29F0               	goto	l3703
  4318  0566  2D31               	goto	l4017
  4319  0567                     l4181:	
  4320                           
  4321                           ; Switch size 1, requested type "space"
  4322                           ; Number of cases is 14, Range of values is 44 to 62
  4323                           ; switch strategies available:
  4324                           ; Name         Instructions Cycles
  4325                           ; simple_byte           43    22 (average)
  4326                           ; direct_byte           68    11 (fixed)
  4327                           ; jumptable            263     9 (fixed)
  4328                           ;	Chosen strategy is simple_byte
  4329  0567  0846               	movf	main@aux,w
  4330  0568  3A2C               	xorlw	44	; case 44
  4331  0569  1903               	skipnz
  4332  056A  2AC9               	goto	l3745
  4333  056B  3A01               	xorlw	1	; case 45
  4334  056C  1903               	skipnz
  4335  056D  2ADE               	goto	l3751
  4336  056E  3A03               	xorlw	3	; case 46
  4337  056F  1903               	skipnz
  4338  0570  2B0A               	goto	l3767
  4339  0571  3A1F               	xorlw	31	; case 49
  4340  0572  1903               	skipnz
  4341  0573  2B36               	goto	l3783
  4342  0574  3A03               	xorlw	3	; case 50
  4343  0575  1903               	skipnz
  4344  0576  2B5D               	goto	l3791
  4345  0577  3A04               	xorlw	4	; case 54
  4346  0578  1903               	skipnz
  4347  0579  2CE6               	goto	l3945
  4348  057A  3A01               	xorlw	1	; case 55
  4349  057B  1903               	skipnz
  4350  057C  2D09               	goto	l3947
  4351  057D  3A0F               	xorlw	15	; case 56
  4352  057E  1903               	skipnz
  4353  057F  2D09               	goto	l3955
  4354  0580  3A01               	xorlw	1	; case 57
  4355  0581  1903               	skipnz
  4356  0582  2D09               	goto	l3963
  4357  0583  3A03               	xorlw	3	; case 58
  4358  0584  1903               	skipnz
  4359  0585  2D09               	goto	l3971
  4360  0586  3A01               	xorlw	1	; case 59
  4361  0587  1903               	skipnz
  4362  0588  2D09               	goto	l3979
  4363  0589  3A07               	xorlw	7	; case 60
  4364  058A  1903               	skipnz
  4365  058B  2D09               	goto	l3987
  4366  058C  3A01               	xorlw	1	; case 61
  4367  058D  1903               	skipnz
  4368  058E  2D09               	goto	l3995
  4369  058F  3A03               	xorlw	3	; case 62
  4370  0590  1903               	skipnz
  4371  0591  2D09               	goto	l4003
  4372  0592  2D31               	goto	l4017
  4373  0593                     l4183:	
  4374                           
  4375                           ; Switch size 1, requested type "space"
  4376                           ; Number of cases is 1, Range of values is 154 to 154
  4377                           ; switch strategies available:
  4378                           ; Name         Instructions Cycles
  4379                           ; simple_byte            4     3 (average)
  4380                           ; direct_byte           14    11 (fixed)
  4381                           ; jumptable            263     9 (fixed)
  4382                           ;	Chosen strategy is simple_byte
  4383  0593  0846               	movf	main@aux,w
  4384  0594  3A9A               	xorlw	154	; case 154
  4385  0595  1903               	skipnz
  4386  0596  2D28               	goto	l4011
  4387  0597  2D31               	goto	l4017
  4388                           
  4389                           ;main.c: 370:     }
  4390  0598  2D31               	goto	l4017
  4391  0599                     __end_of_main:	
  4392                           
  4393                           	psect	text1
  4394  1325                     __ptext1:	
  4395 ;; *************** function _transmite *****************
  4396 ;; Defined at:
  4397 ;;		line 83 in file "Serial.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;		None
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;		None
  4402 ;; Return value:  Size  Location     Type
  4403 ;;                  1    wreg      void 
  4404 ;; Registers used:
  4405 ;;		wreg, status,2, status,0, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4411 ;;      Params:         0       0       0       0       0
  4412 ;;      Locals:         0       0       0       0       0
  4413 ;;      Temps:          0       2       0       0       0
  4414 ;;      Totals:         0       2       0       0       0
  4415 ;;Total ram usage:        2 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    5
  4418 ;; This function calls:
  4419 ;;		_hexToAscii
  4420 ;;		_serialIn
  4421 ;;		_writeEUSART
  4422 ;; This function is called by:
  4423 ;;		_main
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           
  4428                           ;psect for function _transmite
  4429  1325                     _transmite:	
  4430                           
  4431                           ;Serial.c: 85:     serial = serialIn();
  4432                           
  4433                           ;incstack = 0
  4434                           ; Regs used in _transmite: [wreg+status,2+status,0+pclath+cstack]
  4435  1325  160A  118A  2096  160A  118A  	fcall	_serialIn
  4436  132A  1283               	bcf	3,5	;RP0=0, select bank0
  4437  132B  1303               	bcf	3,6	;RP1=0, select bank0
  4438  132C  00A7               	movwf	??_transmite
  4439  132D  0827               	movf	??_transmite,w
  4440  132E  00D0               	movwf	_serial
  4441                           
  4442                           ;Serial.c: 86:     _delay((unsigned long)((10)*(20000000/4000.0)));
  4443  132F  3041               	movlw	65
  4444  1330  1283               	bcf	3,5	;RP0=0, select bank0
  4445  1331  1303               	bcf	3,6	;RP1=0, select bank0
  4446  1332  00A8               	movwf	??_transmite+1
  4447  1333  30ED               	movlw	237
  4448  1334  00A7               	movwf	??_transmite
  4449  1335                     u2927:	
  4450  1335  0BA7               	decfsz	??_transmite,f
  4451  1336  2B35               	goto	u2927
  4452  1337  0BA8               	decfsz	??_transmite+1,f
  4453  1338  2B35               	goto	u2927
  4454  1339  2B3A               	nop2
  4455                           
  4456                           ;Serial.c: 87:     if(serial != comp)
  4457  133A  1283               	bcf	3,5	;RP0=0, select bank0
  4458  133B  1303               	bcf	3,6	;RP1=0, select bank0
  4459  133C  0850               	movf	_serial,w
  4460  133D  0651               	xorwf	_comp,w
  4461  133E  1903               	skipnz
  4462  133F  0008               	return
  4463                           
  4464                           ;Serial.c: 88:     {;Serial.c: 89:         hexToAscii(serialIn());
  4465  1340  160A  118A  2096  160A  118A  	fcall	_serialIn
  4466  1345  160A  118A  2294  160A  118A  	fcall	_hexToAscii
  4467                           
  4468                           ;Serial.c: 90:         writeEUSART(tdez);
  4469  134A  1283               	bcf	3,5	;RP0=0, select bank0
  4470  134B  1303               	bcf	3,6	;RP1=0, select bank0
  4471  134C  0852               	movf	_tdez,w
  4472  134D  160A  158A  27E5  160A  118A  	fcall	_writeEUSART
  4473                           
  4474                           ;Serial.c: 91:         writeEUSART(tuni);
  4475  1352  1283               	bcf	3,5	;RP0=0, select bank0
  4476  1353  1303               	bcf	3,6	;RP1=0, select bank0
  4477  1354  0853               	movf	_tuni,w
  4478  1355  160A  158A  27E5   	fcall	_writeEUSART
  4479                           
  4480                           ;Serial.c: 92:         comp = serial;
  4481  1358  1283               	bcf	3,5	;RP0=0, select bank0
  4482  1359  1303               	bcf	3,6	;RP1=0, select bank0
  4483  135A  0850               	movf	_serial,w
  4484  135B  00A7               	movwf	??_transmite
  4485  135C  0827               	movf	??_transmite,w
  4486  135D  00D1               	movwf	_comp
  4487  135E  0008               	return
  4488  135F                     __end_of_transmite:	
  4489                           ;Serial.c: 93:     }
  4490                           
  4491                           
  4492                           	psect	text2
  4493  1096                     __ptext2:	
  4494 ;; *************** function _serialIn *****************
  4495 ;; Defined at:
  4496 ;;		line 40 in file "Serial.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;		None
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  i               1    5[BANK0 ] unsigned char 
  4501 ;;  dado            1    4[BANK0 ] unsigned char 
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  1    wreg      unsigned char 
  4504 ;; Registers used:
  4505 ;;		wreg, status,2, status,0
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4511 ;;      Params:         0       0       0       0       0
  4512 ;;      Locals:         0       2       0       0       0
  4513 ;;      Temps:          0       1       0       0       0
  4514 ;;      Totals:         0       3       0       0       0
  4515 ;;Total ram usage:        3 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    4
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_transmite
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           
  4526                           ;psect for function _serialIn
  4527  1096                     _serialIn:	
  4528                           
  4529                           ;Serial.c: 42:     unsigned char i = 0x80;
  4530                           
  4531                           ;incstack = 0
  4532                           ; Regs used in _serialIn: [wreg+status,2+status,0]
  4533  1096  3080               	movlw	128
  4534  1097  1283               	bcf	3,5	;RP0=0, select bank0
  4535  1098  1303               	bcf	3,6	;RP1=0, select bank0
  4536  1099  00A3               	movwf	??_serialIn
  4537  109A  0823               	movf	??_serialIn,w
  4538  109B  00A5               	movwf	serialIn@i
  4539                           
  4540                           ;Serial.c: 43:     unsigned char dado = 0;
  4541  109C  01A4               	clrf	serialIn@dado
  4542                           
  4543                           ;Serial.c: 44:     PORTBbits.RB3 = 0;
  4544  109D  1186               	bcf	6,3	;volatile
  4545                           
  4546                           ;Serial.c: 45:     PORTBbits.RB3 = 1;
  4547  109E  1586               	bsf	6,3	;volatile
  4548  109F                     l2831:	
  4549                           ;Serial.c: 53:     }
  4550                           
  4551                           ;Serial.c: 46:     while (i)
  4552                           
  4553                           
  4554                           ;Serial.c: 46:     while (i)
  4555  109F  0825               	movf	serialIn@i,w
  4556  10A0  1903               	btfsc	3,2
  4557  10A1  28AD               	goto	l2833
  4558                           
  4559                           ;Serial.c: 47:     {;Serial.c: 48:         PORTBbits.RB2 = 0;
  4560  10A2  1106               	bcf	6,2	;volatile
  4561                           
  4562                           ;Serial.c: 49:         if(PORTBbits.RB1)
  4563  10A3  1C86               	btfss	6,1	;volatile
  4564  10A4  28A9               	goto	l2827
  4565                           
  4566                           ;Serial.c: 50:             dado |=i;
  4567  10A5  0825               	movf	serialIn@i,w
  4568  10A6  00A3               	movwf	??_serialIn
  4569  10A7  0823               	movf	??_serialIn,w
  4570  10A8  04A4               	iorwf	serialIn@dado,f
  4571  10A9                     l2827:	
  4572                           
  4573                           ;Serial.c: 51:         i >>=1;
  4574  10A9  1003               	clrc
  4575  10AA  0CA5               	rrf	serialIn@i,f
  4576                           
  4577                           ;Serial.c: 52:         PORTBbits.RB2 = 1;
  4578  10AB  1506               	bsf	6,2	;volatile
  4579  10AC  289F               	goto	l2831
  4580  10AD                     l2833:	
  4581                           
  4582                           ;Serial.c: 54:     return(dado);
  4583  10AD  0824               	movf	serialIn@dado,w
  4584  10AE  0008               	return
  4585  10AF                     __end_of_serialIn:	
  4586                           
  4587                           	psect	text3
  4588  1294                     __ptext3:	
  4589 ;; *************** function _hexToAscii *****************
  4590 ;; Defined at:
  4591 ;;		line 57 in file "Serial.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;  dado            1    wreg     unsigned char 
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;  dado            1    4[BANK0 ] unsigned char 
  4596 ;;  dez             1    6[BANK0 ] unsigned char 
  4597 ;;  uni             1    5[BANK0 ] unsigned char 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      void 
  4600 ;; Registers used:
  4601 ;;		wreg, status,2, status,0
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4607 ;;      Params:         0       0       0       0       0
  4608 ;;      Locals:         0       3       0       0       0
  4609 ;;      Temps:          0       1       0       0       0
  4610 ;;      Totals:         0       4       0       0       0
  4611 ;;Total ram usage:        4 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    4
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_transmite
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           
  4622                           ;psect for function _hexToAscii
  4623  1294                     _hexToAscii:	
  4624                           
  4625                           ;incstack = 0
  4626                           ; Regs used in _hexToAscii: [wreg+status,2+status,0]
  4627                           ;hexToAscii@dado stored from wreg
  4628  1294  1283               	bcf	3,5	;RP0=0, select bank0
  4629  1295  1303               	bcf	3,6	;RP1=0, select bank0
  4630  1296  00A4               	movwf	hexToAscii@dado
  4631                           
  4632                           ;Serial.c: 57: void hexToAscii (char dado);Serial.c: 58: {;Serial.c: 59:     char dez;;S
      +                          erial.c: 60:     char uni;;Serial.c: 62:     uni = dado & 0x0F;
  4633  1297  0824               	movf	hexToAscii@dado,w
  4634  1298  390F               	andlw	15
  4635  1299  00A3               	movwf	??_hexToAscii
  4636  129A  0823               	movf	??_hexToAscii,w
  4637  129B  00A5               	movwf	hexToAscii@uni
  4638                           
  4639                           ;Serial.c: 63:     dez = dado & 0xF0;
  4640  129C  0824               	movf	hexToAscii@dado,w
  4641  129D  39F0               	andlw	240
  4642  129E  00A3               	movwf	??_hexToAscii
  4643  129F  0823               	movf	??_hexToAscii,w
  4644  12A0  00A6               	movwf	hexToAscii@dez
  4645                           
  4646                           ;Serial.c: 64:     dez >>= 4 ;
  4647  12A1  0EA6               	swapf	hexToAscii@dez,f
  4648  12A2  300F               	movlw	15
  4649  12A3  05A6               	andwf	hexToAscii@dez,f
  4650                           
  4651                           ;Serial.c: 66:     if (uni > 0x09)
  4652  12A4  300A               	movlw	10
  4653  12A5  0225               	subwf	hexToAscii@uni,w
  4654  12A6  1C03               	skipc
  4655  12A7  2AAA               	goto	l2845
  4656                           
  4657                           ;Serial.c: 67:         uni += 0x37;
  4658  12A8  3037               	movlw	55
  4659  12A9  2AAB               	goto	L52
  4660  12AA                     l2845:	
  4661                           ;Serial.c: 68:     else
  4662                           
  4663                           
  4664                           ;Serial.c: 69:         uni += 0x30;
  4665  12AA  3030               	movlw	48
  4666  12AB                     L52:	
  4667  12AB  00A3               	movwf	??_hexToAscii
  4668  12AC  0823               	movf	??_hexToAscii,w
  4669  12AD  07A5               	addwf	hexToAscii@uni,f
  4670                           
  4671                           ;Serial.c: 71:     if (dez > 0x09)
  4672  12AE  300A               	movlw	10
  4673  12AF  0226               	subwf	hexToAscii@dez,w
  4674  12B0  1C03               	skipc
  4675  12B1  2AB4               	goto	l2851
  4676                           
  4677                           ;Serial.c: 72:         dez += 0x37;
  4678  12B2  3037               	movlw	55
  4679  12B3  2AB5               	goto	L53
  4680  12B4                     l2851:	
  4681                           ;Serial.c: 73:     else
  4682                           
  4683                           
  4684                           ;Serial.c: 74:         dez += 0x30;
  4685  12B4  3030               	movlw	48
  4686  12B5                     L53:	
  4687  12B5  00A3               	movwf	??_hexToAscii
  4688  12B6  0823               	movf	??_hexToAscii,w
  4689  12B7  07A6               	addwf	hexToAscii@dez,f
  4690                           
  4691                           ;Serial.c: 76:     tdez = dez;
  4692  12B8  0826               	movf	hexToAscii@dez,w
  4693  12B9  00A3               	movwf	??_hexToAscii
  4694  12BA  0823               	movf	??_hexToAscii,w
  4695  12BB  00D2               	movwf	_tdez
  4696                           
  4697                           ;Serial.c: 77:     tuni = uni;
  4698  12BC  0825               	movf	hexToAscii@uni,w
  4699  12BD  00A3               	movwf	??_hexToAscii
  4700  12BE  0823               	movf	??_hexToAscii,w
  4701  12BF  00D3               	movwf	_tuni
  4702  12C0  0008               	return
  4703  12C1                     __end_of_hexToAscii:	
  4704                           
  4705                           	psect	text4
  4706  144C                     __ptext4:	
  4707 ;; *************** function _textSelectionEST *****************
  4708 ;; Defined at:
  4709 ;;		line 120 in file "auxiliar.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;		None
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;		None
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  1    wreg      void 
  4716 ;; Registers used:
  4717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4723 ;;      Params:         0       0       0       0       0
  4724 ;;      Locals:         0       0       0       0       0
  4725 ;;      Temps:          0       3       0       0       0
  4726 ;;      Totals:         0       3       0       0       0
  4727 ;;Total ram usage:        3 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    7
  4730 ;; This function calls:
  4731 ;;		___awdiv
  4732 ;;		_statusT0
  4733 ;;		_statusT0limite
  4734 ;;		_writeLCD
  4735 ;; This function is called by:
  4736 ;;		_main
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           
  4741                           ;psect for function _textSelectionEST
  4742  144C                     _textSelectionEST:	
  4743                           
  4744                           ;auxiliar.c: 122:     writeLCD(13,1,"CLP");
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in _textSelectionEST: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4748  144C  1283               	bcf	3,5	;RP0=0, select bank0
  4749  144D  1303               	bcf	3,6	;RP1=0, select bank0
  4750  144E  01AB               	clrf	writeLCD@y
  4751  144F  0AAB               	incf	writeLCD@y,f
  4752  1450  30D9               	movlw	low ((STR_110+13)| (0+32768))
  4753  1451  00AC               	movwf	writeLCD@ptr
  4754  1452  3087               	movlw	high ((STR_110+13)| (0+32768))
  4755  1453  00AD               	movwf	writeLCD@ptr+1
  4756  1454  300D               	movlw	13
  4757  1455  120A  158A  2209  160A  118A  	fcall	_writeLCD
  4758                           
  4759                           ;auxiliar.c: 123:     if( statusT0() < ( statusT0limite()/2 ) )
  4760  145A  160A  158A  27F9  160A  118A  	fcall	_statusT0
  4761  145F  1283               	bcf	3,5	;RP0=0, select bank0
  4762  1460  1303               	bcf	3,6	;RP1=0, select bank0
  4763  1461  0823               	movf	?_statusT0,w
  4764  1462  00B0               	movwf	??_textSelectionEST
  4765  1463  0824               	movf	?_statusT0+1,w
  4766  1464  00B1               	movwf	??_textSelectionEST+1
  4767  1465  3002               	movlw	2
  4768  1466  00A5               	movwf	___awdiv@divisor
  4769  1467  3000               	movlw	0
  4770  1468  00A6               	movwf	___awdiv@divisor+1
  4771  1469  160A  118A  2016  160A  118A  	fcall	_statusT0limite
  4772  146E  1283               	bcf	3,5	;RP0=0, select bank0
  4773  146F  1303               	bcf	3,6	;RP1=0, select bank0
  4774  1470  0824               	movf	?_statusT0limite+1,w
  4775  1471  00A8               	movwf	___awdiv@dividend+1
  4776  1472  0823               	movf	?_statusT0limite,w
  4777  1473  00A7               	movwf	___awdiv@dividend
  4778  1474  160A  118A  2556  160A  118A  	fcall	___awdiv
  4779  1479  1283               	bcf	3,5	;RP0=0, select bank0
  4780  147A  1303               	bcf	3,6	;RP1=0, select bank0
  4781  147B  0831               	movf	??_textSelectionEST+1,w
  4782  147C  3A80               	xorlw	128
  4783  147D  00B2               	movwf	??_textSelectionEST+2
  4784  147E  0826               	movf	?___awdiv+1,w
  4785  147F  3A80               	xorlw	128
  4786  1480  0232               	subwf	??_textSelectionEST+2,w
  4787  1481  1D03               	skipz
  4788  1482  2C85               	goto	u2125
  4789  1483  0825               	movf	?___awdiv,w
  4790  1484  0230               	subwf	??_textSelectionEST,w
  4791  1485                     u2125:	
  4792  1485  1803               	skipnc
  4793  1486  2C94               	goto	l3189
  4794                           
  4795                           ;auxiliar.c: 124:     writeLCD(0,1,"       ");
  4796  1487  1283               	bcf	3,5	;RP0=0, select bank0
  4797  1488  1303               	bcf	3,6	;RP1=0, select bank0
  4798  1489  01AB               	clrf	writeLCD@y
  4799  148A  0AAB               	incf	writeLCD@y,f
  4800  148B  30F7               	movlw	low ((STR_68+9)| (0+32768))
  4801  148C  00AC               	movwf	writeLCD@ptr
  4802  148D  3087               	movlw	high ((STR_68+9)| (0+32768))
  4803  148E  00AD               	movwf	writeLCD@ptr+1
  4804  148F  3000               	movlw	0
  4805  1490  120A  158A  2209   	fcall	_writeLCD
  4806  1493  0008               	return
  4807  1494                     l3189:	
  4808                           ;auxiliar.c: 125:     else
  4809                           
  4810                           
  4811                           ;auxiliar.c: 126:     writeLCD(0,1,"ESTEIRA");
  4812  1494  1283               	bcf	3,5	;RP0=0, select bank0
  4813  1495  1303               	bcf	3,6	;RP1=0, select bank0
  4814  1496  01AB               	clrf	writeLCD@y
  4815  1497  0AAB               	incf	writeLCD@y,f
  4816  1498  30D2               	movlw	low (STR_47| (0+32768))
  4817  1499  00AC               	movwf	writeLCD@ptr
  4818  149A  3089               	movlw	high (STR_47| (0+32768))
  4819  149B  00AD               	movwf	writeLCD@ptr+1
  4820  149C  3000               	movlw	0
  4821  149D  120A  158A  2209   	fcall	_writeLCD
  4822  14A0  0008               	return
  4823  14A1                     __end_of_textSelectionEST:	
  4824                           
  4825                           	psect	text5
  4826  13F7                     __ptext5:	
  4827 ;; *************** function _textSelectionCLP *****************
  4828 ;; Defined at:
  4829 ;;		line 128 in file "auxiliar.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;		None
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;		None
  4834 ;; Return value:  Size  Location     Type
  4835 ;;                  1    wreg      void 
  4836 ;; Registers used:
  4837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4843 ;;      Params:         0       0       0       0       0
  4844 ;;      Locals:         0       0       0       0       0
  4845 ;;      Temps:          0       3       0       0       0
  4846 ;;      Totals:         0       3       0       0       0
  4847 ;;Total ram usage:        3 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; Hardware stack levels required when called:    7
  4850 ;; This function calls:
  4851 ;;		___awdiv
  4852 ;;		_statusT0
  4853 ;;		_statusT0limite
  4854 ;;		_writeLCD
  4855 ;; This function is called by:
  4856 ;;		_main
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           
  4861                           ;psect for function _textSelectionCLP
  4862  13F7                     _textSelectionCLP:	
  4863                           
  4864                           ;auxiliar.c: 130:     writeLCD(0,1,"ESTEIRA");
  4865                           
  4866                           ;incstack = 0
  4867                           ; Regs used in _textSelectionCLP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4868  13F7  1283               	bcf	3,5	;RP0=0, select bank0
  4869  13F8  1303               	bcf	3,6	;RP1=0, select bank0
  4870  13F9  01AB               	clrf	writeLCD@y
  4871  13FA  0AAB               	incf	writeLCD@y,f
  4872  13FB  30D2               	movlw	low (STR_47| (0+32768))
  4873  13FC  00AC               	movwf	writeLCD@ptr
  4874  13FD  3089               	movlw	high (STR_47| (0+32768))
  4875  13FE  00AD               	movwf	writeLCD@ptr+1
  4876  13FF  3000               	movlw	0
  4877  1400  120A  158A  2209  160A  118A  	fcall	_writeLCD
  4878                           
  4879                           ;auxiliar.c: 131:     if( statusT0() < ( statusT0limite()/2 ) )
  4880  1405  160A  158A  27F9  160A  118A  	fcall	_statusT0
  4881  140A  1283               	bcf	3,5	;RP0=0, select bank0
  4882  140B  1303               	bcf	3,6	;RP1=0, select bank0
  4883  140C  0823               	movf	?_statusT0,w
  4884  140D  00B0               	movwf	??_textSelectionCLP
  4885  140E  0824               	movf	?_statusT0+1,w
  4886  140F  00B1               	movwf	??_textSelectionCLP+1
  4887  1410  3002               	movlw	2
  4888  1411  00A5               	movwf	___awdiv@divisor
  4889  1412  3000               	movlw	0
  4890  1413  00A6               	movwf	___awdiv@divisor+1
  4891  1414  160A  118A  2016  160A  118A  	fcall	_statusT0limite
  4892  1419  1283               	bcf	3,5	;RP0=0, select bank0
  4893  141A  1303               	bcf	3,6	;RP1=0, select bank0
  4894  141B  0824               	movf	?_statusT0limite+1,w
  4895  141C  00A8               	movwf	___awdiv@dividend+1
  4896  141D  0823               	movf	?_statusT0limite,w
  4897  141E  00A7               	movwf	___awdiv@dividend
  4898  141F  160A  118A  2556  160A  118A  	fcall	___awdiv
  4899  1424  1283               	bcf	3,5	;RP0=0, select bank0
  4900  1425  1303               	bcf	3,6	;RP1=0, select bank0
  4901  1426  0831               	movf	??_textSelectionCLP+1,w
  4902  1427  3A80               	xorlw	128
  4903  1428  00B2               	movwf	??_textSelectionCLP+2
  4904  1429  0826               	movf	?___awdiv+1,w
  4905  142A  3A80               	xorlw	128
  4906  142B  0232               	subwf	??_textSelectionCLP+2,w
  4907  142C  1D03               	skipz
  4908  142D  2C30               	goto	u2135
  4909  142E  0825               	movf	?___awdiv,w
  4910  142F  0230               	subwf	??_textSelectionCLP,w
  4911  1430                     u2135:	
  4912  1430  1803               	skipnc
  4913  1431  2C3F               	goto	l3197
  4914                           
  4915                           ;auxiliar.c: 132:     writeLCD(13,1,"   ");
  4916  1432  1283               	bcf	3,5	;RP0=0, select bank0
  4917  1433  1303               	bcf	3,6	;RP1=0, select bank0
  4918  1434  01AB               	clrf	writeLCD@y
  4919  1435  0AAB               	incf	writeLCD@y,f
  4920  1436  30FB               	movlw	low ((STR_68+13)| (0+32768))
  4921  1437  00AC               	movwf	writeLCD@ptr
  4922  1438  3087               	movlw	high ((STR_68+13)| (0+32768))
  4923  1439  00AD               	movwf	writeLCD@ptr+1
  4924  143A  300D               	movlw	13
  4925  143B  120A  158A  2209   	fcall	_writeLCD
  4926  143E  0008               	return
  4927  143F                     l3197:	
  4928                           ;auxiliar.c: 133:     else
  4929                           
  4930                           
  4931                           ;auxiliar.c: 134:     writeLCD(13,1,"CLP");
  4932  143F  1283               	bcf	3,5	;RP0=0, select bank0
  4933  1440  1303               	bcf	3,6	;RP1=0, select bank0
  4934  1441  01AB               	clrf	writeLCD@y
  4935  1442  0AAB               	incf	writeLCD@y,f
  4936  1443  30D9               	movlw	low ((STR_110+13)| (0+32768))
  4937  1444  00AC               	movwf	writeLCD@ptr
  4938  1445  3087               	movlw	high ((STR_110+13)| (0+32768))
  4939  1446  00AD               	movwf	writeLCD@ptr+1
  4940  1447  300D               	movlw	13
  4941  1448  120A  158A  2209   	fcall	_writeLCD
  4942  144B  0008               	return
  4943  144C                     __end_of_textSelectionCLP:	
  4944                           
  4945                           	psect	text6
  4946  0599                     __ptext6:	
  4947 ;; *************** function _textSelection8 *****************
  4948 ;; Defined at:
  4949 ;;		line 110 in file "auxiliar.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;		None
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;		None
  4954 ;; Return value:  Size  Location     Type
  4955 ;;                  1    wreg      void 
  4956 ;; Registers used:
  4957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4958 ;; Tracked objects:
  4959 ;;		On entry : 0/0
  4960 ;;		On exit  : 0/0
  4961 ;;		Unchanged: 0/0
  4962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4963 ;;      Params:         0       0       0       0       0
  4964 ;;      Locals:         0       0       0       0       0
  4965 ;;      Temps:          0       3       0       0       0
  4966 ;;      Totals:         0       3       0       0       0
  4967 ;;Total ram usage:        3 bytes
  4968 ;; Hardware stack levels used:    1
  4969 ;; Hardware stack levels required when called:    7
  4970 ;; This function calls:
  4971 ;;		___awdiv
  4972 ;;		_statusT0
  4973 ;;		_statusT0limite
  4974 ;;		_writeLCD
  4975 ;; This function is called by:
  4976 ;;		_main
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           
  4981                           ;psect for function _textSelection8
  4982  0599                     _textSelection8:	
  4983                           
  4984                           ;auxiliar.c: 112:     writeLCD(13,1,"7");
  4985                           
  4986                           ;incstack = 0
  4987                           ; Regs used in _textSelection8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4988  0599  1283               	bcf	3,5	;RP0=0, select bank0
  4989  059A  1303               	bcf	3,6	;RP1=0, select bank0
  4990  059B  01AB               	clrf	writeLCD@y
  4991  059C  0AAB               	incf	writeLCD@y,f
  4992  059D  30FF               	movlw	low (STR_34| (0+32768))
  4993  059E  00AC               	movwf	writeLCD@ptr
  4994  059F  3089               	movlw	high (STR_34| (0+32768))
  4995  05A0  00AD               	movwf	writeLCD@ptr+1
  4996  05A1  300D               	movlw	13
  4997  05A2  120A  158A  2209  120A  118A  	fcall	_writeLCD
  4998                           
  4999                           ;auxiliar.c: 113:     writeLCD(0,1,"1");
  5000  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  5001  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  5002  05A9  01AB               	clrf	writeLCD@y
  5003  05AA  0AAB               	incf	writeLCD@y,f
  5004  05AB  30F5               	movlw	low (STR_16| (0+32768))
  5005  05AC  00AC               	movwf	writeLCD@ptr
  5006  05AD  3089               	movlw	high (STR_16| (0+32768))
  5007  05AE  00AD               	movwf	writeLCD@ptr+1
  5008  05AF  3000               	movlw	0
  5009  05B0  120A  158A  2209  120A  118A  	fcall	_writeLCD
  5010                           
  5011                           ;auxiliar.c: 114:     if( statusT0() < ( statusT0limite()/2 ) )
  5012  05B5  160A  158A  27F9  120A  118A  	fcall	_statusT0
  5013  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  5014  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  5015  05BC  0823               	movf	?_statusT0,w
  5016  05BD  00B0               	movwf	??_textSelection8
  5017  05BE  0824               	movf	?_statusT0+1,w
  5018  05BF  00B1               	movwf	??_textSelection8+1
  5019  05C0  3002               	movlw	2
  5020  05C1  00A5               	movwf	___awdiv@divisor
  5021  05C2  3000               	movlw	0
  5022  05C3  00A6               	movwf	___awdiv@divisor+1
  5023  05C4  160A  118A  2016  120A  118A  	fcall	_statusT0limite
  5024  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  5025  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  5026  05CB  0824               	movf	?_statusT0limite+1,w
  5027  05CC  00A8               	movwf	___awdiv@dividend+1
  5028  05CD  0823               	movf	?_statusT0limite,w
  5029  05CE  00A7               	movwf	___awdiv@dividend
  5030  05CF  160A  118A  2556  120A  118A  	fcall	___awdiv
  5031  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  5032  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  5033  05D6  0831               	movf	??_textSelection8+1,w
  5034  05D7  3A80               	xorlw	128
  5035  05D8  00B2               	movwf	??_textSelection8+2
  5036  05D9  0826               	movf	?___awdiv+1,w
  5037  05DA  3A80               	xorlw	128
  5038  05DB  0232               	subwf	??_textSelection8+2,w
  5039  05DC  1D03               	skipz
  5040  05DD  2DE0               	goto	u2115
  5041  05DE  0825               	movf	?___awdiv,w
  5042  05DF  0230               	subwf	??_textSelection8,w
  5043  05E0                     u2115:	
  5044  05E0  1803               	skipnc
  5045  05E1  2DEF               	goto	l3181
  5046                           
  5047                           ;auxiliar.c: 115:     writeLCD(15,1," ");
  5048  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  5049  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  5050  05E4  01AB               	clrf	writeLCD@y
  5051  05E5  0AAB               	incf	writeLCD@y,f
  5052  05E6  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5053  05E7  00AC               	movwf	writeLCD@ptr
  5054  05E8  3087               	movlw	high ((STR_68+15)| (0+32768))
  5055  05E9  00AD               	movwf	writeLCD@ptr+1
  5056  05EA  300F               	movlw	15
  5057  05EB  120A  158A  2209   	fcall	_writeLCD
  5058  05EE  0008               	return
  5059  05EF                     l3181:	
  5060                           ;auxiliar.c: 116:     else
  5061                           
  5062                           
  5063                           ;auxiliar.c: 117:     writeLCD(15,1,"8");
  5064  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  5065  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  5066  05F1  01AB               	clrf	writeLCD@y
  5067  05F2  0AAB               	incf	writeLCD@y,f
  5068  05F3  30A8               	movlw	low ((STR_125+15)| (0+32768))
  5069  05F4  00AC               	movwf	writeLCD@ptr
  5070  05F5  3087               	movlw	high ((STR_125+15)| (0+32768))
  5071  05F6  00AD               	movwf	writeLCD@ptr+1
  5072  05F7  300F               	movlw	15
  5073  05F8  120A  158A  2209   	fcall	_writeLCD
  5074  05FB  0008               	return
  5075  05FC                     __end_of_textSelection8:	
  5076                           
  5077                           	psect	text7
  5078  0A9E                     __ptext7:	
  5079 ;; *************** function _textSelection7 *****************
  5080 ;; Defined at:
  5081 ;;		line 100 in file "auxiliar.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;		None
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;		None
  5086 ;; Return value:  Size  Location     Type
  5087 ;;                  1    wreg      void 
  5088 ;; Registers used:
  5089 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5095 ;;      Params:         0       0       0       0       0
  5096 ;;      Locals:         0       0       0       0       0
  5097 ;;      Temps:          0       3       0       0       0
  5098 ;;      Totals:         0       3       0       0       0
  5099 ;;Total ram usage:        3 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    7
  5102 ;; This function calls:
  5103 ;;		___awdiv
  5104 ;;		_statusT0
  5105 ;;		_statusT0limite
  5106 ;;		_writeLCD
  5107 ;; This function is called by:
  5108 ;;		_main
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           
  5113                           ;psect for function _textSelection7
  5114  0A9E                     _textSelection7:	
  5115                           
  5116                           ;auxiliar.c: 102:     writeLCD(11,1,"6");
  5117                           
  5118                           ;incstack = 0
  5119                           ; Regs used in _textSelection7: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5120  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  5121  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  5122  0AA0  01AB               	clrf	writeLCD@y
  5123  0AA1  0AAB               	incf	writeLCD@y,f
  5124  0AA2  30FD               	movlw	low (STR_30| (0+32768))
  5125  0AA3  00AC               	movwf	writeLCD@ptr
  5126  0AA4  3089               	movlw	high (STR_30| (0+32768))
  5127  0AA5  00AD               	movwf	writeLCD@ptr+1
  5128  0AA6  300B               	movlw	11
  5129  0AA7  120A  158A  2209  120A  158A  	fcall	_writeLCD
  5130                           
  5131                           ;auxiliar.c: 103:     writeLCD(15,1,"8");
  5132  0AAC  1283               	bcf	3,5	;RP0=0, select bank0
  5133  0AAD  1303               	bcf	3,6	;RP1=0, select bank0
  5134  0AAE  01AB               	clrf	writeLCD@y
  5135  0AAF  0AAB               	incf	writeLCD@y,f
  5136  0AB0  30A8               	movlw	low ((STR_125+15)| (0+32768))
  5137  0AB1  00AC               	movwf	writeLCD@ptr
  5138  0AB2  3087               	movlw	high ((STR_125+15)| (0+32768))
  5139  0AB3  00AD               	movwf	writeLCD@ptr+1
  5140  0AB4  300F               	movlw	15
  5141  0AB5  120A  158A  2209  120A  158A  	fcall	_writeLCD
  5142                           
  5143                           ;auxiliar.c: 104:     if( statusT0() < ( statusT0limite()/2 ) )
  5144  0ABA  160A  158A  27F9  120A  158A  	fcall	_statusT0
  5145  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
  5146  0AC0  1303               	bcf	3,6	;RP1=0, select bank0
  5147  0AC1  0823               	movf	?_statusT0,w
  5148  0AC2  00B0               	movwf	??_textSelection7
  5149  0AC3  0824               	movf	?_statusT0+1,w
  5150  0AC4  00B1               	movwf	??_textSelection7+1
  5151  0AC5  3002               	movlw	2
  5152  0AC6  00A5               	movwf	___awdiv@divisor
  5153  0AC7  3000               	movlw	0
  5154  0AC8  00A6               	movwf	___awdiv@divisor+1
  5155  0AC9  160A  118A  2016  120A  158A  	fcall	_statusT0limite
  5156  0ACE  1283               	bcf	3,5	;RP0=0, select bank0
  5157  0ACF  1303               	bcf	3,6	;RP1=0, select bank0
  5158  0AD0  0824               	movf	?_statusT0limite+1,w
  5159  0AD1  00A8               	movwf	___awdiv@dividend+1
  5160  0AD2  0823               	movf	?_statusT0limite,w
  5161  0AD3  00A7               	movwf	___awdiv@dividend
  5162  0AD4  160A  118A  2556  120A  158A  	fcall	___awdiv
  5163  0AD9  1283               	bcf	3,5	;RP0=0, select bank0
  5164  0ADA  1303               	bcf	3,6	;RP1=0, select bank0
  5165  0ADB  0831               	movf	??_textSelection7+1,w
  5166  0ADC  3A80               	xorlw	128
  5167  0ADD  00B2               	movwf	??_textSelection7+2
  5168  0ADE  0826               	movf	?___awdiv+1,w
  5169  0ADF  3A80               	xorlw	128
  5170  0AE0  0232               	subwf	??_textSelection7+2,w
  5171  0AE1  1D03               	skipz
  5172  0AE2  2AE5               	goto	u2105
  5173  0AE3  0825               	movf	?___awdiv,w
  5174  0AE4  0230               	subwf	??_textSelection7,w
  5175  0AE5                     u2105:	
  5176  0AE5  1803               	skipnc
  5177  0AE6  2AF4               	goto	l3173
  5178                           
  5179                           ;auxiliar.c: 105:     writeLCD(13,1," ");
  5180  0AE7  1283               	bcf	3,5	;RP0=0, select bank0
  5181  0AE8  1303               	bcf	3,6	;RP1=0, select bank0
  5182  0AE9  01AB               	clrf	writeLCD@y
  5183  0AEA  0AAB               	incf	writeLCD@y,f
  5184  0AEB  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5185  0AEC  00AC               	movwf	writeLCD@ptr
  5186  0AED  3087               	movlw	high ((STR_68+15)| (0+32768))
  5187  0AEE  00AD               	movwf	writeLCD@ptr+1
  5188  0AEF  300D               	movlw	13
  5189  0AF0  120A  158A  2209   	fcall	_writeLCD
  5190  0AF3  0008               	return
  5191  0AF4                     l3173:	
  5192                           ;auxiliar.c: 106:     else
  5193                           
  5194                           
  5195                           ;auxiliar.c: 107:     writeLCD(13,1,"7");
  5196  0AF4  1283               	bcf	3,5	;RP0=0, select bank0
  5197  0AF5  1303               	bcf	3,6	;RP1=0, select bank0
  5198  0AF6  01AB               	clrf	writeLCD@y
  5199  0AF7  0AAB               	incf	writeLCD@y,f
  5200  0AF8  30FF               	movlw	low (STR_34| (0+32768))
  5201  0AF9  00AC               	movwf	writeLCD@ptr
  5202  0AFA  3089               	movlw	high (STR_34| (0+32768))
  5203  0AFB  00AD               	movwf	writeLCD@ptr+1
  5204  0AFC  300D               	movlw	13
  5205  0AFD  120A  158A  2209   	fcall	_writeLCD
  5206  0B00  0008               	return
  5207  0B01                     __end_of_textSelection7:	
  5208                           
  5209                           	psect	text8
  5210  0A3B                     __ptext8:	
  5211 ;; *************** function _textSelection6 *****************
  5212 ;; Defined at:
  5213 ;;		line 90 in file "auxiliar.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;		None
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;		None
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  1    wreg      void 
  5220 ;; Registers used:
  5221 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5227 ;;      Params:         0       0       0       0       0
  5228 ;;      Locals:         0       0       0       0       0
  5229 ;;      Temps:          0       3       0       0       0
  5230 ;;      Totals:         0       3       0       0       0
  5231 ;;Total ram usage:        3 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    7
  5234 ;; This function calls:
  5235 ;;		___awdiv
  5236 ;;		_statusT0
  5237 ;;		_statusT0limite
  5238 ;;		_writeLCD
  5239 ;; This function is called by:
  5240 ;;		_main
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _textSelection6
  5246  0A3B                     _textSelection6:	
  5247                           
  5248                           ;auxiliar.c: 92:     writeLCD(9,1,"5");
  5249                           
  5250                           ;incstack = 0
  5251                           ; Regs used in _textSelection6: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5252  0A3B  1283               	bcf	3,5	;RP0=0, select bank0
  5253  0A3C  1303               	bcf	3,6	;RP1=0, select bank0
  5254  0A3D  01AB               	clrf	writeLCD@y
  5255  0A3E  0AAB               	incf	writeLCD@y,f
  5256  0A3F  30FB               	movlw	low (STR_26| (0+32768))
  5257  0A40  00AC               	movwf	writeLCD@ptr
  5258  0A41  3089               	movlw	high (STR_26| (0+32768))
  5259  0A42  00AD               	movwf	writeLCD@ptr+1
  5260  0A43  3009               	movlw	9
  5261  0A44  120A  158A  2209  120A  158A  	fcall	_writeLCD
  5262                           
  5263                           ;auxiliar.c: 93:     writeLCD(13,1,"7");
  5264  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  5265  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  5266  0A4B  01AB               	clrf	writeLCD@y
  5267  0A4C  0AAB               	incf	writeLCD@y,f
  5268  0A4D  30FF               	movlw	low (STR_34| (0+32768))
  5269  0A4E  00AC               	movwf	writeLCD@ptr
  5270  0A4F  3089               	movlw	high (STR_34| (0+32768))
  5271  0A50  00AD               	movwf	writeLCD@ptr+1
  5272  0A51  300D               	movlw	13
  5273  0A52  120A  158A  2209  120A  158A  	fcall	_writeLCD
  5274                           
  5275                           ;auxiliar.c: 94:     if( statusT0() < ( statusT0limite()/2 ) )
  5276  0A57  160A  158A  27F9  120A  158A  	fcall	_statusT0
  5277  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  5278  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  5279  0A5E  0823               	movf	?_statusT0,w
  5280  0A5F  00B0               	movwf	??_textSelection6
  5281  0A60  0824               	movf	?_statusT0+1,w
  5282  0A61  00B1               	movwf	??_textSelection6+1
  5283  0A62  3002               	movlw	2
  5284  0A63  00A5               	movwf	___awdiv@divisor
  5285  0A64  3000               	movlw	0
  5286  0A65  00A6               	movwf	___awdiv@divisor+1
  5287  0A66  160A  118A  2016  120A  158A  	fcall	_statusT0limite
  5288  0A6B  1283               	bcf	3,5	;RP0=0, select bank0
  5289  0A6C  1303               	bcf	3,6	;RP1=0, select bank0
  5290  0A6D  0824               	movf	?_statusT0limite+1,w
  5291  0A6E  00A8               	movwf	___awdiv@dividend+1
  5292  0A6F  0823               	movf	?_statusT0limite,w
  5293  0A70  00A7               	movwf	___awdiv@dividend
  5294  0A71  160A  118A  2556  120A  158A  	fcall	___awdiv
  5295  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  5296  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  5297  0A78  0831               	movf	??_textSelection6+1,w
  5298  0A79  3A80               	xorlw	128
  5299  0A7A  00B2               	movwf	??_textSelection6+2
  5300  0A7B  0826               	movf	?___awdiv+1,w
  5301  0A7C  3A80               	xorlw	128
  5302  0A7D  0232               	subwf	??_textSelection6+2,w
  5303  0A7E  1D03               	skipz
  5304  0A7F  2A82               	goto	u2095
  5305  0A80  0825               	movf	?___awdiv,w
  5306  0A81  0230               	subwf	??_textSelection6,w
  5307  0A82                     u2095:	
  5308  0A82  1803               	skipnc
  5309  0A83  2A91               	goto	l3165
  5310                           
  5311                           ;auxiliar.c: 95:     writeLCD(11,1," ");
  5312  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  5313  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  5314  0A86  01AB               	clrf	writeLCD@y
  5315  0A87  0AAB               	incf	writeLCD@y,f
  5316  0A88  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5317  0A89  00AC               	movwf	writeLCD@ptr
  5318  0A8A  3087               	movlw	high ((STR_68+15)| (0+32768))
  5319  0A8B  00AD               	movwf	writeLCD@ptr+1
  5320  0A8C  300B               	movlw	11
  5321  0A8D  120A  158A  2209   	fcall	_writeLCD
  5322  0A90  0008               	return
  5323  0A91                     l3165:	
  5324                           ;auxiliar.c: 96:     else
  5325                           
  5326                           
  5327                           ;auxiliar.c: 97:     writeLCD(11,1,"6");
  5328  0A91  1283               	bcf	3,5	;RP0=0, select bank0
  5329  0A92  1303               	bcf	3,6	;RP1=0, select bank0
  5330  0A93  01AB               	clrf	writeLCD@y
  5331  0A94  0AAB               	incf	writeLCD@y,f
  5332  0A95  30FD               	movlw	low (STR_30| (0+32768))
  5333  0A96  00AC               	movwf	writeLCD@ptr
  5334  0A97  3089               	movlw	high (STR_30| (0+32768))
  5335  0A98  00AD               	movwf	writeLCD@ptr+1
  5336  0A99  300B               	movlw	11
  5337  0A9A  120A  158A  2209   	fcall	_writeLCD
  5338  0A9D  0008               	return
  5339  0A9E                     __end_of_textSelection6:	
  5340                           
  5341                           	psect	text9
  5342  179D                     __ptext9:	
  5343 ;; *************** function _textSelection5 *****************
  5344 ;; Defined at:
  5345 ;;		line 80 in file "auxiliar.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;		None
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      void 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5359 ;;      Params:         0       0       0       0       0
  5360 ;;      Locals:         0       0       0       0       0
  5361 ;;      Temps:          0       3       0       0       0
  5362 ;;      Totals:         0       3       0       0       0
  5363 ;;Total ram usage:        3 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    7
  5366 ;; This function calls:
  5367 ;;		___awdiv
  5368 ;;		_statusT0
  5369 ;;		_statusT0limite
  5370 ;;		_writeLCD
  5371 ;; This function is called by:
  5372 ;;		_main
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           
  5377                           ;psect for function _textSelection5
  5378  179D                     _textSelection5:	
  5379                           
  5380                           ;auxiliar.c: 82:     writeLCD(6,1,"4");
  5381                           
  5382                           ;incstack = 0
  5383                           ; Regs used in _textSelection5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5384  179D  1283               	bcf	3,5	;RP0=0, select bank0
  5385  179E  1303               	bcf	3,6	;RP1=0, select bank0
  5386  179F  01AB               	clrf	writeLCD@y
  5387  17A0  0AAB               	incf	writeLCD@y,f
  5388  17A1  30F9               	movlw	low (STR_22| (0+32768))
  5389  17A2  00AC               	movwf	writeLCD@ptr
  5390  17A3  3089               	movlw	high (STR_22| (0+32768))
  5391  17A4  00AD               	movwf	writeLCD@ptr+1
  5392  17A5  3006               	movlw	6
  5393  17A6  120A  158A  2209  160A  118A  	fcall	_writeLCD
  5394                           
  5395                           ;auxiliar.c: 83:     writeLCD(11,1,"6");
  5396  17AB  1283               	bcf	3,5	;RP0=0, select bank0
  5397  17AC  1303               	bcf	3,6	;RP1=0, select bank0
  5398  17AD  01AB               	clrf	writeLCD@y
  5399  17AE  0AAB               	incf	writeLCD@y,f
  5400  17AF  30FD               	movlw	low (STR_30| (0+32768))
  5401  17B0  00AC               	movwf	writeLCD@ptr
  5402  17B1  3089               	movlw	high (STR_30| (0+32768))
  5403  17B2  00AD               	movwf	writeLCD@ptr+1
  5404  17B3  300B               	movlw	11
  5405  17B4  120A  158A  2209  160A  118A  	fcall	_writeLCD
  5406                           
  5407                           ;auxiliar.c: 84:     if( statusT0() < ( statusT0limite()/2 ) )
  5408  17B9  160A  158A  27F9  160A  118A  	fcall	_statusT0
  5409  17BE  1283               	bcf	3,5	;RP0=0, select bank0
  5410  17BF  1303               	bcf	3,6	;RP1=0, select bank0
  5411  17C0  0823               	movf	?_statusT0,w
  5412  17C1  00B0               	movwf	??_textSelection5
  5413  17C2  0824               	movf	?_statusT0+1,w
  5414  17C3  00B1               	movwf	??_textSelection5+1
  5415  17C4  3002               	movlw	2
  5416  17C5  00A5               	movwf	___awdiv@divisor
  5417  17C6  3000               	movlw	0
  5418  17C7  00A6               	movwf	___awdiv@divisor+1
  5419  17C8  160A  118A  2016  160A  118A  	fcall	_statusT0limite
  5420  17CD  1283               	bcf	3,5	;RP0=0, select bank0
  5421  17CE  1303               	bcf	3,6	;RP1=0, select bank0
  5422  17CF  0824               	movf	?_statusT0limite+1,w
  5423  17D0  00A8               	movwf	___awdiv@dividend+1
  5424  17D1  0823               	movf	?_statusT0limite,w
  5425  17D2  00A7               	movwf	___awdiv@dividend
  5426  17D3  160A  118A  2556  160A  118A  	fcall	___awdiv
  5427  17D8  1283               	bcf	3,5	;RP0=0, select bank0
  5428  17D9  1303               	bcf	3,6	;RP1=0, select bank0
  5429  17DA  0831               	movf	??_textSelection5+1,w
  5430  17DB  3A80               	xorlw	128
  5431  17DC  00B2               	movwf	??_textSelection5+2
  5432  17DD  0826               	movf	?___awdiv+1,w
  5433  17DE  3A80               	xorlw	128
  5434  17DF  0232               	subwf	??_textSelection5+2,w
  5435  17E0  1D03               	skipz
  5436  17E1  2FE4               	goto	u2085
  5437  17E2  0825               	movf	?___awdiv,w
  5438  17E3  0230               	subwf	??_textSelection5,w
  5439  17E4                     u2085:	
  5440  17E4  1803               	skipnc
  5441  17E5  2FF3               	goto	l3157
  5442                           
  5443                           ;auxiliar.c: 85:     writeLCD(9,1," ");
  5444  17E6  1283               	bcf	3,5	;RP0=0, select bank0
  5445  17E7  1303               	bcf	3,6	;RP1=0, select bank0
  5446  17E8  01AB               	clrf	writeLCD@y
  5447  17E9  0AAB               	incf	writeLCD@y,f
  5448  17EA  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5449  17EB  00AC               	movwf	writeLCD@ptr
  5450  17EC  3087               	movlw	high ((STR_68+15)| (0+32768))
  5451  17ED  00AD               	movwf	writeLCD@ptr+1
  5452  17EE  3009               	movlw	9
  5453  17EF  120A  158A  2209   	fcall	_writeLCD
  5454  17F2  0008               	return
  5455  17F3                     l3157:	
  5456                           ;auxiliar.c: 86:     else
  5457                           
  5458                           
  5459                           ;auxiliar.c: 87:     writeLCD(9,1,"5");
  5460  17F3  1283               	bcf	3,5	;RP0=0, select bank0
  5461  17F4  1303               	bcf	3,6	;RP1=0, select bank0
  5462  17F5  01AB               	clrf	writeLCD@y
  5463  17F6  0AAB               	incf	writeLCD@y,f
  5464  17F7  30FB               	movlw	low (STR_26| (0+32768))
  5465  17F8  00AC               	movwf	writeLCD@ptr
  5466  17F9  3089               	movlw	high (STR_26| (0+32768))
  5467  17FA  00AD               	movwf	writeLCD@ptr+1
  5468  17FB  3009               	movlw	9
  5469  17FC  120A  158A  2209   	fcall	_writeLCD
  5470  17FF  0008               	return
  5471  1800                     __end_of_textSelection5:	
  5472                           
  5473                           	psect	text10
  5474  173A                     __ptext10:	
  5475 ;; *************** function _textSelection4 *****************
  5476 ;; Defined at:
  5477 ;;		line 70 in file "auxiliar.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;		None
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;		None
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      void 
  5484 ;; Registers used:
  5485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5491 ;;      Params:         0       0       0       0       0
  5492 ;;      Locals:         0       0       0       0       0
  5493 ;;      Temps:          0       3       0       0       0
  5494 ;;      Totals:         0       3       0       0       0
  5495 ;;Total ram usage:        3 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    7
  5498 ;; This function calls:
  5499 ;;		___awdiv
  5500 ;;		_statusT0
  5501 ;;		_statusT0limite
  5502 ;;		_writeLCD
  5503 ;; This function is called by:
  5504 ;;		_main
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           
  5509                           ;psect for function _textSelection4
  5510  173A                     _textSelection4:	
  5511                           
  5512                           ;auxiliar.c: 72:     writeLCD(4,1,"3");
  5513                           
  5514                           ;incstack = 0
  5515                           ; Regs used in _textSelection4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5516  173A  1283               	bcf	3,5	;RP0=0, select bank0
  5517  173B  1303               	bcf	3,6	;RP1=0, select bank0
  5518  173C  01AB               	clrf	writeLCD@y
  5519  173D  0AAB               	incf	writeLCD@y,f
  5520  173E  300D               	movlw	low ((STR_81+15)| (0+32768))
  5521  173F  00AC               	movwf	writeLCD@ptr
  5522  1740  3089               	movlw	high ((STR_81+15)| (0+32768))
  5523  1741  00AD               	movwf	writeLCD@ptr+1
  5524  1742  3004               	movlw	4
  5525  1743  120A  158A  2209  160A  118A  	fcall	_writeLCD
  5526                           
  5527                           ;auxiliar.c: 73:     writeLCD(9,1,"5");
  5528  1748  1283               	bcf	3,5	;RP0=0, select bank0
  5529  1749  1303               	bcf	3,6	;RP1=0, select bank0
  5530  174A  01AB               	clrf	writeLCD@y
  5531  174B  0AAB               	incf	writeLCD@y,f
  5532  174C  30FB               	movlw	low (STR_26| (0+32768))
  5533  174D  00AC               	movwf	writeLCD@ptr
  5534  174E  3089               	movlw	high (STR_26| (0+32768))
  5535  174F  00AD               	movwf	writeLCD@ptr+1
  5536  1750  3009               	movlw	9
  5537  1751  120A  158A  2209  160A  118A  	fcall	_writeLCD
  5538                           
  5539                           ;auxiliar.c: 74:     if( statusT0() < ( statusT0limite()/2 ) )
  5540  1756  160A  158A  27F9  160A  118A  	fcall	_statusT0
  5541  175B  1283               	bcf	3,5	;RP0=0, select bank0
  5542  175C  1303               	bcf	3,6	;RP1=0, select bank0
  5543  175D  0823               	movf	?_statusT0,w
  5544  175E  00B0               	movwf	??_textSelection4
  5545  175F  0824               	movf	?_statusT0+1,w
  5546  1760  00B1               	movwf	??_textSelection4+1
  5547  1761  3002               	movlw	2
  5548  1762  00A5               	movwf	___awdiv@divisor
  5549  1763  3000               	movlw	0
  5550  1764  00A6               	movwf	___awdiv@divisor+1
  5551  1765  160A  118A  2016  160A  118A  	fcall	_statusT0limite
  5552  176A  1283               	bcf	3,5	;RP0=0, select bank0
  5553  176B  1303               	bcf	3,6	;RP1=0, select bank0
  5554  176C  0824               	movf	?_statusT0limite+1,w
  5555  176D  00A8               	movwf	___awdiv@dividend+1
  5556  176E  0823               	movf	?_statusT0limite,w
  5557  176F  00A7               	movwf	___awdiv@dividend
  5558  1770  160A  118A  2556  160A  118A  	fcall	___awdiv
  5559  1775  1283               	bcf	3,5	;RP0=0, select bank0
  5560  1776  1303               	bcf	3,6	;RP1=0, select bank0
  5561  1777  0831               	movf	??_textSelection4+1,w
  5562  1778  3A80               	xorlw	128
  5563  1779  00B2               	movwf	??_textSelection4+2
  5564  177A  0826               	movf	?___awdiv+1,w
  5565  177B  3A80               	xorlw	128
  5566  177C  0232               	subwf	??_textSelection4+2,w
  5567  177D  1D03               	skipz
  5568  177E  2F81               	goto	u2075
  5569  177F  0825               	movf	?___awdiv,w
  5570  1780  0230               	subwf	??_textSelection4,w
  5571  1781                     u2075:	
  5572  1781  1803               	skipnc
  5573  1782  2F90               	goto	l3149
  5574                           
  5575                           ;auxiliar.c: 75:     writeLCD(6,1," ");
  5576  1783  1283               	bcf	3,5	;RP0=0, select bank0
  5577  1784  1303               	bcf	3,6	;RP1=0, select bank0
  5578  1785  01AB               	clrf	writeLCD@y
  5579  1786  0AAB               	incf	writeLCD@y,f
  5580  1787  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5581  1788  00AC               	movwf	writeLCD@ptr
  5582  1789  3087               	movlw	high ((STR_68+15)| (0+32768))
  5583  178A  00AD               	movwf	writeLCD@ptr+1
  5584  178B  3006               	movlw	6
  5585  178C  120A  158A  2209   	fcall	_writeLCD
  5586  178F  0008               	return
  5587  1790                     l3149:	
  5588                           ;auxiliar.c: 76:     else
  5589                           
  5590                           
  5591                           ;auxiliar.c: 77:     writeLCD(6,1,"4");
  5592  1790  1283               	bcf	3,5	;RP0=0, select bank0
  5593  1791  1303               	bcf	3,6	;RP1=0, select bank0
  5594  1792  01AB               	clrf	writeLCD@y
  5595  1793  0AAB               	incf	writeLCD@y,f
  5596  1794  30F9               	movlw	low (STR_22| (0+32768))
  5597  1795  00AC               	movwf	writeLCD@ptr
  5598  1796  3089               	movlw	high (STR_22| (0+32768))
  5599  1797  00AD               	movwf	writeLCD@ptr+1
  5600  1798  3006               	movlw	6
  5601  1799  120A  158A  2209   	fcall	_writeLCD
  5602  179C  0008               	return
  5603  179D                     __end_of_textSelection4:	
  5604                           
  5605                           	psect	text11
  5606  16D7                     __ptext11:	
  5607 ;; *************** function _textSelection3 *****************
  5608 ;; Defined at:
  5609 ;;		line 60 in file "auxiliar.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;		None
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;		None
  5614 ;; Return value:  Size  Location     Type
  5615 ;;                  1    wreg      void 
  5616 ;; Registers used:
  5617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5623 ;;      Params:         0       0       0       0       0
  5624 ;;      Locals:         0       0       0       0       0
  5625 ;;      Temps:          0       3       0       0       0
  5626 ;;      Totals:         0       3       0       0       0
  5627 ;;Total ram usage:        3 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:    7
  5630 ;; This function calls:
  5631 ;;		___awdiv
  5632 ;;		_statusT0
  5633 ;;		_statusT0limite
  5634 ;;		_writeLCD
  5635 ;; This function is called by:
  5636 ;;		_main
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           
  5641                           ;psect for function _textSelection3
  5642  16D7                     _textSelection3:	
  5643                           
  5644                           ;auxiliar.c: 62:     writeLCD(2,1,"2");
  5645                           
  5646                           ;incstack = 0
  5647                           ; Regs used in _textSelection3: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5648  16D7  1283               	bcf	3,5	;RP0=0, select bank0
  5649  16D8  1303               	bcf	3,6	;RP1=0, select bank0
  5650  16D9  01AB               	clrf	writeLCD@y
  5651  16DA  0AAB               	incf	writeLCD@y,f
  5652  16DB  30F7               	movlw	low (STR_14| (0+32768))
  5653  16DC  00AC               	movwf	writeLCD@ptr
  5654  16DD  3089               	movlw	high (STR_14| (0+32768))
  5655  16DE  00AD               	movwf	writeLCD@ptr+1
  5656  16DF  3002               	movlw	2
  5657  16E0  120A  158A  2209  160A  118A  	fcall	_writeLCD
  5658                           
  5659                           ;auxiliar.c: 63:     writeLCD(6,1,"4");;
  5660  16E5  1283               	bcf	3,5	;RP0=0, select bank0
  5661  16E6  1303               	bcf	3,6	;RP1=0, select bank0
  5662  16E7  01AB               	clrf	writeLCD@y
  5663  16E8  0AAB               	incf	writeLCD@y,f
  5664  16E9  30F9               	movlw	low (STR_22| (0+32768))
  5665  16EA  00AC               	movwf	writeLCD@ptr
  5666  16EB  3089               	movlw	high (STR_22| (0+32768))
  5667  16EC  00AD               	movwf	writeLCD@ptr+1
  5668  16ED  3006               	movlw	6
  5669  16EE  120A  158A  2209  160A  118A  	fcall	_writeLCD
  5670                           
  5671                           ;auxiliar.c: 64:     if( statusT0() < ( statusT0limite()/2 ) )
  5672  16F3  160A  158A  27F9  160A  118A  	fcall	_statusT0
  5673  16F8  1283               	bcf	3,5	;RP0=0, select bank0
  5674  16F9  1303               	bcf	3,6	;RP1=0, select bank0
  5675  16FA  0823               	movf	?_statusT0,w
  5676  16FB  00B0               	movwf	??_textSelection3
  5677  16FC  0824               	movf	?_statusT0+1,w
  5678  16FD  00B1               	movwf	??_textSelection3+1
  5679  16FE  3002               	movlw	2
  5680  16FF  00A5               	movwf	___awdiv@divisor
  5681  1700  3000               	movlw	0
  5682  1701  00A6               	movwf	___awdiv@divisor+1
  5683  1702  160A  118A  2016  160A  118A  	fcall	_statusT0limite
  5684  1707  1283               	bcf	3,5	;RP0=0, select bank0
  5685  1708  1303               	bcf	3,6	;RP1=0, select bank0
  5686  1709  0824               	movf	?_statusT0limite+1,w
  5687  170A  00A8               	movwf	___awdiv@dividend+1
  5688  170B  0823               	movf	?_statusT0limite,w
  5689  170C  00A7               	movwf	___awdiv@dividend
  5690  170D  160A  118A  2556  160A  118A  	fcall	___awdiv
  5691  1712  1283               	bcf	3,5	;RP0=0, select bank0
  5692  1713  1303               	bcf	3,6	;RP1=0, select bank0
  5693  1714  0831               	movf	??_textSelection3+1,w
  5694  1715  3A80               	xorlw	128
  5695  1716  00B2               	movwf	??_textSelection3+2
  5696  1717  0826               	movf	?___awdiv+1,w
  5697  1718  3A80               	xorlw	128
  5698  1719  0232               	subwf	??_textSelection3+2,w
  5699  171A  1D03               	skipz
  5700  171B  2F1E               	goto	u2065
  5701  171C  0825               	movf	?___awdiv,w
  5702  171D  0230               	subwf	??_textSelection3,w
  5703  171E                     u2065:	
  5704  171E  1803               	skipnc
  5705  171F  2F2D               	goto	l3141
  5706                           
  5707                           ;auxiliar.c: 65:     writeLCD(4,1," ");
  5708  1720  1283               	bcf	3,5	;RP0=0, select bank0
  5709  1721  1303               	bcf	3,6	;RP1=0, select bank0
  5710  1722  01AB               	clrf	writeLCD@y
  5711  1723  0AAB               	incf	writeLCD@y,f
  5712  1724  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5713  1725  00AC               	movwf	writeLCD@ptr
  5714  1726  3087               	movlw	high ((STR_68+15)| (0+32768))
  5715  1727  00AD               	movwf	writeLCD@ptr+1
  5716  1728  3004               	movlw	4
  5717  1729  120A  158A  2209   	fcall	_writeLCD
  5718  172C  0008               	return
  5719  172D                     l3141:	
  5720                           ;auxiliar.c: 66:     else
  5721                           
  5722                           
  5723                           ;auxiliar.c: 67:     writeLCD(4,1,"3");
  5724  172D  1283               	bcf	3,5	;RP0=0, select bank0
  5725  172E  1303               	bcf	3,6	;RP1=0, select bank0
  5726  172F  01AB               	clrf	writeLCD@y
  5727  1730  0AAB               	incf	writeLCD@y,f
  5728  1731  300D               	movlw	low ((STR_81+15)| (0+32768))
  5729  1732  00AC               	movwf	writeLCD@ptr
  5730  1733  3089               	movlw	high ((STR_81+15)| (0+32768))
  5731  1734  00AD               	movwf	writeLCD@ptr+1
  5732  1735  3004               	movlw	4
  5733  1736  120A  158A  2209   	fcall	_writeLCD
  5734  1739  0008               	return
  5735  173A                     __end_of_textSelection3:	
  5736                           
  5737                           	psect	text12
  5738  1674                     __ptext12:	
  5739 ;; *************** function _textSelection2 *****************
  5740 ;; Defined at:
  5741 ;;		line 50 in file "auxiliar.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;		None
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5755 ;;      Params:         0       0       0       0       0
  5756 ;;      Locals:         0       0       0       0       0
  5757 ;;      Temps:          0       3       0       0       0
  5758 ;;      Totals:         0       3       0       0       0
  5759 ;;Total ram usage:        3 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    7
  5762 ;; This function calls:
  5763 ;;		___awdiv
  5764 ;;		_statusT0
  5765 ;;		_statusT0limite
  5766 ;;		_writeLCD
  5767 ;; This function is called by:
  5768 ;;		_main
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _textSelection2
  5774  1674                     _textSelection2:	
  5775                           
  5776                           ;auxiliar.c: 52:     writeLCD(0,1,"1");
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in _textSelection2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5780  1674  1283               	bcf	3,5	;RP0=0, select bank0
  5781  1675  1303               	bcf	3,6	;RP1=0, select bank0
  5782  1676  01AB               	clrf	writeLCD@y
  5783  1677  0AAB               	incf	writeLCD@y,f
  5784  1678  30F5               	movlw	low (STR_16| (0+32768))
  5785  1679  00AC               	movwf	writeLCD@ptr
  5786  167A  3089               	movlw	high (STR_16| (0+32768))
  5787  167B  00AD               	movwf	writeLCD@ptr+1
  5788  167C  3000               	movlw	0
  5789  167D  120A  158A  2209  160A  118A  	fcall	_writeLCD
  5790                           
  5791                           ;auxiliar.c: 53:     writeLCD(4,1,"3");
  5792  1682  1283               	bcf	3,5	;RP0=0, select bank0
  5793  1683  1303               	bcf	3,6	;RP1=0, select bank0
  5794  1684  01AB               	clrf	writeLCD@y
  5795  1685  0AAB               	incf	writeLCD@y,f
  5796  1686  300D               	movlw	low ((STR_81+15)| (0+32768))
  5797  1687  00AC               	movwf	writeLCD@ptr
  5798  1688  3089               	movlw	high ((STR_81+15)| (0+32768))
  5799  1689  00AD               	movwf	writeLCD@ptr+1
  5800  168A  3004               	movlw	4
  5801  168B  120A  158A  2209  160A  118A  	fcall	_writeLCD
  5802                           
  5803                           ;auxiliar.c: 54:     if( statusT0() < ( statusT0limite()/2 ) )
  5804  1690  160A  158A  27F9  160A  118A  	fcall	_statusT0
  5805  1695  1283               	bcf	3,5	;RP0=0, select bank0
  5806  1696  1303               	bcf	3,6	;RP1=0, select bank0
  5807  1697  0823               	movf	?_statusT0,w
  5808  1698  00B0               	movwf	??_textSelection2
  5809  1699  0824               	movf	?_statusT0+1,w
  5810  169A  00B1               	movwf	??_textSelection2+1
  5811  169B  3002               	movlw	2
  5812  169C  00A5               	movwf	___awdiv@divisor
  5813  169D  3000               	movlw	0
  5814  169E  00A6               	movwf	___awdiv@divisor+1
  5815  169F  160A  118A  2016  160A  118A  	fcall	_statusT0limite
  5816  16A4  1283               	bcf	3,5	;RP0=0, select bank0
  5817  16A5  1303               	bcf	3,6	;RP1=0, select bank0
  5818  16A6  0824               	movf	?_statusT0limite+1,w
  5819  16A7  00A8               	movwf	___awdiv@dividend+1
  5820  16A8  0823               	movf	?_statusT0limite,w
  5821  16A9  00A7               	movwf	___awdiv@dividend
  5822  16AA  160A  118A  2556  160A  118A  	fcall	___awdiv
  5823  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  5824  16B0  1303               	bcf	3,6	;RP1=0, select bank0
  5825  16B1  0831               	movf	??_textSelection2+1,w
  5826  16B2  3A80               	xorlw	128
  5827  16B3  00B2               	movwf	??_textSelection2+2
  5828  16B4  0826               	movf	?___awdiv+1,w
  5829  16B5  3A80               	xorlw	128
  5830  16B6  0232               	subwf	??_textSelection2+2,w
  5831  16B7  1D03               	skipz
  5832  16B8  2EBB               	goto	u2055
  5833  16B9  0825               	movf	?___awdiv,w
  5834  16BA  0230               	subwf	??_textSelection2,w
  5835  16BB                     u2055:	
  5836  16BB  1803               	skipnc
  5837  16BC  2ECA               	goto	l3133
  5838                           
  5839                           ;auxiliar.c: 55:     writeLCD(2,1," ");
  5840  16BD  1283               	bcf	3,5	;RP0=0, select bank0
  5841  16BE  1303               	bcf	3,6	;RP1=0, select bank0
  5842  16BF  01AB               	clrf	writeLCD@y
  5843  16C0  0AAB               	incf	writeLCD@y,f
  5844  16C1  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5845  16C2  00AC               	movwf	writeLCD@ptr
  5846  16C3  3087               	movlw	high ((STR_68+15)| (0+32768))
  5847  16C4  00AD               	movwf	writeLCD@ptr+1
  5848  16C5  3002               	movlw	2
  5849  16C6  120A  158A  2209   	fcall	_writeLCD
  5850  16C9  0008               	return
  5851  16CA                     l3133:	
  5852                           ;auxiliar.c: 56:     else
  5853                           
  5854                           
  5855                           ;auxiliar.c: 57:     writeLCD(2,1,"2");
  5856  16CA  1283               	bcf	3,5	;RP0=0, select bank0
  5857  16CB  1303               	bcf	3,6	;RP1=0, select bank0
  5858  16CC  01AB               	clrf	writeLCD@y
  5859  16CD  0AAB               	incf	writeLCD@y,f
  5860  16CE  30F7               	movlw	low (STR_14| (0+32768))
  5861  16CF  00AC               	movwf	writeLCD@ptr
  5862  16D0  3089               	movlw	high (STR_14| (0+32768))
  5863  16D1  00AD               	movwf	writeLCD@ptr+1
  5864  16D2  3002               	movlw	2
  5865  16D3  120A  158A  2209   	fcall	_writeLCD
  5866  16D6  0008               	return
  5867  16D7                     __end_of_textSelection2:	
  5868                           
  5869                           	psect	text13
  5870  1611                     __ptext13:	
  5871 ;; *************** function _textSelection1 *****************
  5872 ;; Defined at:
  5873 ;;		line 39 in file "auxiliar.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;		None
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;		None
  5878 ;; Return value:  Size  Location     Type
  5879 ;;                  1    wreg      void 
  5880 ;; Registers used:
  5881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5882 ;; Tracked objects:
  5883 ;;		On entry : 0/0
  5884 ;;		On exit  : 0/0
  5885 ;;		Unchanged: 0/0
  5886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5887 ;;      Params:         0       0       0       0       0
  5888 ;;      Locals:         0       0       0       0       0
  5889 ;;      Temps:          0       3       0       0       0
  5890 ;;      Totals:         0       3       0       0       0
  5891 ;;Total ram usage:        3 bytes
  5892 ;; Hardware stack levels used:    1
  5893 ;; Hardware stack levels required when called:    7
  5894 ;; This function calls:
  5895 ;;		___awdiv
  5896 ;;		_statusT0
  5897 ;;		_statusT0limite
  5898 ;;		_writeLCD
  5899 ;; This function is called by:
  5900 ;;		_main
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           
  5905                           ;psect for function _textSelection1
  5906  1611                     _textSelection1:	
  5907                           
  5908                           ;auxiliar.c: 41:     writeLCD(15,1,"8");
  5909                           
  5910                           ;incstack = 0
  5911                           ; Regs used in _textSelection1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5912  1611  1283               	bcf	3,5	;RP0=0, select bank0
  5913  1612  1303               	bcf	3,6	;RP1=0, select bank0
  5914  1613  01AB               	clrf	writeLCD@y
  5915  1614  0AAB               	incf	writeLCD@y,f
  5916  1615  30A8               	movlw	low ((STR_125+15)| (0+32768))
  5917  1616  00AC               	movwf	writeLCD@ptr
  5918  1617  3087               	movlw	high ((STR_125+15)| (0+32768))
  5919  1618  00AD               	movwf	writeLCD@ptr+1
  5920  1619  300F               	movlw	15
  5921  161A  120A  158A  2209  160A  118A  	fcall	_writeLCD
  5922                           
  5923                           ;auxiliar.c: 42:     writeLCD(2,1,"2");
  5924  161F  1283               	bcf	3,5	;RP0=0, select bank0
  5925  1620  1303               	bcf	3,6	;RP1=0, select bank0
  5926  1621  01AB               	clrf	writeLCD@y
  5927  1622  0AAB               	incf	writeLCD@y,f
  5928  1623  30F7               	movlw	low (STR_14| (0+32768))
  5929  1624  00AC               	movwf	writeLCD@ptr
  5930  1625  3089               	movlw	high (STR_14| (0+32768))
  5931  1626  00AD               	movwf	writeLCD@ptr+1
  5932  1627  3002               	movlw	2
  5933  1628  120A  158A  2209  160A  118A  	fcall	_writeLCD
  5934                           
  5935                           ;auxiliar.c: 43:     if( statusT0() < ( statusT0limite()/2 ) )
  5936  162D  160A  158A  27F9  160A  118A  	fcall	_statusT0
  5937  1632  1283               	bcf	3,5	;RP0=0, select bank0
  5938  1633  1303               	bcf	3,6	;RP1=0, select bank0
  5939  1634  0823               	movf	?_statusT0,w
  5940  1635  00B0               	movwf	??_textSelection1
  5941  1636  0824               	movf	?_statusT0+1,w
  5942  1637  00B1               	movwf	??_textSelection1+1
  5943  1638  3002               	movlw	2
  5944  1639  00A5               	movwf	___awdiv@divisor
  5945  163A  3000               	movlw	0
  5946  163B  00A6               	movwf	___awdiv@divisor+1
  5947  163C  160A  118A  2016  160A  118A  	fcall	_statusT0limite
  5948  1641  1283               	bcf	3,5	;RP0=0, select bank0
  5949  1642  1303               	bcf	3,6	;RP1=0, select bank0
  5950  1643  0824               	movf	?_statusT0limite+1,w
  5951  1644  00A8               	movwf	___awdiv@dividend+1
  5952  1645  0823               	movf	?_statusT0limite,w
  5953  1646  00A7               	movwf	___awdiv@dividend
  5954  1647  160A  118A  2556  160A  118A  	fcall	___awdiv
  5955  164C  1283               	bcf	3,5	;RP0=0, select bank0
  5956  164D  1303               	bcf	3,6	;RP1=0, select bank0
  5957  164E  0831               	movf	??_textSelection1+1,w
  5958  164F  3A80               	xorlw	128
  5959  1650  00B2               	movwf	??_textSelection1+2
  5960  1651  0826               	movf	?___awdiv+1,w
  5961  1652  3A80               	xorlw	128
  5962  1653  0232               	subwf	??_textSelection1+2,w
  5963  1654  1D03               	skipz
  5964  1655  2E58               	goto	u2045
  5965  1656  0825               	movf	?___awdiv,w
  5966  1657  0230               	subwf	??_textSelection1,w
  5967  1658                     u2045:	
  5968  1658  1803               	skipnc
  5969  1659  2E67               	goto	l3125
  5970                           
  5971                           ;auxiliar.c: 44:     writeLCD(0,1," ");
  5972  165A  1283               	bcf	3,5	;RP0=0, select bank0
  5973  165B  1303               	bcf	3,6	;RP1=0, select bank0
  5974  165C  01AB               	clrf	writeLCD@y
  5975  165D  0AAB               	incf	writeLCD@y,f
  5976  165E  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5977  165F  00AC               	movwf	writeLCD@ptr
  5978  1660  3087               	movlw	high ((STR_68+15)| (0+32768))
  5979  1661  00AD               	movwf	writeLCD@ptr+1
  5980  1662  3000               	movlw	0
  5981  1663  120A  158A  2209   	fcall	_writeLCD
  5982  1666  0008               	return
  5983  1667                     l3125:	
  5984                           ;auxiliar.c: 45:     else
  5985                           
  5986                           
  5987                           ;auxiliar.c: 46:     writeLCD(0,1,"1");
  5988  1667  1283               	bcf	3,5	;RP0=0, select bank0
  5989  1668  1303               	bcf	3,6	;RP1=0, select bank0
  5990  1669  01AB               	clrf	writeLCD@y
  5991  166A  0AAB               	incf	writeLCD@y,f
  5992  166B  30F5               	movlw	low (STR_16| (0+32768))
  5993  166C  00AC               	movwf	writeLCD@ptr
  5994  166D  3089               	movlw	high (STR_16| (0+32768))
  5995  166E  00AD               	movwf	writeLCD@ptr+1
  5996  166F  3000               	movlw	0
  5997  1670  120A  158A  2209   	fcall	_writeLCD
  5998  1673  0008               	return
  5999  1674                     __end_of_textSelection1:	
  6000                           
  6001                           	psect	text14
  6002  1016                     __ptext14:	
  6003 ;; *************** function _statusT0limite *****************
  6004 ;; Defined at:
  6005 ;;		line 33 in file "timer0.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;		None
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;		None
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  2    3[BANK0 ] int 
  6012 ;; Registers used:
  6013 ;;		wreg
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6019 ;;      Params:         0       2       0       0       0
  6020 ;;      Locals:         0       0       0       0       0
  6021 ;;      Temps:          0       0       0       0       0
  6022 ;;      Totals:         0       2       0       0       0
  6023 ;;Total ram usage:        2 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    4
  6026 ;; This function calls:
  6027 ;;		Nothing
  6028 ;; This function is called by:
  6029 ;;		_textSelection1
  6030 ;;		_textSelection2
  6031 ;;		_textSelection3
  6032 ;;		_textSelection4
  6033 ;;		_textSelection5
  6034 ;;		_textSelection6
  6035 ;;		_textSelection7
  6036 ;;		_textSelection8
  6037 ;;		_textSelectionEST
  6038 ;;		_textSelectionCLP
  6039 ;;		_textSelectionPAR
  6040 ;;		_textSelectionDES
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           
  6045                           ;psect for function _statusT0limite
  6046  1016                     _statusT0limite:	
  6047                           
  6048                           ;timer0.c: 35:     return( t0final );
  6049                           
  6050                           ;incstack = 0
  6051                           ; Regs used in _statusT0limite: [wreg]
  6052  1016  1283               	bcf	3,5	;RP0=0, select bank0
  6053  1017  1303               	bcf	3,6	;RP1=0, select bank0
  6054  1018  084B               	movf	_t0final+1,w
  6055  1019  00A4               	movwf	?_statusT0limite+1
  6056  101A  084A               	movf	_t0final,w
  6057  101B  00A3               	movwf	?_statusT0limite
  6058  101C  0008               	return
  6059  101D                     __end_of_statusT0limite:	
  6060                           
  6061                           	psect	text15
  6062  1FF9                     __ptext15:	
  6063 ;; *************** function _statusT0 *****************
  6064 ;; Defined at:
  6065 ;;		line 24 in file "timer0.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;		None
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;		None
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  2    3[BANK0 ] int 
  6072 ;; Registers used:
  6073 ;;		wreg
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6079 ;;      Params:         0       2       0       0       0
  6080 ;;      Locals:         0       0       0       0       0
  6081 ;;      Temps:          0       0       0       0       0
  6082 ;;      Totals:         0       2       0       0       0
  6083 ;;Total ram usage:        2 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:    4
  6086 ;; This function calls:
  6087 ;;		Nothing
  6088 ;; This function is called by:
  6089 ;;		_textSelection1
  6090 ;;		_textSelection2
  6091 ;;		_textSelection3
  6092 ;;		_textSelection4
  6093 ;;		_textSelection5
  6094 ;;		_textSelection6
  6095 ;;		_textSelection7
  6096 ;;		_textSelection8
  6097 ;;		_textSelectionEST
  6098 ;;		_textSelectionCLP
  6099 ;;		_textSelectionPAR
  6100 ;;		_textSelectionDES
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           
  6105                           ;psect for function _statusT0
  6106  1FF9                     _statusT0:	
  6107                           
  6108                           ;timer0.c: 26:     return( t0cont );
  6109                           
  6110                           ;incstack = 0
  6111                           ; Regs used in _statusT0: [wreg]
  6112  1FF9  1283               	bcf	3,5	;RP0=0, select bank0
  6113  1FFA  1303               	bcf	3,6	;RP1=0, select bank0
  6114  1FFB  0849               	movf	_t0cont+1,w
  6115  1FFC  00A4               	movwf	?_statusT0+1
  6116  1FFD  0848               	movf	_t0cont,w
  6117  1FFE  00A3               	movwf	?_statusT0
  6118  1FFF  0008               	return
  6119  2000                     __end_of_statusT0:	
  6120                           
  6121                           	psect	text16
  6122  1556                     __ptext16:	
  6123 ;; *************** function ___awdiv *****************
  6124 ;; Defined at:
  6125 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;  divisor         2    5[BANK0 ] int 
  6128 ;;  dividend        2    7[BANK0 ] int 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  quotient        2   12[BANK0 ] int 
  6131 ;;  sign            1   11[BANK0 ] unsigned char 
  6132 ;;  counter         1   10[BANK0 ] unsigned char 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  2    5[BANK0 ] int 
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6142 ;;      Params:         0       4       0       0       0
  6143 ;;      Locals:         0       4       0       0       0
  6144 ;;      Temps:          0       1       0       0       0
  6145 ;;      Totals:         0       9       0       0       0
  6146 ;;Total ram usage:        9 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    4
  6149 ;; This function calls:
  6150 ;;		Nothing
  6151 ;; This function is called by:
  6152 ;;		_textSelection1
  6153 ;;		_textSelection2
  6154 ;;		_textSelection3
  6155 ;;		_textSelection4
  6156 ;;		_textSelection5
  6157 ;;		_textSelection6
  6158 ;;		_textSelection7
  6159 ;;		_textSelection8
  6160 ;;		_textSelectionEST
  6161 ;;		_textSelectionCLP
  6162 ;;		_textSelectionPAR
  6163 ;;		_textSelectionDES
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           
  6168                           ;psect for function ___awdiv
  6169  1556                     ___awdiv:	
  6170                           
  6171                           ;incstack = 0
  6172                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6173  1556  1283               	bcf	3,5	;RP0=0, select bank0
  6174  1557  1303               	bcf	3,6	;RP1=0, select bank0
  6175  1558  01AB               	clrf	___awdiv@sign
  6176  1559  1FA6               	btfss	___awdiv@divisor+1,7
  6177  155A  2D62               	goto	l2961
  6178  155B  09A5               	comf	___awdiv@divisor,f
  6179  155C  09A6               	comf	___awdiv@divisor+1,f
  6180  155D  0AA5               	incf	___awdiv@divisor,f
  6181  155E  1903               	skipnz
  6182  155F  0AA6               	incf	___awdiv@divisor+1,f
  6183  1560  01AB               	clrf	___awdiv@sign
  6184  1561  0AAB               	incf	___awdiv@sign,f
  6185  1562                     l2961:	
  6186  1562  1FA8               	btfss	___awdiv@dividend+1,7
  6187  1563  2D6D               	goto	l2967
  6188  1564  09A7               	comf	___awdiv@dividend,f
  6189  1565  09A8               	comf	___awdiv@dividend+1,f
  6190  1566  0AA7               	incf	___awdiv@dividend,f
  6191  1567  1903               	skipnz
  6192  1568  0AA8               	incf	___awdiv@dividend+1,f
  6193  1569  3001               	movlw	1
  6194  156A  00A9               	movwf	??___awdiv
  6195  156B  0829               	movf	??___awdiv,w
  6196  156C  06AB               	xorwf	___awdiv@sign,f
  6197  156D                     l2967:	
  6198  156D  01AC               	clrf	___awdiv@quotient
  6199  156E  01AD               	clrf	___awdiv@quotient+1
  6200  156F  0825               	movf	___awdiv@divisor,w
  6201  1570  0426               	iorwf	___awdiv@divisor+1,w
  6202  1571  1903               	btfsc	3,2
  6203  1572  2DA4               	goto	l2989
  6204  1573  01AA               	clrf	___awdiv@counter
  6205  1574  0AAA               	incf	___awdiv@counter,f
  6206  1575                     l2977:	
  6207  1575  1BA6               	btfsc	___awdiv@divisor+1,7
  6208  1576  2D83               	goto	l2979
  6209  1577  3001               	movlw	1
  6210  1578                     u1855:	
  6211  1578  1003               	clrc
  6212  1579  0DA5               	rlf	___awdiv@divisor,f
  6213  157A  0DA6               	rlf	___awdiv@divisor+1,f
  6214  157B  3EFF               	addlw	-1
  6215  157C  1D03               	skipz
  6216  157D  2D78               	goto	u1855
  6217  157E  3001               	movlw	1
  6218  157F  00A9               	movwf	??___awdiv
  6219  1580  0829               	movf	??___awdiv,w
  6220  1581  07AA               	addwf	___awdiv@counter,f
  6221  1582  2D75               	goto	l2977
  6222  1583                     l2979:	
  6223  1583  3001               	movlw	1
  6224  1584                     u1875:	
  6225  1584  1003               	clrc
  6226  1585  0DAC               	rlf	___awdiv@quotient,f
  6227  1586  0DAD               	rlf	___awdiv@quotient+1,f
  6228  1587  3EFF               	addlw	-1
  6229  1588  1D03               	skipz
  6230  1589  2D84               	goto	u1875
  6231  158A  0826               	movf	___awdiv@divisor+1,w
  6232  158B  0228               	subwf	___awdiv@dividend+1,w
  6233  158C  1D03               	skipz
  6234  158D  2D90               	goto	u1885
  6235  158E  0825               	movf	___awdiv@divisor,w
  6236  158F  0227               	subwf	___awdiv@dividend,w
  6237  1590                     u1885:	
  6238  1590  1C03               	skipc
  6239  1591  2D99               	goto	l2985
  6240  1592  0825               	movf	___awdiv@divisor,w
  6241  1593  02A7               	subwf	___awdiv@dividend,f
  6242  1594  0826               	movf	___awdiv@divisor+1,w
  6243  1595  1C03               	skipc
  6244  1596  03A8               	decf	___awdiv@dividend+1,f
  6245  1597  02A8               	subwf	___awdiv@dividend+1,f
  6246  1598  142C               	bsf	___awdiv@quotient,0
  6247  1599                     l2985:	
  6248  1599  3001               	movlw	1
  6249  159A                     u1895:	
  6250  159A  1003               	clrc
  6251  159B  0CA6               	rrf	___awdiv@divisor+1,f
  6252  159C  0CA5               	rrf	___awdiv@divisor,f
  6253  159D  3EFF               	addlw	-1
  6254  159E  1D03               	skipz
  6255  159F  2D9A               	goto	u1895
  6256  15A0  3001               	movlw	1
  6257  15A1  02AA               	subwf	___awdiv@counter,f
  6258  15A2  1D03               	btfss	3,2
  6259  15A3  2D83               	goto	l2979
  6260  15A4                     l2989:	
  6261  15A4  082B               	movf	___awdiv@sign,w
  6262  15A5  1903               	btfsc	3,2
  6263  15A6  2DAC               	goto	l2993
  6264  15A7  09AC               	comf	___awdiv@quotient,f
  6265  15A8  09AD               	comf	___awdiv@quotient+1,f
  6266  15A9  0AAC               	incf	___awdiv@quotient,f
  6267  15AA  1903               	skipnz
  6268  15AB  0AAD               	incf	___awdiv@quotient+1,f
  6269  15AC                     l2993:	
  6270  15AC  082D               	movf	___awdiv@quotient+1,w
  6271  15AD  00A6               	movwf	?___awdiv+1
  6272  15AE  082C               	movf	___awdiv@quotient,w
  6273  15AF  00A5               	movwf	?___awdiv
  6274  15B0  0008               	return
  6275  15B1                     __end_of___awdiv:	
  6276                           
  6277                           	psect	text17
  6278  0D06                     __ptext17:	
  6279 ;; *************** function _textLoading *****************
  6280 ;; Defined at:
  6281 ;;		line 156 in file "auxiliar.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;		None
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;		None
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6295 ;;      Params:         0       0       0       0       0
  6296 ;;      Locals:         0       0       0       0       0
  6297 ;;      Temps:          0       3       0       0       0
  6298 ;;      Totals:         0       3       0       0       0
  6299 ;;Total ram usage:        3 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    7
  6302 ;; This function calls:
  6303 ;;		_writeLCD
  6304 ;; This function is called by:
  6305 ;;		_main
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           
  6310                           ;psect for function _textLoading
  6311  0D06                     _textLoading:	
  6312                           
  6313                           ;auxiliar.c: 158:         writeLCD(9,0,".  ");
  6314                           
  6315                           ;incstack = 0
  6316                           ; Regs used in _textLoading: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6317  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  6318  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  6319  0D08  01AB               	clrf	writeLCD@y
  6320  0D09  30E1               	movlw	low (STR_57| (0+32768))
  6321  0D0A  00AC               	movwf	writeLCD@ptr
  6322  0D0B  3089               	movlw	high (STR_57| (0+32768))
  6323  0D0C  00AD               	movwf	writeLCD@ptr+1
  6324  0D0D  3009               	movlw	9
  6325  0D0E  120A  158A  2209  120A  158A  	fcall	_writeLCD
  6326                           
  6327                           ;auxiliar.c: 159:         _delay((unsigned long)((500)*(20000000/4000.0)));
  6328  0D13  300D               	movlw	13
  6329  0D14  1283               	bcf	3,5	;RP0=0, select bank0
  6330  0D15  1303               	bcf	3,6	;RP1=0, select bank0
  6331  0D16  00B2               	movwf	??_textLoading+2
  6332  0D17  30AF               	movlw	175
  6333  0D18  00B1               	movwf	??_textLoading+1
  6334  0D19  30B5               	movlw	181
  6335  0D1A  00B0               	movwf	??_textLoading
  6336  0D1B                     u2937:	
  6337  0D1B  0BB0               	decfsz	??_textLoading,f
  6338  0D1C  2D1B               	goto	u2937
  6339  0D1D  0BB1               	decfsz	??_textLoading+1,f
  6340  0D1E  2D1B               	goto	u2937
  6341  0D1F  0BB2               	decfsz	??_textLoading+2,f
  6342  0D20  2D1B               	goto	u2937
  6343  0D21  2D22               	nop2
  6344                           
  6345                           ;auxiliar.c: 160:         writeLCD(9,0," . ");
  6346  0D22  1283               	bcf	3,5	;RP0=0, select bank0
  6347  0D23  1303               	bcf	3,6	;RP1=0, select bank0
  6348  0D24  01AB               	clrf	writeLCD@y
  6349  0D25  30E5               	movlw	low (STR_58| (0+32768))
  6350  0D26  00AC               	movwf	writeLCD@ptr
  6351  0D27  3089               	movlw	high (STR_58| (0+32768))
  6352  0D28  00AD               	movwf	writeLCD@ptr+1
  6353  0D29  3009               	movlw	9
  6354  0D2A  120A  158A  2209  120A  158A  	fcall	_writeLCD
  6355                           
  6356                           ;auxiliar.c: 161:         _delay((unsigned long)((500)*(20000000/4000.0)));
  6357  0D2F  300D               	movlw	13
  6358  0D30  1283               	bcf	3,5	;RP0=0, select bank0
  6359  0D31  1303               	bcf	3,6	;RP1=0, select bank0
  6360  0D32  00B2               	movwf	??_textLoading+2
  6361  0D33  30AF               	movlw	175
  6362  0D34  00B1               	movwf	??_textLoading+1
  6363  0D35  30B5               	movlw	181
  6364  0D36  00B0               	movwf	??_textLoading
  6365  0D37                     u2947:	
  6366  0D37  0BB0               	decfsz	??_textLoading,f
  6367  0D38  2D37               	goto	u2947
  6368  0D39  0BB1               	decfsz	??_textLoading+1,f
  6369  0D3A  2D37               	goto	u2947
  6370  0D3B  0BB2               	decfsz	??_textLoading+2,f
  6371  0D3C  2D37               	goto	u2947
  6372  0D3D  2D3E               	nop2
  6373                           
  6374                           ;auxiliar.c: 162:         writeLCD(9,0,"  .");
  6375  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  6376  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  6377  0D40  01AB               	clrf	writeLCD@y
  6378  0D41  30ED               	movlw	low (STR_59| (0+32768))
  6379  0D42  00AC               	movwf	writeLCD@ptr
  6380  0D43  3089               	movlw	high (STR_59| (0+32768))
  6381  0D44  00AD               	movwf	writeLCD@ptr+1
  6382  0D45  3009               	movlw	9
  6383  0D46  120A  158A  2209  120A  158A  	fcall	_writeLCD
  6384                           
  6385                           ;auxiliar.c: 163:         _delay((unsigned long)((500)*(20000000/4000.0)));
  6386  0D4B  300D               	movlw	13
  6387  0D4C  1283               	bcf	3,5	;RP0=0, select bank0
  6388  0D4D  1303               	bcf	3,6	;RP1=0, select bank0
  6389  0D4E  00B2               	movwf	??_textLoading+2
  6390  0D4F  30AF               	movlw	175
  6391  0D50  00B1               	movwf	??_textLoading+1
  6392  0D51  30B5               	movlw	181
  6393  0D52  00B0               	movwf	??_textLoading
  6394  0D53                     u2957:	
  6395  0D53  0BB0               	decfsz	??_textLoading,f
  6396  0D54  2D53               	goto	u2957
  6397  0D55  0BB1               	decfsz	??_textLoading+1,f
  6398  0D56  2D53               	goto	u2957
  6399  0D57  0BB2               	decfsz	??_textLoading+2,f
  6400  0D58  2D53               	goto	u2957
  6401  0D59  2D5A               	nop2
  6402                           
  6403                           ;auxiliar.c: 164:         writeLCD(9,0,".  ");
  6404  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  6405  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  6406  0D5C  01AB               	clrf	writeLCD@y
  6407  0D5D  30E1               	movlw	low (STR_57| (0+32768))
  6408  0D5E  00AC               	movwf	writeLCD@ptr
  6409  0D5F  3089               	movlw	high (STR_57| (0+32768))
  6410  0D60  00AD               	movwf	writeLCD@ptr+1
  6411  0D61  3009               	movlw	9
  6412  0D62  120A  158A  2209  120A  158A  	fcall	_writeLCD
  6413                           
  6414                           ;auxiliar.c: 165:         _delay((unsigned long)((500)*(20000000/4000.0)));
  6415  0D67  300D               	movlw	13
  6416  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  6417  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  6418  0D6A  00B2               	movwf	??_textLoading+2
  6419  0D6B  30AF               	movlw	175
  6420  0D6C  00B1               	movwf	??_textLoading+1
  6421  0D6D  30B5               	movlw	181
  6422  0D6E  00B0               	movwf	??_textLoading
  6423  0D6F                     u2967:	
  6424  0D6F  0BB0               	decfsz	??_textLoading,f
  6425  0D70  2D6F               	goto	u2967
  6426  0D71  0BB1               	decfsz	??_textLoading+1,f
  6427  0D72  2D6F               	goto	u2967
  6428  0D73  0BB2               	decfsz	??_textLoading+2,f
  6429  0D74  2D6F               	goto	u2967
  6430  0D75  2D76               	nop2
  6431                           
  6432                           ;auxiliar.c: 166:         writeLCD(9,0," . ");
  6433  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  6434  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  6435  0D78  01AB               	clrf	writeLCD@y
  6436  0D79  30E5               	movlw	low (STR_58| (0+32768))
  6437  0D7A  00AC               	movwf	writeLCD@ptr
  6438  0D7B  3089               	movlw	high (STR_58| (0+32768))
  6439  0D7C  00AD               	movwf	writeLCD@ptr+1
  6440  0D7D  3009               	movlw	9
  6441  0D7E  120A  158A  2209  120A  158A  	fcall	_writeLCD
  6442                           
  6443                           ;auxiliar.c: 167:         _delay((unsigned long)((500)*(20000000/4000.0)));
  6444  0D83  300D               	movlw	13
  6445  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  6446  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  6447  0D86  00B2               	movwf	??_textLoading+2
  6448  0D87  30AF               	movlw	175
  6449  0D88  00B1               	movwf	??_textLoading+1
  6450  0D89  30B5               	movlw	181
  6451  0D8A  00B0               	movwf	??_textLoading
  6452  0D8B                     u2977:	
  6453  0D8B  0BB0               	decfsz	??_textLoading,f
  6454  0D8C  2D8B               	goto	u2977
  6455  0D8D  0BB1               	decfsz	??_textLoading+1,f
  6456  0D8E  2D8B               	goto	u2977
  6457  0D8F  0BB2               	decfsz	??_textLoading+2,f
  6458  0D90  2D8B               	goto	u2977
  6459  0D91  2D92               	nop2
  6460                           
  6461                           ;auxiliar.c: 168:         writeLCD(9,0,"  .");
  6462  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  6463  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  6464  0D94  01AB               	clrf	writeLCD@y
  6465  0D95  30ED               	movlw	low (STR_59| (0+32768))
  6466  0D96  00AC               	movwf	writeLCD@ptr
  6467  0D97  3089               	movlw	high (STR_59| (0+32768))
  6468  0D98  00AD               	movwf	writeLCD@ptr+1
  6469  0D99  3009               	movlw	9
  6470  0D9A  120A  158A  2209  120A  158A  	fcall	_writeLCD
  6471                           
  6472                           ;auxiliar.c: 169:         _delay((unsigned long)((500)*(20000000/4000.0)));
  6473  0D9F  300D               	movlw	13
  6474  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  6475  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  6476  0DA2  00B2               	movwf	??_textLoading+2
  6477  0DA3  30AF               	movlw	175
  6478  0DA4  00B1               	movwf	??_textLoading+1
  6479  0DA5  30B5               	movlw	181
  6480  0DA6  00B0               	movwf	??_textLoading
  6481  0DA7                     u2987:	
  6482  0DA7  0BB0               	decfsz	??_textLoading,f
  6483  0DA8  2DA7               	goto	u2987
  6484  0DA9  0BB1               	decfsz	??_textLoading+1,f
  6485  0DAA  2DA7               	goto	u2987
  6486  0DAB  0BB2               	decfsz	??_textLoading+2,f
  6487  0DAC  2DA7               	goto	u2987
  6488  0DAD  2DAE               	nop2
  6489                           
  6490                           ;auxiliar.c: 171:         writeLCD(9,0,".  ");
  6491  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  6492  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  6493  0DB0  01AB               	clrf	writeLCD@y
  6494  0DB1  30E1               	movlw	low (STR_57| (0+32768))
  6495  0DB2  00AC               	movwf	writeLCD@ptr
  6496  0DB3  3089               	movlw	high (STR_57| (0+32768))
  6497  0DB4  00AD               	movwf	writeLCD@ptr+1
  6498  0DB5  3009               	movlw	9
  6499  0DB6  120A  158A  2209  120A  158A  	fcall	_writeLCD
  6500                           
  6501                           ;auxiliar.c: 172:         _delay((unsigned long)((500)*(20000000/4000.0)));
  6502  0DBB  300D               	movlw	13
  6503  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  6504  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  6505  0DBE  00B2               	movwf	??_textLoading+2
  6506  0DBF  30AF               	movlw	175
  6507  0DC0  00B1               	movwf	??_textLoading+1
  6508  0DC1  30B5               	movlw	181
  6509  0DC2  00B0               	movwf	??_textLoading
  6510  0DC3                     u2997:	
  6511  0DC3  0BB0               	decfsz	??_textLoading,f
  6512  0DC4  2DC3               	goto	u2997
  6513  0DC5  0BB1               	decfsz	??_textLoading+1,f
  6514  0DC6  2DC3               	goto	u2997
  6515  0DC7  0BB2               	decfsz	??_textLoading+2,f
  6516  0DC8  2DC3               	goto	u2997
  6517  0DC9  2DCA               	nop2
  6518                           
  6519                           ;auxiliar.c: 173:         writeLCD(9,0,".. ");
  6520  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  6521  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  6522  0DCC  01AB               	clrf	writeLCD@y
  6523  0DCD  30E9               	movlw	low (STR_64| (0+32768))
  6524  0DCE  00AC               	movwf	writeLCD@ptr
  6525  0DCF  3089               	movlw	high (STR_64| (0+32768))
  6526  0DD0  00AD               	movwf	writeLCD@ptr+1
  6527  0DD1  3009               	movlw	9
  6528  0DD2  120A  158A  2209  120A  158A  	fcall	_writeLCD
  6529                           
  6530                           ;auxiliar.c: 174:         _delay((unsigned long)((500)*(20000000/4000.0)));
  6531  0DD7  300D               	movlw	13
  6532  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  6533  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  6534  0DDA  00B2               	movwf	??_textLoading+2
  6535  0DDB  30AF               	movlw	175
  6536  0DDC  00B1               	movwf	??_textLoading+1
  6537  0DDD  30B5               	movlw	181
  6538  0DDE  00B0               	movwf	??_textLoading
  6539  0DDF                     u3007:	
  6540  0DDF  0BB0               	decfsz	??_textLoading,f
  6541  0DE0  2DDF               	goto	u3007
  6542  0DE1  0BB1               	decfsz	??_textLoading+1,f
  6543  0DE2  2DDF               	goto	u3007
  6544  0DE3  0BB2               	decfsz	??_textLoading+2,f
  6545  0DE4  2DDF               	goto	u3007
  6546  0DE5  2DE6               	nop2
  6547                           
  6548                           ;auxiliar.c: 175:         writeLCD(9,0,"...");
  6549  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  6550  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  6551  0DE8  01AB               	clrf	writeLCD@y
  6552  0DE9  30F1               	movlw	low (STR_65| (0+32768))
  6553  0DEA  00AC               	movwf	writeLCD@ptr
  6554  0DEB  3089               	movlw	high (STR_65| (0+32768))
  6555  0DEC  00AD               	movwf	writeLCD@ptr+1
  6556  0DED  3009               	movlw	9
  6557  0DEE  120A  158A  2209  120A  158A  	fcall	_writeLCD
  6558                           
  6559                           ;auxiliar.c: 176:         _delay((unsigned long)((700)*(20000000/4000.0)));
  6560  0DF3  3012               	movlw	18
  6561  0DF4  1283               	bcf	3,5	;RP0=0, select bank0
  6562  0DF5  1303               	bcf	3,6	;RP1=0, select bank0
  6563  0DF6  00B2               	movwf	??_textLoading+2
  6564  0DF7  30C2               	movlw	194
  6565  0DF8  00B1               	movwf	??_textLoading+1
  6566  0DF9  3065               	movlw	101
  6567  0DFA  00B0               	movwf	??_textLoading
  6568  0DFB                     u3017:	
  6569  0DFB  0BB0               	decfsz	??_textLoading,f
  6570  0DFC  2DFB               	goto	u3017
  6571  0DFD  0BB1               	decfsz	??_textLoading+1,f
  6572  0DFE  2DFB               	goto	u3017
  6573  0DFF  0BB2               	decfsz	??_textLoading+2,f
  6574  0E00  2DFB               	goto	u3017
  6575  0E01  2E02               	nop2
  6576  0E02  0008               	return
  6577  0E03                     __end_of_textLoading:	
  6578                           
  6579                           	psect	text18
  6580  11AF                     __ptext18:	
  6581 ;; *************** function _textConfig *****************
  6582 ;; Defined at:
  6583 ;;		line 18 in file "auxiliar.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;		None
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;		None
  6588 ;; Return value:  Size  Location     Type
  6589 ;;                  1    wreg      void 
  6590 ;; Registers used:
  6591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6597 ;;      Params:         0       0       0       0       0
  6598 ;;      Locals:         0       0       0       0       0
  6599 ;;      Temps:          0       0       0       0       0
  6600 ;;      Totals:         0       0       0       0       0
  6601 ;;Total ram usage:        0 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    7
  6604 ;; This function calls:
  6605 ;;		_cmdLCD
  6606 ;;		_writeLCD
  6607 ;; This function is called by:
  6608 ;;		_main
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           
  6613                           ;psect for function _textConfig
  6614  11AF                     _textConfig:	
  6615                           
  6616                           ;auxiliar.c: 20:     cmdLCD(0x01);
  6617                           
  6618                           ;incstack = 0
  6619                           ; Regs used in _textConfig: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6620  11AF  3001               	movlw	1
  6621  11B0  160A  118A  24A1  160A  118A  	fcall	_cmdLCD
  6622                           
  6623                           ;auxiliar.c: 21:     writeLCD(0,0,"   Configurar   ");
  6624  11B5  1283               	bcf	3,5	;RP0=0, select bank0
  6625  11B6  1303               	bcf	3,6	;RP1=0, select bank0
  6626  11B7  01AB               	clrf	writeLCD@y
  6627  11B8  30A9               	movlw	low (STR_7| (0+32768))
  6628  11B9  00AC               	movwf	writeLCD@ptr
  6629  11BA  3088               	movlw	high (STR_7| (0+32768))
  6630  11BB  00AD               	movwf	writeLCD@ptr+1
  6631  11BC  3000               	movlw	0
  6632  11BD  120A  158A  2209  160A  118A  	fcall	_writeLCD
  6633                           
  6634                           ;auxiliar.c: 22:     writeLCD(0,1,"   ----------   ");
  6635  11C2  1283               	bcf	3,5	;RP0=0, select bank0
  6636  11C3  1303               	bcf	3,6	;RP1=0, select bank0
  6637  11C4  01AB               	clrf	writeLCD@y
  6638  11C5  0AAB               	incf	writeLCD@y,f
  6639  11C6  3065               	movlw	low (STR_8| (0+32768))
  6640  11C7  00AC               	movwf	writeLCD@ptr
  6641  11C8  3088               	movlw	high (STR_8| (0+32768))
  6642  11C9  00AD               	movwf	writeLCD@ptr+1
  6643  11CA  3000               	movlw	0
  6644  11CB  120A  158A  2209   	fcall	_writeLCD
  6645  11CE  0008               	return
  6646  11CF                     __end_of_textConfig:	
  6647                           
  6648                           	psect	text19
  6649  118F                     __ptext19:	
  6650 ;; *************** function _textCMpar *****************
  6651 ;; Defined at:
  6652 ;;		line 25 in file "auxiliar.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;		None
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;		None
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  1    wreg      void 
  6659 ;; Registers used:
  6660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6666 ;;      Params:         0       0       0       0       0
  6667 ;;      Locals:         0       0       0       0       0
  6668 ;;      Temps:          0       0       0       0       0
  6669 ;;      Totals:         0       0       0       0       0
  6670 ;;Total ram usage:        0 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    7
  6673 ;; This function calls:
  6674 ;;		_cmdLCD
  6675 ;;		_writeLCD
  6676 ;; This function is called by:
  6677 ;;		_main
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           
  6682                           ;psect for function _textCMpar
  6683  118F                     _textCMpar:	
  6684                           
  6685                           ;auxiliar.c: 27:     cmdLCD(0x01);
  6686                           
  6687                           ;incstack = 0
  6688                           ; Regs used in _textCMpar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6689  118F  3001               	movlw	1
  6690  1190  160A  118A  24A1  160A  118A  	fcall	_cmdLCD
  6691                           
  6692                           ;auxiliar.c: 28:     writeLCD(0,0,"   Pareamento   ");
  6693  1195  1283               	bcf	3,5	;RP0=0, select bank0
  6694  1196  1303               	bcf	3,6	;RP1=0, select bank0
  6695  1197  01AB               	clrf	writeLCD@y
  6696  1198  3098               	movlw	low (STR_9| (0+32768))
  6697  1199  00AC               	movwf	writeLCD@ptr
  6698  119A  3088               	movlw	high (STR_9| (0+32768))
  6699  119B  00AD               	movwf	writeLCD@ptr+1
  6700  119C  3000               	movlw	0
  6701  119D  120A  158A  2209  160A  118A  	fcall	_writeLCD
  6702                           
  6703                           ;auxiliar.c: 29:     writeLCD(0,1,"   ----------   ");
  6704  11A2  1283               	bcf	3,5	;RP0=0, select bank0
  6705  11A3  1303               	bcf	3,6	;RP1=0, select bank0
  6706  11A4  01AB               	clrf	writeLCD@y
  6707  11A5  0AAB               	incf	writeLCD@y,f
  6708  11A6  3065               	movlw	low (STR_8| (0+32768))
  6709  11A7  00AC               	movwf	writeLCD@ptr
  6710  11A8  3088               	movlw	high (STR_8| (0+32768))
  6711  11A9  00AD               	movwf	writeLCD@ptr+1
  6712  11AA  3000               	movlw	0
  6713  11AB  120A  158A  2209   	fcall	_writeLCD
  6714  11AE  0008               	return
  6715  11AF                     __end_of_textCMpar:	
  6716                           
  6717                           	psect	text20
  6718  116F                     __ptext20:	
  6719 ;; *************** function _textCMdat *****************
  6720 ;; Defined at:
  6721 ;;		line 32 in file "auxiliar.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      void 
  6728 ;; Registers used:
  6729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6735 ;;      Params:         0       0       0       0       0
  6736 ;;      Locals:         0       0       0       0       0
  6737 ;;      Temps:          0       0       0       0       0
  6738 ;;      Totals:         0       0       0       0       0
  6739 ;;Total ram usage:        0 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    7
  6742 ;; This function calls:
  6743 ;;		_cmdLCD
  6744 ;;		_writeLCD
  6745 ;; This function is called by:
  6746 ;;		_main
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           
  6751                           ;psect for function _textCMdat
  6752  116F                     _textCMdat:	
  6753                           
  6754                           ;auxiliar.c: 34:     cmdLCD(0x01);
  6755                           
  6756                           ;incstack = 0
  6757                           ; Regs used in _textCMdat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6758  116F  3001               	movlw	1
  6759  1170  160A  118A  24A1  160A  118A  	fcall	_cmdLCD
  6760                           
  6761                           ;auxiliar.c: 35:     writeLCD(0,0," Envio de Dados ");
  6762  1175  1283               	bcf	3,5	;RP0=0, select bank0
  6763  1176  1303               	bcf	3,6	;RP1=0, select bank0
  6764  1177  01AB               	clrf	writeLCD@y
  6765  1178  30CB               	movlw	low (STR_11| (0+32768))
  6766  1179  00AC               	movwf	writeLCD@ptr
  6767  117A  3088               	movlw	high (STR_11| (0+32768))
  6768  117B  00AD               	movwf	writeLCD@ptr+1
  6769  117C  3000               	movlw	0
  6770  117D  120A  158A  2209  160A  118A  	fcall	_writeLCD
  6771                           
  6772                           ;auxiliar.c: 36:     writeLCD(0,1,"   ----------   ");
  6773  1182  1283               	bcf	3,5	;RP0=0, select bank0
  6774  1183  1303               	bcf	3,6	;RP1=0, select bank0
  6775  1184  01AB               	clrf	writeLCD@y
  6776  1185  0AAB               	incf	writeLCD@y,f
  6777  1186  3065               	movlw	low (STR_8| (0+32768))
  6778  1187  00AC               	movwf	writeLCD@ptr
  6779  1188  3088               	movlw	high (STR_8| (0+32768))
  6780  1189  00AD               	movwf	writeLCD@ptr+1
  6781  118A  3000               	movlw	0
  6782  118B  120A  158A  2209   	fcall	_writeLCD
  6783  118E  0008               	return
  6784  118F                     __end_of_textCMdat:	
  6785                           
  6786                           	psect	text21
  6787  1133                     __ptext21:	
  6788 ;; *************** function _statusFIFO *****************
  6789 ;; Defined at:
  6790 ;;		line 35 in file "fifo.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;		None
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;		None
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  1    wreg      unsigned char 
  6797 ;; Registers used:
  6798 ;;		wreg, status,2, status,0, pclath, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 0/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6804 ;;      Params:         0       0       0       0       0
  6805 ;;      Locals:         0       0       0       0       0
  6806 ;;      Temps:          0       2       0       0       0
  6807 ;;      Totals:         0       2       0       0       0
  6808 ;;Total ram usage:        2 bytes
  6809 ;; Hardware stack levels used:    1
  6810 ;; Hardware stack levels required when called:    5
  6811 ;; This function calls:
  6812 ;;		___awmod
  6813 ;; This function is called by:
  6814 ;;		_main
  6815 ;;		_statusRxEUSART
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           
  6820                           ;psect for function _statusFIFO
  6821  1133                     _statusFIFO:	
  6822                           
  6823                           ;fifo.c: 37:     return( (fifoHead - fifoTail) % 30 );
  6824                           
  6825                           ;incstack = 0
  6826                           ; Regs used in _statusFIFO: [wreg+status,2+status,0+pclath+cstack]
  6827  1133  301E               	movlw	30
  6828  1134  1283               	bcf	3,5	;RP0=0, select bank0
  6829  1135  1303               	bcf	3,6	;RP1=0, select bank0
  6830  1136  00A3               	movwf	___awmod@divisor
  6831  1137  3000               	movlw	0
  6832  1138  00A4               	movwf	___awmod@divisor+1
  6833  1139  084C               	movf	_fifoTail,w
  6834  113A  00AA               	movwf	??_statusFIFO
  6835  113B  01AB               	clrf	??_statusFIFO+1
  6836  113C  09AA               	comf	??_statusFIFO,f
  6837  113D  09AB               	comf	??_statusFIFO+1,f
  6838  113E  0AAA               	incf	??_statusFIFO,f
  6839  113F  1903               	skipnz
  6840  1140  0AAB               	incf	??_statusFIFO+1,f
  6841  1141  087C               	movf	_fifoHead,w
  6842  1142  072A               	addwf	??_statusFIFO,w
  6843  1143  00A5               	movwf	___awmod@dividend
  6844  1144  082B               	movf	??_statusFIFO+1,w
  6845  1145  1803               	skipnc
  6846  1146  0A2B               	incf	??_statusFIFO+1,w
  6847  1147  00A6               	movwf	___awmod@dividend+1
  6848  1148  160A  118A  23AA   	fcall	___awmod
  6849  114B  1283               	bcf	3,5	;RP0=0, select bank0
  6850  114C  1303               	bcf	3,6	;RP1=0, select bank0
  6851  114D  0823               	movf	?___awmod,w
  6852  114E  0008               	return
  6853  114F                     __end_of_statusFIFO:	
  6854                           
  6855                           	psect	text22
  6856  0C4C                     __ptext22:	
  6857 ;; *************** function _slave1 *****************
  6858 ;; Defined at:
  6859 ;;		line 22 in file "bluetooth.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;		None
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;		None
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      void 
  6866 ;; Registers used:
  6867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6873 ;;      Params:         0       0       0       0       0
  6874 ;;      Locals:         0       0       0       0       0
  6875 ;;      Temps:          0       3       0       0       0
  6876 ;;      Totals:         0       3       0       0       0
  6877 ;;Total ram usage:        3 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:    6
  6880 ;; This function calls:
  6881 ;;		_initEUSART
  6882 ;;		_writeString
  6883 ;; This function is called by:
  6884 ;;		_main
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           
  6889                           ;psect for function _slave1
  6890  0C4C                     _slave1:	
  6891                           
  6892                           ;bluetooth.c: 24:     initEUSART(9600);
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _slave1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6896  0C4C  3000               	movlw	0
  6897  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  6898  0C4E  1303               	bcf	3,6	;RP1=0, select bank0
  6899  0C4F  00B4               	movwf	initEUSART@baudRate+3
  6900  0C50  3000               	movlw	0
  6901  0C51  00B3               	movwf	initEUSART@baudRate+2
  6902  0C52  3025               	movlw	37
  6903  0C53  00B2               	movwf	initEUSART@baudRate+1
  6904  0C54  3080               	movlw	128
  6905  0C55  00B1               	movwf	initEUSART@baudRate
  6906  0C56  160A  118A  24FB  120A  158A  	fcall	_initEUSART
  6907                           
  6908                           ;bluetooth.c: 25:     writeString("AT+UART=9600,0,0\r\n");
  6909  0C5B  30FE               	movlw	low (STR_85| (0+32768))
  6910  0C5C  1283               	bcf	3,5	;RP0=0, select bank0
  6911  0C5D  1303               	bcf	3,6	;RP1=0, select bank0
  6912  0C5E  00A4               	movwf	writeString@str
  6913  0C5F  3086               	movlw	high (STR_85| (0+32768))
  6914  0C60  00A5               	movwf	writeString@str+1
  6915  0C61  160A  118A  2240  120A  158A  	fcall	_writeString
  6916                           
  6917                           ;bluetooth.c: 26:     writeString("AT+RMAAD\r\n");
  6918  0C66  30AB               	movlw	low (STR_93| (0+32768))
  6919  0C67  1283               	bcf	3,5	;RP0=0, select bank0
  6920  0C68  1303               	bcf	3,6	;RP1=0, select bank0
  6921  0C69  00A4               	movwf	writeString@str
  6922  0C6A  3089               	movlw	high (STR_93| (0+32768))
  6923  0C6B  00A5               	movwf	writeString@str+1
  6924  0C6C  160A  118A  2240  120A  158A  	fcall	_writeString
  6925                           
  6926                           ;bluetooth.c: 27:     _delay((unsigned long)((100)*(20000000/4000.0)));
  6927  0C71  3003               	movlw	3
  6928  0C72  1283               	bcf	3,5	;RP0=0, select bank0
  6929  0C73  1303               	bcf	3,6	;RP1=0, select bank0
  6930  0C74  00BD               	movwf	??_slave1+2
  6931  0C75  308A               	movlw	138
  6932  0C76  00BC               	movwf	??_slave1+1
  6933  0C77  3055               	movlw	85
  6934  0C78  00BB               	movwf	??_slave1
  6935  0C79                     u3027:	
  6936  0C79  0BBB               	decfsz	??_slave1,f
  6937  0C7A  2C79               	goto	u3027
  6938  0C7B  0BBC               	decfsz	??_slave1+1,f
  6939  0C7C  2C79               	goto	u3027
  6940  0C7D  0BBD               	decfsz	??_slave1+2,f
  6941  0C7E  2C79               	goto	u3027
  6942                           
  6943                           ;bluetooth.c: 28:     writeString("AT+ROLE=0\r\n");
  6944  0C7F  3088               	movlw	low (STR_94| (0+32768))
  6945  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  6946  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  6947  0C82  00A4               	movwf	writeString@str
  6948  0C83  3089               	movlw	high (STR_94| (0+32768))
  6949  0C84  00A5               	movwf	writeString@str+1
  6950  0C85  160A  118A  2240  120A  158A  	fcall	_writeString
  6951                           
  6952                           ;bluetooth.c: 29:     _delay((unsigned long)((100)*(20000000/4000.0)));
  6953  0C8A  3003               	movlw	3
  6954  0C8B  1283               	bcf	3,5	;RP0=0, select bank0
  6955  0C8C  1303               	bcf	3,6	;RP1=0, select bank0
  6956  0C8D  00BD               	movwf	??_slave1+2
  6957  0C8E  308A               	movlw	138
  6958  0C8F  00BC               	movwf	??_slave1+1
  6959  0C90  3055               	movlw	85
  6960  0C91  00BB               	movwf	??_slave1
  6961  0C92                     u3037:	
  6962  0C92  0BBB               	decfsz	??_slave1,f
  6963  0C93  2C92               	goto	u3037
  6964  0C94  0BBC               	decfsz	??_slave1+1,f
  6965  0C95  2C92               	goto	u3037
  6966  0C96  0BBD               	decfsz	??_slave1+2,f
  6967  0C97  2C92               	goto	u3037
  6968                           
  6969                           ;bluetooth.c: 30:     writeString("AT+CMODE=0\r\n");
  6970  0C98  307B               	movlw	low (STR_87| (0+32768))
  6971  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  6972  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  6973  0C9B  00A4               	movwf	writeString@str
  6974  0C9C  3089               	movlw	high (STR_87| (0+32768))
  6975  0C9D  00A5               	movwf	writeString@str+1
  6976  0C9E  160A  118A  2240  120A  158A  	fcall	_writeString
  6977                           
  6978                           ;bluetooth.c: 31:     _delay((unsigned long)((100)*(20000000/4000.0)));
  6979  0CA3  3003               	movlw	3
  6980  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  6981  0CA5  1303               	bcf	3,6	;RP1=0, select bank0
  6982  0CA6  00BD               	movwf	??_slave1+2
  6983  0CA7  308A               	movlw	138
  6984  0CA8  00BC               	movwf	??_slave1+1
  6985  0CA9  3055               	movlw	85
  6986  0CAA  00BB               	movwf	??_slave1
  6987  0CAB                     u3047:	
  6988  0CAB  0BBB               	decfsz	??_slave1,f
  6989  0CAC  2CAB               	goto	u3047
  6990  0CAD  0BBC               	decfsz	??_slave1+1,f
  6991  0CAE  2CAB               	goto	u3047
  6992  0CAF  0BBD               	decfsz	??_slave1+2,f
  6993  0CB0  2CAB               	goto	u3047
  6994                           
  6995                           ;bluetooth.c: 32:     writeString("AT+INQM=0,5,5\r\n");
  6996  0CB1  3042               	movlw	low (STR_88| (0+32768))
  6997  0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  6998  0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  6999  0CB4  00A4               	movwf	writeString@str
  7000  0CB5  3089               	movlw	high (STR_88| (0+32768))
  7001  0CB6  00A5               	movwf	writeString@str+1
  7002  0CB7  160A  118A  2240  120A  158A  	fcall	_writeString
  7003                           
  7004                           ;bluetooth.c: 33:     _delay((unsigned long)((100)*(20000000/4000.0)));
  7005  0CBC  3003               	movlw	3
  7006  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  7007  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  7008  0CBF  00BD               	movwf	??_slave1+2
  7009  0CC0  308A               	movlw	138
  7010  0CC1  00BC               	movwf	??_slave1+1
  7011  0CC2  3055               	movlw	85
  7012  0CC3  00BB               	movwf	??_slave1
  7013  0CC4                     u3057:	
  7014  0CC4  0BBB               	decfsz	??_slave1,f
  7015  0CC5  2CC4               	goto	u3057
  7016  0CC6  0BBC               	decfsz	??_slave1+1,f
  7017  0CC7  2CC4               	goto	u3057
  7018  0CC8  0BBD               	decfsz	??_slave1+2,f
  7019  0CC9  2CC4               	goto	u3057
  7020                           
  7021                           ;bluetooth.c: 34:     writeString("AT+INIT\r\n");
  7022  0CCA  30B6               	movlw	low (STR_89| (0+32768))
  7023  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  7024  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  7025  0CCD  00A4               	movwf	writeString@str
  7026  0CCE  3089               	movlw	high (STR_89| (0+32768))
  7027  0CCF  00A5               	movwf	writeString@str+1
  7028  0CD0  160A  118A  2240  120A  158A  	fcall	_writeString
  7029                           
  7030                           ;bluetooth.c: 35:     _delay((unsigned long)((100)*(20000000/4000.0)));
  7031  0CD5  3003               	movlw	3
  7032  0CD6  1283               	bcf	3,5	;RP0=0, select bank0
  7033  0CD7  1303               	bcf	3,6	;RP1=0, select bank0
  7034  0CD8  00BD               	movwf	??_slave1+2
  7035  0CD9  308A               	movlw	138
  7036  0CDA  00BC               	movwf	??_slave1+1
  7037  0CDB  3055               	movlw	85
  7038  0CDC  00BB               	movwf	??_slave1
  7039  0CDD                     u3067:	
  7040  0CDD  0BBB               	decfsz	??_slave1,f
  7041  0CDE  2CDD               	goto	u3067
  7042  0CDF  0BBC               	decfsz	??_slave1+1,f
  7043  0CE0  2CDD               	goto	u3067
  7044  0CE1  0BBD               	decfsz	??_slave1+2,f
  7045  0CE2  2CDD               	goto	u3067
  7046                           
  7047                           ;bluetooth.c: 36:     writeString("AT+NAME=\"Escravo\"\r\n");
  7048  0CE3  30EA               	movlw	low (STR_98| (0+32768))
  7049  0CE4  1283               	bcf	3,5	;RP0=0, select bank0
  7050  0CE5  1303               	bcf	3,6	;RP1=0, select bank0
  7051  0CE6  00A4               	movwf	writeString@str
  7052  0CE7  3086               	movlw	high (STR_98| (0+32768))
  7053  0CE8  00A5               	movwf	writeString@str+1
  7054  0CE9  160A  118A  2240  120A  158A  	fcall	_writeString
  7055                           
  7056                           ;bluetooth.c: 37:     _delay((unsigned long)((100)*(20000000/4000.0)));
  7057  0CEE  3003               	movlw	3
  7058  0CEF  1283               	bcf	3,5	;RP0=0, select bank0
  7059  0CF0  1303               	bcf	3,6	;RP1=0, select bank0
  7060  0CF1  00BD               	movwf	??_slave1+2
  7061  0CF2  308A               	movlw	138
  7062  0CF3  00BC               	movwf	??_slave1+1
  7063  0CF4  3055               	movlw	85
  7064  0CF5  00BB               	movwf	??_slave1
  7065  0CF6                     u3077:	
  7066  0CF6  0BBB               	decfsz	??_slave1,f
  7067  0CF7  2CF6               	goto	u3077
  7068  0CF8  0BBC               	decfsz	??_slave1+1,f
  7069  0CF9  2CF6               	goto	u3077
  7070  0CFA  0BBD               	decfsz	??_slave1+2,f
  7071  0CFB  2CF6               	goto	u3077
  7072                           
  7073                           ;bluetooth.c: 38:     writeString("AT+PSWD=\"0910\"\r\n");
  7074  0CFC  30DD               	movlw	low (STR_91| (0+32768))
  7075  0CFD  1283               	bcf	3,5	;RP0=0, select bank0
  7076  0CFE  1303               	bcf	3,6	;RP1=0, select bank0
  7077  0CFF  00A4               	movwf	writeString@str
  7078  0D00  3087               	movlw	high (STR_91| (0+32768))
  7079  0D01  00A5               	movwf	writeString@str+1
  7080  0D02  160A  118A  2240   	fcall	_writeString
  7081  0D05  0008               	return
  7082  0D06                     __end_of_slave1:	
  7083                           
  7084                           	psect	text23
  7085  1269                     __ptext23:	
  7086 ;; *************** function _resetErrorRxEUSART *****************
  7087 ;; Defined at:
  7088 ;;		line 88 in file "eusart.c"
  7089 ;; Parameters:    Size  Location     Type
  7090 ;;		None
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;  aux             1    0        unsigned char 
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      void 
  7095 ;; Registers used:
  7096 ;;		wreg
  7097 ;; Tracked objects:
  7098 ;;		On entry : 0/0
  7099 ;;		On exit  : 0/0
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7102 ;;      Params:         0       0       0       0       0
  7103 ;;      Locals:         0       0       0       0       0
  7104 ;;      Temps:          0       3       0       0       0
  7105 ;;      Totals:         0       3       0       0       0
  7106 ;;Total ram usage:        3 bytes
  7107 ;; Hardware stack levels used:    1
  7108 ;; Hardware stack levels required when called:    4
  7109 ;; This function calls:
  7110 ;;		Nothing
  7111 ;; This function is called by:
  7112 ;;		_main
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           
  7117                           ;psect for function _resetErrorRxEUSART
  7118  1269                     _resetErrorRxEUSART:	
  7119                           
  7120                           ;eusart.c: 90:     unsigned char aux;;eusart.c: 92:     if( RCSTAbits.FERR )
  7121                           
  7122                           ;incstack = 0
  7123                           ; Regs used in _resetErrorRxEUSART: [wreg]
  7124  1269  1283               	bcf	3,5	;RP0=0, select bank0
  7125  126A  1303               	bcf	3,6	;RP1=0, select bank0
  7126  126B  1D18               	btfss	24,2	;volatile
  7127  126C  2A7F               	goto	l3443
  7128                           
  7129                           ;eusart.c: 93:     {;eusart.c: 94:         RCSTAbits.SPEN = 0;
  7130  126D  1398               	bcf	24,7	;volatile
  7131                           
  7132                           ;eusart.c: 95:         _delay((unsigned long)((100)*(20000000/4000.0)));
  7133  126E  3003               	movlw	3
  7134  126F  1283               	bcf	3,5	;RP0=0, select bank0
  7135  1270  1303               	bcf	3,6	;RP1=0, select bank0
  7136  1271  00A5               	movwf	??_resetErrorRxEUSART+2
  7137  1272  308A               	movlw	138
  7138  1273  00A4               	movwf	??_resetErrorRxEUSART+1
  7139  1274  3055               	movlw	85
  7140  1275  00A3               	movwf	??_resetErrorRxEUSART
  7141  1276                     u3087:	
  7142  1276  0BA3               	decfsz	??_resetErrorRxEUSART,f
  7143  1277  2A76               	goto	u3087
  7144  1278  0BA4               	decfsz	??_resetErrorRxEUSART+1,f
  7145  1279  2A76               	goto	u3087
  7146  127A  0BA5               	decfsz	??_resetErrorRxEUSART+2,f
  7147  127B  2A76               	goto	u3087
  7148                           
  7149                           ;eusart.c: 96:         RCSTAbits.SPEN = 1;
  7150  127C  1283               	bcf	3,5	;RP0=0, select bank0
  7151  127D  1303               	bcf	3,6	;RP1=0, select bank0
  7152  127E  1798               	bsf	24,7	;volatile
  7153  127F                     l3443:	
  7154                           ;eusart.c: 97:     }
  7155                           
  7156                           
  7157                           ;eusart.c: 98:     if( RCSTAbits.OERR )
  7158  127F  1C98               	btfss	24,1	;volatile
  7159  1280  0008               	return
  7160                           
  7161                           ;eusart.c: 99:     {;eusart.c: 100:         RCSTAbits.CREN = 0;
  7162  1281  1218               	bcf	24,4	;volatile
  7163                           
  7164                           ;eusart.c: 101:         _delay((unsigned long)((100)*(20000000/4000.0)));
  7165  1282  3003               	movlw	3
  7166  1283  1283               	bcf	3,5	;RP0=0, select bank0
  7167  1284  1303               	bcf	3,6	;RP1=0, select bank0
  7168  1285  00A5               	movwf	??_resetErrorRxEUSART+2
  7169  1286  308A               	movlw	138
  7170  1287  00A4               	movwf	??_resetErrorRxEUSART+1
  7171  1288  3055               	movlw	85
  7172  1289  00A3               	movwf	??_resetErrorRxEUSART
  7173  128A                     u3097:	
  7174  128A  0BA3               	decfsz	??_resetErrorRxEUSART,f
  7175  128B  2A8A               	goto	u3097
  7176  128C  0BA4               	decfsz	??_resetErrorRxEUSART+1,f
  7177  128D  2A8A               	goto	u3097
  7178  128E  0BA5               	decfsz	??_resetErrorRxEUSART+2,f
  7179  128F  2A8A               	goto	u3097
  7180                           
  7181                           ;eusart.c: 102:         RCSTAbits.CREN = 1;
  7182  1290  1283               	bcf	3,5	;RP0=0, select bank0
  7183  1291  1303               	bcf	3,6	;RP1=0, select bank0
  7184  1292  1618               	bsf	24,4	;volatile
  7185  1293  0008               	return
  7186  1294                     __end_of_resetErrorRxEUSART:	
  7187                           ;eusart.c: 103:     }
  7188                           
  7189                           
  7190                           	psect	text24
  7191  0B01                     __ptext24:	
  7192 ;; *************** function _master1 *****************
  7193 ;; Defined at:
  7194 ;;		line 5 in file "bluetooth.c"
  7195 ;; Parameters:    Size  Location     Type
  7196 ;;		None
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;		None
  7199 ;; Return value:  Size  Location     Type
  7200 ;;                  1    wreg      void 
  7201 ;; Registers used:
  7202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7203 ;; Tracked objects:
  7204 ;;		On entry : 0/0
  7205 ;;		On exit  : 0/0
  7206 ;;		Unchanged: 0/0
  7207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7208 ;;      Params:         0       0       0       0       0
  7209 ;;      Locals:         0       0       0       0       0
  7210 ;;      Temps:          0       3       0       0       0
  7211 ;;      Totals:         0       3       0       0       0
  7212 ;;Total ram usage:        3 bytes
  7213 ;; Hardware stack levels used:    1
  7214 ;; Hardware stack levels required when called:    6
  7215 ;; This function calls:
  7216 ;;		_initEUSART
  7217 ;;		_writeString
  7218 ;; This function is called by:
  7219 ;;		_main
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           
  7224                           ;psect for function _master1
  7225  0B01                     _master1:	
  7226                           
  7227                           ;bluetooth.c: 7:     initEUSART(9600);
  7228                           
  7229                           ;incstack = 0
  7230                           ; Regs used in _master1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7231  0B01  3000               	movlw	0
  7232  0B02  1283               	bcf	3,5	;RP0=0, select bank0
  7233  0B03  1303               	bcf	3,6	;RP1=0, select bank0
  7234  0B04  00B4               	movwf	initEUSART@baudRate+3
  7235  0B05  3000               	movlw	0
  7236  0B06  00B3               	movwf	initEUSART@baudRate+2
  7237  0B07  3025               	movlw	37
  7238  0B08  00B2               	movwf	initEUSART@baudRate+1
  7239  0B09  3080               	movlw	128
  7240  0B0A  00B1               	movwf	initEUSART@baudRate
  7241  0B0B  160A  118A  24FB  120A  158A  	fcall	_initEUSART
  7242                           
  7243                           ;bluetooth.c: 8:     writeString("AT+UART=9600,0,0\r\n");
  7244  0B10  30FE               	movlw	low (STR_85| (0+32768))
  7245  0B11  1283               	bcf	3,5	;RP0=0, select bank0
  7246  0B12  1303               	bcf	3,6	;RP1=0, select bank0
  7247  0B13  00A4               	movwf	writeString@str
  7248  0B14  3086               	movlw	high (STR_85| (0+32768))
  7249  0B15  00A5               	movwf	writeString@str+1
  7250  0B16  160A  118A  2240  120A  158A  	fcall	_writeString
  7251                           
  7252                           ;bluetooth.c: 9:     writeString("AT+ROLE=1\r\n");
  7253  0B1B  3094               	movlw	low (STR_86| (0+32768))
  7254  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
  7255  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
  7256  0B1E  00A4               	movwf	writeString@str
  7257  0B1F  3089               	movlw	high (STR_86| (0+32768))
  7258  0B20  00A5               	movwf	writeString@str+1
  7259  0B21  160A  118A  2240  120A  158A  	fcall	_writeString
  7260                           
  7261                           ;bluetooth.c: 10:     _delay((unsigned long)((100)*(20000000/4000.0)));
  7262  0B26  3003               	movlw	3
  7263  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  7264  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  7265  0B29  00BD               	movwf	??_master1+2
  7266  0B2A  308A               	movlw	138
  7267  0B2B  00BC               	movwf	??_master1+1
  7268  0B2C  3055               	movlw	85
  7269  0B2D  00BB               	movwf	??_master1
  7270  0B2E                     u3107:	
  7271  0B2E  0BBB               	decfsz	??_master1,f
  7272  0B2F  2B2E               	goto	u3107
  7273  0B30  0BBC               	decfsz	??_master1+1,f
  7274  0B31  2B2E               	goto	u3107
  7275  0B32  0BBD               	decfsz	??_master1+2,f
  7276  0B33  2B2E               	goto	u3107
  7277                           
  7278                           ;bluetooth.c: 11:     writeString("AT+CMODE=0\r\n");
  7279  0B34  307B               	movlw	low (STR_87| (0+32768))
  7280  0B35  1283               	bcf	3,5	;RP0=0, select bank0
  7281  0B36  1303               	bcf	3,6	;RP1=0, select bank0
  7282  0B37  00A4               	movwf	writeString@str
  7283  0B38  3089               	movlw	high (STR_87| (0+32768))
  7284  0B39  00A5               	movwf	writeString@str+1
  7285  0B3A  160A  118A  2240  120A  158A  	fcall	_writeString
  7286                           
  7287                           ;bluetooth.c: 12:     _delay((unsigned long)((100)*(20000000/4000.0)));
  7288  0B3F  3003               	movlw	3
  7289  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  7290  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  7291  0B42  00BD               	movwf	??_master1+2
  7292  0B43  308A               	movlw	138
  7293  0B44  00BC               	movwf	??_master1+1
  7294  0B45  3055               	movlw	85
  7295  0B46  00BB               	movwf	??_master1
  7296  0B47                     u3117:	
  7297  0B47  0BBB               	decfsz	??_master1,f
  7298  0B48  2B47               	goto	u3117
  7299  0B49  0BBC               	decfsz	??_master1+1,f
  7300  0B4A  2B47               	goto	u3117
  7301  0B4B  0BBD               	decfsz	??_master1+2,f
  7302  0B4C  2B47               	goto	u3117
  7303                           
  7304                           ;bluetooth.c: 13:     writeString("AT+INQM=0,5,5\r\n");
  7305  0B4D  3042               	movlw	low (STR_88| (0+32768))
  7306  0B4E  1283               	bcf	3,5	;RP0=0, select bank0
  7307  0B4F  1303               	bcf	3,6	;RP1=0, select bank0
  7308  0B50  00A4               	movwf	writeString@str
  7309  0B51  3089               	movlw	high (STR_88| (0+32768))
  7310  0B52  00A5               	movwf	writeString@str+1
  7311  0B53  160A  118A  2240  120A  158A  	fcall	_writeString
  7312                           
  7313                           ;bluetooth.c: 14:     _delay((unsigned long)((100)*(20000000/4000.0)));
  7314  0B58  3003               	movlw	3
  7315  0B59  1283               	bcf	3,5	;RP0=0, select bank0
  7316  0B5A  1303               	bcf	3,6	;RP1=0, select bank0
  7317  0B5B  00BD               	movwf	??_master1+2
  7318  0B5C  308A               	movlw	138
  7319  0B5D  00BC               	movwf	??_master1+1
  7320  0B5E  3055               	movlw	85
  7321  0B5F  00BB               	movwf	??_master1
  7322  0B60                     u3127:	
  7323  0B60  0BBB               	decfsz	??_master1,f
  7324  0B61  2B60               	goto	u3127
  7325  0B62  0BBC               	decfsz	??_master1+1,f
  7326  0B63  2B60               	goto	u3127
  7327  0B64  0BBD               	decfsz	??_master1+2,f
  7328  0B65  2B60               	goto	u3127
  7329                           
  7330                           ;bluetooth.c: 15:     writeString("AT+INIT\r\n");
  7331  0B66  30B6               	movlw	low (STR_89| (0+32768))
  7332  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  7333  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  7334  0B69  00A4               	movwf	writeString@str
  7335  0B6A  3089               	movlw	high (STR_89| (0+32768))
  7336  0B6B  00A5               	movwf	writeString@str+1
  7337  0B6C  160A  118A  2240  120A  158A  	fcall	_writeString
  7338                           
  7339                           ;bluetooth.c: 16:     _delay((unsigned long)((100)*(20000000/4000.0)));
  7340  0B71  3003               	movlw	3
  7341  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  7342  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  7343  0B74  00BD               	movwf	??_master1+2
  7344  0B75  308A               	movlw	138
  7345  0B76  00BC               	movwf	??_master1+1
  7346  0B77  3055               	movlw	85
  7347  0B78  00BB               	movwf	??_master1
  7348  0B79                     u3137:	
  7349  0B79  0BBB               	decfsz	??_master1,f
  7350  0B7A  2B79               	goto	u3137
  7351  0B7B  0BBC               	decfsz	??_master1+1,f
  7352  0B7C  2B79               	goto	u3137
  7353  0B7D  0BBD               	decfsz	??_master1+2,f
  7354  0B7E  2B79               	goto	u3137
  7355                           
  7356                           ;bluetooth.c: 17:     writeString("AT+INQ\r\n");
  7357  0B7F  30C9               	movlw	low (STR_90| (0+32768))
  7358  0B80  1283               	bcf	3,5	;RP0=0, select bank0
  7359  0B81  1303               	bcf	3,6	;RP1=0, select bank0
  7360  0B82  00A4               	movwf	writeString@str
  7361  0B83  3089               	movlw	high (STR_90| (0+32768))
  7362  0B84  00A5               	movwf	writeString@str+1
  7363  0B85  160A  118A  2240  120A  158A  	fcall	_writeString
  7364                           
  7365                           ;bluetooth.c: 18:     _delay((unsigned long)((100)*(20000000/4000.0)));
  7366  0B8A  3003               	movlw	3
  7367  0B8B  1283               	bcf	3,5	;RP0=0, select bank0
  7368  0B8C  1303               	bcf	3,6	;RP1=0, select bank0
  7369  0B8D  00BD               	movwf	??_master1+2
  7370  0B8E  308A               	movlw	138
  7371  0B8F  00BC               	movwf	??_master1+1
  7372  0B90  3055               	movlw	85
  7373  0B91  00BB               	movwf	??_master1
  7374  0B92                     u3147:	
  7375  0B92  0BBB               	decfsz	??_master1,f
  7376  0B93  2B92               	goto	u3147
  7377  0B94  0BBC               	decfsz	??_master1+1,f
  7378  0B95  2B92               	goto	u3147
  7379  0B96  0BBD               	decfsz	??_master1+2,f
  7380  0B97  2B92               	goto	u3147
  7381                           
  7382                           ;bluetooth.c: 19:     writeString("AT+PSWD=\"0910\"\r\n");
  7383  0B98  30DD               	movlw	low (STR_91| (0+32768))
  7384  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  7385  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
  7386  0B9B  00A4               	movwf	writeString@str
  7387  0B9C  3087               	movlw	high (STR_91| (0+32768))
  7388  0B9D  00A5               	movwf	writeString@str+1
  7389  0B9E  160A  118A  2240   	fcall	_writeString
  7390  0BA1  0008               	return
  7391  0BA2                     __end_of_master1:	
  7392                           
  7393                           	psect	text25
  7394  1240                     __ptext25:	
  7395 ;; *************** function _writeString *****************
  7396 ;; Defined at:
  7397 ;;		line 136 in file "eusart.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;  str             2    4[BANK0 ] PTR const unsigned char 
  7400 ;;		 -> STR_108(25), STR_107(25), STR_106(28), STR_105(25), 
  7401 ;;		 -> STR_104(25), STR_103(28), STR_102(25), STR_101(25), 
  7402 ;;		 -> STR_100(28), STR_99(17), STR_98(20), STR_97(10), 
  7403 ;;		 -> STR_96(16), STR_95(13), STR_94(12), STR_93(11), 
  7404 ;;		 -> STR_92(19), STR_91(17), STR_90(9), STR_89(10), 
  7405 ;;		 -> STR_88(16), STR_87(13), STR_86(12), STR_85(19), 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;		None
  7408 ;; Return value:  Size  Location     Type
  7409 ;;                  1    wreg      void 
  7410 ;; Registers used:
  7411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7417 ;;      Params:         0       2       0       0       0
  7418 ;;      Locals:         0       0       0       0       0
  7419 ;;      Temps:          0       0       0       0       0
  7420 ;;      Totals:         0       2       0       0       0
  7421 ;;Total ram usage:        2 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    5
  7424 ;; This function calls:
  7425 ;;		_writeEUSART
  7426 ;; This function is called by:
  7427 ;;		_master1
  7428 ;;		_slave1
  7429 ;;		_modulo1
  7430 ;;		_modulo2
  7431 ;;		_modulo3
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           
  7436                           ;psect for function _writeString
  7437  1240                     _writeString:	
  7438  1240                     l2945:	
  7439                           ;eusart.c: 144:     }
  7440                           
  7441                           ;eusart.c: 136: void writeString( const char * str );eusart.c: 137: {;eusart.c: 138:    
      +                           while( *str )
  7442                           
  7443                           ;incstack = 0
  7444                           ; Regs used in _writeString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7445                           
  7446                           
  7447                           ;eusart.c: 138:     while( *str )
  7448  1240  1283               	bcf	3,5	;RP0=0, select bank0
  7449  1241  1303               	bcf	3,6	;RP1=0, select bank0
  7450  1242  0825               	movf	writeString@str+1,w
  7451  1243  00FF               	movwf	127
  7452  1244  0824               	movf	writeString@str,w
  7453  1245  0084               	movwf	4
  7454  1246  160A  118A  2000  160A  118A  	fcall	stringtab
  7455  124B  3A00               	xorlw	0
  7456  124C  1903               	btfsc	3,2
  7457  124D  0008               	return
  7458  124E                     l570:	
  7459                           ;eusart.c: 141:             ;
  7460                           
  7461                           ;eusart.c: 139:     {;eusart.c: 140:         while( !TXSTAbits.TRMT )
  7462                           
  7463                           
  7464                           ;eusart.c: 140:         while( !TXSTAbits.TRMT )
  7465  124E  1683               	bsf	3,5	;RP0=1, select bank1
  7466  124F  1303               	bcf	3,6	;RP1=0, select bank1
  7467  1250  1C98               	btfss	24,1	;volatile
  7468  1251  2A4E               	goto	l570
  7469                           
  7470                           ;eusart.c: 142:         writeEUSART( *str );
  7471  1252  1283               	bcf	3,5	;RP0=0, select bank0
  7472  1253  1303               	bcf	3,6	;RP1=0, select bank0
  7473  1254  0825               	movf	writeString@str+1,w
  7474  1255  00FF               	movwf	127
  7475  1256  0824               	movf	writeString@str,w
  7476  1257  0084               	movwf	4
  7477  1258  160A  118A  2000  160A  118A  	fcall	stringtab
  7478  125D  160A  158A  27E5  160A  118A  	fcall	_writeEUSART
  7479                           
  7480                           ;eusart.c: 143:         ++str;
  7481  1262  3001               	movlw	1
  7482  1263  1283               	bcf	3,5	;RP0=0, select bank0
  7483  1264  1303               	bcf	3,6	;RP1=0, select bank0
  7484  1265  07A4               	addwf	writeString@str,f
  7485  1266  1803               	skipnc
  7486  1267  0AA5               	incf	writeString@str+1,f
  7487  1268  2A40               	goto	l2945
  7488  1269                     __end_of_writeString:	
  7489                           
  7490                           	psect	text26
  7491  1FE5                     __ptext26:	
  7492 ;; *************** function _writeEUSART *****************
  7493 ;; Defined at:
  7494 ;;		line 113 in file "eusart.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  d               1    wreg     unsigned char 
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;  d               1    3[BANK0 ] unsigned char 
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  1    wreg      void 
  7501 ;; Registers used:
  7502 ;;		wreg
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7508 ;;      Params:         0       0       0       0       0
  7509 ;;      Locals:         0       1       0       0       0
  7510 ;;      Temps:          0       0       0       0       0
  7511 ;;      Totals:         0       1       0       0       0
  7512 ;;Total ram usage:        1 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    4
  7515 ;; This function calls:
  7516 ;;		Nothing
  7517 ;; This function is called by:
  7518 ;;		_transmite
  7519 ;;		_writeString
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           
  7524                           ;psect for function _writeEUSART
  7525  1FE5                     _writeEUSART:	
  7526                           
  7527                           ;incstack = 0
  7528                           ; Regs used in _writeEUSART: [wreg]
  7529                           ;writeEUSART@d stored from wreg
  7530  1FE5  1283               	bcf	3,5	;RP0=0, select bank0
  7531  1FE6  1303               	bcf	3,6	;RP1=0, select bank0
  7532  1FE7  00A3               	movwf	writeEUSART@d
  7533                           
  7534                           ;eusart.c: 113: void writeEUSART( unsigned char d );eusart.c: 114: {;eusart.c: 115:     
      +                          TXREG = d;
  7535  1FE8  0823               	movf	writeEUSART@d,w
  7536  1FE9  0099               	movwf	25	;volatile
  7537  1FEA  0008               	return
  7538  1FEB                     __end_of_writeEUSART:	
  7539                           
  7540                           	psect	text27
  7541  14FB                     __ptext27:	
  7542 ;; *************** function _initEUSART *****************
  7543 ;; Defined at:
  7544 ;;		line 155 in file "eusart.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;  baudRate        4   17[BANK0 ] unsigned long 
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;		None
  7549 ;; Return value:  Size  Location     Type
  7550 ;;                  1    wreg      void 
  7551 ;; Registers used:
  7552 ;;		wreg, status,2, status,0, pclath, cstack
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7558 ;;      Params:         0       4       0       0       0
  7559 ;;      Locals:         0       0       0       0       0
  7560 ;;      Temps:          0       6       0       0       0
  7561 ;;      Totals:         0      10       0       0       0
  7562 ;;Total ram usage:       10 bytes
  7563 ;; Hardware stack levels used:    1
  7564 ;; Hardware stack levels required when called:    5
  7565 ;; This function calls:
  7566 ;;		___lldiv
  7567 ;; This function is called by:
  7568 ;;		_master1
  7569 ;;		_slave1
  7570 ;;		_main
  7571 ;;		_modulo1
  7572 ;;		_modulo2
  7573 ;;		_modulo3
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           
  7578                           ;psect for function _initEUSART
  7579  14FB                     _initEUSART:	
  7580                           
  7581                           ;eusart.c: 155: void initEUSART( unsigned long int baudRate );eusart.c: 156: {;eusart.c:
      +                           159:     SPBRbits.u16 = (unsigned int)( (20000000 / (baudRate<<2)) - 1);
  7582                           
  7583                           ;incstack = 0
  7584                           ; Regs used in _initEUSART: [wreg+status,2+status,0+pclath+cstack]
  7585  14FB  1283               	bcf	3,5	;RP0=0, select bank0
  7586  14FC  1303               	bcf	3,6	;RP1=0, select bank0
  7587  14FD  0831               	movf	initEUSART@baudRate,w
  7588  14FE  00B5               	movwf	??_initEUSART
  7589  14FF  0832               	movf	initEUSART@baudRate+1,w
  7590  1500  00B6               	movwf	??_initEUSART+1
  7591  1501  0833               	movf	initEUSART@baudRate+2,w
  7592  1502  00B7               	movwf	??_initEUSART+2
  7593  1503  0834               	movf	initEUSART@baudRate+3,w
  7594  1504  00B8               	movwf	??_initEUSART+3
  7595  1505  3002               	movlw	2
  7596  1506                     u1795:	
  7597  1506  1003               	clrc
  7598  1507  0DB5               	rlf	??_initEUSART,f
  7599  1508  0DB6               	rlf	??_initEUSART+1,f
  7600  1509  0DB7               	rlf	??_initEUSART+2,f
  7601  150A  0DB8               	rlf	??_initEUSART+3,f
  7602  150B  3EFF               	addlw	-1
  7603  150C  1D03               	skipz
  7604  150D  2D06               	goto	u1795
  7605  150E  0838               	movf	??_initEUSART+3,w
  7606  150F  00A6               	movwf	___lldiv@divisor+3
  7607  1510  0837               	movf	??_initEUSART+2,w
  7608  1511  00A5               	movwf	___lldiv@divisor+2
  7609  1512  0836               	movf	??_initEUSART+1,w
  7610  1513  00A4               	movwf	___lldiv@divisor+1
  7611  1514  0835               	movf	??_initEUSART,w
  7612  1515  00A3               	movwf	___lldiv@divisor
  7613  1516  3001               	movlw	1
  7614  1517  00AA               	movwf	___lldiv@dividend+3
  7615  1518  3031               	movlw	49
  7616  1519  00A9               	movwf	___lldiv@dividend+2
  7617  151A  302D               	movlw	45
  7618  151B  00A8               	movwf	___lldiv@dividend+1
  7619  151C  3000               	movlw	0
  7620  151D  00A7               	movwf	___lldiv@dividend
  7621  151E  160A  118A  25B1  160A  118A  	fcall	___lldiv
  7622  1523  1283               	bcf	3,5	;RP0=0, select bank0
  7623  1524  1303               	bcf	3,6	;RP1=0, select bank0
  7624  1525  0823               	movf	?___lldiv,w
  7625  1526  3EFF               	addlw	255
  7626  1527  00B9               	movwf	??_initEUSART+4
  7627  1528  0824               	movf	?___lldiv+1,w
  7628  1529  1803               	skipnc
  7629  152A  3E01               	addlw	1
  7630  152B  3EFF               	addlw	255
  7631  152C  00BA               	movwf	??_initEUSART+5
  7632  152D  0839               	movf	??_initEUSART+4,w
  7633  152E  1683               	bsf	3,5	;RP0=1, select bank1
  7634  152F  1303               	bcf	3,6	;RP1=0, select bank1
  7635  1530  0099               	movwf	25	;volatile
  7636  1531  1283               	bcf	3,5	;RP0=0, select bank0
  7637  1532  1303               	bcf	3,6	;RP1=0, select bank0
  7638  1533  083A               	movf	??_initEUSART+5,w
  7639  1534  1683               	bsf	3,5	;RP0=1, select bank1
  7640  1535  1303               	bcf	3,6	;RP1=0, select bank1
  7641  1536  009A               	movwf	26	;volatile
  7642                           
  7643                           ;eusart.c: 161:     TXSTAbits.SYNC = 0;
  7644  1537  1218               	bcf	24,4	;volatile
  7645                           
  7646                           ;eusart.c: 162:     BAUDCTLbits.BRG16 = 1;
  7647  1538  1683               	bsf	3,5	;RP0=1, select bank3
  7648  1539  1703               	bsf	3,6	;RP1=1, select bank3
  7649  153A  1587               	bsf	7,3	;volatile
  7650                           
  7651                           ;eusart.c: 163:     TXSTAbits.BRGH = 1;
  7652  153B  1683               	bsf	3,5	;RP0=1, select bank1
  7653  153C  1303               	bcf	3,6	;RP1=0, select bank1
  7654  153D  1518               	bsf	24,2	;volatile
  7655                           
  7656                           ;eusart.c: 165:     RCSTAbits.SPEN = 1;
  7657  153E  1283               	bcf	3,5	;RP0=0, select bank0
  7658  153F  1303               	bcf	3,6	;RP1=0, select bank0
  7659  1540  1798               	bsf	24,7	;volatile
  7660                           
  7661                           ;eusart.c: 166:     TXSTAbits.TXEN = 1;
  7662  1541  1683               	bsf	3,5	;RP0=1, select bank1
  7663  1542  1303               	bcf	3,6	;RP1=0, select bank1
  7664  1543  1698               	bsf	24,5	;volatile
  7665                           
  7666                           ;eusart.c: 167:     RCSTAbits.CREN = 1;
  7667  1544  1283               	bcf	3,5	;RP0=0, select bank0
  7668  1545  1303               	bcf	3,6	;RP1=0, select bank0
  7669  1546  1618               	bsf	24,4	;volatile
  7670                           
  7671                           ;eusart.c: 169:     TXSTAbits.TX9 = 0;
  7672  1547  1683               	bsf	3,5	;RP0=1, select bank1
  7673  1548  1303               	bcf	3,6	;RP1=0, select bank1
  7674  1549  1318               	bcf	24,6	;volatile
  7675                           
  7676                           ;eusart.c: 170:     TXSTAbits.TX9D = 0;
  7677  154A  1018               	bcf	24,0	;volatile
  7678                           
  7679                           ;eusart.c: 171:     RCSTAbits.RX9 = 0;
  7680  154B  1283               	bcf	3,5	;RP0=0, select bank0
  7681  154C  1303               	bcf	3,6	;RP1=0, select bank0
  7682  154D  1318               	bcf	24,6	;volatile
  7683                           
  7684                           ;eusart.c: 172:     RCSTAbits.RX9D = 0;
  7685  154E  1018               	bcf	24,0	;volatile
  7686                           
  7687                           ;eusart.c: 174:     SSPSTATbits.P = 1;
  7688  154F  1683               	bsf	3,5	;RP0=1, select bank1
  7689  1550  1303               	bcf	3,6	;RP1=0, select bank1
  7690  1551  1614               	bsf	20,4	;volatile
  7691                           
  7692                           ;eusart.c: 176:     PIE1bits.RCIE = 1;
  7693  1552  168C               	bsf	12,5	;volatile
  7694                           
  7695                           ;eusart.c: 177:     INTCONbits.PEIE = 1;
  7696  1553  170B               	bsf	11,6	;volatile
  7697                           
  7698                           ;eusart.c: 178:     INTCONbits.GIE = 1;
  7699  1554  178B               	bsf	11,7	;volatile
  7700  1555  0008               	return
  7701  1556                     __end_of_initEUSART:	
  7702                           
  7703                           	psect	text28
  7704  15B1                     __ptext28:	
  7705 ;; *************** function ___lldiv *****************
  7706 ;; Defined at:
  7707 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  divisor         4    3[BANK0 ] unsigned long 
  7710 ;;  dividend        4    7[BANK0 ] unsigned long 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;  quotient        4   12[BANK0 ] unsigned long 
  7713 ;;  counter         1   16[BANK0 ] unsigned char 
  7714 ;; Return value:  Size  Location     Type
  7715 ;;                  4    3[BANK0 ] unsigned long 
  7716 ;; Registers used:
  7717 ;;		wreg, status,2, status,0
  7718 ;; Tracked objects:
  7719 ;;		On entry : 0/0
  7720 ;;		On exit  : 0/0
  7721 ;;		Unchanged: 0/0
  7722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7723 ;;      Params:         0       8       0       0       0
  7724 ;;      Locals:         0       5       0       0       0
  7725 ;;      Temps:          0       1       0       0       0
  7726 ;;      Totals:         0      14       0       0       0
  7727 ;;Total ram usage:       14 bytes
  7728 ;; Hardware stack levels used:    1
  7729 ;; Hardware stack levels required when called:    4
  7730 ;; This function calls:
  7731 ;;		Nothing
  7732 ;; This function is called by:
  7733 ;;		_initEUSART
  7734 ;; This function uses a non-reentrant model
  7735 ;;
  7736                           
  7737                           
  7738                           ;psect for function ___lldiv
  7739  15B1                     ___lldiv:	
  7740                           
  7741                           ;incstack = 0
  7742                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7743  15B1  3000               	movlw	0
  7744  15B2  1283               	bcf	3,5	;RP0=0, select bank0
  7745  15B3  1303               	bcf	3,6	;RP1=0, select bank0
  7746  15B4  00AF               	movwf	___lldiv@quotient+3
  7747  15B5  3000               	movlw	0
  7748  15B6  00AE               	movwf	___lldiv@quotient+2
  7749  15B7  3000               	movlw	0
  7750  15B8  00AD               	movwf	___lldiv@quotient+1
  7751  15B9  3000               	movlw	0
  7752  15BA  00AC               	movwf	___lldiv@quotient
  7753  15BB  0826               	movf	___lldiv@divisor+3,w
  7754  15BC  0425               	iorwf	___lldiv@divisor+2,w
  7755  15BD  0424               	iorwf	___lldiv@divisor+1,w
  7756  15BE  0423               	iorwf	___lldiv@divisor,w
  7757  15BF  1903               	skipnz
  7758  15C0  2E08               	goto	l2761
  7759  15C1  01B0               	clrf	___lldiv@counter
  7760  15C2  0AB0               	incf	___lldiv@counter,f
  7761  15C3                     l2747:	
  7762  15C3  1BA6               	btfsc	___lldiv@divisor+3,7
  7763  15C4  2DD3               	goto	l2749
  7764  15C5  3001               	movlw	1
  7765  15C6  00AB               	movwf	??___lldiv
  7766  15C7                     u1535:	
  7767  15C7  1003               	clrc
  7768  15C8  0DA3               	rlf	___lldiv@divisor,f
  7769  15C9  0DA4               	rlf	___lldiv@divisor+1,f
  7770  15CA  0DA5               	rlf	___lldiv@divisor+2,f
  7771  15CB  0DA6               	rlf	___lldiv@divisor+3,f
  7772  15CC  0BAB               	decfsz	??___lldiv,f
  7773  15CD  2DC7               	goto	u1535
  7774  15CE  3001               	movlw	1
  7775  15CF  00AB               	movwf	??___lldiv
  7776  15D0  082B               	movf	??___lldiv,w
  7777  15D1  07B0               	addwf	___lldiv@counter,f
  7778  15D2  2DC3               	goto	l2747
  7779  15D3                     l2749:	
  7780  15D3  3001               	movlw	1
  7781  15D4  00AB               	movwf	??___lldiv
  7782  15D5                     u1555:	
  7783  15D5  1003               	clrc
  7784  15D6  0DAC               	rlf	___lldiv@quotient,f
  7785  15D7  0DAD               	rlf	___lldiv@quotient+1,f
  7786  15D8  0DAE               	rlf	___lldiv@quotient+2,f
  7787  15D9  0DAF               	rlf	___lldiv@quotient+3,f
  7788  15DA  0BAB               	decfsz	??___lldiv,f
  7789  15DB  2DD5               	goto	u1555
  7790  15DC  0826               	movf	___lldiv@divisor+3,w
  7791  15DD  022A               	subwf	___lldiv@dividend+3,w
  7792  15DE  1D03               	skipz
  7793  15DF  2DEA               	goto	u1565
  7794  15E0  0825               	movf	___lldiv@divisor+2,w
  7795  15E1  0229               	subwf	___lldiv@dividend+2,w
  7796  15E2  1D03               	skipz
  7797  15E3  2DEA               	goto	u1565
  7798  15E4  0824               	movf	___lldiv@divisor+1,w
  7799  15E5  0228               	subwf	___lldiv@dividend+1,w
  7800  15E6  1D03               	skipz
  7801  15E7  2DEA               	goto	u1565
  7802  15E8  0823               	movf	___lldiv@divisor,w
  7803  15E9  0227               	subwf	___lldiv@dividend,w
  7804  15EA                     u1565:	
  7805  15EA  1C03               	skipc
  7806  15EB  2DFB               	goto	l2757
  7807  15EC  0823               	movf	___lldiv@divisor,w
  7808  15ED  02A7               	subwf	___lldiv@dividend,f
  7809  15EE  0824               	movf	___lldiv@divisor+1,w
  7810  15EF  1C03               	skipc
  7811  15F0  0F24               	incfsz	___lldiv@divisor+1,w
  7812  15F1  02A8               	subwf	___lldiv@dividend+1,f
  7813  15F2  0825               	movf	___lldiv@divisor+2,w
  7814  15F3  1C03               	skipc
  7815  15F4  0F25               	incfsz	___lldiv@divisor+2,w
  7816  15F5  02A9               	subwf	___lldiv@dividend+2,f
  7817  15F6  0826               	movf	___lldiv@divisor+3,w
  7818  15F7  1C03               	skipc
  7819  15F8  0F26               	incfsz	___lldiv@divisor+3,w
  7820  15F9  02AA               	subwf	___lldiv@dividend+3,f
  7821  15FA  142C               	bsf	___lldiv@quotient,0
  7822  15FB                     l2757:	
  7823  15FB  3001               	movlw	1
  7824  15FC                     u1575:	
  7825  15FC  1003               	clrc
  7826  15FD  0CA6               	rrf	___lldiv@divisor+3,f
  7827  15FE  0CA5               	rrf	___lldiv@divisor+2,f
  7828  15FF  0CA4               	rrf	___lldiv@divisor+1,f
  7829  1600  0CA3               	rrf	___lldiv@divisor,f
  7830  1601  3EFF               	addlw	-1
  7831  1602  1D03               	skipz
  7832  1603  2DFC               	goto	u1575
  7833  1604  3001               	movlw	1
  7834  1605  02B0               	subwf	___lldiv@counter,f
  7835  1606  1D03               	btfss	3,2
  7836  1607  2DD3               	goto	l2749
  7837  1608                     l2761:	
  7838  1608  082F               	movf	___lldiv@quotient+3,w
  7839  1609  00A6               	movwf	?___lldiv+3
  7840  160A  082E               	movf	___lldiv@quotient+2,w
  7841  160B  00A5               	movwf	?___lldiv+2
  7842  160C  082D               	movf	___lldiv@quotient+1,w
  7843  160D  00A4               	movwf	?___lldiv+1
  7844  160E  082C               	movf	___lldiv@quotient,w
  7845  160F  00A3               	movwf	?___lldiv
  7846  1610  0008               	return
  7847  1611                     __end_of___lldiv:	
  7848                           
  7849                           	psect	text29
  7850  0BA2                     __ptext29:	
  7851 ;; *************** function _logo *****************
  7852 ;; Defined at:
  7853 ;;		line 8 in file "auxiliar.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;		None
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  1    wreg      void 
  7860 ;; Registers used:
  7861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7867 ;;      Params:         0       0       0       0       0
  7868 ;;      Locals:         0       0       0       0       0
  7869 ;;      Temps:          0       3       0       0       0
  7870 ;;      Totals:         0       3       0       0       0
  7871 ;;Total ram usage:        3 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    7
  7874 ;; This function calls:
  7875 ;;		_cmdLCD
  7876 ;;		_writeLCD
  7877 ;; This function is called by:
  7878 ;;		_main
  7879 ;; This function uses a non-reentrant model
  7880 ;;
  7881                           
  7882                           
  7883                           ;psect for function _logo
  7884  0BA2                     _logo:	
  7885                           
  7886                           ;auxiliar.c: 10:     cmdLCD(0x01);
  7887                           
  7888                           ;incstack = 0
  7889                           ; Regs used in _logo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7890  0BA2  3001               	movlw	1
  7891  0BA3  160A  118A  24A1  120A  158A  	fcall	_cmdLCD
  7892                           
  7893                           ;auxiliar.c: 11:     writeLCD(0,0,"__            __"); _delay((unsigned long)((200)*(200
      +                          00000/4000.0)));
  7894  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  7895  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  7896  0BAA  01AB               	clrf	writeLCD@y
  7897  0BAB  3031               	movlw	low (STR_1| (0+32768))
  7898  0BAC  00AC               	movwf	writeLCD@ptr
  7899  0BAD  3089               	movlw	high (STR_1| (0+32768))
  7900  0BAE  00AD               	movwf	writeLCD@ptr+1
  7901  0BAF  3000               	movlw	0
  7902  0BB0  120A  158A  2209  120A  158A  	fcall	_writeLCD
  7903  0BB5  3006               	movlw	6
  7904  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
  7905  0BB7  1303               	bcf	3,6	;RP1=0, select bank0
  7906  0BB8  00B2               	movwf	??_logo+2
  7907  0BB9  3013               	movlw	19
  7908  0BBA  00B1               	movwf	??_logo+1
  7909  0BBB  30AD               	movlw	173
  7910  0BBC  00B0               	movwf	??_logo
  7911  0BBD                     u3157:	
  7912  0BBD  0BB0               	decfsz	??_logo,f
  7913  0BBE  2BBD               	goto	u3157
  7914  0BBF  0BB1               	decfsz	??_logo+1,f
  7915  0BC0  2BBD               	goto	u3157
  7916  0BC1  0BB2               	decfsz	??_logo+2,f
  7917  0BC2  2BBD               	goto	u3157
  7918                           
  7919                           ;auxiliar.c: 12:     writeLCD(6,0,"B"); _delay((unsigned long)((600)*(20000000/4000.0)))
      +                          ;
  7920  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  7921  0BC4  1303               	bcf	3,6	;RP1=0, select bank0
  7922  0BC5  01AB               	clrf	writeLCD@y
  7923  0BC6  3001               	movlw	low (STR_2| (0+32768))
  7924  0BC7  00AC               	movwf	writeLCD@ptr
  7925  0BC8  308A               	movlw	high (STR_2| (0+32768))
  7926  0BC9  00AD               	movwf	writeLCD@ptr+1
  7927  0BCA  3006               	movlw	6
  7928  0BCB  120A  158A  2209  120A  158A  	fcall	_writeLCD
  7929  0BD0  3010               	movlw	16
  7930  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  7931  0BD2  1303               	bcf	3,6	;RP1=0, select bank0
  7932  0BD3  00B2               	movwf	??_logo+2
  7933  0BD4  3039               	movlw	57
  7934  0BD5  00B1               	movwf	??_logo+1
  7935  0BD6  300D               	movlw	13
  7936  0BD7  00B0               	movwf	??_logo
  7937  0BD8                     u3167:	
  7938  0BD8  0BB0               	decfsz	??_logo,f
  7939  0BD9  2BD8               	goto	u3167
  7940  0BDA  0BB1               	decfsz	??_logo+1,f
  7941  0BDB  2BD8               	goto	u3167
  7942  0BDC  0BB2               	decfsz	??_logo+2,f
  7943  0BDD  2BD8               	goto	u3167
  7944                           
  7945                           ;auxiliar.c: 13:     writeLCD(7,0,"l"); _delay((unsigned long)((600)*(20000000/4000.0)))
      +                          ;
  7946  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  7947  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  7948  0BE0  01AB               	clrf	writeLCD@y
  7949  0BE1  3005               	movlw	low (STR_3| (0+32768))
  7950  0BE2  00AC               	movwf	writeLCD@ptr
  7951  0BE3  308A               	movlw	high (STR_3| (0+32768))
  7952  0BE4  00AD               	movwf	writeLCD@ptr+1
  7953  0BE5  3007               	movlw	7
  7954  0BE6  120A  158A  2209  120A  158A  	fcall	_writeLCD
  7955  0BEB  3010               	movlw	16
  7956  0BEC  1283               	bcf	3,5	;RP0=0, select bank0
  7957  0BED  1303               	bcf	3,6	;RP1=0, select bank0
  7958  0BEE  00B2               	movwf	??_logo+2
  7959  0BEF  3039               	movlw	57
  7960  0BF0  00B1               	movwf	??_logo+1
  7961  0BF1  300D               	movlw	13
  7962  0BF2  00B0               	movwf	??_logo
  7963  0BF3                     u3177:	
  7964  0BF3  0BB0               	decfsz	??_logo,f
  7965  0BF4  2BF3               	goto	u3177
  7966  0BF5  0BB1               	decfsz	??_logo+1,f
  7967  0BF6  2BF3               	goto	u3177
  7968  0BF7  0BB2               	decfsz	??_logo+2,f
  7969  0BF8  2BF3               	goto	u3177
  7970                           
  7971                           ;auxiliar.c: 14:     writeLCD(8,0,"u"); _delay((unsigned long)((600)*(20000000/4000.0)))
      +                          ;
  7972  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  7973  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  7974  0BFB  01AB               	clrf	writeLCD@y
  7975  0BFC  3007               	movlw	low (STR_4| (0+32768))
  7976  0BFD  00AC               	movwf	writeLCD@ptr
  7977  0BFE  308A               	movlw	high (STR_4| (0+32768))
  7978  0BFF  00AD               	movwf	writeLCD@ptr+1
  7979  0C00  3008               	movlw	8
  7980  0C01  120A  158A  2209  120A  158A  	fcall	_writeLCD
  7981  0C06  3010               	movlw	16
  7982  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  7983  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  7984  0C09  00B2               	movwf	??_logo+2
  7985  0C0A  3039               	movlw	57
  7986  0C0B  00B1               	movwf	??_logo+1
  7987  0C0C  300D               	movlw	13
  7988  0C0D  00B0               	movwf	??_logo
  7989  0C0E                     u3187:	
  7990  0C0E  0BB0               	decfsz	??_logo,f
  7991  0C0F  2C0E               	goto	u3187
  7992  0C10  0BB1               	decfsz	??_logo+1,f
  7993  0C11  2C0E               	goto	u3187
  7994  0C12  0BB2               	decfsz	??_logo+2,f
  7995  0C13  2C0E               	goto	u3187
  7996                           
  7997                           ;auxiliar.c: 15:     writeLCD(9,0,"e"); _delay((unsigned long)((600)*(20000000/4000.0)))
      +                          ;
  7998  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  7999  0C15  1303               	bcf	3,6	;RP1=0, select bank0
  8000  0C16  01AB               	clrf	writeLCD@y
  8001  0C17  3003               	movlw	low (STR_5| (0+32768))
  8002  0C18  00AC               	movwf	writeLCD@ptr
  8003  0C19  308A               	movlw	high (STR_5| (0+32768))
  8004  0C1A  00AD               	movwf	writeLCD@ptr+1
  8005  0C1B  3009               	movlw	9
  8006  0C1C  120A  158A  2209  120A  158A  	fcall	_writeLCD
  8007  0C21  3010               	movlw	16
  8008  0C22  1283               	bcf	3,5	;RP0=0, select bank0
  8009  0C23  1303               	bcf	3,6	;RP1=0, select bank0
  8010  0C24  00B2               	movwf	??_logo+2
  8011  0C25  3039               	movlw	57
  8012  0C26  00B1               	movwf	??_logo+1
  8013  0C27  300D               	movlw	13
  8014  0C28  00B0               	movwf	??_logo
  8015  0C29                     u3197:	
  8016  0C29  0BB0               	decfsz	??_logo,f
  8017  0C2A  2C29               	goto	u3197
  8018  0C2B  0BB1               	decfsz	??_logo+1,f
  8019  0C2C  2C29               	goto	u3197
  8020  0C2D  0BB2               	decfsz	??_logo+2,f
  8021  0C2E  2C29               	goto	u3197
  8022                           
  8023                           ;auxiliar.c: 16:     writeLCD(0,1,"    Tecnolog    "); _delay((unsigned long)((2500)*(20
      +                          000000/4000.0)));
  8024  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
  8025  0C30  1303               	bcf	3,6	;RP1=0, select bank0
  8026  0C31  01AB               	clrf	writeLCD@y
  8027  0C32  0AAB               	incf	writeLCD@y,f
  8028  0C33  3054               	movlw	low (STR_6| (0+32768))
  8029  0C34  00AC               	movwf	writeLCD@ptr
  8030  0C35  3088               	movlw	high (STR_6| (0+32768))
  8031  0C36  00AD               	movwf	writeLCD@ptr+1
  8032  0C37  3000               	movlw	0
  8033  0C38  120A  158A  2209  120A  158A  	fcall	_writeLCD
  8034  0C3D  3040               	movlw	64
  8035  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  8036  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  8037  0C40  00B2               	movwf	??_logo+2
  8038  0C41  306A               	movlw	106
  8039  0C42  00B1               	movwf	??_logo+1
  8040  0C43  3097               	movlw	151
  8041  0C44  00B0               	movwf	??_logo
  8042  0C45                     u3207:	
  8043  0C45  0BB0               	decfsz	??_logo,f
  8044  0C46  2C45               	goto	u3207
  8045  0C47  0BB1               	decfsz	??_logo+1,f
  8046  0C48  2C45               	goto	u3207
  8047  0C49  0BB2               	decfsz	??_logo+2,f
  8048  0C4A  2C45               	goto	u3207
  8049  0C4B  0008               	return
  8050  0C4C                     __end_of_logo:	
  8051                           
  8052                           	psect	text30
  8053  1118                     __ptext30:	
  8054 ;; *************** function _initTimer0 *****************
  8055 ;; Defined at:
  8056 ;;		line 38 in file "timer0.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;		None
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;		None
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  1    wreg      void 
  8063 ;; Registers used:
  8064 ;;		wreg, status,2, status,0, pclath, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8070 ;;      Params:         0       0       0       0       0
  8071 ;;      Locals:         0       0       0       0       0
  8072 ;;      Temps:          0       0       0       0       0
  8073 ;;      Totals:         0       0       0       0       0
  8074 ;;Total ram usage:        0 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    5
  8077 ;; This function calls:
  8078 ;;		_setT0limite
  8079 ;; This function is called by:
  8080 ;;		_main
  8081 ;; This function uses a non-reentrant model
  8082 ;;
  8083                           
  8084                           
  8085                           ;psect for function _initTimer0
  8086  1118                     _initTimer0:	
  8087                           
  8088                           ;timer0.c: 41:     INTCONbits.GIE = 0;
  8089                           
  8090                           ;incstack = 0
  8091                           ; Regs used in _initTimer0: [wreg+status,2+status,0+pclath+cstack]
  8092  1118  138B               	bcf	11,7	;volatile
  8093                           
  8094                           ;timer0.c: 43:     ANSEL = 0x00;
  8095  1119  1683               	bsf	3,5	;RP0=1, select bank3
  8096  111A  1703               	bsf	3,6	;RP1=1, select bank3
  8097  111B  0188               	clrf	8	;volatile
  8098                           
  8099                           ;timer0.c: 44:     TRISAbits.TRISA4 = 1;
  8100  111C  1683               	bsf	3,5	;RP0=1, select bank1
  8101  111D  1303               	bcf	3,6	;RP1=0, select bank1
  8102  111E  1605               	bsf	5,4	;volatile
  8103                           
  8104                           ;timer0.c: 46:     OPTION_REGbits.T0CS = 0;
  8105  111F  1281               	bcf	1,5	;volatile
  8106                           
  8107                           ;timer0.c: 48:     OPTION_REGbits.PSA = 0;
  8108  1120  1181               	bcf	1,3	;volatile
  8109                           
  8110                           ;timer0.c: 49:     OPTION_REGbits.PS2 = 1;
  8111  1121  1501               	bsf	1,2	;volatile
  8112                           
  8113                           ;timer0.c: 50:     OPTION_REGbits.PS1 = 0;
  8114  1122  1081               	bcf	1,1	;volatile
  8115                           
  8116                           ;timer0.c: 51:     OPTION_REGbits.PS0 = 0;
  8117  1123  1001               	bcf	1,0	;volatile
  8118                           
  8119                           ;timer0.c: 53:     OPTION_REGbits.T0SE = 1;
  8120  1124  1601               	bsf	1,4	;volatile
  8121                           
  8122                           ;timer0.c: 55:     TMR0 = 100;
  8123  1125  3064               	movlw	100
  8124  1126  1283               	bcf	3,5	;RP0=0, select bank0
  8125  1127  1303               	bcf	3,6	;RP1=0, select bank0
  8126  1128  0081               	movwf	1	;volatile
  8127                           
  8128                           ;timer0.c: 57:     setT0limite( 700 );
  8129  1129  30BC               	movlw	188
  8130  112A  00A3               	movwf	setT0limite@c
  8131  112B  3002               	movlw	2
  8132  112C  00A4               	movwf	setT0limite@c+1
  8133  112D  160A  158A  27F2   	fcall	_setT0limite
  8134                           
  8135                           ;timer0.c: 59:     INTCONbits.T0IE = 1;
  8136  1130  168B               	bsf	11,5	;volatile
  8137                           
  8138                           ;timer0.c: 60:     INTCONbits.GIE = 1;
  8139  1131  178B               	bsf	11,7	;volatile
  8140  1132  0008               	return
  8141  1133                     __end_of_initTimer0:	
  8142                           
  8143                           	psect	text31
  8144  1FF2                     __ptext31:	
  8145 ;; *************** function _setT0limite *****************
  8146 ;; Defined at:
  8147 ;;		line 29 in file "timer0.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;  c               2    3[BANK0 ] int 
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;		None
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  1    wreg      void 
  8154 ;; Registers used:
  8155 ;;		wreg
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8161 ;;      Params:         0       2       0       0       0
  8162 ;;      Locals:         0       0       0       0       0
  8163 ;;      Temps:          0       0       0       0       0
  8164 ;;      Totals:         0       2       0       0       0
  8165 ;;Total ram usage:        2 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    4
  8168 ;; This function calls:
  8169 ;;		Nothing
  8170 ;; This function is called by:
  8171 ;;		_initTimer0
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           
  8176                           ;psect for function _setT0limite
  8177  1FF2                     _setT0limite:	
  8178                           
  8179                           ;timer0.c: 29: void setT0limite( int c );timer0.c: 30: {;timer0.c: 31:     t0final = c;
  8180                           
  8181                           ;incstack = 0
  8182                           ; Regs used in _setT0limite: [wreg]
  8183  1FF2  1283               	bcf	3,5	;RP0=0, select bank0
  8184  1FF3  1303               	bcf	3,6	;RP1=0, select bank0
  8185  1FF4  0824               	movf	setT0limite@c+1,w
  8186  1FF5  00CB               	movwf	_t0final+1
  8187  1FF6  0823               	movf	setT0limite@c,w
  8188  1FF7  00CA               	movwf	_t0final
  8189  1FF8  0008               	return
  8190  1FF9                     __end_of_setT0limite:	
  8191                           
  8192                           	psect	text32
  8193  104F                     __ptext32:	
  8194 ;; *************** function _initSerial *****************
  8195 ;; Defined at:
  8196 ;;		line 11 in file "Serial.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;		None
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;		None
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  1    wreg      void 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0, pclath, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8210 ;;      Params:         0       0       0       0       0
  8211 ;;      Locals:         0       0       0       0       0
  8212 ;;      Temps:          0       1       0       0       0
  8213 ;;      Totals:         0       1       0       0       0
  8214 ;;Total ram usage:        1 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    5
  8217 ;; This function calls:
  8218 ;;		_serialOut
  8219 ;; This function is called by:
  8220 ;;		_main
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           
  8225                           ;psect for function _initSerial
  8226  104F                     _initSerial:	
  8227                           
  8228                           ;Serial.c: 13:     PORTB = 0x00;
  8229                           
  8230                           ;incstack = 0
  8231                           ; Regs used in _initSerial: [wreg+status,2+status,0+pclath+cstack]
  8232  104F  1283               	bcf	3,5	;RP0=0, select bank0
  8233  1050  1303               	bcf	3,6	;RP1=0, select bank0
  8234  1051  0186               	clrf	6	;volatile
  8235                           
  8236                           ;Serial.c: 14:     CCP1CON &= 0xF0;
  8237  1052  30F0               	movlw	240
  8238  1053  00A6               	movwf	??_initSerial
  8239  1054  0826               	movf	??_initSerial,w
  8240  1055  0597               	andwf	23,f	;volatile
  8241                           
  8242                           ;Serial.c: 15:     ANSELH = 0x00;
  8243  1056  1683               	bsf	3,5	;RP0=1, select bank3
  8244  1057  1703               	bsf	3,6	;RP1=1, select bank3
  8245  1058  0189               	clrf	9	;volatile
  8246                           
  8247                           ;Serial.c: 16:     TRISB = 0b00000010;
  8248  1059  3002               	movlw	2
  8249  105A  1683               	bsf	3,5	;RP0=1, select bank1
  8250  105B  1303               	bcf	3,6	;RP1=0, select bank1
  8251  105C  0086               	movwf	6	;volatile
  8252                           
  8253                           ;Serial.c: 18:     PORTBbits.RB4 = 1;
  8254  105D  1283               	bcf	3,5	;RP0=0, select bank0
  8255  105E  1303               	bcf	3,6	;RP1=0, select bank0
  8256  105F  1606               	bsf	6,4	;volatile
  8257                           
  8258                           ;Serial.c: 19:     serialOut(0x00);
  8259  1060  3000               	movlw	0
  8260  1061  160A  118A  207D   	fcall	_serialOut
  8261  1064  0008               	return
  8262  1065                     __end_of_initSerial:	
  8263                           
  8264                           	psect	text33
  8265  107D                     __ptext33:	
  8266 ;; *************** function _serialOut *****************
  8267 ;; Defined at:
  8268 ;;		line 22 in file "Serial.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;  d               1    wreg     unsigned char 
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;  d               1    4[BANK0 ] unsigned char 
  8273 ;;  i               1    5[BANK0 ] unsigned char 
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  1    wreg      void 
  8276 ;; Registers used:
  8277 ;;		wreg, status,2, status,0
  8278 ;; Tracked objects:
  8279 ;;		On entry : 0/0
  8280 ;;		On exit  : 0/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8283 ;;      Params:         0       0       0       0       0
  8284 ;;      Locals:         0       2       0       0       0
  8285 ;;      Temps:          0       1       0       0       0
  8286 ;;      Totals:         0       3       0       0       0
  8287 ;;Total ram usage:        3 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    4
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		_initSerial
  8294 ;;		_main
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           
  8299                           ;psect for function _serialOut
  8300  107D                     _serialOut:	
  8301                           
  8302                           ;incstack = 0
  8303                           ; Regs used in _serialOut: [wreg+status,2+status,0]
  8304                           ;serialOut@d stored from wreg
  8305  107D  1283               	bcf	3,5	;RP0=0, select bank0
  8306  107E  1303               	bcf	3,6	;RP1=0, select bank0
  8307  107F  00A4               	movwf	serialOut@d
  8308                           
  8309                           ;Serial.c: 22: void serialOut (unsigned char d);Serial.c: 23: {;Serial.c: 24:     unsign
      +                          ed char i = 0x80;
  8310  1080  3080               	movlw	128
  8311  1081  00A3               	movwf	??_serialOut
  8312  1082  0823               	movf	??_serialOut,w
  8313  1083  00A5               	movwf	serialOut@i
  8314                           
  8315                           ;Serial.c: 25:     PORTBbits.RB3 = 0;
  8316  1084  1186               	bcf	6,3	;volatile
  8317  1085                     l2815:	
  8318                           ;Serial.c: 35:     }
  8319                           
  8320                           ;Serial.c: 26:     while (i)
  8321                           
  8322                           
  8323                           ;Serial.c: 26:     while (i)
  8324  1085  0825               	movf	serialOut@i,w
  8325  1086  1903               	btfsc	3,2
  8326  1087  2894               	goto	l32
  8327                           
  8328                           ;Serial.c: 27:     {;Serial.c: 28:         PORTBbits.RB2 = 0;
  8329  1088  1106               	bcf	6,2	;volatile
  8330                           
  8331                           ;Serial.c: 29:         if(d & i )
  8332  1089  0824               	movf	serialOut@d,w
  8333  108A  0525               	andwf	serialOut@i,w
  8334  108B  1903               	btfsc	3,2
  8335  108C  288F               	goto	l30
  8336                           
  8337                           ;Serial.c: 30:             PORTBbits.RB0 = 1;
  8338  108D  1406               	bsf	6,0	;volatile
  8339  108E  2890               	goto	l2811
  8340  108F                     l30:	
  8341                           ;Serial.c: 31:         else
  8342                           
  8343                           
  8344                           ;Serial.c: 32:             PORTBbits.RB0 = 0;
  8345  108F  1006               	bcf	6,0	;volatile
  8346  1090                     l2811:	
  8347                           
  8348                           ;Serial.c: 33:         i >>= 1;
  8349  1090  1003               	clrc
  8350  1091  0CA5               	rrf	serialOut@i,f
  8351                           
  8352                           ;Serial.c: 34:         PORTBbits.RB2 = 1;
  8353  1092  1506               	bsf	6,2	;volatile
  8354  1093  2885               	goto	l2815
  8355  1094                     l32:	
  8356                           
  8357                           ;Serial.c: 36:     PORTBbits.RB3 = 1;
  8358  1094  1586               	bsf	6,3	;volatile
  8359  1095  0008               	return
  8360  1096                     __end_of_serialOut:	
  8361                           
  8362                           	psect	text34
  8363  12F1                     __ptext34:	
  8364 ;; *************** function _initLCD *****************
  8365 ;; Defined at:
  8366 ;;		line 71 in file "lcd.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;		None
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;		None
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  1    wreg      void 
  8373 ;; Registers used:
  8374 ;;		wreg, status,2, status,0, pclath, cstack
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8380 ;;      Params:         0       0       0       0       0
  8381 ;;      Locals:         0       0       0       0       0
  8382 ;;      Temps:          0       3       0       0       0
  8383 ;;      Totals:         0       3       0       0       0
  8384 ;;Total ram usage:        3 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    5
  8387 ;; This function calls:
  8388 ;;		_cmdLCD
  8389 ;; This function is called by:
  8390 ;;		_main
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           
  8395                           ;psect for function _initLCD
  8396  12F1                     _initLCD:	
  8397                           
  8398                           ;lcd.c: 73:     LCD.BUS = 0;
  8399                           
  8400                           ;incstack = 0
  8401                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  8402  12F1  30F0               	movlw	-16
  8403  12F2  1283               	bcf	3,5	;RP0=0, select bank0
  8404  12F3  1303               	bcf	3,6	;RP1=0, select bank0
  8405  12F4  0588               	andwf	8,f	;volatile
  8406                           
  8407                           ;lcd.c: 74:     LCD.RS = 0;
  8408  12F5  1208               	bcf	8,4	;volatile
  8409                           
  8410                           ;lcd.c: 75:     LCD.EN = 1;
  8411  12F6  1688               	bsf	8,5	;volatile
  8412                           
  8413                           ;lcd.c: 76:     TRISD = 0x00;
  8414  12F7  1683               	bsf	3,5	;RP0=1, select bank1
  8415  12F8  1303               	bcf	3,6	;RP1=0, select bank1
  8416  12F9  0188               	clrf	8	;volatile
  8417                           
  8418                           ;lcd.c: 78:     _delay((unsigned long)((100)*(20000000/4000.0)));
  8419  12FA  3003               	movlw	3
  8420  12FB  1283               	bcf	3,5	;RP0=0, select bank0
  8421  12FC  1303               	bcf	3,6	;RP1=0, select bank0
  8422  12FD  00A9               	movwf	??_initLCD+2
  8423  12FE  308A               	movlw	138
  8424  12FF  00A8               	movwf	??_initLCD+1
  8425  1300  3055               	movlw	85
  8426  1301  00A7               	movwf	??_initLCD
  8427  1302                     u3217:	
  8428  1302  0BA7               	decfsz	??_initLCD,f
  8429  1303  2B02               	goto	u3217
  8430  1304  0BA8               	decfsz	??_initLCD+1,f
  8431  1305  2B02               	goto	u3217
  8432  1306  0BA9               	decfsz	??_initLCD+2,f
  8433  1307  2B02               	goto	u3217
  8434                           
  8435                           ;lcd.c: 79:     cmdLCD ( 0x20 );
  8436  1308  3020               	movlw	32
  8437  1309  160A  118A  24A1  160A  118A  	fcall	_cmdLCD
  8438                           
  8439                           ;lcd.c: 80:     cmdLCD ( 0x28 );
  8440  130E  3028               	movlw	40
  8441  130F  160A  118A  24A1  160A  118A  	fcall	_cmdLCD
  8442                           
  8443                           ;lcd.c: 81:     cmdLCD ( 0x0C );
  8444  1314  300C               	movlw	12
  8445  1315  160A  118A  24A1  160A  118A  	fcall	_cmdLCD
  8446                           
  8447                           ;lcd.c: 82:     cmdLCD ( 0x01 );
  8448  131A  3001               	movlw	1
  8449  131B  160A  118A  24A1  160A  118A  	fcall	_cmdLCD
  8450                           
  8451                           ;lcd.c: 83:     cmdLCD ( 0x02 );
  8452  1320  3002               	movlw	2
  8453  1321  160A  118A  24A1   	fcall	_cmdLCD
  8454  1324  0008               	return
  8455  1325                     __end_of_initLCD:	
  8456                           
  8457                           	psect	text35
  8458  1025                     __ptext35:	
  8459 ;; *************** function _initBT *****************
  8460 ;; Defined at:
  8461 ;;		line 4 in file "bds.c"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;		None
  8464 ;; Auto vars:     Size  Location     Type
  8465 ;;		None
  8466 ;; Return value:  Size  Location     Type
  8467 ;;                  1    wreg      void 
  8468 ;; Registers used:
  8469 ;;		None
  8470 ;; Tracked objects:
  8471 ;;		On entry : 0/0
  8472 ;;		On exit  : 0/0
  8473 ;;		Unchanged: 0/0
  8474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8475 ;;      Params:         0       0       0       0       0
  8476 ;;      Locals:         0       0       0       0       0
  8477 ;;      Temps:          0       0       0       0       0
  8478 ;;      Totals:         0       0       0       0       0
  8479 ;;Total ram usage:        0 bytes
  8480 ;; Hardware stack levels used:    1
  8481 ;; Hardware stack levels required when called:    4
  8482 ;; This function calls:
  8483 ;;		Nothing
  8484 ;; This function is called by:
  8485 ;;		_main
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           
  8490                           ;psect for function _initBT
  8491  1025                     _initBT:	
  8492                           
  8493                           ;bds.c: 7:     TRISCbits.TRISC0 = 1;
  8494                           
  8495                           ;incstack = 0
  8496                           ; Regs used in _initBT: []
  8497  1025  1683               	bsf	3,5	;RP0=1, select bank1
  8498  1026  1303               	bcf	3,6	;RP1=0, select bank1
  8499  1027  1407               	bsf	7,0	;volatile
  8500                           
  8501                           ;bds.c: 8:     TRISCbits.TRISC1 = 1;
  8502  1028  1487               	bsf	7,1	;volatile
  8503                           
  8504                           ;bds.c: 9:     TRISCbits.TRISC2 = 1;
  8505  1029  1507               	bsf	7,2	;volatile
  8506                           
  8507                           ;bds.c: 11:     PORTCbits.RC0 = 0;
  8508  102A  1283               	bcf	3,5	;RP0=0, select bank0
  8509  102B  1303               	bcf	3,6	;RP1=0, select bank0
  8510  102C  1007               	bcf	7,0	;volatile
  8511                           
  8512                           ;bds.c: 12:     PORTCbits.RC1 = 0;
  8513  102D  1087               	bcf	7,1	;volatile
  8514                           
  8515                           ;bds.c: 13:     PORTCbits.RC2 = 0;
  8516  102E  1107               	bcf	7,2	;volatile
  8517  102F  0008               	return
  8518  1030                     __end_of_initBT:	
  8519                           
  8520                           	psect	text36
  8521  1217                     __ptext36:	
  8522 ;; *************** function _getFIFO *****************
  8523 ;; Defined at:
  8524 ;;		line 23 in file "fifo.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;		None
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;  aux             1   14[BANK0 ] unsigned char 
  8529 ;; Return value:  Size  Location     Type
  8530 ;;                  1    wreg      unsigned char 
  8531 ;; Registers used:
  8532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8533 ;; Tracked objects:
  8534 ;;		On entry : 0/0
  8535 ;;		On exit  : 0/0
  8536 ;;		Unchanged: 0/0
  8537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8538 ;;      Params:         0       0       0       0       0
  8539 ;;      Locals:         0       1       0       0       0
  8540 ;;      Temps:          0       4       0       0       0
  8541 ;;      Totals:         0       5       0       0       0
  8542 ;;Total ram usage:        5 bytes
  8543 ;; Hardware stack levels used:    1
  8544 ;; Hardware stack levels required when called:    5
  8545 ;; This function calls:
  8546 ;;		___awmod
  8547 ;; This function is called by:
  8548 ;;		_main
  8549 ;;		_readEUSART
  8550 ;; This function uses a non-reentrant model
  8551 ;;
  8552                           
  8553                           
  8554                           ;psect for function _getFIFO
  8555  1217                     _getFIFO:	
  8556                           
  8557                           ;fifo.c: 25:     unsigned char aux = 0;
  8558                           
  8559                           ;incstack = 0
  8560                           ; Regs used in _getFIFO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8561  1217  1283               	bcf	3,5	;RP0=0, select bank0
  8562  1218  1303               	bcf	3,6	;RP1=0, select bank0
  8563  1219  01AE               	clrf	getFIFO@aux
  8564                           
  8565                           ;fifo.c: 27:     if( fifoTail != fifoHead )
  8566  121A  084C               	movf	_fifoTail,w
  8567  121B  067C               	xorwf	_fifoHead,w
  8568  121C  1903               	skipnz
  8569  121D  2A3E               	goto	l3463
  8570                           
  8571                           ;fifo.c: 28:     {;fifo.c: 29:         aux = fifo[ fifoTail ];
  8572  121E  084C               	movf	_fifoTail,w
  8573  121F  3EA0               	addlw	(low (_fifo| 0))& (0+255)
  8574  1220  0084               	movwf	4
  8575  1221  1383               	bcf	3,7	;select IRP bank1
  8576  1222  0800               	movf	0,w
  8577  1223  00AA               	movwf	??_getFIFO
  8578  1224  082A               	movf	??_getFIFO,w
  8579  1225  00AE               	movwf	getFIFO@aux
  8580                           
  8581                           ;fifo.c: 30:         fifoTail = ++fifoTail % 30;
  8582  1226  301E               	movlw	30
  8583  1227  00A3               	movwf	___awmod@divisor
  8584  1228  3000               	movlw	0
  8585  1229  00A4               	movwf	___awmod@divisor+1
  8586  122A  3001               	movlw	1
  8587  122B  00AA               	movwf	??_getFIFO
  8588  122C  082A               	movf	??_getFIFO,w
  8589  122D  07CC               	addwf	_fifoTail,f
  8590  122E  084C               	movf	_fifoTail,w
  8591  122F  00AB               	movwf	??_getFIFO+1
  8592  1230  01AC               	clrf	??_getFIFO+2
  8593  1231  082B               	movf	??_getFIFO+1,w
  8594  1232  00A5               	movwf	___awmod@dividend
  8595  1233  082C               	movf	??_getFIFO+2,w
  8596  1234  00A6               	movwf	___awmod@dividend+1
  8597  1235  160A  118A  23AA   	fcall	___awmod
  8598  1238  1283               	bcf	3,5	;RP0=0, select bank0
  8599  1239  1303               	bcf	3,6	;RP1=0, select bank0
  8600  123A  0823               	movf	?___awmod,w
  8601  123B  00AD               	movwf	??_getFIFO+3
  8602  123C  082D               	movf	??_getFIFO+3,w
  8603  123D  00CC               	movwf	_fifoTail
  8604  123E                     l3463:	
  8605                           ;fifo.c: 31:     }
  8606                           
  8607                           
  8608                           ;fifo.c: 32:     return( aux );
  8609  123E  082E               	movf	getFIFO@aux,w
  8610  123F  0008               	return
  8611  1240                     __end_of_getFIFO:	
  8612                           
  8613                           	psect	text37
  8614  13AA                     __ptext37:	
  8615 ;; *************** function ___awmod *****************
  8616 ;; Defined at:
  8617 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awmod.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;  divisor         2    3[BANK0 ] int 
  8620 ;;  dividend        2    5[BANK0 ] int 
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  sign            1    9[BANK0 ] unsigned char 
  8623 ;;  counter         1    8[BANK0 ] unsigned char 
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  2    3[BANK0 ] int 
  8626 ;; Registers used:
  8627 ;;		wreg, status,2, status,0
  8628 ;; Tracked objects:
  8629 ;;		On entry : 0/0
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8633 ;;      Params:         0       4       0       0       0
  8634 ;;      Locals:         0       2       0       0       0
  8635 ;;      Temps:          0       1       0       0       0
  8636 ;;      Totals:         0       7       0       0       0
  8637 ;;Total ram usage:        7 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    4
  8640 ;; This function calls:
  8641 ;;		Nothing
  8642 ;; This function is called by:
  8643 ;;		_getFIFO
  8644 ;;		_statusFIFO
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           
  8649                           ;psect for function ___awmod
  8650  13AA                     ___awmod:	
  8651                           
  8652                           ;incstack = 0
  8653                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8654  13AA  1283               	bcf	3,5	;RP0=0, select bank0
  8655  13AB  1303               	bcf	3,6	;RP1=0, select bank0
  8656  13AC  01A9               	clrf	___awmod@sign
  8657  13AD  1FA6               	btfss	___awmod@dividend+1,7
  8658  13AE  2BB6               	goto	l3005
  8659  13AF  09A5               	comf	___awmod@dividend,f
  8660  13B0  09A6               	comf	___awmod@dividend+1,f
  8661  13B1  0AA5               	incf	___awmod@dividend,f
  8662  13B2  1903               	skipnz
  8663  13B3  0AA6               	incf	___awmod@dividend+1,f
  8664  13B4  01A9               	clrf	___awmod@sign
  8665  13B5  0AA9               	incf	___awmod@sign,f
  8666  13B6                     l3005:	
  8667  13B6  1FA4               	btfss	___awmod@divisor+1,7
  8668  13B7  2BBD               	goto	l3009
  8669  13B8  09A3               	comf	___awmod@divisor,f
  8670  13B9  09A4               	comf	___awmod@divisor+1,f
  8671  13BA  0AA3               	incf	___awmod@divisor,f
  8672  13BB  1903               	skipnz
  8673  13BC  0AA4               	incf	___awmod@divisor+1,f
  8674  13BD                     l3009:	
  8675  13BD  0823               	movf	___awmod@divisor,w
  8676  13BE  0424               	iorwf	___awmod@divisor+1,w
  8677  13BF  1903               	btfsc	3,2
  8678  13C0  2BEA               	goto	l3027
  8679  13C1  01A8               	clrf	___awmod@counter
  8680  13C2  0AA8               	incf	___awmod@counter,f
  8681  13C3                     l3017:	
  8682  13C3  1BA4               	btfsc	___awmod@divisor+1,7
  8683  13C4  2BD1               	goto	l3019
  8684  13C5  3001               	movlw	1
  8685  13C6                     u1955:	
  8686  13C6  1003               	clrc
  8687  13C7  0DA3               	rlf	___awmod@divisor,f
  8688  13C8  0DA4               	rlf	___awmod@divisor+1,f
  8689  13C9  3EFF               	addlw	-1
  8690  13CA  1D03               	skipz
  8691  13CB  2BC6               	goto	u1955
  8692  13CC  3001               	movlw	1
  8693  13CD  00A7               	movwf	??___awmod
  8694  13CE  0827               	movf	??___awmod,w
  8695  13CF  07A8               	addwf	___awmod@counter,f
  8696  13D0  2BC3               	goto	l3017
  8697  13D1                     l3019:	
  8698  13D1  0824               	movf	___awmod@divisor+1,w
  8699  13D2  0226               	subwf	___awmod@dividend+1,w
  8700  13D3  1D03               	skipz
  8701  13D4  2BD7               	goto	u1975
  8702  13D5  0823               	movf	___awmod@divisor,w
  8703  13D6  0225               	subwf	___awmod@dividend,w
  8704  13D7                     u1975:	
  8705  13D7  1C03               	skipc
  8706  13D8  2BDF               	goto	l3023
  8707  13D9  0823               	movf	___awmod@divisor,w
  8708  13DA  02A5               	subwf	___awmod@dividend,f
  8709  13DB  0824               	movf	___awmod@divisor+1,w
  8710  13DC  1C03               	skipc
  8711  13DD  03A6               	decf	___awmod@dividend+1,f
  8712  13DE  02A6               	subwf	___awmod@dividend+1,f
  8713  13DF                     l3023:	
  8714  13DF  3001               	movlw	1
  8715  13E0                     u1985:	
  8716  13E0  1003               	clrc
  8717  13E1  0CA4               	rrf	___awmod@divisor+1,f
  8718  13E2  0CA3               	rrf	___awmod@divisor,f
  8719  13E3  3EFF               	addlw	-1
  8720  13E4  1D03               	skipz
  8721  13E5  2BE0               	goto	u1985
  8722  13E6  3001               	movlw	1
  8723  13E7  02A8               	subwf	___awmod@counter,f
  8724  13E8  1D03               	btfss	3,2
  8725  13E9  2BD1               	goto	l3019
  8726  13EA                     l3027:	
  8727  13EA  0829               	movf	___awmod@sign,w
  8728  13EB  1903               	btfsc	3,2
  8729  13EC  2BF2               	goto	l3031
  8730  13ED  09A5               	comf	___awmod@dividend,f
  8731  13EE  09A6               	comf	___awmod@dividend+1,f
  8732  13EF  0AA5               	incf	___awmod@dividend,f
  8733  13F0  1903               	skipnz
  8734  13F1  0AA6               	incf	___awmod@dividend+1,f
  8735  13F2                     l3031:	
  8736  13F2  0826               	movf	___awmod@dividend+1,w
  8737  13F3  00A4               	movwf	?___awmod+1
  8738  13F4  0825               	movf	___awmod@dividend,w
  8739  13F5  00A3               	movwf	?___awmod
  8740  13F6  0008               	return
  8741  13F7                     __end_of___awmod:	
  8742                           
  8743                           	psect	text38
  8744  1030                     __ptext38:	
  8745 ;; *************** function _errorRxEUSART *****************
  8746 ;; Defined at:
  8747 ;;		line 72 in file "eusart.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;		None
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;		None
  8752 ;; Return value:  Size  Location     Type
  8753 ;;                  1    wreg      unsigned char 
  8754 ;; Registers used:
  8755 ;;		wreg
  8756 ;; Tracked objects:
  8757 ;;		On entry : 0/0
  8758 ;;		On exit  : 0/0
  8759 ;;		Unchanged: 0/0
  8760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8761 ;;      Params:         0       0       0       0       0
  8762 ;;      Locals:         0       0       0       0       0
  8763 ;;      Temps:          0       0       0       0       0
  8764 ;;      Totals:         0       0       0       0       0
  8765 ;;Total ram usage:        0 bytes
  8766 ;; Hardware stack levels used:    1
  8767 ;; Hardware stack levels required when called:    4
  8768 ;; This function calls:
  8769 ;;		Nothing
  8770 ;; This function is called by:
  8771 ;;		_main
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775                           
  8776                           ;psect for function _errorRxEUSART
  8777  1030                     _errorRxEUSART:	
  8778                           
  8779                           ;eusart.c: 74:     if( RCSTAbits.FERR )
  8780                           
  8781                           ;incstack = 0
  8782                           ; Regs used in _errorRxEUSART: [wreg]
  8783  1030  1283               	bcf	3,5	;RP0=0, select bank0
  8784  1031  1303               	bcf	3,6	;RP1=0, select bank0
  8785  1032  1D18               	btfss	24,2	;volatile
  8786  1033  2836               	goto	l550
  8787                           
  8788                           ;eusart.c: 75:         return( 1 );
  8789  1034  3001               	movlw	1
  8790  1035  0008               	return
  8791  1036                     l550:	
  8792                           ;eusart.c: 76:     else if( RCSTAbits.OERR )
  8793                           
  8794  1036  1C98               	btfss	24,1	;volatile
  8795  1037  283A               	goto	l3481
  8796                           
  8797                           ;eusart.c: 77:         return( 2 );
  8798  1038  3002               	movlw	2
  8799  1039  0008               	return
  8800  103A                     l3481:	
  8801                           ;eusart.c: 78:     else
  8802                           
  8803                           
  8804                           ;eusart.c: 79:         return( 0 );
  8805  103A  3000               	movlw	0
  8806  103B  0008               	return
  8807  103C                     __end_of_errorRxEUSART:	
  8808                           
  8809                           	psect	text39
  8810  0E03                     __ptext39:	
  8811 ;; *************** function _easterEgg *****************
  8812 ;; Defined at:
  8813 ;;		line 179 in file "auxiliar.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;		None
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;		None
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  1    wreg      void 
  8820 ;; Registers used:
  8821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8827 ;;      Params:         0       0       0       0       0
  8828 ;;      Locals:         0       0       0       0       0
  8829 ;;      Temps:          0       3       0       0       0
  8830 ;;      Totals:         0       3       0       0       0
  8831 ;;Total ram usage:        3 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; Hardware stack levels required when called:    7
  8834 ;; This function calls:
  8835 ;;		_bordaSubidaB2
  8836 ;;		_bordaSubidaB3
  8837 ;;		_cmdLCD
  8838 ;;		_writeLCD
  8839 ;; This function is called by:
  8840 ;;		_main
  8841 ;; This function uses a non-reentrant model
  8842 ;;
  8843                           
  8844                           
  8845                           ;psect for function _easterEgg
  8846  0E03                     _easterEgg:	
  8847                           
  8848                           ;auxiliar.c: 182:     cmdLCD(0x01);
  8849                           
  8850                           ;incstack = 0
  8851                           ; Regs used in _easterEgg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8852  0E03  3001               	movlw	1
  8853  0E04  160A  118A  24A1  120A  158A  	fcall	_cmdLCD
  8854                           
  8855                           ;auxiliar.c: 184:     writeLCD(0,0,"WALLACE PIRES   ");_delay((unsigned long)((1000)*(20
      +                          000000/4000.0)));
  8856  0E09  1283               	bcf	3,5	;RP0=0, select bank0
  8857  0E0A  1303               	bcf	3,6	;RP1=0, select bank0
  8858  0E0B  01AB               	clrf	writeLCD@y
  8859  0E0C  3076               	movlw	low (STR_66| (0+32768))
  8860  0E0D  00AC               	movwf	writeLCD@ptr
  8861  0E0E  3088               	movlw	high (STR_66| (0+32768))
  8862  0E0F  00AD               	movwf	writeLCD@ptr+1
  8863  0E10  3000               	movlw	0
  8864  0E11  120A  158A  2209  120A  158A  	fcall	_writeLCD
  8865  0E16  301A               	movlw	26
  8866  0E17  1283               	bcf	3,5	;RP0=0, select bank0
  8867  0E18  1303               	bcf	3,6	;RP1=0, select bank0
  8868  0E19  00B2               	movwf	??_easterEgg+2
  8869  0E1A  305E               	movlw	94
  8870  0E1B  00B1               	movwf	??_easterEgg+1
  8871  0E1C  306D               	movlw	109
  8872  0E1D  00B0               	movwf	??_easterEgg
  8873  0E1E                     u3227:	
  8874  0E1E  0BB0               	decfsz	??_easterEgg,f
  8875  0E1F  2E1E               	goto	u3227
  8876  0E20  0BB1               	decfsz	??_easterEgg+1,f
  8877  0E21  2E1E               	goto	u3227
  8878  0E22  0BB2               	decfsz	??_easterEgg+2,f
  8879  0E23  2E1E               	goto	u3227
  8880  0E24  2E25               	nop2
  8881                           
  8882                           ;auxiliar.c: 185:     writeLCD(0,1,"MATEUS PINHEIRO ");_delay((unsigned long)((1000)*(20
      +                          000000/4000.0)));
  8883  0E25  1283               	bcf	3,5	;RP0=0, select bank0
  8884  0E26  1303               	bcf	3,6	;RP1=0, select bank0
  8885  0E27  01AB               	clrf	writeLCD@y
  8886  0E28  0AAB               	incf	writeLCD@y,f
  8887  0E29  30BA               	movlw	low (STR_67| (0+32768))
  8888  0E2A  00AC               	movwf	writeLCD@ptr
  8889  0E2B  3088               	movlw	high (STR_67| (0+32768))
  8890  0E2C  00AD               	movwf	writeLCD@ptr+1
  8891  0E2D  3000               	movlw	0
  8892  0E2E  120A  158A  2209  120A  158A  	fcall	_writeLCD
  8893  0E33  301A               	movlw	26
  8894  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  8895  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  8896  0E36  00B2               	movwf	??_easterEgg+2
  8897  0E37  305E               	movlw	94
  8898  0E38  00B1               	movwf	??_easterEgg+1
  8899  0E39  306D               	movlw	109
  8900  0E3A  00B0               	movwf	??_easterEgg
  8901  0E3B                     u3237:	
  8902  0E3B  0BB0               	decfsz	??_easterEgg,f
  8903  0E3C  2E3B               	goto	u3237
  8904  0E3D  0BB1               	decfsz	??_easterEgg+1,f
  8905  0E3E  2E3B               	goto	u3237
  8906  0E3F  0BB2               	decfsz	??_easterEgg+2,f
  8907  0E40  2E3B               	goto	u3237
  8908  0E41  2E42               	nop2
  8909                           
  8910                           ;auxiliar.c: 186:     writeLCD(0,0,"                ");
  8911  0E42  1283               	bcf	3,5	;RP0=0, select bank0
  8912  0E43  1303               	bcf	3,6	;RP1=0, select bank0
  8913  0E44  01AB               	clrf	writeLCD@y
  8914  0E45  30EE               	movlw	low (STR_68| (0+32768))
  8915  0E46  00AC               	movwf	writeLCD@ptr
  8916  0E47  3087               	movlw	high (STR_68| (0+32768))
  8917  0E48  00AD               	movwf	writeLCD@ptr+1
  8918  0E49  3000               	movlw	0
  8919  0E4A  120A  158A  2209  120A  158A  	fcall	_writeLCD
  8920                           
  8921                           ;auxiliar.c: 187:     writeLCD(0,0,"GUI. RIBEIRO    ");_delay((unsigned long)((1000)*(20
      +                          000000/4000.0)));
  8922  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  8923  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  8924  0E51  01AB               	clrf	writeLCD@y
  8925  0E52  3032               	movlw	low (STR_69| (0+32768))
  8926  0E53  00AC               	movwf	writeLCD@ptr
  8927  0E54  3088               	movlw	high (STR_69| (0+32768))
  8928  0E55  00AD               	movwf	writeLCD@ptr+1
  8929  0E56  3000               	movlw	0
  8930  0E57  120A  158A  2209  120A  158A  	fcall	_writeLCD
  8931  0E5C  301A               	movlw	26
  8932  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  8933  0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  8934  0E5F  00B2               	movwf	??_easterEgg+2
  8935  0E60  305E               	movlw	94
  8936  0E61  00B1               	movwf	??_easterEgg+1
  8937  0E62  306D               	movlw	109
  8938  0E63  00B0               	movwf	??_easterEgg
  8939  0E64                     u3247:	
  8940  0E64  0BB0               	decfsz	??_easterEgg,f
  8941  0E65  2E64               	goto	u3247
  8942  0E66  0BB1               	decfsz	??_easterEgg+1,f
  8943  0E67  2E64               	goto	u3247
  8944  0E68  0BB2               	decfsz	??_easterEgg+2,f
  8945  0E69  2E64               	goto	u3247
  8946  0E6A  2E6B               	nop2
  8947                           
  8948                           ;auxiliar.c: 188:     writeLCD(0,1,"                ");
  8949  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  8950  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  8951  0E6D  01AB               	clrf	writeLCD@y
  8952  0E6E  0AAB               	incf	writeLCD@y,f
  8953  0E6F  30EE               	movlw	low (STR_68| (0+32768))
  8954  0E70  00AC               	movwf	writeLCD@ptr
  8955  0E71  3087               	movlw	high (STR_68| (0+32768))
  8956  0E72  00AD               	movwf	writeLCD@ptr+1
  8957  0E73  3000               	movlw	0
  8958  0E74  120A  158A  2209  120A  158A  	fcall	_writeLCD
  8959                           
  8960                           ;auxiliar.c: 189:     writeLCD(0,1,"GABRIEL GENU    ");_delay((unsigned long)((1000)*(20
      +                          000000/4000.0)));
  8961  0E79  1283               	bcf	3,5	;RP0=0, select bank0
  8962  0E7A  1303               	bcf	3,6	;RP1=0, select bank0
  8963  0E7B  01AB               	clrf	writeLCD@y
  8964  0E7C  0AAB               	incf	writeLCD@y,f
  8965  0E7D  3043               	movlw	low (STR_71| (0+32768))
  8966  0E7E  00AC               	movwf	writeLCD@ptr
  8967  0E7F  3088               	movlw	high (STR_71| (0+32768))
  8968  0E80  00AD               	movwf	writeLCD@ptr+1
  8969  0E81  3000               	movlw	0
  8970  0E82  120A  158A  2209  120A  158A  	fcall	_writeLCD
  8971  0E87  301A               	movlw	26
  8972  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  8973  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  8974  0E8A  00B2               	movwf	??_easterEgg+2
  8975  0E8B  305E               	movlw	94
  8976  0E8C  00B1               	movwf	??_easterEgg+1
  8977  0E8D  306D               	movlw	109
  8978  0E8E  00B0               	movwf	??_easterEgg
  8979  0E8F                     u3257:	
  8980  0E8F  0BB0               	decfsz	??_easterEgg,f
  8981  0E90  2E8F               	goto	u3257
  8982  0E91  0BB1               	decfsz	??_easterEgg+1,f
  8983  0E92  2E8F               	goto	u3257
  8984  0E93  0BB2               	decfsz	??_easterEgg+2,f
  8985  0E94  2E8F               	goto	u3257
  8986  0E95  2E96               	nop2
  8987                           
  8988                           ;auxiliar.c: 190:     writeLCD(0,0,"                ");
  8989  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  8990  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  8991  0E98  01AB               	clrf	writeLCD@y
  8992  0E99  30EE               	movlw	low (STR_68| (0+32768))
  8993  0E9A  00AC               	movwf	writeLCD@ptr
  8994  0E9B  3087               	movlw	high (STR_68| (0+32768))
  8995  0E9C  00AD               	movwf	writeLCD@ptr+1
  8996  0E9D  3000               	movlw	0
  8997  0E9E  120A  158A  2209  120A  158A  	fcall	_writeLCD
  8998                           
  8999                           ;auxiliar.c: 191:     writeLCD(0,0,"ERIC SANTOS     ");_delay((unsigned long)((1000)*(20
      +                          000000/4000.0)));
  9000  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  9001  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  9002  0EA5  01AB               	clrf	writeLCD@y
  9003  0EA6  3021               	movlw	low (STR_73| (0+32768))
  9004  0EA7  00AC               	movwf	writeLCD@ptr
  9005  0EA8  3088               	movlw	high (STR_73| (0+32768))
  9006  0EA9  00AD               	movwf	writeLCD@ptr+1
  9007  0EAA  3000               	movlw	0
  9008  0EAB  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9009  0EB0  301A               	movlw	26
  9010  0EB1  1283               	bcf	3,5	;RP0=0, select bank0
  9011  0EB2  1303               	bcf	3,6	;RP1=0, select bank0
  9012  0EB3  00B2               	movwf	??_easterEgg+2
  9013  0EB4  305E               	movlw	94
  9014  0EB5  00B1               	movwf	??_easterEgg+1
  9015  0EB6  306D               	movlw	109
  9016  0EB7  00B0               	movwf	??_easterEgg
  9017  0EB8                     u3267:	
  9018  0EB8  0BB0               	decfsz	??_easterEgg,f
  9019  0EB9  2EB8               	goto	u3267
  9020  0EBA  0BB1               	decfsz	??_easterEgg+1,f
  9021  0EBB  2EB8               	goto	u3267
  9022  0EBC  0BB2               	decfsz	??_easterEgg+2,f
  9023  0EBD  2EB8               	goto	u3267
  9024  0EBE  2EBF               	nop2
  9025                           
  9026                           ;auxiliar.c: 192:     writeLCD(0,1,"                ");
  9027  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  9028  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  9029  0EC1  01AB               	clrf	writeLCD@y
  9030  0EC2  0AAB               	incf	writeLCD@y,f
  9031  0EC3  30EE               	movlw	low (STR_68| (0+32768))
  9032  0EC4  00AC               	movwf	writeLCD@ptr
  9033  0EC5  3087               	movlw	high (STR_68| (0+32768))
  9034  0EC6  00AD               	movwf	writeLCD@ptr+1
  9035  0EC7  3000               	movlw	0
  9036  0EC8  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9037                           
  9038                           ;auxiliar.c: 193:     writeLCD(0,1,"LINCON NOVAIS   ");_delay((unsigned long)((1000)*(20
      +                          000000/4000.0)));
  9039  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  9040  0ECE  1303               	bcf	3,6	;RP1=0, select bank0
  9041  0ECF  01AB               	clrf	writeLCD@y
  9042  0ED0  0AAB               	incf	writeLCD@y,f
  9043  0ED1  3087               	movlw	low (STR_75| (0+32768))
  9044  0ED2  00AC               	movwf	writeLCD@ptr
  9045  0ED3  3088               	movlw	high (STR_75| (0+32768))
  9046  0ED4  00AD               	movwf	writeLCD@ptr+1
  9047  0ED5  3000               	movlw	0
  9048  0ED6  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9049  0EDB  301A               	movlw	26
  9050  0EDC  1283               	bcf	3,5	;RP0=0, select bank0
  9051  0EDD  1303               	bcf	3,6	;RP1=0, select bank0
  9052  0EDE  00B2               	movwf	??_easterEgg+2
  9053  0EDF  305E               	movlw	94
  9054  0EE0  00B1               	movwf	??_easterEgg+1
  9055  0EE1  306D               	movlw	109
  9056  0EE2  00B0               	movwf	??_easterEgg
  9057  0EE3                     u3277:	
  9058  0EE3  0BB0               	decfsz	??_easterEgg,f
  9059  0EE4  2EE3               	goto	u3277
  9060  0EE5  0BB1               	decfsz	??_easterEgg+1,f
  9061  0EE6  2EE3               	goto	u3277
  9062  0EE7  0BB2               	decfsz	??_easterEgg+2,f
  9063  0EE8  2EE3               	goto	u3277
  9064  0EE9  2EEA               	nop2
  9065                           
  9066                           ;auxiliar.c: 194:     writeLCD(0,0,"                ");_delay((unsigned long)((300)*(200
      +                          00000/4000.0)));
  9067  0EEA  1283               	bcf	3,5	;RP0=0, select bank0
  9068  0EEB  1303               	bcf	3,6	;RP1=0, select bank0
  9069  0EEC  01AB               	clrf	writeLCD@y
  9070  0EED  30EE               	movlw	low (STR_68| (0+32768))
  9071  0EEE  00AC               	movwf	writeLCD@ptr
  9072  0EEF  3087               	movlw	high (STR_68| (0+32768))
  9073  0EF0  00AD               	movwf	writeLCD@ptr+1
  9074  0EF1  3000               	movlw	0
  9075  0EF2  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9076  0EF7  3008               	movlw	8
  9077  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  9078  0EF9  1303               	bcf	3,6	;RP1=0, select bank0
  9079  0EFA  00B2               	movwf	??_easterEgg+2
  9080  0EFB  309D               	movlw	157
  9081  0EFC  00B1               	movwf	??_easterEgg+1
  9082  0EFD  3005               	movlw	5
  9083  0EFE  00B0               	movwf	??_easterEgg
  9084  0EFF                     u3287:	
  9085  0EFF  0BB0               	decfsz	??_easterEgg,f
  9086  0F00  2EFF               	goto	u3287
  9087  0F01  0BB1               	decfsz	??_easterEgg+1,f
  9088  0F02  2EFF               	goto	u3287
  9089  0F03  0BB2               	decfsz	??_easterEgg+2,f
  9090  0F04  2EFF               	goto	u3287
  9091                           
  9092                           ;auxiliar.c: 196:     cmdLCD(0x01);_delay((unsigned long)((200)*(20000000/4000.0)));
  9093  0F05  3001               	movlw	1
  9094  0F06  160A  118A  24A1  120A  158A  	fcall	_cmdLCD
  9095  0F0B  3006               	movlw	6
  9096  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  9097  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  9098  0F0E  00B2               	movwf	??_easterEgg+2
  9099  0F0F  3013               	movlw	19
  9100  0F10  00B1               	movwf	??_easterEgg+1
  9101  0F11  30AD               	movlw	173
  9102  0F12  00B0               	movwf	??_easterEgg
  9103  0F13                     u3297:	
  9104  0F13  0BB0               	decfsz	??_easterEgg,f
  9105  0F14  2F13               	goto	u3297
  9106  0F15  0BB1               	decfsz	??_easterEgg+1,f
  9107  0F16  2F13               	goto	u3297
  9108  0F17  0BB2               	decfsz	??_easterEgg+2,f
  9109  0F18  2F13               	goto	u3297
  9110                           
  9111                           ;auxiliar.c: 197:     writeLCD(0,0,"      ARRI      ");_delay((unsigned long)((500)*(200
      +                          00000/4000.0)));
  9112  0F19  1283               	bcf	3,5	;RP0=0, select bank0
  9113  0F1A  1303               	bcf	3,6	;RP1=0, select bank0
  9114  0F1B  01AB               	clrf	writeLCD@y
  9115  0F1C  30FF               	movlw	low (STR_77| (0+32768))
  9116  0F1D  00AC               	movwf	writeLCD@ptr
  9117  0F1E  3087               	movlw	high (STR_77| (0+32768))
  9118  0F1F  00AD               	movwf	writeLCD@ptr+1
  9119  0F20  3000               	movlw	0
  9120  0F21  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9121  0F26  300D               	movlw	13
  9122  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  9123  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  9124  0F29  00B2               	movwf	??_easterEgg+2
  9125  0F2A  30AF               	movlw	175
  9126  0F2B  00B1               	movwf	??_easterEgg+1
  9127  0F2C  30B5               	movlw	181
  9128  0F2D  00B0               	movwf	??_easterEgg
  9129  0F2E                     u3307:	
  9130  0F2E  0BB0               	decfsz	??_easterEgg,f
  9131  0F2F  2F2E               	goto	u3307
  9132  0F30  0BB1               	decfsz	??_easterEgg+1,f
  9133  0F31  2F2E               	goto	u3307
  9134  0F32  0BB2               	decfsz	??_easterEgg+2,f
  9135  0F33  2F2E               	goto	u3307
  9136  0F34  2F35               	nop2
  9137                           
  9138                           ;auxiliar.c: 198:     writeLCD(0,1,"     EGUAAA     ");_delay((unsigned long)((2500)*(20
      +                          000000/4000.0)));
  9139  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  9140  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  9141  0F37  01AB               	clrf	writeLCD@y
  9142  0F38  0AAB               	incf	writeLCD@y,f
  9143  0F39  3010               	movlw	low (STR_78| (0+32768))
  9144  0F3A  00AC               	movwf	writeLCD@ptr
  9145  0F3B  3088               	movlw	high (STR_78| (0+32768))
  9146  0F3C  00AD               	movwf	writeLCD@ptr+1
  9147  0F3D  3000               	movlw	0
  9148  0F3E  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9149  0F43  3040               	movlw	64
  9150  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  9151  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  9152  0F46  00B2               	movwf	??_easterEgg+2
  9153  0F47  306A               	movlw	106
  9154  0F48  00B1               	movwf	??_easterEgg+1
  9155  0F49  3097               	movlw	151
  9156  0F4A  00B0               	movwf	??_easterEgg
  9157  0F4B                     u3317:	
  9158  0F4B  0BB0               	decfsz	??_easterEgg,f
  9159  0F4C  2F4B               	goto	u3317
  9160  0F4D  0BB1               	decfsz	??_easterEgg+1,f
  9161  0F4E  2F4B               	goto	u3317
  9162  0F4F  0BB2               	decfsz	??_easterEgg+2,f
  9163  0F50  2F4B               	goto	u3317
  9164                           
  9165                           ;auxiliar.c: 199:     cmdLCD(0x01);_delay((unsigned long)((200)*(20000000/4000.0)));
  9166  0F51  3001               	movlw	1
  9167  0F52  160A  118A  24A1  120A  158A  	fcall	_cmdLCD
  9168  0F57  3006               	movlw	6
  9169  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  9170  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  9171  0F5A  00B2               	movwf	??_easterEgg+2
  9172  0F5B  3013               	movlw	19
  9173  0F5C  00B1               	movwf	??_easterEgg+1
  9174  0F5D  30AD               	movlw	173
  9175  0F5E  00B0               	movwf	??_easterEgg
  9176  0F5F                     u3327:	
  9177  0F5F  0BB0               	decfsz	??_easterEgg,f
  9178  0F60  2F5F               	goto	u3327
  9179  0F61  0BB1               	decfsz	??_easterEgg+1,f
  9180  0F62  2F5F               	goto	u3327
  9181  0F63  0BB2               	decfsz	??_easterEgg+2,f
  9182  0F64  2F5F               	goto	u3327
  9183                           
  9184                           ;auxiliar.c: 200:     writeLCD(0,0,"XD *-*ARRI*-* XD");
  9185  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  9186  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  9187  0F67  01AB               	clrf	writeLCD@y
  9188  0F68  3020               	movlw	low (STR_79| (0+32768))
  9189  0F69  00AC               	movwf	writeLCD@ptr
  9190  0F6A  3089               	movlw	high (STR_79| (0+32768))
  9191  0F6B  00AD               	movwf	writeLCD@ptr+1
  9192  0F6C  3000               	movlw	0
  9193  0F6D  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9194                           
  9195                           ;auxiliar.c: 201:     writeLCD(0,1,"!*-* EGUAAA *-*!");_delay((unsigned long)((1000)*(20
      +                          000000/4000.0)));
  9196  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  9197  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  9198  0F74  01AB               	clrf	writeLCD@y
  9199  0F75  0AAB               	incf	writeLCD@y,f
  9200  0F76  30DC               	movlw	low (STR_80| (0+32768))
  9201  0F77  00AC               	movwf	writeLCD@ptr
  9202  0F78  3088               	movlw	high (STR_80| (0+32768))
  9203  0F79  00AD               	movwf	writeLCD@ptr+1
  9204  0F7A  3000               	movlw	0
  9205  0F7B  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9206  0F80  301A               	movlw	26
  9207  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  9208  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  9209  0F83  00B2               	movwf	??_easterEgg+2
  9210  0F84  305E               	movlw	94
  9211  0F85  00B1               	movwf	??_easterEgg+1
  9212  0F86  306D               	movlw	109
  9213  0F87  00B0               	movwf	??_easterEgg
  9214  0F88                     u3337:	
  9215  0F88  0BB0               	decfsz	??_easterEgg,f
  9216  0F89  2F88               	goto	u3337
  9217  0F8A  0BB1               	decfsz	??_easterEgg+1,f
  9218  0F8B  2F88               	goto	u3337
  9219  0F8C  0BB2               	decfsz	??_easterEgg+2,f
  9220  0F8D  2F88               	goto	u3337
  9221  0F8E  2F8F               	nop2
  9222                           
  9223                           ;auxiliar.c: 202:     writeLCD(0,0,"50    ARRI    13");
  9224  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  9225  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  9226  0F91  01AB               	clrf	writeLCD@y
  9227  0F92  30FE               	movlw	low (STR_81| (0+32768))
  9228  0F93  00AC               	movwf	writeLCD@ptr
  9229  0F94  3088               	movlw	high (STR_81| (0+32768))
  9230  0F95  00AD               	movwf	writeLCD@ptr+1
  9231  0F96  3000               	movlw	0
  9232  0F97  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9233                           
  9234                           ;auxiliar.c: 203:     writeLCD(0,1,"13   EGUAAA   50");_delay((unsigned long)((700)*(200
      +                          00000/4000.0)));
  9235  0F9C  1283               	bcf	3,5	;RP0=0, select bank0
  9236  0F9D  1303               	bcf	3,6	;RP1=0, select bank0
  9237  0F9E  01AB               	clrf	writeLCD@y
  9238  0F9F  0AAB               	incf	writeLCD@y,f
  9239  0FA0  30ED               	movlw	low (STR_82| (0+32768))
  9240  0FA1  00AC               	movwf	writeLCD@ptr
  9241  0FA2  3088               	movlw	high (STR_82| (0+32768))
  9242  0FA3  00AD               	movwf	writeLCD@ptr+1
  9243  0FA4  3000               	movlw	0
  9244  0FA5  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9245  0FAA  3012               	movlw	18
  9246  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  9247  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  9248  0FAD  00B2               	movwf	??_easterEgg+2
  9249  0FAE  30C2               	movlw	194
  9250  0FAF  00B1               	movwf	??_easterEgg+1
  9251  0FB0  3065               	movlw	101
  9252  0FB1  00B0               	movwf	??_easterEgg
  9253  0FB2                     u3347:	
  9254  0FB2  0BB0               	decfsz	??_easterEgg,f
  9255  0FB3  2FB2               	goto	u3347
  9256  0FB4  0BB1               	decfsz	??_easterEgg+1,f
  9257  0FB5  2FB2               	goto	u3347
  9258  0FB6  0BB2               	decfsz	??_easterEgg+2,f
  9259  0FB7  2FB2               	goto	u3347
  9260  0FB8  2FB9               	nop2
  9261                           
  9262                           ;auxiliar.c: 204:     writeLCD(0,0,":3 *-*ARRI*-* XD");
  9263  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  9264  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  9265  0FBB  01AB               	clrf	writeLCD@y
  9266  0FBC  300F               	movlw	low (STR_83| (0+32768))
  9267  0FBD  00AC               	movwf	writeLCD@ptr
  9268  0FBE  3089               	movlw	high (STR_83| (0+32768))
  9269  0FBF  00AD               	movwf	writeLCD@ptr+1
  9270  0FC0  3000               	movlw	0
  9271  0FC1  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9272                           
  9273                           ;auxiliar.c: 205:     writeLCD(0,1,"!*-* EGUAAA *-*!");_delay((unsigned long)((1000)*(20
      +                          000000/4000.0)));
  9274  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  9275  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  9276  0FC8  01AB               	clrf	writeLCD@y
  9277  0FC9  0AAB               	incf	writeLCD@y,f
  9278  0FCA  30DC               	movlw	low (STR_80| (0+32768))
  9279  0FCB  00AC               	movwf	writeLCD@ptr
  9280  0FCC  3088               	movlw	high (STR_80| (0+32768))
  9281  0FCD  00AD               	movwf	writeLCD@ptr+1
  9282  0FCE  3000               	movlw	0
  9283  0FCF  120A  158A  2209  120A  158A  	fcall	_writeLCD
  9284  0FD4  301A               	movlw	26
  9285  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  9286  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  9287  0FD7  00B2               	movwf	??_easterEgg+2
  9288  0FD8  305E               	movlw	94
  9289  0FD9  00B1               	movwf	??_easterEgg+1
  9290  0FDA  306D               	movlw	109
  9291  0FDB  00B0               	movwf	??_easterEgg
  9292  0FDC                     u3357:	
  9293  0FDC  0BB0               	decfsz	??_easterEgg,f
  9294  0FDD  2FDC               	goto	u3357
  9295  0FDE  0BB1               	decfsz	??_easterEgg+1,f
  9296  0FDF  2FDC               	goto	u3357
  9297  0FE0  0BB2               	decfsz	??_easterEgg+2,f
  9298  0FE1  2FDC               	goto	u3357
  9299  0FE2  2FE3               	nop2
  9300                           
  9301                           ;auxiliar.c: 206:     cmdLCD(0x01);_delay((unsigned long)((200)*(20000000/4000.0)));
  9302  0FE3  3001               	movlw	1
  9303  0FE4  160A  118A  24A1  120A  158A  	fcall	_cmdLCD
  9304  0FE9  3006               	movlw	6
  9305  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  9306  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  9307  0FEC  00B2               	movwf	??_easterEgg+2
  9308  0FED  3013               	movlw	19
  9309  0FEE  00B1               	movwf	??_easterEgg+1
  9310  0FEF  30AD               	movlw	173
  9311  0FF0  00B0               	movwf	??_easterEgg
  9312  0FF1                     u3367:	
  9313  0FF1  0BB0               	decfsz	??_easterEgg,f
  9314  0FF2  2FF1               	goto	u3367
  9315  0FF3  0BB1               	decfsz	??_easterEgg+1,f
  9316  0FF4  2FF1               	goto	u3367
  9317  0FF5  0BB2               	decfsz	??_easterEgg+2,f
  9318  0FF6  2FF1               	goto	u3367
  9319                           
  9320                           ;auxiliar.c: 208:     bordaSubidaB2();
  9321  0FF7  160A  118A  20C9  120A  158A  	fcall	_bordaSubidaB2
  9322                           
  9323                           ;auxiliar.c: 209:     bordaSubidaB3();
  9324  0FFC  160A  118A  20E3   	fcall	_bordaSubidaB3
  9325  0FFF  0008               	return
  9326  1000                     __end_of_easterEgg:	
  9327                           
  9328                           	psect	text40
  9329  0A09                     __ptext40:	
  9330 ;; *************** function _writeLCD *****************
  9331 ;; Defined at:
  9332 ;;		line 64 in file "lcd.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;  x               1    wreg     unsigned char 
  9335 ;;  y               1   11[BANK0 ] unsigned char 
  9336 ;;  ptr             2   12[BANK0 ] PTR const unsigned char 
  9337 ;;		 -> STR_134(11), STR_133(11), STR_132(11), STR_131(11), 
  9338 ;;		 -> STR_130(11), STR_129(11), STR_128(11), STR_127(11), 
  9339 ;;		 -> STR_126(17), STR_125(17), STR_124(17), STR_123(17), 
  9340 ;;		 -> STR_122(17), STR_121(17), STR_120(14), STR_119(14), 
  9341 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
  9342 ;;		 -> STR_114(9), STR_113(11), STR_112(13), STR_111(11), 
  9343 ;;		 -> STR_110(17), STR_109(17), STR_84(17), STR_83(17), 
  9344 ;;		 -> STR_82(17), STR_81(17), STR_80(17), STR_79(17), 
  9345 ;;		 -> STR_78(17), STR_77(17), STR_76(17), STR_75(17), 
  9346 ;;		 -> STR_74(17), STR_73(17), STR_72(17), STR_71(17), 
  9347 ;;		 -> STR_70(17), STR_69(17), STR_68(17), STR_67(17), 
  9348 ;;		 -> STR_66(17), STR_65(4), STR_64(4), STR_63(4), 
  9349 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  9350 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  9351 ;;		 -> STR_54(8), STR_53(1), STR_52(4), STR_51(7), 
  9352 ;;		 -> STR_50(4), STR_49(4), STR_48(8), STR_47(8), 
  9353 ;;		 -> STR_46(8), STR_45(4), STR_44(2), STR_43(2), 
  9354 ;;		 -> STR_42(2), STR_41(2), STR_40(2), STR_39(2), 
  9355 ;;		 -> STR_38(2), STR_37(2), STR_36(2), STR_35(2), 
  9356 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
  9357 ;;		 -> STR_30(2), STR_29(2), STR_28(2), STR_27(2), 
  9358 ;;		 -> STR_26(2), STR_25(2), STR_24(2), STR_23(2), 
  9359 ;;		 -> STR_22(2), STR_21(2), STR_20(2), STR_19(2), 
  9360 ;;		 -> STR_18(2), STR_17(2), STR_16(2), STR_15(2), 
  9361 ;;		 -> STR_14(2), STR_13(2), STR_12(17), STR_11(17), 
  9362 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(17), 
  9363 ;;		 -> STR_6(17), STR_5(2), STR_4(2), STR_3(2), 
  9364 ;;		 -> STR_2(2), STR_1(17), 
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  x               1   15[BANK0 ] unsigned char 
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  1    wreg      void 
  9369 ;; Registers used:
  9370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9376 ;;      Params:         0       3       0       0       0
  9377 ;;      Locals:         0       1       0       0       0
  9378 ;;      Temps:          0       1       0       0       0
  9379 ;;      Totals:         0       5       0       0       0
  9380 ;;Total ram usage:        5 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    6
  9383 ;; This function calls:
  9384 ;;		_gotoxy
  9385 ;;		_putLCD
  9386 ;; This function is called by:
  9387 ;;		_logo
  9388 ;;		_textConfig
  9389 ;;		_textCMpar
  9390 ;;		_textCMdat
  9391 ;;		_textSelection1
  9392 ;;		_textSelection2
  9393 ;;		_textSelection3
  9394 ;;		_textSelection4
  9395 ;;		_textSelection5
  9396 ;;		_textSelection6
  9397 ;;		_textSelection7
  9398 ;;		_textSelection8
  9399 ;;		_textSelectionEST
  9400 ;;		_textSelectionCLP
  9401 ;;		_textLoading
  9402 ;;		_easterEgg
  9403 ;;		_main
  9404 ;;		_textSelectionPAR
  9405 ;;		_textSelectionDES
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           
  9410                           ;psect for function _writeLCD
  9411  0A09                     _writeLCD:	
  9412                           
  9413                           ;incstack = 0
  9414                           ; Regs used in _writeLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9415                           ;writeLCD@x stored from wreg
  9416  0A09  1283               	bcf	3,5	;RP0=0, select bank0
  9417  0A0A  1303               	bcf	3,6	;RP1=0, select bank0
  9418  0A0B  00AF               	movwf	writeLCD@x
  9419                           
  9420                           ;lcd.c: 64: void writeLCD ( unsigned char x, unsigned char y, const char * ptr );lcd.c: 
      +                          65: {;lcd.c: 66:     gotoxy(x,y);
  9421  0A0C  082B               	movf	writeLCD@y,w
  9422  0A0D  00AE               	movwf	??_writeLCD
  9423  0A0E  082E               	movf	??_writeLCD,w
  9424  0A0F  00A7               	movwf	gotoxy@y
  9425  0A10  082F               	movf	writeLCD@x,w
  9426  0A11  160A  118A  2065  120A  158A  	fcall	_gotoxy
  9427  0A16                     l2863:	
  9428                           ;lcd.c: 67:     while( *ptr )
  9429                           
  9430                           
  9431                           ;lcd.c: 67:     while( *ptr )
  9432  0A16  1283               	bcf	3,5	;RP0=0, select bank0
  9433  0A17  1303               	bcf	3,6	;RP1=0, select bank0
  9434  0A18  082D               	movf	writeLCD@ptr+1,w
  9435  0A19  00FF               	movwf	127
  9436  0A1A  082C               	movf	writeLCD@ptr,w
  9437  0A1B  0084               	movwf	4
  9438  0A1C  160A  118A  2000  120A  158A  	fcall	stringtab
  9439  0A21  3A00               	xorlw	0
  9440  0A22  1903               	btfsc	3,2
  9441  0A23  0008               	return
  9442                           
  9443                           ;lcd.c: 68:     putLCD(*ptr++);
  9444  0A24  1283               	bcf	3,5	;RP0=0, select bank0
  9445  0A25  1303               	bcf	3,6	;RP1=0, select bank0
  9446  0A26  082D               	movf	writeLCD@ptr+1,w
  9447  0A27  00FF               	movwf	127
  9448  0A28  082C               	movf	writeLCD@ptr,w
  9449  0A29  0084               	movwf	4
  9450  0A2A  160A  118A  2000  120A  158A  	fcall	stringtab
  9451  0A2F  160A  118A  22C1  120A  158A  	fcall	_putLCD
  9452  0A34  3001               	movlw	1
  9453  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  9454  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  9455  0A37  07AC               	addwf	writeLCD@ptr,f
  9456  0A38  1803               	skipnc
  9457  0A39  0AAD               	incf	writeLCD@ptr+1,f
  9458  0A3A  2A16               	goto	l2863
  9459  0A3B                     __end_of_writeLCD:	
  9460                           
  9461                           	psect	text41
  9462  12C1                     __ptext41:	
  9463 ;; *************** function _putLCD *****************
  9464 ;; Defined at:
  9465 ;;		line 39 in file "lcd.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;  c               1    wreg     unsigned char 
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;  c               1    4[BANK0 ] unsigned char 
  9470 ;;  nibble          1    5[BANK0 ] volatile struct .
  9471 ;; Return value:  Size  Location     Type
  9472 ;;                  1    wreg      void 
  9473 ;; Registers used:
  9474 ;;		wreg, status,2, status,0
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9480 ;;      Params:         0       0       0       0       0
  9481 ;;      Locals:         0       2       0       0       0
  9482 ;;      Temps:          0       1       0       0       0
  9483 ;;      Totals:         0       3       0       0       0
  9484 ;;Total ram usage:        3 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    4
  9487 ;; This function calls:
  9488 ;;		Nothing
  9489 ;; This function is called by:
  9490 ;;		_writeLCD
  9491 ;; This function uses a non-reentrant model
  9492 ;;
  9493                           
  9494                           
  9495                           ;psect for function _putLCD
  9496  12C1                     _putLCD:	
  9497                           
  9498                           ;incstack = 0
  9499                           ; Regs used in _putLCD: [wreg+status,2+status,0]
  9500                           ;putLCD@c stored from wreg
  9501  12C1  1283               	bcf	3,5	;RP0=0, select bank0
  9502  12C2  1303               	bcf	3,6	;RP1=0, select bank0
  9503  12C3  00A4               	movwf	putLCD@c
  9504                           
  9505                           ;lcd.c: 39: void putLCD ( unsigned char c );lcd.c: 40: {;lcd.c: 41:     volatile REGnibb
      +                          le_t nibble;;lcd.c: 42:     nibble.HILO = c;
  9506  12C4  0824               	movf	putLCD@c,w
  9507  12C5  00A3               	movwf	??_putLCD
  9508  12C6  0823               	movf	??_putLCD,w
  9509  12C7  00A5               	movwf	putLCD@nibble	;volatile
  9510                           
  9511                           ;lcd.c: 44:     LCD.RS = 1;
  9512  12C8  1608               	bsf	8,4	;volatile
  9513                           
  9514                           ;lcd.c: 45:     LCD.BUS = nibble.HI;
  9515  12C9  0E25               	swapf	putLCD@nibble,w	;volatile
  9516  12CA  390F               	andlw	15
  9517  12CB  00A3               	movwf	??_putLCD
  9518  12CC  0808               	movf	8,w	;volatile
  9519  12CD  0623               	xorwf	??_putLCD,w
  9520  12CE  39F0               	andlw	-16
  9521  12CF  0623               	xorwf	??_putLCD,w
  9522  12D0  0088               	movwf	8	;volatile
  9523                           
  9524                           ;lcd.c: 46:     LCD.EN = 0;
  9525  12D1  1288               	bcf	8,5	;volatile
  9526                           
  9527                           ;lcd.c: 47:     _delay((unsigned long)((40)*(20000000/4000000.0)));
  9528  12D2  3041               	movlw	65
  9529  12D3  1283               	bcf	3,5	;RP0=0, select bank0
  9530  12D4  1303               	bcf	3,6	;RP1=0, select bank0
  9531  12D5  00A3               	movwf	??_putLCD
  9532  12D6                     u3377:	
  9533  12D6  0BA3               	decfsz	??_putLCD,f
  9534  12D7  2AD6               	goto	u3377
  9535  12D8  2AD9               	nop2
  9536                           
  9537                           ;lcd.c: 48:     LCD.EN = 1;
  9538  12D9  1283               	bcf	3,5	;RP0=0, select bank0
  9539  12DA  1303               	bcf	3,6	;RP1=0, select bank0
  9540  12DB  1688               	bsf	8,5	;volatile
  9541                           
  9542                           ;lcd.c: 51:     LCD.RS = 1;
  9543  12DC  1608               	bsf	8,4	;volatile
  9544                           
  9545                           ;lcd.c: 52:     LCD.BUS = nibble.LO;
  9546  12DD  0825               	movf	putLCD@nibble,w	;volatile
  9547  12DE  390F               	andlw	15
  9548  12DF  00A3               	movwf	??_putLCD
  9549  12E0  0808               	movf	8,w	;volatile
  9550  12E1  0623               	xorwf	??_putLCD,w
  9551  12E2  39F0               	andlw	-16
  9552  12E3  0623               	xorwf	??_putLCD,w
  9553  12E4  0088               	movwf	8	;volatile
  9554                           
  9555                           ;lcd.c: 53:     LCD.EN = 0;
  9556  12E5  1288               	bcf	8,5	;volatile
  9557                           
  9558                           ;lcd.c: 54:     _delay((unsigned long)((40)*(20000000/4000000.0)));
  9559  12E6  3041               	movlw	65
  9560  12E7  1283               	bcf	3,5	;RP0=0, select bank0
  9561  12E8  1303               	bcf	3,6	;RP1=0, select bank0
  9562  12E9  00A3               	movwf	??_putLCD
  9563  12EA                     u3387:	
  9564  12EA  0BA3               	decfsz	??_putLCD,f
  9565  12EB  2AEA               	goto	u3387
  9566  12EC  2AED               	nop2
  9567                           
  9568                           ;lcd.c: 55:     LCD.EN = 1;
  9569  12ED  1283               	bcf	3,5	;RP0=0, select bank0
  9570  12EE  1303               	bcf	3,6	;RP1=0, select bank0
  9571  12EF  1688               	bsf	8,5	;volatile
  9572  12F0  0008               	return
  9573  12F1                     __end_of_putLCD:	
  9574                           
  9575                           	psect	text42
  9576  1065                     __ptext42:	
  9577 ;; *************** function _gotoxy *****************
  9578 ;; Defined at:
  9579 ;;		line 59 in file "lcd.c"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;  x               1    wreg     unsigned char 
  9582 ;;  y               1    7[BANK0 ] unsigned char 
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;  x               1   10[BANK0 ] unsigned char 
  9585 ;; Return value:  Size  Location     Type
  9586 ;;                  1    wreg      void 
  9587 ;; Registers used:
  9588 ;;		wreg, status,2, status,0, pclath, cstack
  9589 ;; Tracked objects:
  9590 ;;		On entry : 0/0
  9591 ;;		On exit  : 0/0
  9592 ;;		Unchanged: 0/0
  9593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9594 ;;      Params:         0       1       0       0       0
  9595 ;;      Locals:         0       1       0       0       0
  9596 ;;      Temps:          0       2       0       0       0
  9597 ;;      Totals:         0       4       0       0       0
  9598 ;;Total ram usage:        4 bytes
  9599 ;; Hardware stack levels used:    1
  9600 ;; Hardware stack levels required when called:    5
  9601 ;; This function calls:
  9602 ;;		_cmdLCD
  9603 ;; This function is called by:
  9604 ;;		_writeLCD
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           
  9609                           ;psect for function _gotoxy
  9610  1065                     _gotoxy:	
  9611                           
  9612                           ;incstack = 0
  9613                           ; Regs used in _gotoxy: [wreg+status,2+status,0+pclath+cstack]
  9614                           ;gotoxy@x stored from wreg
  9615  1065  1283               	bcf	3,5	;RP0=0, select bank0
  9616  1066  1303               	bcf	3,6	;RP1=0, select bank0
  9617  1067  00AA               	movwf	gotoxy@x
  9618                           
  9619                           ;lcd.c: 59: void gotoxy ( unsigned char x, unsigned char y );lcd.c: 60: {;lcd.c: 61:    
      +                           cmdLCD (( 0x80 | (0xC0 * y ) + ( x & 0x3f )));
  9620  1068  303F               	movlw	63
  9621  1069  052A               	andwf	gotoxy@x,w
  9622  106A  00A8               	movwf	??_gotoxy
  9623  106B  0827               	movf	gotoxy@y,w
  9624  106C  00A9               	movwf	??_gotoxy+1
  9625  106D  3005               	movlw	5
  9626  106E                     u1515:	
  9627  106E  1003               	clrc
  9628  106F  0DA9               	rlf	??_gotoxy+1,f
  9629  1070  3EFF               	addlw	-1
  9630  1071  1D03               	skipz
  9631  1072  286E               	goto	u1515
  9632  1073  1003               	clrc
  9633  1074  0D29               	rlf	??_gotoxy+1,w
  9634  1075  3AFF               	xorlw	255
  9635  1076  3E01               	addlw	1
  9636  1077  0728               	addwf	??_gotoxy,w
  9637  1078  3880               	iorlw	128
  9638  1079  160A  118A  24A1   	fcall	_cmdLCD
  9639  107C  0008               	return
  9640  107D                     __end_of_gotoxy:	
  9641                           
  9642                           	psect	text43
  9643  14A1                     __ptext43:	
  9644 ;; *************** function _cmdLCD *****************
  9645 ;; Defined at:
  9646 ;;		line 7 in file "lcd.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;  cmd             1    wreg     unsigned char 
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;  cmd             1    5[BANK0 ] unsigned char 
  9651 ;;  nibble          1    6[BANK0 ] volatile struct .
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		wreg, status,2, status,0
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9661 ;;      Params:         0       0       0       0       0
  9662 ;;      Locals:         0       2       0       0       0
  9663 ;;      Temps:          0       2       0       0       0
  9664 ;;      Totals:         0       4       0       0       0
  9665 ;;Total ram usage:        4 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    4
  9668 ;; This function calls:
  9669 ;;		Nothing
  9670 ;; This function is called by:
  9671 ;;		_logo
  9672 ;;		_textConfig
  9673 ;;		_textCMpar
  9674 ;;		_textCMdat
  9675 ;;		_easterEgg
  9676 ;;		_gotoxy
  9677 ;;		_initLCD
  9678 ;;		_main
  9679 ;; This function uses a non-reentrant model
  9680 ;;
  9681                           
  9682                           
  9683                           ;psect for function _cmdLCD
  9684  14A1                     _cmdLCD:	
  9685                           
  9686                           ;incstack = 0
  9687                           ; Regs used in _cmdLCD: [wreg+status,2+status,0]
  9688                           ;cmdLCD@cmd stored from wreg
  9689  14A1  1283               	bcf	3,5	;RP0=0, select bank0
  9690  14A2  1303               	bcf	3,6	;RP1=0, select bank0
  9691  14A3  00A5               	movwf	cmdLCD@cmd
  9692                           
  9693                           ;lcd.c: 7: void cmdLCD ( unsigned char cmd );lcd.c: 8: {;lcd.c: 9:     volatile REGnibbl
      +                          e_t nibble;;lcd.c: 11:     nibble.HILO = cmd;
  9694  14A4  0825               	movf	cmdLCD@cmd,w
  9695  14A5  00A3               	movwf	??_cmdLCD
  9696  14A6  0823               	movf	??_cmdLCD,w
  9697  14A7  00A6               	movwf	cmdLCD@nibble	;volatile
  9698                           
  9699                           ;lcd.c: 12:     LCD.RS = 0;
  9700  14A8  1208               	bcf	8,4	;volatile
  9701                           
  9702                           ;lcd.c: 13:     LCD.BUS = nibble.HI;
  9703  14A9  0E26               	swapf	cmdLCD@nibble,w	;volatile
  9704  14AA  390F               	andlw	15
  9705  14AB  00A3               	movwf	??_cmdLCD
  9706  14AC  0808               	movf	8,w	;volatile
  9707  14AD  0623               	xorwf	??_cmdLCD,w
  9708  14AE  39F0               	andlw	-16
  9709  14AF  0623               	xorwf	??_cmdLCD,w
  9710  14B0  0088               	movwf	8	;volatile
  9711                           
  9712                           ;lcd.c: 14:     LCD.EN = 0;
  9713  14B1  1288               	bcf	8,5	;volatile
  9714                           
  9715                           ;lcd.c: 16:     if ( cmd == 0x01 || cmd == 0x02 )
  9716  14B2  0325               	decf	cmdLCD@cmd,w
  9717  14B3  1903               	btfsc	3,2
  9718  14B4  2CB9               	goto	l2687
  9719  14B5  3002               	movlw	2
  9720  14B6  0625               	xorwf	cmdLCD@cmd,w
  9721  14B7  1D03               	btfss	3,2
  9722  14B8  2CC5               	goto	l2689
  9723  14B9                     l2687:	
  9724                           
  9725                           ;lcd.c: 17:         _delay((unsigned long)((5)*(20000000/4000.0)));
  9726  14B9  3021               	movlw	33
  9727  14BA  1283               	bcf	3,5	;RP0=0, select bank0
  9728  14BB  1303               	bcf	3,6	;RP1=0, select bank0
  9729  14BC  00A4               	movwf	??_cmdLCD+1
  9730  14BD  3075               	movlw	117
  9731  14BE  00A3               	movwf	??_cmdLCD
  9732  14BF                     u3397:	
  9733  14BF  0BA3               	decfsz	??_cmdLCD,f
  9734  14C0  2CBF               	goto	u3397
  9735  14C1  0BA4               	decfsz	??_cmdLCD+1,f
  9736  14C2  2CBF               	goto	u3397
  9737  14C3  2CC4               	nop2
  9738  14C4  2CCC               	goto	l2691
  9739  14C5                     l2689:	
  9740                           ;lcd.c: 18:     else
  9741                           
  9742                           
  9743                           ;lcd.c: 19:         _delay((unsigned long)((40)*(20000000/4000000.0)));
  9744  14C5  3041               	movlw	65
  9745  14C6  1283               	bcf	3,5	;RP0=0, select bank0
  9746  14C7  1303               	bcf	3,6	;RP1=0, select bank0
  9747  14C8  00A3               	movwf	??_cmdLCD
  9748  14C9                     u3407:	
  9749  14C9  0BA3               	decfsz	??_cmdLCD,f
  9750  14CA  2CC9               	goto	u3407
  9751  14CB  2CCC               	nop2
  9752  14CC                     l2691:	
  9753                           
  9754                           ;lcd.c: 21:     LCD.EN = 1;
  9755  14CC  1283               	bcf	3,5	;RP0=0, select bank0
  9756  14CD  1303               	bcf	3,6	;RP1=0, select bank0
  9757  14CE  1688               	bsf	8,5	;volatile
  9758                           
  9759                           ;lcd.c: 24:    if ( cmd != (0x20) )
  9760  14CF  3020               	movlw	32
  9761  14D0  0625               	xorwf	cmdLCD@cmd,w
  9762  14D1  1903               	btfsc	3,2
  9763  14D2  0008               	return
  9764                           
  9765                           ;lcd.c: 25:    {;lcd.c: 26:     LCD.RS = 0;
  9766  14D3  1208               	bcf	8,4	;volatile
  9767                           
  9768                           ;lcd.c: 27:     LCD.BUS = nibble.LO;
  9769  14D4  0826               	movf	cmdLCD@nibble,w	;volatile
  9770  14D5  390F               	andlw	15
  9771  14D6  00A3               	movwf	??_cmdLCD
  9772  14D7  0808               	movf	8,w	;volatile
  9773  14D8  0623               	xorwf	??_cmdLCD,w
  9774  14D9  39F0               	andlw	-16
  9775  14DA  0623               	xorwf	??_cmdLCD,w
  9776  14DB  0088               	movwf	8	;volatile
  9777                           
  9778                           ;lcd.c: 28:     LCD.EN = 0;
  9779  14DC  1288               	bcf	8,5	;volatile
  9780                           
  9781                           ;lcd.c: 30:     if ( cmd == 0x01 || cmd == 0x02 )
  9782  14DD  0325               	decf	cmdLCD@cmd,w
  9783  14DE  1903               	btfsc	3,2
  9784  14DF  2CE4               	goto	l2703
  9785  14E0  3002               	movlw	2
  9786  14E1  0625               	xorwf	cmdLCD@cmd,w
  9787  14E2  1D03               	btfss	3,2
  9788  14E3  2CF0               	goto	l2705
  9789  14E4                     l2703:	
  9790                           
  9791                           ;lcd.c: 31:         _delay((unsigned long)((5)*(20000000/4000.0)));
  9792  14E4  3021               	movlw	33
  9793  14E5  1283               	bcf	3,5	;RP0=0, select bank0
  9794  14E6  1303               	bcf	3,6	;RP1=0, select bank0
  9795  14E7  00A4               	movwf	??_cmdLCD+1
  9796  14E8  3075               	movlw	117
  9797  14E9  00A3               	movwf	??_cmdLCD
  9798  14EA                     u3417:	
  9799  14EA  0BA3               	decfsz	??_cmdLCD,f
  9800  14EB  2CEA               	goto	u3417
  9801  14EC  0BA4               	decfsz	??_cmdLCD+1,f
  9802  14ED  2CEA               	goto	u3417
  9803  14EE  2CEF               	nop2
  9804  14EF  2CF7               	goto	l2707
  9805  14F0                     l2705:	
  9806                           ;lcd.c: 32:     else
  9807                           
  9808                           
  9809                           ;lcd.c: 33:         _delay((unsigned long)((40)*(20000000/4000000.0)));
  9810  14F0  3041               	movlw	65
  9811  14F1  1283               	bcf	3,5	;RP0=0, select bank0
  9812  14F2  1303               	bcf	3,6	;RP1=0, select bank0
  9813  14F3  00A3               	movwf	??_cmdLCD
  9814  14F4                     u3427:	
  9815  14F4  0BA3               	decfsz	??_cmdLCD,f
  9816  14F5  2CF4               	goto	u3427
  9817  14F6  2CF7               	nop2
  9818  14F7                     l2707:	
  9819                           
  9820                           ;lcd.c: 35:     LCD.EN = 1;
  9821  14F7  1283               	bcf	3,5	;RP0=0, select bank0
  9822  14F8  1303               	bcf	3,6	;RP1=0, select bank0
  9823  14F9  1688               	bsf	8,5	;volatile
  9824  14FA  0008               	return
  9825  14FB                     __end_of_cmdLCD:	
  9826                           ;lcd.c: 36:    }
  9827                           
  9828                           
  9829                           	psect	text44
  9830  10E3                     __ptext44:	
  9831 ;; *************** function _bordaSubidaB3 *****************
  9832 ;; Defined at:
  9833 ;;		line 68 in file "bds.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;		None
  9836 ;; Auto vars:     Size  Location     Type
  9837 ;;  estadoAtualB    1    5[BANK0 ] unsigned char 
  9838 ;;  resp2           1    4[BANK0 ] unsigned char 
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  1    wreg      unsigned char 
  9841 ;; Registers used:
  9842 ;;		wreg, status,2, status,0, pclath, cstack
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9848 ;;      Params:         0       0       0       0       0
  9849 ;;      Locals:         0       2       0       0       0
  9850 ;;      Temps:          0       1       0       0       0
  9851 ;;      Totals:         0       3       0       0       0
  9852 ;;Total ram usage:        3 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:    5
  9855 ;; This function calls:
  9856 ;;		_B3
  9857 ;; This function is called by:
  9858 ;;		_easterEgg
  9859 ;;		_main
  9860 ;; This function uses a non-reentrant model
  9861 ;;
  9862                           
  9863                           
  9864                           ;psect for function _bordaSubidaB3
  9865  10E3                     _bordaSubidaB3:	
  9866                           
  9867                           ;bds.c: 70:     char estadoAtualB3;;bds.c: 71:     char resp2;;bds.c: 73:     estadoAtua
      +                          lB3 = B3();
  9868                           
  9869                           ;incstack = 0
  9870                           ; Regs used in _bordaSubidaB3: [wreg+status,2+status,0+pclath+cstack]
  9871  10E3  160A  158A  27E0  160A  118A  	fcall	_B3
  9872  10E8  1283               	bcf	3,5	;RP0=0, select bank0
  9873  10E9  1303               	bcf	3,6	;RP1=0, select bank0
  9874  10EA  00A3               	movwf	??_bordaSubidaB3
  9875  10EB  0823               	movf	??_bordaSubidaB3,w
  9876  10EC  00A5               	movwf	bordaSubidaB3@estadoAtualB3
  9877                           
  9878                           ;bds.c: 75:     if( (estadoAtualB3 == 0) && (estadoAnteriorB3 == 1) )
  9879  10ED  0825               	movf	bordaSubidaB3@estadoAtualB3,w
  9880  10EE  1D03               	btfss	3,2
  9881  10EF  28F6               	goto	l2897
  9882  10F0  034D               	decf	_estadoAnteriorB3,w
  9883  10F1  1D03               	btfss	3,2
  9884  10F2  28F6               	goto	l2897
  9885                           
  9886                           ;bds.c: 76:         resp2 = 1;
  9887  10F3  01A4               	clrf	bordaSubidaB3@resp2
  9888  10F4  0AA4               	incf	bordaSubidaB3@resp2,f
  9889  10F5  28F7               	goto	l2899
  9890  10F6                     l2897:	
  9891                           ;bds.c: 77:     else
  9892                           
  9893                           
  9894                           ;bds.c: 78:         resp2 = 0;
  9895  10F6  01A4               	clrf	bordaSubidaB3@resp2
  9896  10F7                     l2899:	
  9897                           
  9898                           ;bds.c: 79:     estadoAnteriorB3 = estadoAtualB3;
  9899  10F7  0825               	movf	bordaSubidaB3@estadoAtualB3,w
  9900  10F8  00A3               	movwf	??_bordaSubidaB3
  9901  10F9  0823               	movf	??_bordaSubidaB3,w
  9902  10FA  00CD               	movwf	_estadoAnteriorB3
  9903                           
  9904                           ;bds.c: 80:     return ( resp2 );
  9905  10FB  0824               	movf	bordaSubidaB3@resp2,w
  9906  10FC  0008               	return
  9907  10FD                     __end_of_bordaSubidaB3:	
  9908                           
  9909                           	psect	text45
  9910  1FE0                     __ptext45:	
  9911 ;; *************** function _B3 *****************
  9912 ;; Defined at:
  9913 ;;		line 25 in file "bds.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;		None
  9916 ;; Auto vars:     Size  Location     Type
  9917 ;;		None
  9918 ;; Return value:  Size  Location     Type
  9919 ;;                  1    wreg      unsigned char 
  9920 ;; Registers used:
  9921 ;;		wreg, status,2, status,0
  9922 ;; Tracked objects:
  9923 ;;		On entry : 0/0
  9924 ;;		On exit  : 0/0
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9927 ;;      Params:         0       0       0       0       0
  9928 ;;      Locals:         0       0       0       0       0
  9929 ;;      Temps:          0       0       0       0       0
  9930 ;;      Totals:         0       0       0       0       0
  9931 ;;Total ram usage:        0 bytes
  9932 ;; Hardware stack levels used:    1
  9933 ;; Hardware stack levels required when called:    4
  9934 ;; This function calls:
  9935 ;;		Nothing
  9936 ;; This function is called by:
  9937 ;;		_bordaSubidaB3
  9938 ;;		_main
  9939 ;; This function uses a non-reentrant model
  9940 ;;
  9941                           
  9942                           
  9943                           ;psect for function _B3
  9944  1FE0                     _B3:	
  9945                           
  9946                           ;bds.c: 27:     return ( PORTCbits.RC0 );
  9947                           
  9948                           ;incstack = 0
  9949                           ; Regs used in _B3: [wreg+status,2+status,0]
  9950  1FE0  1283               	bcf	3,5	;RP0=0, select bank0
  9951  1FE1  1303               	bcf	3,6	;RP1=0, select bank0
  9952  1FE2  0807               	movf	7,w	;volatile
  9953  1FE3  3901               	andlw	1
  9954  1FE4  0008               	return
  9955  1FE5                     __end_of_B3:	
  9956                           
  9957                           	psect	text46
  9958  10C9                     __ptext46:	
  9959 ;; *************** function _bordaSubidaB2 *****************
  9960 ;; Defined at:
  9961 ;;		line 51 in file "bds.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;		None
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  estadoAtualB    1    6[BANK0 ] unsigned char 
  9966 ;;  resp1           1    5[BANK0 ] unsigned char 
  9967 ;; Return value:  Size  Location     Type
  9968 ;;                  1    wreg      unsigned char 
  9969 ;; Registers used:
  9970 ;;		wreg, status,2, status,0, pclath, cstack
  9971 ;; Tracked objects:
  9972 ;;		On entry : 0/0
  9973 ;;		On exit  : 0/0
  9974 ;;		Unchanged: 0/0
  9975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9976 ;;      Params:         0       0       0       0       0
  9977 ;;      Locals:         0       2       0       0       0
  9978 ;;      Temps:          0       1       0       0       0
  9979 ;;      Totals:         0       3       0       0       0
  9980 ;;Total ram usage:        3 bytes
  9981 ;; Hardware stack levels used:    1
  9982 ;; Hardware stack levels required when called:    5
  9983 ;; This function calls:
  9984 ;;		_B2
  9985 ;; This function is called by:
  9986 ;;		_easterEgg
  9987 ;;		_main
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           
  9992                           ;psect for function _bordaSubidaB2
  9993  10C9                     _bordaSubidaB2:	
  9994                           
  9995                           ;bds.c: 53:     char estadoAtualB2;;bds.c: 54:     char resp1;;bds.c: 56:     estadoAtua
      +                          lB2 = B2();
  9996                           
  9997                           ;incstack = 0
  9998                           ; Regs used in _bordaSubidaB2: [wreg+status,2+status,0+pclath+cstack]
  9999  10C9  160A  158A  27EB  160A  118A  	fcall	_B2
 10000  10CE  1283               	bcf	3,5	;RP0=0, select bank0
 10001  10CF  1303               	bcf	3,6	;RP1=0, select bank0
 10002  10D0  00A4               	movwf	??_bordaSubidaB2
 10003  10D1  0824               	movf	??_bordaSubidaB2,w
 10004  10D2  00A6               	movwf	bordaSubidaB2@estadoAtualB2
 10005                           
 10006                           ;bds.c: 58:     if( (estadoAtualB2 == 0) && (estadoAnteriorB2 == 1) )
 10007  10D3  0826               	movf	bordaSubidaB2@estadoAtualB2,w
 10008  10D4  1D03               	btfss	3,2
 10009  10D5  28DC               	goto	l2881
 10010  10D6  034E               	decf	_estadoAnteriorB2,w
 10011  10D7  1D03               	btfss	3,2
 10012  10D8  28DC               	goto	l2881
 10013                           
 10014                           ;bds.c: 59:         resp1 = 1;
 10015  10D9  01A5               	clrf	bordaSubidaB2@resp1
 10016  10DA  0AA5               	incf	bordaSubidaB2@resp1,f
 10017  10DB  28DD               	goto	l2883
 10018  10DC                     l2881:	
 10019                           ;bds.c: 60:     else
 10020                           
 10021                           
 10022                           ;bds.c: 61:         resp1 = 0;
 10023  10DC  01A5               	clrf	bordaSubidaB2@resp1
 10024  10DD                     l2883:	
 10025                           
 10026                           ;bds.c: 62:     estadoAnteriorB2 = estadoAtualB2;
 10027  10DD  0826               	movf	bordaSubidaB2@estadoAtualB2,w
 10028  10DE  00A4               	movwf	??_bordaSubidaB2
 10029  10DF  0824               	movf	??_bordaSubidaB2,w
 10030  10E0  00CE               	movwf	_estadoAnteriorB2
 10031                           
 10032                           ;bds.c: 63:     return ( resp1 );
 10033  10E1  0825               	movf	bordaSubidaB2@resp1,w
 10034  10E2  0008               	return
 10035  10E3                     __end_of_bordaSubidaB2:	
 10036                           
 10037                           	psect	text47
 10038  1FEB                     __ptext47:	
 10039 ;; *************** function _B2 *****************
 10040 ;; Defined at:
 10041 ;;		line 21 in file "bds.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;		None
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;		None
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  1    wreg      unsigned char 
 10048 ;; Registers used:
 10049 ;;		wreg, status,2, status,0
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10055 ;;      Params:         0       0       0       0       0
 10056 ;;      Locals:         0       0       0       0       0
 10057 ;;      Temps:          0       1       0       0       0
 10058 ;;      Totals:         0       1       0       0       0
 10059 ;;Total ram usage:        1 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:    4
 10062 ;; This function calls:
 10063 ;;		Nothing
 10064 ;; This function is called by:
 10065 ;;		_bordaSubidaB2
 10066 ;;		_main
 10067 ;; This function uses a non-reentrant model
 10068 ;;
 10069                           
 10070                           
 10071                           ;psect for function _B2
 10072  1FEB                     _B2:	
 10073                           
 10074                           ;bds.c: 23:     return ( PORTCbits.RC2 );
 10075                           
 10076                           ;incstack = 0
 10077                           ; Regs used in _B2: [wreg+status,2+status,0]
 10078  1FEB  1283               	bcf	3,5	;RP0=0, select bank0
 10079  1FEC  1303               	bcf	3,6	;RP1=0, select bank0
 10080  1FED  0C07               	rrf	7,w	;volatile
 10081  1FEE  00A3               	movwf	??_B2
 10082  1FEF  0C23               	rrf	??_B2,w
 10083  1FF0  3901               	andlw	1
 10084  1FF1  0008               	return
 10085  1FF2                     __end_of_B2:	
 10086                           
 10087                           	psect	text48
 10088  10AF                     __ptext48:	
 10089 ;; *************** function _bordaSubidaB1 *****************
 10090 ;; Defined at:
 10091 ;;		line 34 in file "bds.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;		None
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  estadoAtualB    1    5[BANK0 ] unsigned char 
 10096 ;;  resp            1    4[BANK0 ] unsigned char 
 10097 ;; Return value:  Size  Location     Type
 10098 ;;                  1    wreg      unsigned char 
 10099 ;; Registers used:
 10100 ;;		wreg, status,2, status,0, pclath, cstack
 10101 ;; Tracked objects:
 10102 ;;		On entry : 0/0
 10103 ;;		On exit  : 0/0
 10104 ;;		Unchanged: 0/0
 10105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10106 ;;      Params:         0       0       0       0       0
 10107 ;;      Locals:         0       2       0       0       0
 10108 ;;      Temps:          0       1       0       0       0
 10109 ;;      Totals:         0       3       0       0       0
 10110 ;;Total ram usage:        3 bytes
 10111 ;; Hardware stack levels used:    1
 10112 ;; Hardware stack levels required when called:    5
 10113 ;; This function calls:
 10114 ;;		_B1
 10115 ;; This function is called by:
 10116 ;;		_main
 10117 ;; This function uses a non-reentrant model
 10118 ;;
 10119                           
 10120                           
 10121                           ;psect for function _bordaSubidaB1
 10122  10AF                     _bordaSubidaB1:	
 10123                           
 10124                           ;bds.c: 36:     char estadoAtualB1;;bds.c: 37:     char resp;;bds.c: 39:     estadoAtual
      +                          B1 = B1();
 10125                           
 10126                           ;incstack = 0
 10127                           ; Regs used in _bordaSubidaB1: [wreg+status,2+status,0+pclath+cstack]
 10128  10AF  160A  158A  27DB  160A  118A  	fcall	_B1
 10129  10B4  1283               	bcf	3,5	;RP0=0, select bank0
 10130  10B5  1303               	bcf	3,6	;RP1=0, select bank0
 10131  10B6  00A3               	movwf	??_bordaSubidaB1
 10132  10B7  0823               	movf	??_bordaSubidaB1,w
 10133  10B8  00A5               	movwf	bordaSubidaB1@estadoAtualB1
 10134                           
 10135                           ;bds.c: 41:     if( (estadoAtualB1 == 0) && (estadoAnteriorB1 == 1) )
 10136  10B9  0825               	movf	bordaSubidaB1@estadoAtualB1,w
 10137  10BA  1D03               	btfss	3,2
 10138  10BB  28C2               	goto	l3309
 10139  10BC  034F               	decf	_estadoAnteriorB1,w
 10140  10BD  1D03               	btfss	3,2
 10141  10BE  28C2               	goto	l3309
 10142                           
 10143                           ;bds.c: 42:         resp = 1;
 10144  10BF  01A4               	clrf	bordaSubidaB1@resp
 10145  10C0  0AA4               	incf	bordaSubidaB1@resp,f
 10146  10C1  28C3               	goto	l3311
 10147  10C2                     l3309:	
 10148                           ;bds.c: 43:     else
 10149                           
 10150                           
 10151                           ;bds.c: 44:         resp = 0;
 10152  10C2  01A4               	clrf	bordaSubidaB1@resp
 10153  10C3                     l3311:	
 10154                           
 10155                           ;bds.c: 45:     estadoAnteriorB1 = estadoAtualB1;
 10156  10C3  0825               	movf	bordaSubidaB1@estadoAtualB1,w
 10157  10C4  00A3               	movwf	??_bordaSubidaB1
 10158  10C5  0823               	movf	??_bordaSubidaB1,w
 10159  10C6  00CF               	movwf	_estadoAnteriorB1
 10160                           
 10161                           ;bds.c: 46:     return ( resp );
 10162  10C7  0824               	movf	bordaSubidaB1@resp,w
 10163  10C8  0008               	return
 10164  10C9                     __end_of_bordaSubidaB1:	
 10165                           
 10166                           	psect	text49
 10167  1FDB                     __ptext49:	
 10168 ;; *************** function _B1 *****************
 10169 ;; Defined at:
 10170 ;;		line 17 in file "bds.c"
 10171 ;; Parameters:    Size  Location     Type
 10172 ;;		None
 10173 ;; Auto vars:     Size  Location     Type
 10174 ;;		None
 10175 ;; Return value:  Size  Location     Type
 10176 ;;                  1    wreg      unsigned char 
 10177 ;; Registers used:
 10178 ;;		wreg, status,2, status,0
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10184 ;;      Params:         0       0       0       0       0
 10185 ;;      Locals:         0       0       0       0       0
 10186 ;;      Temps:          0       0       0       0       0
 10187 ;;      Totals:         0       0       0       0       0
 10188 ;;Total ram usage:        0 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; Hardware stack levels required when called:    4
 10191 ;; This function calls:
 10192 ;;		Nothing
 10193 ;; This function is called by:
 10194 ;;		_bordaSubidaB1
 10195 ;;		_main
 10196 ;; This function uses a non-reentrant model
 10197 ;;
 10198                           
 10199                           
 10200                           ;psect for function _B1
 10201  1FDB                     _B1:	
 10202                           
 10203                           ;bds.c: 19:     return ( PORTCbits.RC1 );
 10204                           
 10205                           ;incstack = 0
 10206                           ; Regs used in _B1: [wreg+status,2+status,0]
 10207  1FDB  1283               	bcf	3,5	;RP0=0, select bank0
 10208  1FDC  1303               	bcf	3,6	;RP1=0, select bank0
 10209  1FDD  0C07               	rrf	7,w	;volatile
 10210  1FDE  3901               	andlw	1
 10211  1FDF  0008               	return
 10212  1FE0                     __end_of_B1:	
 10213                           
 10214                           	psect	text50
 10215  11F2                     __ptext50:	
 10216 ;; *************** function _asciiToHex *****************
 10217 ;; Defined at:
 10218 ;;		line 98 in file "Serial.c"
 10219 ;; Parameters:    Size  Location     Type
 10220 ;;  a1              1    wreg     unsigned char 
 10221 ;;  a2              1    3[BANK0 ] unsigned char 
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;  a1              1    5[BANK0 ] unsigned char 
 10224 ;;  dez             1    7[BANK0 ] unsigned char 
 10225 ;;  uni             1    6[BANK0 ] unsigned char 
 10226 ;; Return value:  Size  Location     Type
 10227 ;;                  1    wreg      unsigned char 
 10228 ;; Registers used:
 10229 ;;		wreg, status,2, status,0
 10230 ;; Tracked objects:
 10231 ;;		On entry : 0/0
 10232 ;;		On exit  : 0/0
 10233 ;;		Unchanged: 0/0
 10234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10235 ;;      Params:         0       1       0       0       0
 10236 ;;      Locals:         0       3       0       0       0
 10237 ;;      Temps:          0       1       0       0       0
 10238 ;;      Totals:         0       5       0       0       0
 10239 ;;Total ram usage:        5 bytes
 10240 ;; Hardware stack levels used:    1
 10241 ;; Hardware stack levels required when called:    4
 10242 ;; This function calls:
 10243 ;;		Nothing
 10244 ;; This function is called by:
 10245 ;;		_main
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           
 10250                           ;psect for function _asciiToHex
 10251  11F2                     _asciiToHex:	
 10252                           
 10253                           ;incstack = 0
 10254                           ; Regs used in _asciiToHex: [wreg+status,2+status,0]
 10255                           ;asciiToHex@a1 stored from wreg
 10256  11F2  1283               	bcf	3,5	;RP0=0, select bank0
 10257  11F3  1303               	bcf	3,6	;RP1=0, select bank0
 10258  11F4  00A5               	movwf	asciiToHex@a1
 10259                           
 10260                           ;Serial.c: 98: char asciiToHex( unsigned char a1, unsigned char a2 );Serial.c: 99: {;Ser
      +                          ial.c: 100:     char dez;;Serial.c: 101:     char uni;;Serial.c: 103:     dez = a1;
 10261  11F5  0825               	movf	asciiToHex@a1,w
 10262  11F6  00A4               	movwf	??_asciiToHex
 10263  11F7  0824               	movf	??_asciiToHex,w
 10264  11F8  00A7               	movwf	asciiToHex@dez
 10265                           
 10266                           ;Serial.c: 104:     uni = a2;
 10267  11F9  0823               	movf	asciiToHex@a2,w
 10268  11FA  00A4               	movwf	??_asciiToHex
 10269  11FB  0824               	movf	??_asciiToHex,w
 10270  11FC  00A6               	movwf	asciiToHex@uni
 10271                           
 10272                           ;Serial.c: 106:     if(dez > 0x40)
 10273  11FD  3041               	movlw	65
 10274  11FE  0227               	subwf	asciiToHex@dez,w
 10275  11FF  1C03               	skipc
 10276  1200  2A03               	goto	l3061
 10277                           
 10278                           ;Serial.c: 107:         dez -= 0x37;
 10279  1201  3037               	movlw	55
 10280  1202  2A04               	goto	L54
 10281  1203                     l3061:	
 10282                           ;Serial.c: 108:     else
 10283                           
 10284                           
 10285                           ;Serial.c: 109:         dez -= 0x30;
 10286  1203  3030               	movlw	48
 10287  1204                     L54:	
 10288  1204  02A7               	subwf	asciiToHex@dez,f
 10289                           
 10290                           ;Serial.c: 111:     if(uni > 0x40)
 10291  1205  3041               	movlw	65
 10292  1206  0226               	subwf	asciiToHex@uni,w
 10293  1207  1C03               	skipc
 10294  1208  2A0B               	goto	l3067
 10295                           
 10296                           ;Serial.c: 112:         uni -= 0x37;
 10297  1209  3037               	movlw	55
 10298  120A  2A0C               	goto	L55
 10299  120B                     l3067:	
 10300                           ;Serial.c: 113:     else
 10301                           
 10302                           
 10303                           ;Serial.c: 114:         uni -= 0x30;
 10304  120B  3030               	movlw	48
 10305  120C                     L55:	
 10306  120C  02A6               	subwf	asciiToHex@uni,f
 10307                           
 10308                           ;Serial.c: 116:     dez<<=4;
 10309  120D  0EA7               	swapf	asciiToHex@dez,f
 10310  120E  30F0               	movlw	240
 10311  120F  05A7               	andwf	asciiToHex@dez,f
 10312                           
 10313                           ;Serial.c: 118:     rhex = dez | uni;
 10314  1210  0827               	movf	asciiToHex@dez,w
 10315  1211  0426               	iorwf	asciiToHex@uni,w
 10316  1212  00A4               	movwf	??_asciiToHex
 10317  1213  0824               	movf	??_asciiToHex,w
 10318  1214  00D4               	movwf	_rhex
 10319                           
 10320                           ;Serial.c: 120:     return (rhex);
 10321  1215  0854               	movf	_rhex,w
 10322  1216  0008               	return
 10323  1217                     __end_of_asciiToHex:	
 10324                           
 10325                           	psect	text51
 10326  11CF                     __ptext51:	
 10327 ;; *************** function _geral *****************
 10328 ;; Defined at:
 10329 ;;		line 12 in file "main.c"
 10330 ;; Parameters:    Size  Location     Type
 10331 ;;		None
 10332 ;; Auto vars:     Size  Location     Type
 10333 ;;		None
 10334 ;; Return value:  Size  Location     Type
 10335 ;;                  1    wreg      void 
 10336 ;; Registers used:
 10337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10338 ;; Tracked objects:
 10339 ;;		On entry : 0/0
 10340 ;;		On exit  : 0/0
 10341 ;;		Unchanged: 0/0
 10342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10343 ;;      Params:         0       0       0       0       0
 10344 ;;      Locals:         0       0       0       0       0
 10345 ;;      Temps:          0       3       0       0       0
 10346 ;;      Totals:         0       3       0       0       0
 10347 ;;Total ram usage:        3 bytes
 10348 ;; Hardware stack levels used:    1
 10349 ;; Hardware stack levels required when called:    3
 10350 ;; This function calls:
 10351 ;;		_interrupt_EUSART_RX
 10352 ;;		_intt0_1ms
 10353 ;; This function is called by:
 10354 ;;		Interrupt level 1
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           
 10359                           ;psect for function _geral
 10360  11CF                     _geral:	
 10361                           
 10362                           ;main.c: 14:     INTCONbits.GIE = 0;
 10363  11CF  138B               	bcf	11,7	;volatile
 10364                           
 10365                           ;main.c: 16:     if( PIE1bits.RCIE && PIR1bits.RCIF )
 10366  11D0  1683               	bsf	3,5	;RP0=1, select bank1
 10367  11D1  1303               	bcf	3,6	;RP1=0, select bank1
 10368  11D2  1E8C               	btfss	12,5	;volatile
 10369  11D3  29DD               	goto	i1l3549
 10370  11D4  1283               	bcf	3,5	;RP0=0, select bank0
 10371  11D5  1303               	bcf	3,6	;RP1=0, select bank0
 10372  11D6  1E8C               	btfss	12,5	;volatile
 10373  11D7  29DD               	goto	i1l3549
 10374                           
 10375                           ;main.c: 17:     {;main.c: 18:         interrupt_EUSART_RX();
 10376  11D8  160A  118A  203C  160A  118A  	fcall	_interrupt_EUSART_RX
 10377  11DD                     i1l3549:	
 10378                           ;main.c: 19:     }
 10379                           
 10380                           
 10381                           ;main.c: 21:     if( INTCONbits.T0IE && INTCONbits.T0IF )
 10382  11DD  1A8B               	btfsc	11,5	;volatile
 10383  11DE  1D0B               	btfss	11,2	;volatile
 10384  11DF  29E6               	goto	i1l3557
 10385                           
 10386                           ;main.c: 22:     {;main.c: 23:         INTCONbits.T0IF = 0;
 10387  11E0  110B               	bcf	11,2	;volatile
 10388                           
 10389                           ;main.c: 24:         intt0_1ms();
 10390  11E1  160A  118A  20FD  160A  118A  	fcall	_intt0_1ms
 10391  11E6                     i1l3557:	
 10392                           ;main.c: 25:     }
 10393                           
 10394                           
 10395                           ;main.c: 27:     INTCONbits.GIE = 1;
 10396  11E6  178B               	bsf	11,7	;volatile
 10397  11E7  1283               	bcf	3,5	;RP0=0, select bank0
 10398  11E8  1303               	bcf	3,6	;RP1=0, select bank0
 10399  11E9  0822               	movf	??_geral+2,w
 10400  11EA  008A               	movwf	10
 10401  11EB  0821               	movf	??_geral+1,w
 10402  11EC  0084               	movwf	4
 10403  11ED  0E20               	swapf	??_geral^0,w
 10404  11EE  0083               	movwf	3
 10405  11EF  0EFE               	swapf	126,f
 10406  11F0  0E7E               	swapf	126,w
 10407  11F1  0009               	retfie
 10408  11F2                     __end_of_geral:	
 10409                           
 10410                           	psect	intentry
 10411  0004                     __pintentry:	
 10412                           ;incstack = 0
 10413                           ; Regs used in _geral: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10414                           
 10415  0004                     interrupt_function:	
 10416  007E                     saved_w	set	btemp
 10417  0004  00FE               	movwf	btemp
 10418  0005  0E03               	swapf	3,w
 10419  0006  1283               	bcf	3,5	;RP0=0, select bank0
 10420  0007  1303               	bcf	3,6	;RP1=0, select bank0
 10421  0008  00A0               	movwf	??_geral
 10422  0009  0804               	movf	4,w
 10423  000A  00A1               	movwf	??_geral+1
 10424  000B  080A               	movf	10,w
 10425  000C  00A2               	movwf	??_geral+2
 10426  000D  160A  118A  29CF   	ljmp	_geral
 10427                           
 10428                           	psect	text52
 10429  10FD                     __ptext52:	
 10430 ;; *************** function _intt0_1ms *****************
 10431 ;; Defined at:
 10432 ;;		line 9 in file "timer0.c"
 10433 ;; Parameters:    Size  Location     Type
 10434 ;;		None
 10435 ;; Auto vars:     Size  Location     Type
 10436 ;;		None
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  1    wreg      void 
 10439 ;; Registers used:
 10440 ;;		wreg, status,2
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10446 ;;      Params:         0       0       0       0       0
 10447 ;;      Locals:         0       0       0       0       0
 10448 ;;      Temps:          1       0       0       0       0
 10449 ;;      Totals:         1       0       0       0       0
 10450 ;;Total ram usage:        1 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; This function calls:
 10453 ;;		Nothing
 10454 ;; This function is called by:
 10455 ;;		_geral
 10456 ;; This function uses a non-reentrant model
 10457 ;;
 10458                           
 10459                           
 10460                           ;psect for function _intt0_1ms
 10461  10FD                     _intt0_1ms:	
 10462                           
 10463                           ;timer0.c: 11:     TMR0 = 100;
 10464                           
 10465                           ;incstack = 0
 10466                           ; Regs used in _intt0_1ms: [wreg+status,2]
 10467  10FD  3064               	movlw	100
 10468  10FE  1283               	bcf	3,5	;RP0=0, select bank0
 10469  10FF  1303               	bcf	3,6	;RP1=0, select bank0
 10470  1100  0081               	movwf	1	;volatile
 10471                           
 10472                           ;timer0.c: 13:     if( ++t0cont >= t0final )
 10473  1101  3001               	movlw	1
 10474  1102  07C8               	addwf	_t0cont,f
 10475  1103  1803               	skipnc
 10476  1104  0AC9               	incf	_t0cont+1,f
 10477  1105  3000               	movlw	0
 10478  1106  07C9               	addwf	_t0cont+1,f
 10479  1107  0849               	movf	_t0cont+1,w
 10480  1108  3A80               	xorlw	128
 10481  1109  00F0               	movwf	??_intt0_1ms
 10482  110A  084B               	movf	_t0final+1,w
 10483  110B  3A80               	xorlw	128
 10484  110C  0270               	subwf	??_intt0_1ms,w
 10485  110D  1D03               	skipz
 10486  110E  2911               	goto	u218_25
 10487  110F  084A               	movf	_t0final,w
 10488  1110  0248               	subwf	_t0cont,w
 10489  1111                     u218_25:	
 10490  1111  1C03               	skipc
 10491  1112  0008               	return
 10492                           
 10493                           ;timer0.c: 14:     {;timer0.c: 15:         t0cont = 0;
 10494  1113  1283               	bcf	3,5	;RP0=0, select bank0
 10495  1114  1303               	bcf	3,6	;RP1=0, select bank0
 10496  1115  01C8               	clrf	_t0cont
 10497  1116  01C9               	clrf	_t0cont+1
 10498  1117  0008               	return
 10499  1118                     __end_of_intt0_1ms:	
 10500                           ;timer0.c: 16:     }
 10501                           
 10502                           
 10503                           	psect	text53
 10504  103C                     __ptext53:	
 10505 ;; *************** function _interrupt_EUSART_RX *****************
 10506 ;; Defined at:
 10507 ;;		line 183 in file "eusart.c"
 10508 ;; Parameters:    Size  Location     Type
 10509 ;;		None
 10510 ;; Auto vars:     Size  Location     Type
 10511 ;;		None
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  1    wreg      void 
 10514 ;; Registers used:
 10515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10521 ;;      Params:         0       0       0       0       0
 10522 ;;      Locals:         0       0       0       0       0
 10523 ;;      Temps:          0       0       0       0       0
 10524 ;;      Totals:         0       0       0       0       0
 10525 ;;Total ram usage:        0 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; Hardware stack levels required when called:    2
 10528 ;; This function calls:
 10529 ;;		_putFIFO
 10530 ;; This function is called by:
 10531 ;;		_geral
 10532 ;; This function uses a non-reentrant model
 10533 ;;
 10534                           
 10535                           
 10536                           ;psect for function _interrupt_EUSART_RX
 10537  103C                     _interrupt_EUSART_RX:	
 10538                           
 10539                           ;eusart.c: 185:     if( RCSTAbits.FERR )
 10540                           
 10541                           ;incstack = 0
 10542                           ; Regs used in _interrupt_EUSART_RX: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10543  103C  1283               	bcf	3,5	;RP0=0, select bank0
 10544  103D  1303               	bcf	3,6	;RP1=0, select bank0
 10545  103E  1D18               	btfss	24,2	;volatile
 10546  103F  2842               	goto	i1l580
 10547                           
 10548                           ;eusart.c: 186:     {;eusart.c: 187:         RCSTAbits.SPEN = 0;
 10549  1040  1398               	bcf	24,7	;volatile
 10550                           
 10551                           ;eusart.c: 188:     }
 10552  1041  284A               	goto	i1l3401
 10553  1042                     i1l580:	
 10554                           ;eusart.c: 189:     else if( RCSTAbits.OERR )
 10555                           
 10556  1042  1C98               	btfss	24,1	;volatile
 10557  1043  2846               	goto	i1l3399
 10558                           
 10559                           ;eusart.c: 190:     {;eusart.c: 191:         RCSTAbits.CREN = 0;
 10560  1044  1218               	bcf	24,4	;volatile
 10561                           
 10562                           ;eusart.c: 192:     }
 10563  1045  284A               	goto	i1l3401
 10564  1046                     i1l3399:	
 10565                           ;eusart.c: 193:     else
 10566                           
 10567                           
 10568                           ;eusart.c: 194:         putFIFO( RCREG );
 10569  1046  081A               	movf	26,w	;volatile
 10570  1047  160A  118A  214F   	fcall	_putFIFO
 10571  104A                     i1l3401:	
 10572                           
 10573                           ;eusart.c: 196:     RCSTAbits.SPEN = 1;
 10574  104A  1283               	bcf	3,5	;RP0=0, select bank0
 10575  104B  1303               	bcf	3,6	;RP1=0, select bank0
 10576  104C  1798               	bsf	24,7	;volatile
 10577                           
 10578                           ;eusart.c: 197:     RCSTAbits.CREN = 1;
 10579  104D  1618               	bsf	24,4	;volatile
 10580  104E  0008               	return
 10581  104F                     __end_of_interrupt_EUSART_RX:	
 10582                           
 10583                           	psect	text54
 10584  114F                     __ptext54:	
 10585 ;; *************** function _putFIFO *****************
 10586 ;; Defined at:
 10587 ;;		line 17 in file "fifo.c"
 10588 ;; Parameters:    Size  Location     Type
 10589 ;;  c               1    wreg     unsigned char 
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;  c               1   11[COMMON] unsigned char 
 10592 ;; Return value:  Size  Location     Type
 10593 ;;                  1    wreg      void 
 10594 ;; Registers used:
 10595 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10596 ;; Tracked objects:
 10597 ;;		On entry : 0/0
 10598 ;;		On exit  : 0/0
 10599 ;;		Unchanged: 0/0
 10600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10601 ;;      Params:         0       0       0       0       0
 10602 ;;      Locals:         1       0       0       0       0
 10603 ;;      Temps:          4       0       0       0       0
 10604 ;;      Totals:         5       0       0       0       0
 10605 ;;Total ram usage:        5 bytes
 10606 ;; Hardware stack levels used:    1
 10607 ;; Hardware stack levels required when called:    1
 10608 ;; This function calls:
 10609 ;;		i1___awmod
 10610 ;; This function is called by:
 10611 ;;		_interrupt_EUSART_RX
 10612 ;; This function uses a non-reentrant model
 10613 ;;
 10614                           
 10615                           
 10616                           ;psect for function _putFIFO
 10617  114F                     _putFIFO:	
 10618                           
 10619                           ;incstack = 0
 10620                           ; Regs used in _putFIFO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10621                           ;putFIFO@c stored from wreg
 10622  114F  00FB               	movwf	putFIFO@c
 10623                           
 10624                           ;fifo.c: 17: void putFIFO( unsigned char c );fifo.c: 18: {;fifo.c: 19:     fifo[ fifoHea
      +                          d ] = c;
 10625  1150  087B               	movf	putFIFO@c,w
 10626  1151  00F7               	movwf	??_putFIFO
 10627  1152  087C               	movf	_fifoHead,w
 10628  1153  3EA0               	addlw	(low (_fifo| 0))& (0+255)
 10629  1154  0084               	movwf	4
 10630  1155  0877               	movf	??_putFIFO,w
 10631  1156  1383               	bcf	3,7	;select IRP bank1
 10632  1157  0080               	movwf	0
 10633                           
 10634                           ;fifo.c: 20:     fifoHead = ++fifoHead % 30;
 10635  1158  301E               	movlw	30
 10636  1159  00F0               	movwf	i1___awmod@divisor
 10637  115A  3000               	movlw	0
 10638  115B  00F1               	movwf	i1___awmod@divisor+1
 10639  115C  3001               	movlw	1
 10640  115D  00F7               	movwf	??_putFIFO
 10641  115E  0877               	movf	??_putFIFO,w
 10642  115F  07FC               	addwf	_fifoHead,f
 10643  1160  087C               	movf	_fifoHead,w
 10644  1161  00F8               	movwf	??_putFIFO+1
 10645  1162  01F9               	clrf	??_putFIFO+2
 10646  1163  0878               	movf	??_putFIFO+1,w
 10647  1164  00F2               	movwf	i1___awmod@dividend
 10648  1165  0879               	movf	??_putFIFO+2,w
 10649  1166  00F3               	movwf	i1___awmod@dividend+1
 10650  1167  160A  118A  235F   	fcall	i1___awmod
 10651  116A  0870               	movf	?i1___awmod,w
 10652  116B  00FA               	movwf	??_putFIFO+3
 10653  116C  087A               	movf	??_putFIFO+3,w
 10654  116D  00FC               	movwf	_fifoHead
 10655  116E  0008               	return
 10656  116F                     __end_of_putFIFO:	
 10657                           
 10658                           	psect	text55
 10659  135F                     __ptext55:	
 10660 ;; *************** function i1___awmod *****************
 10661 ;; Defined at:
 10662 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awmod.c"
 10663 ;; Parameters:    Size  Location     Type
 10664 ;;  divisor         2    0[COMMON] int 
 10665 ;;  dividend        2    2[COMMON] int 
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;  __awmod         1    6[COMMON] unsigned char 
 10668 ;;  __awmod         1    5[COMMON] unsigned char 
 10669 ;; Return value:  Size  Location     Type
 10670 ;;                  2    0[COMMON] int 
 10671 ;; Registers used:
 10672 ;;		wreg, status,2, status,0
 10673 ;; Tracked objects:
 10674 ;;		On entry : 0/0
 10675 ;;		On exit  : 0/0
 10676 ;;		Unchanged: 0/0
 10677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10678 ;;      Params:         4       0       0       0       0
 10679 ;;      Locals:         2       0       0       0       0
 10680 ;;      Temps:          1       0       0       0       0
 10681 ;;      Totals:         7       0       0       0       0
 10682 ;;Total ram usage:        7 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; This function calls:
 10685 ;;		Nothing
 10686 ;; This function is called by:
 10687 ;;		_putFIFO
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           
 10692                           ;psect for function i1___awmod
 10693  135F                     i1___awmod:	
 10694                           
 10695                           ;incstack = 0
 10696                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 10697  135F  01F6               	clrf	i1___awmod@sign
 10698  1360  1FF3               	btfss	i1___awmod@dividend+1,7
 10699  1361  2B69               	goto	i1l2773
 10700  1362  09F2               	comf	i1___awmod@dividend,f
 10701  1363  09F3               	comf	i1___awmod@dividend+1,f
 10702  1364  0AF2               	incf	i1___awmod@dividend,f
 10703  1365  1903               	skipnz
 10704  1366  0AF3               	incf	i1___awmod@dividend+1,f
 10705  1367  01F6               	clrf	i1___awmod@sign
 10706  1368  0AF6               	incf	i1___awmod@sign,f
 10707  1369                     i1l2773:	
 10708  1369  1FF1               	btfss	i1___awmod@divisor+1,7
 10709  136A  2B70               	goto	i1l2777
 10710  136B  09F0               	comf	i1___awmod@divisor,f
 10711  136C  09F1               	comf	i1___awmod@divisor+1,f
 10712  136D  0AF0               	incf	i1___awmod@divisor,f
 10713  136E  1903               	skipnz
 10714  136F  0AF1               	incf	i1___awmod@divisor+1,f
 10715  1370                     i1l2777:	
 10716  1370  0870               	movf	i1___awmod@divisor,w
 10717  1371  0471               	iorwf	i1___awmod@divisor+1,w
 10718  1372  1903               	btfsc	3,2
 10719  1373  2B9D               	goto	i1l2795
 10720  1374  01F5               	clrf	i1___awmod@counter
 10721  1375  0AF5               	incf	i1___awmod@counter,f
 10722  1376                     i1l2785:	
 10723  1376  1BF1               	btfsc	i1___awmod@divisor+1,7
 10724  1377  2B84               	goto	i1l2787
 10725  1378  3001               	movlw	1
 10726  1379                     u162_25:	
 10727  1379  1003               	clrc
 10728  137A  0DF0               	rlf	i1___awmod@divisor,f
 10729  137B  0DF1               	rlf	i1___awmod@divisor+1,f
 10730  137C  3EFF               	addlw	-1
 10731  137D  1D03               	skipz
 10732  137E  2B79               	goto	u162_25
 10733  137F  3001               	movlw	1
 10734  1380  00F4               	movwf	??i1___awmod
 10735  1381  0874               	movf	??i1___awmod,w
 10736  1382  07F5               	addwf	i1___awmod@counter,f
 10737  1383  2B76               	goto	i1l2785
 10738  1384                     i1l2787:	
 10739  1384  0871               	movf	i1___awmod@divisor+1,w
 10740  1385  0273               	subwf	i1___awmod@dividend+1,w
 10741  1386  1D03               	skipz
 10742  1387  2B8A               	goto	u164_25
 10743  1388  0870               	movf	i1___awmod@divisor,w
 10744  1389  0272               	subwf	i1___awmod@dividend,w
 10745  138A                     u164_25:	
 10746  138A  1C03               	skipc
 10747  138B  2B92               	goto	i1l2791
 10748  138C  0870               	movf	i1___awmod@divisor,w
 10749  138D  02F2               	subwf	i1___awmod@dividend,f
 10750  138E  0871               	movf	i1___awmod@divisor+1,w
 10751  138F  1C03               	skipc
 10752  1390  03F3               	decf	i1___awmod@dividend+1,f
 10753  1391  02F3               	subwf	i1___awmod@dividend+1,f
 10754  1392                     i1l2791:	
 10755  1392  3001               	movlw	1
 10756  1393                     u165_25:	
 10757  1393  1003               	clrc
 10758  1394  0CF1               	rrf	i1___awmod@divisor+1,f
 10759  1395  0CF0               	rrf	i1___awmod@divisor,f
 10760  1396  3EFF               	addlw	-1
 10761  1397  1D03               	skipz
 10762  1398  2B93               	goto	u165_25
 10763  1399  3001               	movlw	1
 10764  139A  02F5               	subwf	i1___awmod@counter,f
 10765  139B  1D03               	btfss	3,2
 10766  139C  2B84               	goto	i1l2787
 10767  139D                     i1l2795:	
 10768  139D  0876               	movf	i1___awmod@sign,w
 10769  139E  1903               	btfsc	3,2
 10770  139F  2BA5               	goto	i1l2799
 10771  13A0  09F2               	comf	i1___awmod@dividend,f
 10772  13A1  09F3               	comf	i1___awmod@dividend+1,f
 10773  13A2  0AF2               	incf	i1___awmod@dividend,f
 10774  13A3  1903               	skipnz
 10775  13A4  0AF3               	incf	i1___awmod@dividend+1,f
 10776  13A5                     i1l2799:	
 10777  13A5  0873               	movf	i1___awmod@dividend+1,w
 10778  13A6  00F1               	movwf	?i1___awmod+1
 10779  13A7  0872               	movf	i1___awmod@dividend,w
 10780  13A8  00F0               	movwf	?i1___awmod
 10781  13A9  0008               	return
 10782  13AA                     __end_ofi1___awmod:	
 10783  007E                     btemp	set	126	;btemp
 10784  007E                     wtemp0	set	126


Data Sizes:
    Strings     1033
    Constant    0
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     40      53
    BANK1            80      0      30
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    writeString@str	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_108(CODE[25]), STR_107(CODE[25]), STR_106(CODE[28]), STR_105(CODE[25]), 
		 -> STR_104(CODE[25]), STR_103(CODE[28]), STR_102(CODE[25]), STR_101(CODE[25]), 
		 -> STR_100(CODE[28]), STR_99(CODE[17]), STR_98(CODE[20]), STR_97(CODE[10]), 
		 -> STR_96(CODE[16]), STR_95(CODE[13]), STR_94(CODE[12]), STR_93(CODE[11]), 
		 -> STR_92(CODE[19]), STR_91(CODE[17]), STR_90(CODE[9]), STR_89(CODE[10]), 
		 -> STR_88(CODE[16]), STR_87(CODE[13]), STR_86(CODE[12]), STR_85(CODE[19]), 

    writeLCD@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_134(CODE[11]), STR_133(CODE[11]), STR_132(CODE[11]), STR_131(CODE[11]), 
		 -> STR_130(CODE[11]), STR_129(CODE[11]), STR_128(CODE[11]), STR_127(CODE[11]), 
		 -> STR_126(CODE[17]), STR_125(CODE[17]), STR_124(CODE[17]), STR_123(CODE[17]), 
		 -> STR_122(CODE[17]), STR_121(CODE[17]), STR_120(CODE[14]), STR_119(CODE[14]), 
		 -> STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), 
		 -> STR_114(CODE[9]), STR_113(CODE[11]), STR_112(CODE[13]), STR_111(CODE[11]), 
		 -> STR_110(CODE[17]), STR_109(CODE[17]), STR_84(CODE[17]), STR_83(CODE[17]), 
		 -> STR_82(CODE[17]), STR_81(CODE[17]), STR_80(CODE[17]), STR_79(CODE[17]), 
		 -> STR_78(CODE[17]), STR_77(CODE[17]), STR_76(CODE[17]), STR_75(CODE[17]), 
		 -> STR_74(CODE[17]), STR_73(CODE[17]), STR_72(CODE[17]), STR_71(CODE[17]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[17]), 
		 -> STR_66(CODE[17]), STR_65(CODE[4]), STR_64(CODE[4]), STR_63(CODE[4]), 
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[8]), STR_53(CODE[1]), STR_52(CODE[4]), STR_51(CODE[7]), 
		 -> STR_50(CODE[4]), STR_49(CODE[4]), STR_48(CODE[8]), STR_47(CODE[8]), 
		 -> STR_46(CODE[8]), STR_45(CODE[4]), STR_44(CODE[2]), STR_43(CODE[2]), 
		 -> STR_42(CODE[2]), STR_41(CODE[2]), STR_40(CODE[2]), STR_39(CODE[2]), 
		 -> STR_38(CODE[2]), STR_37(CODE[2]), STR_36(CODE[2]), STR_35(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), STR_28(CODE[2]), STR_27(CODE[2]), 
		 -> STR_26(CODE[2]), STR_25(CODE[2]), STR_24(CODE[2]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), STR_20(CODE[2]), STR_19(CODE[2]), 
		 -> STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[2]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _geral in COMMON

    _interrupt_EUSART_RX->_putFIFO
    _putFIFO->i1___awmod

Critical Paths under _main in BANK0

    _main->_master1
    _main->_slave1
    _transmite->_hexToAscii
    _textSelectionEST->_writeLCD
    _textSelectionCLP->_writeLCD
    _textSelection8->_writeLCD
    _textSelection7->_writeLCD
    _textSelection6->_writeLCD
    _textSelection5->_writeLCD
    _textSelection4->_writeLCD
    _textSelection3->_writeLCD
    _textSelection2->_writeLCD
    _textSelection1->_writeLCD
    ___awdiv->_statusT0limite
    _textLoading->_writeLCD
    _textConfig->_writeLCD
    _textCMpar->_writeLCD
    _textCMdat->_writeLCD
    _statusFIFO->___awmod
    _slave1->_initEUSART
    _master1->_initEUSART
    _writeString->_writeEUSART
    _initEUSART->___lldiv
    _logo->_writeLCD
    _initTimer0->_setT0limite
    _initSerial->_serialOut
    _initLCD->_cmdLCD
    _getFIFO->___awmod
    _easterEgg->_writeLCD
    _writeLCD->_gotoxy
    _gotoxy->_cmdLCD
    _bordaSubidaB2->_B2

Critical Paths under _geral in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _geral in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _geral in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _geral in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  323242
                                             30 BANK0     10    10      0
                                 _B1
                                 _B2
                                 _B3
                         _asciiToHex
                      _bordaSubidaB1
                      _bordaSubidaB2
                      _bordaSubidaB3
                             _cmdLCD
                          _easterEgg
                      _errorRxEUSART
                            _getFIFO
                             _initBT
                         _initEUSART
                            _initLCD
                         _initSerial
                         _initTimer0
                               _logo
                            _master1
                 _resetErrorRxEUSART
                          _serialOut
                             _slave1
                         _statusFIFO
                          _textCMdat
                          _textCMpar
                         _textConfig
                        _textLoading
                     _textSelection1
                     _textSelection2
                     _textSelection3
                     _textSelection4
                     _textSelection5
                     _textSelection6
                     _textSelection7
                     _textSelection8
                   _textSelectionCLP
                   _textSelectionEST
                          _transmite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _transmite                                            2     2      0     231
                                              7 BANK0      2     2      0
                         _hexToAscii
                           _serialIn
                        _writeEUSART
 ---------------------------------------------------------------------------------
 (2) _serialIn                                             3     3      0      70
                                              3 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _hexToAscii                                           4     4      0     139
                                              3 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _textSelectionEST                                     3     3      0   19297
                                             16 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelectionCLP                                     3     3      0   19297
                                             16 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection8                                       3     3      0   19297
                                             16 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection7                                       3     3      0   19297
                                             16 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection6                                       3     3      0   19297
                                             16 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection5                                       3     3      0   19297
                                             16 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection4                                       3     3      0   19297
                                             16 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection3                                       3     3      0   19297
                                             16 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection2                                       3     3      0   19297
                                             16 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection1                                       3     3      0   19297
                                             16 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (2) _statusT0limite                                       2     0      2       0
                                              3 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _statusT0                                             2     0      2       0
                                              3 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    2124
                                              5 BANK0      9     5      4
                     _statusT0limite (ARG)
 ---------------------------------------------------------------------------------
 (1) _textLoading                                          3     3      0   17173
                                             16 BANK0      3     3      0
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textConfig                                           0     0      0   17350
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textCMpar                                            0     0      0   17350
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textCMdat                                            0     0      0   17350
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _statusFIFO                                           2     2      0     700
                                             10 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _slave1                                               3     3      0    2683
                                             27 BANK0      3     3      0
                         _initEUSART
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _resetErrorRxEUSART                                   4     4      0       0
                                              3 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _master1                                              3     3      0    2683
                                             27 BANK0      3     3      0
                         _initEUSART
                        _writeString
 ---------------------------------------------------------------------------------
 (2) _writeString                                          2     0      2    1891
                                              4 BANK0      2     0      2
                        _writeEUSART
 ---------------------------------------------------------------------------------
 (2) _writeEUSART                                          1     1      0      22
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _initEUSART                                          10     6      4     792
                                             17 BANK0     10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              3 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _logo                                                 3     3      0   17350
                                             16 BANK0      3     3      0
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _initTimer0                                           0     0      0      98
                        _setT0limite
 ---------------------------------------------------------------------------------
 (2) _setT0limite                                          2     0      2      98
                                              3 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           1     1      0      68
                                              6 BANK0      1     1      0
                          _serialOut
 ---------------------------------------------------------------------------------
 (1) _serialOut                                            3     3      0      68
                                              3 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              3     3      0     177
                                              7 BANK0      3     3      0
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (1) _initBT                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getFIFO                                              5     5      0     724
                                             10 BANK0      5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     700
                                              3 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _errorRxEUSART                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _easterEgg                                            3     3      0   17488
                                             16 BANK0      3     3      0
                      _bordaSubidaB2
                      _bordaSubidaB3
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             5     2      3   17173
                                             11 BANK0      5     2      3
                             _gotoxy
                             _putLCD
 ---------------------------------------------------------------------------------
 (2) _putLCD                                               3     3      0      67
                                              3 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _gotoxy                                               4     3      1     297
                                              7 BANK0      4     3      1
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (3) _cmdLCD                                               4     4      0     177
                                              3 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _bordaSubidaB3                                        3     3      0      69
                                              3 BANK0      3     3      0
                                 _B3
 ---------------------------------------------------------------------------------
 (3) _B3                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _bordaSubidaB2                                        3     3      0      69
                                              4 BANK0      3     3      0
                                 _B2
 ---------------------------------------------------------------------------------
 (3) _B2                                                   1     1      0       0
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bordaSubidaB1                                        3     3      0      69
                                              3 BANK0      3     3      0
                                 _B1
 ---------------------------------------------------------------------------------
 (2) _B1                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _asciiToHex                                           5     4      1     215
                                              3 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _geral                                                3     3      0     370
                                              0 BANK0      3     3      0
                _interrupt_EUSART_RX
                          _intt0_1ms
 ---------------------------------------------------------------------------------
 (6) _intt0_1ms                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _interrupt_EUSART_RX                                  0     0      0     370
                            _putFIFO
 ---------------------------------------------------------------------------------
 (7) _putFIFO                                              5     5      0     370
                                              7 COMMON     5     5      0
                          i1___awmod
 ---------------------------------------------------------------------------------
 (8) i1___awmod                                            7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _B1
   _B2
   _B3
   _asciiToHex
   _bordaSubidaB1
     _B1
   _bordaSubidaB2
     _B2
   _bordaSubidaB3
     _B3
   _cmdLCD
   _easterEgg
     _bordaSubidaB2
       _B2
     _bordaSubidaB3
       _B3
     _cmdLCD
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _errorRxEUSART
   _getFIFO
     ___awmod
   _initBT
   _initEUSART
     ___lldiv
   _initLCD
     _cmdLCD
   _initSerial
     _serialOut
   _initTimer0
     _setT0limite
   _logo
     _cmdLCD
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _master1
     _initEUSART
       ___lldiv
     _writeString
       _writeEUSART
   _resetErrorRxEUSART
   _serialOut
   _slave1
     _initEUSART
       ___lldiv
     _writeString
       _writeEUSART
   _statusFIFO
     ___awmod
   _textCMdat
     _cmdLCD
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textCMpar
     _cmdLCD
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textConfig
     _cmdLCD
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textLoading
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textSelection1
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textSelection2
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textSelection3
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textSelection4
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textSelection5
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textSelection6
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textSelection7
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textSelection8
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textSelectionCLP
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _textSelectionEST
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         _cmdLCD
       _putLCD
   _transmite
     _hexToAscii
     _serialIn
     _writeEUSART
   _writeLCD
     _gotoxy
       _cmdLCD
     _putLCD

 _geral (ROOT)
   _interrupt_EUSART_RX
     _putFIFO
       i1___awmod
   _intt0_1ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      60       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     28      35       5       66.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      1E       7       37.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      60      12        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Nov 04 16:16:15 2019

             ?_textSelection1 0070               ?_textSelection2 0070               ?_textSelection3 0070  
             ?_textSelection4 0070               ?_textSelection5 0070               ?_textSelection6 0070  
             ?_textSelection7 0070               ?_textSelection8 0070                             pc 0002  
                 __CFG_CP$OFF 0000                   _SSPSTATbits 0094                            _B1 1FDB  
                          _B2 1FEB                            _B3 1FE0                            l30 108F  
                          l32 1094                  ___awdiv@sign 002B                            fsr 0004  
                         ?_B1 0070                           ?_B2 0070                           ?_B3 0070  
           ?_textSelectionCLP 0070             ?_textSelectionEST 0070                           l550 1036  
                         l570 124E                           _LCD 0008                  __CFG_CPD$OFF 0000  
     __size_of_statusT0limite 0007                           fsr0 0004                           indf 0000  
                ___awmod@sign 0029            ??_textSelectionCLP 0030            ??_textSelectionEST 0030  
                __CFG_IESO$ON 0000                  __CFG_FOSC$HS 0000                          ??_B1 0023  
                        ??_B2 0023                          ??_B3 0023               ??_bordaSubidaB1 0023  
             ??_bordaSubidaB2 0024               ??_bordaSubidaB3 0023                  __CFG_LVP$OFF 0000  
                        l3005 13B6                          l3031 13F2                          l3023 13DF  
                        l3017 13C3                          l3009 13BD                          l3019 13D1  
                        l3027 13EA                          l4011 0528                          l4003 0509  
                        l3061 1203                          l3125 1667                          l3133 16CA  
                        l3141 172D                          l3311 10C3                          l4017 0531  
                        l3067 120B                          l3309 10C2                          l3149 1790  
                        l3157 17F3                          l3165 0A91                          l3173 0AF4  
                        l3181 05EF                          l2703 14E4                          l2705 14F0  
                        l2707 14F7                          l2811 1090                          l3443 127F  
                        l3611 00AE                          l3603 0092                          l3197 143F  
                        l3189 1494                          l4181 0567                          l4173 0170  
                        l3463 123E                          l2815 1085                          l2831 109F  
                        l4183 0593                          l4175 0299                          l3703 01F0  
                        l3631 00F8                          l3623 00D4                          l3615 00B8  
                        l3607 00A0                          l3481 103A                          l2761 1608  
                        l2833 10AD                          l4177 04EE                          l2691 14CC  
                        l2747 15C3                          l2851 12B4                          l2827 10A9  
                        l4179 053E                          l3723 0247                          l3707 0206  
                        l3627 00E2                          l3619 00C6                          l2757 15FB  
                        l2749 15D3                          l2845 12AA                          l3805 0393  
                        l3741 02C3                          l3653 0136                          l3645 012C  
                        l2687 14B9                          l2863 0A16                          l3823 03B9  
                        l3751 02DE                          l3727 025B                          l3719 0235  
                        l3735 028B                          l3671 0179                          l3663 0154  
                        l3639 011B                          l3591 006C                          l3583 005E  
                        l3575 0051                          l2881 10DC                          l2689 14C5  
                        l2945 1240                          l2961 1562                          l3913 048E  
                        l3841 03E2                          l3817 03A9                          l3809 039F  
                        l3745 02C9                          l3737 02A4                          l2883 10DD  
                        l3931 04B9                          l3907 047B                          l3835 03D1  
                        l3827 03C7                          l3683 01A0                          l3659 0146  
                        l3595 007A                          l3587 0065                          l3579 0057  
                        l3925 04A6                          l3917 049C                          l3853 03FA  
                        l3845 03F0                          l3773 0326                          l3757 02FA  
                        l3669 0168                          l2967 156D                          l3935 04C4  
                        l3871 0425                          l3863 041B                          l3791 035D  
                        l3783 0336                          l3775 032C                          l3767 030A  
                        l3759 0300                          l3695 01CD                          l3599 0088  
                        l2897 10F6                          l2993 15AC                          l2985 1599  
                        l2977 1575                          l3881 0446                          l3945 04E6  
                        l2899 10F7                          l2979 1583                          l3971 0509  
                        l3963 0509                          l3955 0509                          l3947 0509  
                        l3939 04D2                          l3859 040D                          l2989 15A4  
                        l3877 0438                          l3895 0463                          l3799 0380  
                        l3889 0450                          l3995 0509                          l3987 0509  
                        l3979 0509                          l3899 0471                          STR_1 0931  
                        STR_2 0A01                          STR_3 0A05                          STR_4 0A07  
                        STR_5 0A03                          STR_6 0854                          STR_7 08A9  
                        STR_8 0865                          STR_9 0898                          u2105 0AE5  
                        u2115 05E0                          u2045 1658                          u2125 1485  
                        u3007 0DDF                          u2055 16BB                          u2135 1430  
                        u3017 0DFB                          u2065 171E                          u1515 106E  
                        u3107 0B2E                          u3027 0C79                          u2075 1781  
                        u3117 0B47                          u3037 0C92                          u2085 17E4  
                        u3207 0C45                          u1535 15C7                          u3127 0B60  
                        u3047 0CAB                          u2095 0A82                          u3217 1302  
                        u3137 0B79                          u3057 0CC4                          u3307 0F2E  
                        u3227 0E1E                          u1555 15D5                          u3147 0B92  
                        u3067 0CDD                          u3317 0F4B                          u3237 0E3B  
                        u3157 0BBD                          u1565 15EA                          u3077 0CF6  
                        u3407 14C9                          u3327 0F5F                          u3247 0E64  
                        u3167 0BD8                          u1575 15FC                          u3087 1276  
                        u3417 14EA                          u3337 0F88                          u3257 0E8F  
                        u3177 0BF3                          u3097 128A                          u3427 14F4  
                        u3347 0FB2                          u3267 0EB8                          u3187 0C0E  
                        u3357 0FDC                          u3277 0EE3                          u3197 0C29  
                        u3367 0FF1                          u3287 0EFF                          u1855 1578  
                        u3377 12D6                          u3297 0F13                          u3387 12EA  
                        u1955 13C6                          u1795 1506                          u1875 1584  
                        u3397 14BF                          u1885 1590                          u2917 0378  
                        u1975 13D7                          u1895 159A                          u2927 1335  
                        u1985 13E0                          u2937 0D1B                          u2947 0D37  
                        u2957 0D53                          u2967 0D6F                          u2977 0D8B  
                        u2987 0DA7                          u2997 0DC3                          _TMR0 0001  
                __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000                          _fifo 00A0  
                        _comp 0051                          _main 0027                          _logo 0BA2  
                        _rhex 0054                          _tdez 0052                          btemp 007E  
                        _tuni 0053                 __CFG_BOREN$ON 0000                          start 0010  
               __CFG_MCLRE$ON 0000                writeString@str 0024                   _writeEUSART 1FE5  
               hexToAscii@dez 0026                 hexToAscii@uni 0025                         ?_main 0070  
                       ?_logo 0070               __end_of___awdiv 15B1                         STR_10 0865  
                       STR_11 08CB                         STR_12 0865                         STR_20 09F7  
                       STR_21 09F7                         STR_13 07A8                         STR_30 09FD  
                       STR_22 09F9                         STR_14 09F7                         STR_31 07FD  
                       STR_23 07FD                         STR_15 07FD                         STR_24 090D  
                       STR_32 09FB                         STR_40 09FF                         STR_16 09F5  
                       STR_17 09F5                         STR_25 090D                         STR_33 09FB  
                       STR_41 09FF                 __CFG_WDTE$OFF 0000                         STR_42 09F5  
                       STR_18 090D                         STR_50 07D9                         STR_34 09FF  
                       STR_26 09FB                         STR_43 07FD                         STR_35 07FD  
                       STR_27 07FD                         STR_19 07FD                         STR_51 09DA  
                       STR_60 09E1                         STR_28 09F9                         STR_36 09FD  
                       STR_44 07A8               __end_of___awmod 13F7                         STR_61 09E5  
                       STR_29 09F9                         STR_37 09FD                         STR_45 07D9  
                       STR_46 07F7                         STR_70 07EE                         STR_62 09ED  
                       STR_38 07A8                         STR_39 07FD                         STR_63 09E1  
                       STR_47 09D2                         STR_71 0843                         STR_72 07EE  
                       STR_48 09D2                         STR_64 09E9                         STR_80 08DC  
                       STR_49 07FB                         STR_65 09F1                         STR_57 09E1  
                       STR_81 08FE                         STR_73 0821                         STR_74 07EE  
                       STR_58 09E5                         STR_90 09C9                         STR_82 08ED  
                       STR_66 0876                         STR_59 09ED                         STR_83 090F  
                       STR_67 08BA                         STR_75 0887                         STR_91 07DD  
                       STR_92 06FE                         STR_76 07EE                         STR_84 08DC  
                       STR_68 07EE                         STR_93 09AB                         STR_69 0832  
                       STR_77 07FF                         STR_85 06FE                         STR_86 0994  
                       STR_94 0988                         STR_78 0810                         STR_95 097B  
                       STR_87 097B                         STR_79 0920                         STR_96 0942  
                       STR_88 0942                         STR_97 09B6                         STR_89 09B6  
                       STR_98 06EA                         STR_99 07DD                         _ANSEL 0188  
             __end_of___lldiv 1611               ___awdiv@divisor 0025                         i1l580 1042  
             ___awdiv@counter 002A                         _RCREG 001A                         _PORTB 0006  
             __end_of_getFIFO 1240                         _TRISB 0086                         _TRISD 0088  
                       _TXREG 0019                   _writeString 1240                 __CFG_PWRTE$ON 0000  
              i1___awmod@sign 0076               __end_of_initLCD 1325                         _geral 11CF  
             __end_of_master1 0BA2                         main@a 0045   __size_of_resetErrorRxEUSART 002B  
                       main@i 0044                         main@t 0043               __end_of_putFIFO 116F  
                       pclath 000A                  ?_setT0limite 0023                         status 0003  
                       wtemp0 007E            __size_ofi1___awmod 004B               __initialization 0013  
                __end_of_main 0599                  __end_of_logo 0C4C    bordaSubidaB3@estadoAtualB3 0025  
              hexToAscii@dado 0024                        ??_main 003E                        ??_logo 0030  
                      ?_geral 0070                        STR_100 0600                        STR_101 066D  
                      STR_110 07CC                        STR_102 0654                        STR_111 09A0  
                      STR_103 0638                        STR_112 096E                        STR_120 0952  
                      STR_104 06D1                        STR_113 09A0                        STR_121 07AA  
                      STR_105 06B8                        STR_130 09A0                        STR_114 09C0  
                      STR_122 0766                        STR_106 061C                        STR_131 09A0  
                      STR_115 0788                        STR_123 0777                        STR_107 069F  
                      STR_132 09A0                        STR_124 0755                        STR_116 0722  
                      STR_108 0686                        STR_133 09A0                        STR_109 07BB  
                      STR_125 0799                        STR_117 0711                        STR_134 09A0  
                      STR_126 0744                        STR_118 0733                        STR_127 09A0  
                      STR_119 0960                        STR_128 09A0                        STR_129 09A0  
            ___awdiv@dividend 0027                        _ANSELH 0189                        i1l3401 104A  
                      i1l2773 1369                        i1l3557 11E6                        i1l3549 11DD  
                      i1l2791 1392                        i1l3399 1046                        i1l2785 1376  
                      i1l2777 1370                        i1l2787 1384                        i1l2795 139D  
                      i1l2799 13A5                        u162_25 1379                        u218_25 1111  
                      u164_25 138A                        u165_25 1393        __size_of_errorRxEUSART 000C  
                      _t0cont 0048                        _cmdLCD 14A1                     ??___awdiv 0029  
                   ??___awmod 0027                     ??___lldiv 002B                        _initBT 1025  
                   ??_getFIFO 002A                        _gotoxy 1065              ___awdiv@quotient 002C  
             ___awmod@divisor 0023                        _putLCD 12C1                        _slave1 0C4C  
                      _serial 0050               ___awmod@counter 0028                        main@a1 0041  
                      main@a2 0042                     ??_initLCD 0027             __end_ofi1___awmod 13AA  
              _statusT0limite 1016                     ??_master1 003B              __end_of_serialIn 10AF  
                      saved_w 007E                     ??_putFIFO 0077              __end_of_statusT0 2000  
            __end_of_writeLCD 0A3B                  ?_textLoading 0070       __end_of__initialization 0023  
            ??_textSelection1 0030              ??_textSelection2 0030              ??_textSelection3 0030  
            ??_textSelection4 0030              ??_textSelection5 0030              ??_textSelection6 0030  
            ??_textSelection7 0030              ??_textSelection8 0030                __pcstackCOMMON 0070  
               __end_of_geral 11F2                    __end_of_B1 1FE0                    __end_of_B2 1FF2  
                  __end_of_B3 1FE5        __end_of_statusT0limite 101D            __size_of_easterEgg 01FD  
__size_of_interrupt_EUSART_RX 0013                _OPTION_REGbits 0081                 _errorRxEUSART 1030  
                     ??_geral 0020                    __pbssBANK0 0048                    __pbssBANK1 00A0  
   __size_of_textSelectionCLP 0055     __size_of_textSelectionEST 0055            __size_of_intt0_1ms 001B  
        __size_of_setT0limite 0007                    __pmaintext 0027                  cmdLCD@nibble 0026  
                ?_writeEUSART 0070                       ?_cmdLCD 0070                    _asciiToHex 11F2  
                  __pintentry 0004                       _CCP1CON 0017                       ?_initBT 0070  
                     ?_gotoxy 0027                       ?_putLCD 0070                       ?_slave1 0070  
             ?_statusT0limite 0023            __size_of_serialOut 0019            __size_of_textCMdat 0020  
          __size_of_textCMpar 0020                ?_errorRxEUSART 0070                  ?_writeString 0024  
                  _hexToAscii 1294            __size_of_transmite 003A                    __stringtab 1000  
       __end_of_bordaSubidaB1 10C9         __end_of_bordaSubidaB2 10E3         __end_of_bordaSubidaB3 10FD  
                  _initEUSART 14FB             __end_of_easterEgg 1000                    getFIFO@aux 002E  
                   ?_serialIn 0070                       _t0final 004A                    _initSerial 104F  
                  _initTimer0 1118                       ___awdiv 1556               __size_of_cmdLCD 005A  
                     ___awmod 13AA                       ___lldiv 15B1                     ?_statusT0 0023  
                     _getFIFO 1217               __size_of_initBT 000B               __size_of_gotoxy 0018  
                   ?_writeLCD 002B               __size_of_putLCD 0030               __size_of_slave1 00BA  
                     __ptext0 0000                       __ptext1 1325                       __ptext2 1096  
                     __ptext3 1294                       __ptext4 144C                       __ptext5 13F7  
                     __ptext6 0599                       __ptext7 0A9E                       __ptext8 0A3B  
                     __ptext9 179D             __end_of_intt0_1ms 1118                  writeEUSART@d 0023  
                     _initLCD 12F1                       _master1 0B01              ___awmod@dividend 0025  
                     _putFIFO 114F    __end_of_resetErrorRxEUSART 1294                       main@aux 0046  
                     clrloop0 101E          end_of_initialization 0023             __end_of_serialOut 1096  
        __size_of_textLoading 00FD                       gotoxy@x 002A                       gotoxy@y 0027  
           __end_of_textCMdat 118F             __end_of_textCMpar 11AF                       putLCD@c 0024  
             ___lldiv@divisor 0023               ___lldiv@counter 0030             bordaSubidaB1@resp 0024  
                  ??_serialIn 0023                     _RCSTAbits 0018                   ?_asciiToHex 0023  
                __pstringtext 0600             __end_of_transmite 135F                    ??_statusT0 0025  
                  ??_writeLCD 002E               ??_errorRxEUSART 0023                     _PORTBbits 0006  
                   _PORTCbits 0007                    _textConfig 11AF                   ?_hexToAscii 0070  
                   _TRISAbits 0085                     _TRISCbits 0087                     i1___awmod 135F  
                  _statusFIFO 1133              _textSelectionCLP 13F7              _textSelectionEST 144C  
                 ?_initEUSART 0031                     _TXSTAbits 0098           _interrupt_EUSART_RX 103C  
                setT0limite@c 0023                   ?_initSerial 0070                   ?_initTimer0 0070  
              __end_of_cmdLCD 14FB          __size_of_writeEUSART 0006                   _BAUDCTLbits 0187  
              __end_of_initBT 1030                __end_of_gotoxy 107D                __end_of_putLCD 12F1  
              __end_of_slave1 0D06          ?_interrupt_EUSART_RX 0070           start_initialization 0013  
                  ?i1___awmod 0070          __size_of_writeString 0029           __size_of_asciiToHex 0025  
         __size_of_hexToAscii 002D    bordaSubidaB1@estadoAtualB1 0025              ??_statusT0limite 0025  
                    ??_cmdLCD 0023                      ??_initBT 0023            i1___awmod@dividend 0072  
                    ??_gotoxy 0028                      ??_putLCD 0023                      ??_slave1 003B  
                 ?_textConfig 0070         ??_interrupt_EUSART_RX 007C           __size_of_initEUSART 005B  
                 __pbssCOMMON 007C                     ___latbits 0002                 __pcstackBANK0 0020  
         __size_of_initSerial 0016           __size_of_initTimer0 001B                   ?_statusFIFO 0070  
               ??_setT0limite 0025                     cmdLCD@cmd 0025                     _easterEgg 0E03  
                    ?___awdiv 0025                      ?___awmod 0023                      ?___lldiv 0023  
           __size_of_serialIn 0019                      ?_getFIFO 0070       __size_of_textSelection1 0063  
     __size_of_textSelection2 0063       __size_of_textSelection3 0063       __size_of_textSelection4 0063  
     __size_of_textSelection5 0063       __size_of_textSelection6 0063       __size_of_textSelection7 0063  
     __size_of_textSelection8 0063                     __pstrings 1000             __size_of_statusT0 0007  
                    ?_initLCD 0070                      ?_master1 0070             __size_of_writeLCD 0032  
                    ?_putFIFO 0070                     _intt0_1ms 10FD                   ??i1___awmod 0074  
              __size_of_geral 0023                   writeLCD@ptr 002C                   __size_of_B1 0005  
                 __size_of_B2 0007                   __size_of_B3 0005                 asciiToHex@dez 0027  
               asciiToHex@uni 0026                    serialOut@d 0024                    serialOut@i 0025  
           interrupt_function 0004                     clear_ram0 101D           __size_of_textConfig 0020  
                    _PIE1bits 008C            _resetErrorRxEUSART 1269                      _PIR1bits 000C  
         __end_of_setT0limite 1FF9                     _serialOut 107D                     _textCMdat 116F  
                   _textCMpar 118F                  ??_asciiToHex 0024                    ?_easterEgg 0070  
         ?_resetErrorRxEUSART 0070                      _SPBRbits 0099           __size_of_statusFIFO 001C  
      __size_of_bordaSubidaB1 001A        __size_of_bordaSubidaB2 001A        __size_of_bordaSubidaB3 001A  
    __end_of_textSelectionCLP 144C      __end_of_textSelectionEST 14A1                   __stringbase 1012  
          initEUSART@baudRate 0031                     _transmite 1325                  putLCD@nibble 0025  
                ??_hexToAscii 0023                    ?_intt0_1ms 0070          ??_resetErrorRxEUSART 0023  
               ??_textLoading 0030            __end_of_asciiToHex 1217                  ??_initEUSART 0035  
                  ?_serialOut 0070              _estadoAnteriorB1 004F              _estadoAnteriorB2 004E  
            _estadoAnteriorB3 004D            __end_of_hexToAscii 12C1                    ?_textCMdat 0070  
                ??_initSerial 0026                  ??_initTimer0 0025                    ?_textCMpar 0070  
           i1___awmod@divisor 0070             i1___awmod@counter 0075              __size_of___awdiv 005B  
            __size_of___awmod 004D              __size_of___lldiv 0060              __size_of_getFIFO 0029  
          __end_of__stringtab 1012                    ?_transmite 0070         __end_of_errorRxEUSART 103C  
            __size_of_initLCD 0034            __end_of_initEUSART 1556              __size_of_master1 00A1  
                    _fifoHead 007C              __size_of_putFIFO 0020                      _fifoTail 004C  
                    __ptext10 173A                      __ptext11 16D7                      __ptext20 116F  
                    __ptext12 1674                      __ptext21 1133                      __ptext13 1611  
                    __ptext30 1118                      __ptext22 0C4C                      __ptext14 1016  
                    __ptext31 1FF2                      __ptext23 1269                      __ptext15 1FF9  
                    __ptext40 0A09                      __ptext32 104F                      __ptext24 0B01  
                    __ptext16 1556                      __ptext41 12C1                      __ptext33 107D  
                    __ptext25 1240                      __ptext17 0D06                      __ptext50 11F2  
                    __ptext42 1065                      __ptext34 12F1                      __ptext26 1FE5  
                    __ptext18 11AF                      __ptext51 11CF                      __ptext43 14A1  
                    __ptext35 1025                      __ptext27 14FB                      __ptext19 118F  
                    __ptext52 10FD                      __ptext44 10E3                      __ptext36 1217  
                    __ptext28 15B1                      __ptext53 103C                      __ptext45 1FE0  
                    __ptext37 13AA                      __ptext29 0BA2                      __ptext54 114F  
                    __ptext46 10C9                      __ptext38 1030                      __ptext55 135F  
                    __ptext47 1FEB                      __ptext39 0E03                      __ptext48 10AF  
                    __ptext49 1FDB             __CFG_BOR4V$BOR40V 0000                  serialIn@dado 0024  
          __end_of_initSerial 1065            __end_of_initTimer0 1133                 _bordaSubidaB1 10AF  
               _bordaSubidaB2 10C9                 _bordaSubidaB3 10E3                   _setT0limite 1FF2  
               __size_of_main 0572                 __size_of_logo 00AA                     serialIn@i 0025  
                asciiToHex@a1 0025                  asciiToHex@a2 0023           __end_of_textLoading 0E03  
                    _serialIn 1096                 ??_writeEUSART 0023                   ??_easterEgg 0030  
  bordaSubidaB2@estadoAtualB2 0026                      _statusT0 1FF9                _textSelection1 1611  
              _textSelection2 1674                _textSelection3 16D7                _textSelection4 173A  
              _textSelection5 179D                _textSelection6 0A3B                _textSelection7 0A9E  
              _textSelection8 0599                      _writeLCD 0A09                  ??_textConfig 0030  
               ??_writeString 0026                    _INTCONbits 000B                   ??_intt0_1ms 0070  
                ??_statusFIFO 002A                ?_bordaSubidaB1 0070                ?_bordaSubidaB2 0070  
              ?_bordaSubidaB3 0070                      intlevel1 0000              ___lldiv@dividend 0027  
                    putFIFO@c 007B                     writeLCD@x 002F                     writeLCD@y 002B  
          bordaSubidaB2@resp1 0025            __end_of_textConfig 11CF            bordaSubidaB3@resp2 0024  
                   stringcode 100A                   ??_serialOut 0023                   ??_textCMdat 0030  
      __end_of_textSelection1 1674        __end_of_textSelection2 16D7        __end_of_textSelection3 173A  
      __end_of_textSelection4 179D        __end_of_textSelection5 1800        __end_of_textSelection6 0A9E  
      __end_of_textSelection7 0B01        __end_of_textSelection8 05FC                   ??_textCMpar 0030  
 __end_of_interrupt_EUSART_RX 104F            __end_of_statusFIFO 114F           __end_of_writeEUSART 1FEB  
                 ??_transmite 0027              ___lldiv@quotient 002C                      stringtab 1000  
         __end_of_writeString 1269                   _textLoading 0D06  
