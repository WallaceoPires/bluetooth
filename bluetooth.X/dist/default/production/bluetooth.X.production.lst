

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Nov 06 20:21:47 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	intentry,global,class=CODE,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,delta=2
    74                           	dabs	1,0x7E,2
    75  0000                     
    76                           ; Version 1.41
    77                           ; Generated 25/01/2017 GMT
    78                           ; 
    79                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC16F887 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0088                     	;# 
   150  0089                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  008F                     	;# 
   155  0090                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0093                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0095                     	;# 
   163  0096                     	;# 
   164  0097                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009A                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  0105                     	;# 
   174  0107                     	;# 
   175  0108                     	;# 
   176  0109                     	;# 
   177  010C                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  010E                     	;# 
   181  010F                     	;# 
   182  0185                     	;# 
   183  0187                     	;# 
   184  0188                     	;# 
   185  0189                     	;# 
   186  018C                     	;# 
   187  018D                     	;# 
   188  0000                     	;# 
   189  0001                     	;# 
   190  0002                     	;# 
   191  0003                     	;# 
   192  0004                     	;# 
   193  0005                     	;# 
   194  0006                     	;# 
   195  0007                     	;# 
   196  0008                     	;# 
   197  0009                     	;# 
   198  000A                     	;# 
   199  000B                     	;# 
   200  000C                     	;# 
   201  000D                     	;# 
   202  000E                     	;# 
   203  000E                     	;# 
   204  000F                     	;# 
   205  0010                     	;# 
   206  0011                     	;# 
   207  0012                     	;# 
   208  0013                     	;# 
   209  0014                     	;# 
   210  0015                     	;# 
   211  0015                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001B                     	;# 
   219  001C                     	;# 
   220  001D                     	;# 
   221  001E                     	;# 
   222  001F                     	;# 
   223  0081                     	;# 
   224  0085                     	;# 
   225  0086                     	;# 
   226  0087                     	;# 
   227  0088                     	;# 
   228  0089                     	;# 
   229  008C                     	;# 
   230  008D                     	;# 
   231  008E                     	;# 
   232  008F                     	;# 
   233  0090                     	;# 
   234  0091                     	;# 
   235  0092                     	;# 
   236  0093                     	;# 
   237  0093                     	;# 
   238  0093                     	;# 
   239  0094                     	;# 
   240  0095                     	;# 
   241  0096                     	;# 
   242  0097                     	;# 
   243  0098                     	;# 
   244  0099                     	;# 
   245  009A                     	;# 
   246  009B                     	;# 
   247  009C                     	;# 
   248  009D                     	;# 
   249  009E                     	;# 
   250  009F                     	;# 
   251  0105                     	;# 
   252  0107                     	;# 
   253  0108                     	;# 
   254  0109                     	;# 
   255  010C                     	;# 
   256  010C                     	;# 
   257  010D                     	;# 
   258  010E                     	;# 
   259  010F                     	;# 
   260  0185                     	;# 
   261  0187                     	;# 
   262  0188                     	;# 
   263  0189                     	;# 
   264  018C                     	;# 
   265  018D                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  000E                     	;# 
   282  000F                     	;# 
   283  0010                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0013                     	;# 
   287  0014                     	;# 
   288  0015                     	;# 
   289  0015                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001B                     	;# 
   297  001C                     	;# 
   298  001D                     	;# 
   299  001E                     	;# 
   300  001F                     	;# 
   301  0081                     	;# 
   302  0085                     	;# 
   303  0086                     	;# 
   304  0087                     	;# 
   305  0088                     	;# 
   306  0089                     	;# 
   307  008C                     	;# 
   308  008D                     	;# 
   309  008E                     	;# 
   310  008F                     	;# 
   311  0090                     	;# 
   312  0091                     	;# 
   313  0092                     	;# 
   314  0093                     	;# 
   315  0093                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0095                     	;# 
   319  0096                     	;# 
   320  0097                     	;# 
   321  0098                     	;# 
   322  0099                     	;# 
   323  009A                     	;# 
   324  009B                     	;# 
   325  009C                     	;# 
   326  009D                     	;# 
   327  009E                     	;# 
   328  009F                     	;# 
   329  0105                     	;# 
   330  0107                     	;# 
   331  0108                     	;# 
   332  0109                     	;# 
   333  010C                     	;# 
   334  010C                     	;# 
   335  010D                     	;# 
   336  010E                     	;# 
   337  010F                     	;# 
   338  0185                     	;# 
   339  0187                     	;# 
   340  0188                     	;# 
   341  0189                     	;# 
   342  018C                     	;# 
   343  018D                     	;# 
   344  0000                     	;# 
   345  0001                     	;# 
   346  0002                     	;# 
   347  0003                     	;# 
   348  0004                     	;# 
   349  0005                     	;# 
   350  0006                     	;# 
   351  0007                     	;# 
   352  0008                     	;# 
   353  0009                     	;# 
   354  000A                     	;# 
   355  000B                     	;# 
   356  000C                     	;# 
   357  000D                     	;# 
   358  000E                     	;# 
   359  000E                     	;# 
   360  000F                     	;# 
   361  0010                     	;# 
   362  0011                     	;# 
   363  0012                     	;# 
   364  0013                     	;# 
   365  0014                     	;# 
   366  0015                     	;# 
   367  0015                     	;# 
   368  0016                     	;# 
   369  0017                     	;# 
   370  0018                     	;# 
   371  0019                     	;# 
   372  001A                     	;# 
   373  001B                     	;# 
   374  001B                     	;# 
   375  001C                     	;# 
   376  001D                     	;# 
   377  001E                     	;# 
   378  001F                     	;# 
   379  0081                     	;# 
   380  0085                     	;# 
   381  0086                     	;# 
   382  0087                     	;# 
   383  0088                     	;# 
   384  0089                     	;# 
   385  008C                     	;# 
   386  008D                     	;# 
   387  008E                     	;# 
   388  008F                     	;# 
   389  0090                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0093                     	;# 
   393  0093                     	;# 
   394  0093                     	;# 
   395  0094                     	;# 
   396  0095                     	;# 
   397  0096                     	;# 
   398  0097                     	;# 
   399  0098                     	;# 
   400  0099                     	;# 
   401  009A                     	;# 
   402  009B                     	;# 
   403  009C                     	;# 
   404  009D                     	;# 
   405  009E                     	;# 
   406  009F                     	;# 
   407  0105                     	;# 
   408  0107                     	;# 
   409  0108                     	;# 
   410  0109                     	;# 
   411  010C                     	;# 
   412  010C                     	;# 
   413  010D                     	;# 
   414  010E                     	;# 
   415  010F                     	;# 
   416  0185                     	;# 
   417  0187                     	;# 
   418  0188                     	;# 
   419  0189                     	;# 
   420  018C                     	;# 
   421  018D                     	;# 
   422  0000                     	;# 
   423  0001                     	;# 
   424  0002                     	;# 
   425  0003                     	;# 
   426  0004                     	;# 
   427  0005                     	;# 
   428  0006                     	;# 
   429  0007                     	;# 
   430  0008                     	;# 
   431  0009                     	;# 
   432  000A                     	;# 
   433  000B                     	;# 
   434  000C                     	;# 
   435  000D                     	;# 
   436  000E                     	;# 
   437  000E                     	;# 
   438  000F                     	;# 
   439  0010                     	;# 
   440  0011                     	;# 
   441  0012                     	;# 
   442  0013                     	;# 
   443  0014                     	;# 
   444  0015                     	;# 
   445  0015                     	;# 
   446  0016                     	;# 
   447  0017                     	;# 
   448  0018                     	;# 
   449  0019                     	;# 
   450  001A                     	;# 
   451  001B                     	;# 
   452  001B                     	;# 
   453  001C                     	;# 
   454  001D                     	;# 
   455  001E                     	;# 
   456  001F                     	;# 
   457  0081                     	;# 
   458  0085                     	;# 
   459  0086                     	;# 
   460  0087                     	;# 
   461  0088                     	;# 
   462  0089                     	;# 
   463  008C                     	;# 
   464  008D                     	;# 
   465  008E                     	;# 
   466  008F                     	;# 
   467  0090                     	;# 
   468  0091                     	;# 
   469  0092                     	;# 
   470  0093                     	;# 
   471  0093                     	;# 
   472  0093                     	;# 
   473  0094                     	;# 
   474  0095                     	;# 
   475  0096                     	;# 
   476  0097                     	;# 
   477  0098                     	;# 
   478  0099                     	;# 
   479  009A                     	;# 
   480  009B                     	;# 
   481  009C                     	;# 
   482  009D                     	;# 
   483  009E                     	;# 
   484  009F                     	;# 
   485  0105                     	;# 
   486  0107                     	;# 
   487  0108                     	;# 
   488  0109                     	;# 
   489  010C                     	;# 
   490  010C                     	;# 
   491  010D                     	;# 
   492  010E                     	;# 
   493  010F                     	;# 
   494  0185                     	;# 
   495  0187                     	;# 
   496  0188                     	;# 
   497  0189                     	;# 
   498  018C                     	;# 
   499  018D                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  000E                     	;# 
   516  000F                     	;# 
   517  0010                     	;# 
   518  0011                     	;# 
   519  0012                     	;# 
   520  0013                     	;# 
   521  0014                     	;# 
   522  0015                     	;# 
   523  0015                     	;# 
   524  0016                     	;# 
   525  0017                     	;# 
   526  0018                     	;# 
   527  0019                     	;# 
   528  001A                     	;# 
   529  001B                     	;# 
   530  001B                     	;# 
   531  001C                     	;# 
   532  001D                     	;# 
   533  001E                     	;# 
   534  001F                     	;# 
   535  0081                     	;# 
   536  0085                     	;# 
   537  0086                     	;# 
   538  0087                     	;# 
   539  0088                     	;# 
   540  0089                     	;# 
   541  008C                     	;# 
   542  008D                     	;# 
   543  008E                     	;# 
   544  008F                     	;# 
   545  0090                     	;# 
   546  0091                     	;# 
   547  0092                     	;# 
   548  0093                     	;# 
   549  0093                     	;# 
   550  0093                     	;# 
   551  0094                     	;# 
   552  0095                     	;# 
   553  0096                     	;# 
   554  0097                     	;# 
   555  0098                     	;# 
   556  0099                     	;# 
   557  009A                     	;# 
   558  009B                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  009F                     	;# 
   563  0105                     	;# 
   564  0107                     	;# 
   565  0108                     	;# 
   566  0109                     	;# 
   567  010C                     	;# 
   568  010C                     	;# 
   569  010D                     	;# 
   570  010E                     	;# 
   571  010F                     	;# 
   572  0185                     	;# 
   573  0187                     	;# 
   574  0188                     	;# 
   575  0189                     	;# 
   576  018C                     	;# 
   577  018D                     	;# 
   578  0000                     	;# 
   579  0001                     	;# 
   580  0002                     	;# 
   581  0003                     	;# 
   582  0004                     	;# 
   583  0005                     	;# 
   584  0006                     	;# 
   585  0007                     	;# 
   586  0008                     	;# 
   587  0009                     	;# 
   588  000A                     	;# 
   589  000B                     	;# 
   590  000C                     	;# 
   591  000D                     	;# 
   592  000E                     	;# 
   593  000E                     	;# 
   594  000F                     	;# 
   595  0010                     	;# 
   596  0011                     	;# 
   597  0012                     	;# 
   598  0013                     	;# 
   599  0014                     	;# 
   600  0015                     	;# 
   601  0015                     	;# 
   602  0016                     	;# 
   603  0017                     	;# 
   604  0018                     	;# 
   605  0019                     	;# 
   606  001A                     	;# 
   607  001B                     	;# 
   608  001B                     	;# 
   609  001C                     	;# 
   610  001D                     	;# 
   611  001E                     	;# 
   612  001F                     	;# 
   613  0081                     	;# 
   614  0085                     	;# 
   615  0086                     	;# 
   616  0087                     	;# 
   617  0088                     	;# 
   618  0089                     	;# 
   619  008C                     	;# 
   620  008D                     	;# 
   621  008E                     	;# 
   622  008F                     	;# 
   623  0090                     	;# 
   624  0091                     	;# 
   625  0092                     	;# 
   626  0093                     	;# 
   627  0093                     	;# 
   628  0093                     	;# 
   629  0094                     	;# 
   630  0095                     	;# 
   631  0096                     	;# 
   632  0097                     	;# 
   633  0098                     	;# 
   634  0099                     	;# 
   635  009A                     	;# 
   636  009B                     	;# 
   637  009C                     	;# 
   638  009D                     	;# 
   639  009E                     	;# 
   640  009F                     	;# 
   641  0105                     	;# 
   642  0107                     	;# 
   643  0108                     	;# 
   644  0109                     	;# 
   645  010C                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  010F                     	;# 
   650  0185                     	;# 
   651  0187                     	;# 
   652  0188                     	;# 
   653  0189                     	;# 
   654  018C                     	;# 
   655  018D                     	;# 
   656  0000                     	;# 
   657  0001                     	;# 
   658  0002                     	;# 
   659  0003                     	;# 
   660  0004                     	;# 
   661  0005                     	;# 
   662  0006                     	;# 
   663  0007                     	;# 
   664  0008                     	;# 
   665  0009                     	;# 
   666  000A                     	;# 
   667  000B                     	;# 
   668  000C                     	;# 
   669  000D                     	;# 
   670  000E                     	;# 
   671  000E                     	;# 
   672  000F                     	;# 
   673  0010                     	;# 
   674  0011                     	;# 
   675  0012                     	;# 
   676  0013                     	;# 
   677  0014                     	;# 
   678  0015                     	;# 
   679  0015                     	;# 
   680  0016                     	;# 
   681  0017                     	;# 
   682  0018                     	;# 
   683  0019                     	;# 
   684  001A                     	;# 
   685  001B                     	;# 
   686  001B                     	;# 
   687  001C                     	;# 
   688  001D                     	;# 
   689  001E                     	;# 
   690  001F                     	;# 
   691  0081                     	;# 
   692  0085                     	;# 
   693  0086                     	;# 
   694  0087                     	;# 
   695  0088                     	;# 
   696  0089                     	;# 
   697  008C                     	;# 
   698  008D                     	;# 
   699  008E                     	;# 
   700  008F                     	;# 
   701  0090                     	;# 
   702  0091                     	;# 
   703  0092                     	;# 
   704  0093                     	;# 
   705  0093                     	;# 
   706  0093                     	;# 
   707  0094                     	;# 
   708  0095                     	;# 
   709  0096                     	;# 
   710  0097                     	;# 
   711  0098                     	;# 
   712  0099                     	;# 
   713  009A                     	;# 
   714  009B                     	;# 
   715  009C                     	;# 
   716  009D                     	;# 
   717  009E                     	;# 
   718  009F                     	;# 
   719  0105                     	;# 
   720  0107                     	;# 
   721  0108                     	;# 
   722  0109                     	;# 
   723  010C                     	;# 
   724  010C                     	;# 
   725  010D                     	;# 
   726  010E                     	;# 
   727  010F                     	;# 
   728  0185                     	;# 
   729  0187                     	;# 
   730  0188                     	;# 
   731  0189                     	;# 
   732  018C                     	;# 
   733  018D                     	;# 
   734  0000                     	;# 
   735  0001                     	;# 
   736  0002                     	;# 
   737  0003                     	;# 
   738  0004                     	;# 
   739  0005                     	;# 
   740  0006                     	;# 
   741  0007                     	;# 
   742  0008                     	;# 
   743  0009                     	;# 
   744  000A                     	;# 
   745  000B                     	;# 
   746  000C                     	;# 
   747  000D                     	;# 
   748  000E                     	;# 
   749  000E                     	;# 
   750  000F                     	;# 
   751  0010                     	;# 
   752  0011                     	;# 
   753  0012                     	;# 
   754  0013                     	;# 
   755  0014                     	;# 
   756  0015                     	;# 
   757  0015                     	;# 
   758  0016                     	;# 
   759  0017                     	;# 
   760  0018                     	;# 
   761  0019                     	;# 
   762  001A                     	;# 
   763  001B                     	;# 
   764  001B                     	;# 
   765  001C                     	;# 
   766  001D                     	;# 
   767  001E                     	;# 
   768  001F                     	;# 
   769  0081                     	;# 
   770  0085                     	;# 
   771  0086                     	;# 
   772  0087                     	;# 
   773  0088                     	;# 
   774  0089                     	;# 
   775  008C                     	;# 
   776  008D                     	;# 
   777  008E                     	;# 
   778  008F                     	;# 
   779  0090                     	;# 
   780  0091                     	;# 
   781  0092                     	;# 
   782  0093                     	;# 
   783  0093                     	;# 
   784  0093                     	;# 
   785  0094                     	;# 
   786  0095                     	;# 
   787  0096                     	;# 
   788  0097                     	;# 
   789  0098                     	;# 
   790  0099                     	;# 
   791  009A                     	;# 
   792  009B                     	;# 
   793  009C                     	;# 
   794  009D                     	;# 
   795  009E                     	;# 
   796  009F                     	;# 
   797  0105                     	;# 
   798  0107                     	;# 
   799  0108                     	;# 
   800  0109                     	;# 
   801  010C                     	;# 
   802  010C                     	;# 
   803  010D                     	;# 
   804  010E                     	;# 
   805  010F                     	;# 
   806  0185                     	;# 
   807  0187                     	;# 
   808  0188                     	;# 
   809  0189                     	;# 
   810  018C                     	;# 
   811  018D                     	;# 
   812  001A                     _RCREG	set	26
   813  0019                     _TXREG	set	25
   814  0018                     _RCSTAbits	set	24
   815  0001                     _TMR0	set	1
   816  000C                     _PIR1bits	set	12
   817  000B                     _INTCONbits	set	11
   818                           
   819                           	psect	text0
   820  0000                     __ptext0:	
   821  0008                     _LCD	set	8
   822  0007                     _PORTCbits	set	7
   823  0006                     _PORTBbits	set	6
   824  0017                     _CCP1CON	set	23
   825  0006                     _PORTB	set	6
   826  0099                     _SPBRbits	set	153
   827  0094                     _SSPSTATbits	set	148
   828  0098                     _TXSTAbits	set	152
   829  0081                     _OPTION_REGbits	set	129
   830  0085                     _TRISAbits	set	133
   831  008C                     _PIE1bits	set	140
   832  0088                     _TRISD	set	136
   833  0087                     _TRISCbits	set	135
   834  0086                     _TRISB	set	134
   835  0187                     _BAUDCTLbits	set	391
   836  0188                     _ANSEL	set	392
   837  0189                     _ANSELH	set	393
   838                           
   839                           	psect	strings
   840  1800                     __pstrings:	
   841  1800                     stringtab:	
   842  1800                     __stringtab:	
   843                           
   844                           ;	String table - string pointers are 2 bytes each
   845  1800  1BFF               	btfsc	btemp+1,7
   846  1801  280A               	ljmp	stringcode
   847  1802  1383               	bcf	3,7
   848  1803  187F               	btfsc	btemp+1,0
   849  1804  1783               	bsf	3,7
   850  1805  0800               	movf	0,w
   851  1806  0A84               	incf	4,f
   852  1807  1903               	skipnz
   853  1808  0AFF               	incf	btemp+1,f
   854  1809  0008               	return
   855  180A                     stringcode:	
   856  180A  087F               	movf	btemp+1,w
   857  180B  397F               	andlw	127
   858  180C  008A               	movwf	10
   859  180D  0804               	movf	4,w
   860  180E  0A84               	incf	4,f
   861  180F  1903               	skipnz
   862  1810  0AFF               	incf	btemp+1,f
   863  1811  0082               	movwf	2
   864  1812                     __stringbase:	
   865  1812                     __end_of__stringtab:	
   866                           
   867                           	psect	stringtext
   868  0600                     __pstringtext:	
   869  0600                     STR_100:	
   870  0600  3441               	retlw	65	;'A'
   871  0601  3454               	retlw	84	;'T'
   872  0602  342B               	retlw	43	;'+'
   873  0603  3450               	retlw	80	;'P'
   874  0604  3441               	retlw	65	;'A'
   875  0605  3449               	retlw	73	;'I'
   876  0606  3452               	retlw	82	;'R'
   877  0607  343D               	retlw	61	;'='
   878  0608  3433               	retlw	51	;'3'
   879  0609  3444               	retlw	68	;'D'
   880  060A  3442               	retlw	66	;'B'
   881  060B  3441               	retlw	65	;'A'
   882  060C  342C               	retlw	44	;','
   883  060D  3438               	retlw	56	;'8'
   884  060E  3438               	retlw	56	;'8'
   885  060F  342C               	retlw	44	;','
   886  0610  3436               	retlw	54	;'6'
   887  0611  3438               	retlw	56	;'8'
   888  0612  3437               	retlw	55	;'7'
   889  0613  3441               	retlw	65	;'A'
   890  0614  3437               	retlw	55	;'7'
   891  0615  3434               	retlw	52	;'4'
   892  0616  342C               	retlw	44	;','
   893  0617  3432               	retlw	50	;'2'
   894  0618  3430               	retlw	48	;'0'
   895  0619  340D               	retlw	13
   896  061A  340A               	retlw	10
   897  061B  3400               	retlw	0
   898  061C                     STR_106:	
   899  061C  3441               	retlw	65	;'A'
   900  061D  3454               	retlw	84	;'T'
   901  061E  342B               	retlw	43	;'+'
   902  061F  3450               	retlw	80	;'P'
   903  0620  3441               	retlw	65	;'A'
   904  0621  3449               	retlw	73	;'I'
   905  0622  3452               	retlw	82	;'R'
   906  0623  343D               	retlw	61	;'='
   907  0624  3439               	retlw	57	;'9'
   908  0625  3438               	retlw	56	;'8'
   909  0626  3444               	retlw	68	;'D'
   910  0627  3433               	retlw	51	;'3'
   911  0628  342C               	retlw	44	;','
   912  0629  3442               	retlw	66	;'B'
   913  062A  3431               	retlw	49	;'1'
   914  062B  342C               	retlw	44	;','
   915  062C  3446               	retlw	70	;'F'
   916  062D  3444               	retlw	68	;'D'
   917  062E  3434               	retlw	52	;'4'
   918  062F  3433               	retlw	51	;'3'
   919  0630  3445               	retlw	69	;'E'
   920  0631  3439               	retlw	57	;'9'
   921  0632  342C               	retlw	44	;','
   922  0633  3432               	retlw	50	;'2'
   923  0634  3430               	retlw	48	;'0'
   924  0635  340D               	retlw	13
   925  0636  340A               	retlw	10
   926  0637  3400               	retlw	0
   927  0638                     STR_103:	
   928  0638  3441               	retlw	65	;'A'
   929  0639  3454               	retlw	84	;'T'
   930  063A  342B               	retlw	43	;'+'
   931  063B  3450               	retlw	80	;'P'
   932  063C  3441               	retlw	65	;'A'
   933  063D  3449               	retlw	73	;'I'
   934  063E  3452               	retlw	82	;'R'
   935  063F  343D               	retlw	61	;'='
   936  0640  3430               	retlw	48	;'0'
   937  0641  3430               	retlw	48	;'0'
   938  0642  3431               	retlw	49	;'1'
   939  0643  3433               	retlw	51	;'3'
   940  0644  342C               	retlw	44	;','
   941  0645  3445               	retlw	69	;'E'
   942  0646  3446               	retlw	70	;'F'
   943  0647  342C               	retlw	44	;','
   944  0648  3430               	retlw	48	;'0'
   945  0649  3430               	retlw	48	;'0'
   946  064A  3431               	retlw	49	;'1'
   947  064B  3434               	retlw	52	;'4'
   948  064C  3442               	retlw	66	;'B'
   949  064D  3442               	retlw	66	;'B'
   950  064E  342C               	retlw	44	;','
   951  064F  3432               	retlw	50	;'2'
   952  0650  3430               	retlw	48	;'0'
   953  0651  340D               	retlw	13
   954  0652  340A               	retlw	10
   955  0653  3400               	retlw	0
   956  0654                     STR_102:	
   957  0654  3441               	retlw	65	;'A'
   958  0655  3454               	retlw	84	;'T'
   959  0656  342B               	retlw	43	;'+'
   960  0657  3442               	retlw	66	;'B'
   961  0658  3449               	retlw	73	;'I'
   962  0659  344E               	retlw	78	;'N'
   963  065A  3444               	retlw	68	;'D'
   964  065B  343D               	retlw	61	;'='
   965  065C  3433               	retlw	51	;'3'
   966  065D  3444               	retlw	68	;'D'
   967  065E  3442               	retlw	66	;'B'
   968  065F  3441               	retlw	65	;'A'
   969  0660  342C               	retlw	44	;','
   970  0661  3438               	retlw	56	;'8'
   971  0662  3438               	retlw	56	;'8'
   972  0663  342C               	retlw	44	;','
   973  0664  3436               	retlw	54	;'6'
   974  0665  3438               	retlw	56	;'8'
   975  0666  3437               	retlw	55	;'7'
   976  0667  3441               	retlw	65	;'A'
   977  0668  3437               	retlw	55	;'7'
   978  0669  3434               	retlw	52	;'4'
   979  066A  340D               	retlw	13
   980  066B  340A               	retlw	10
   981  066C  3400               	retlw	0
   982  066D                     STR_101:	
   983  066D  3441               	retlw	65	;'A'
   984  066E  3454               	retlw	84	;'T'
   985  066F  342B               	retlw	43	;'+'
   986  0670  344C               	retlw	76	;'L'
   987  0671  3449               	retlw	73	;'I'
   988  0672  344E               	retlw	78	;'N'
   989  0673  344B               	retlw	75	;'K'
   990  0674  343D               	retlw	61	;'='
   991  0675  3433               	retlw	51	;'3'
   992  0676  3444               	retlw	68	;'D'
   993  0677  3442               	retlw	66	;'B'
   994  0678  3441               	retlw	65	;'A'
   995  0679  342C               	retlw	44	;','
   996  067A  3438               	retlw	56	;'8'
   997  067B  3438               	retlw	56	;'8'
   998  067C  342C               	retlw	44	;','
   999  067D  3436               	retlw	54	;'6'
  1000  067E  3438               	retlw	56	;'8'
  1001  067F  3437               	retlw	55	;'7'
  1002  0680  3441               	retlw	65	;'A'
  1003  0681  3437               	retlw	55	;'7'
  1004  0682  3434               	retlw	52	;'4'
  1005  0683  340D               	retlw	13
  1006  0684  340A               	retlw	10
  1007  0685  3400               	retlw	0
  1008  0686                     STR_108:	
  1009  0686  3441               	retlw	65	;'A'
  1010  0687  3454               	retlw	84	;'T'
  1011  0688  342B               	retlw	43	;'+'
  1012  0689  3442               	retlw	66	;'B'
  1013  068A  3449               	retlw	73	;'I'
  1014  068B  344E               	retlw	78	;'N'
  1015  068C  3444               	retlw	68	;'D'
  1016  068D  343D               	retlw	61	;'='
  1017  068E  3439               	retlw	57	;'9'
  1018  068F  3438               	retlw	56	;'8'
  1019  0690  3444               	retlw	68	;'D'
  1020  0691  3433               	retlw	51	;'3'
  1021  0692  342C               	retlw	44	;','
  1022  0693  3442               	retlw	66	;'B'
  1023  0694  3431               	retlw	49	;'1'
  1024  0695  342C               	retlw	44	;','
  1025  0696  3446               	retlw	70	;'F'
  1026  0697  3444               	retlw	68	;'D'
  1027  0698  3434               	retlw	52	;'4'
  1028  0699  3433               	retlw	51	;'3'
  1029  069A  3445               	retlw	69	;'E'
  1030  069B  3439               	retlw	57	;'9'
  1031  069C  340D               	retlw	13
  1032  069D  340A               	retlw	10
  1033  069E  3400               	retlw	0
  1034  069F                     STR_107:	
  1035  069F  3441               	retlw	65	;'A'
  1036  06A0  3454               	retlw	84	;'T'
  1037  06A1  342B               	retlw	43	;'+'
  1038  06A2  344C               	retlw	76	;'L'
  1039  06A3  3449               	retlw	73	;'I'
  1040  06A4  344E               	retlw	78	;'N'
  1041  06A5  344B               	retlw	75	;'K'
  1042  06A6  343D               	retlw	61	;'='
  1043  06A7  3439               	retlw	57	;'9'
  1044  06A8  3438               	retlw	56	;'8'
  1045  06A9  3444               	retlw	68	;'D'
  1046  06AA  3433               	retlw	51	;'3'
  1047  06AB  342C               	retlw	44	;','
  1048  06AC  3442               	retlw	66	;'B'
  1049  06AD  3431               	retlw	49	;'1'
  1050  06AE  342C               	retlw	44	;','
  1051  06AF  3446               	retlw	70	;'F'
  1052  06B0  3444               	retlw	68	;'D'
  1053  06B1  3434               	retlw	52	;'4'
  1054  06B2  3433               	retlw	51	;'3'
  1055  06B3  3445               	retlw	69	;'E'
  1056  06B4  3439               	retlw	57	;'9'
  1057  06B5  340D               	retlw	13
  1058  06B6  340A               	retlw	10
  1059  06B7  3400               	retlw	0
  1060  06B8                     STR_105:	
  1061  06B8  3441               	retlw	65	;'A'
  1062  06B9  3454               	retlw	84	;'T'
  1063  06BA  342B               	retlw	43	;'+'
  1064  06BB  3442               	retlw	66	;'B'
  1065  06BC  3449               	retlw	73	;'I'
  1066  06BD  344E               	retlw	78	;'N'
  1067  06BE  3444               	retlw	68	;'D'
  1068  06BF  343D               	retlw	61	;'='
  1069  06C0  3430               	retlw	48	;'0'
  1070  06C1  3430               	retlw	48	;'0'
  1071  06C2  3431               	retlw	49	;'1'
  1072  06C3  3433               	retlw	51	;'3'
  1073  06C4  342C               	retlw	44	;','
  1074  06C5  3445               	retlw	69	;'E'
  1075  06C6  3446               	retlw	70	;'F'
  1076  06C7  342C               	retlw	44	;','
  1077  06C8  3430               	retlw	48	;'0'
  1078  06C9  3430               	retlw	48	;'0'
  1079  06CA  3431               	retlw	49	;'1'
  1080  06CB  3434               	retlw	52	;'4'
  1081  06CC  3442               	retlw	66	;'B'
  1082  06CD  3442               	retlw	66	;'B'
  1083  06CE  340D               	retlw	13
  1084  06CF  340A               	retlw	10
  1085  06D0  3400               	retlw	0
  1086  06D1                     STR_104:	
  1087  06D1  3441               	retlw	65	;'A'
  1088  06D2  3454               	retlw	84	;'T'
  1089  06D3  342B               	retlw	43	;'+'
  1090  06D4  344C               	retlw	76	;'L'
  1091  06D5  3449               	retlw	73	;'I'
  1092  06D6  344E               	retlw	78	;'N'
  1093  06D7  344B               	retlw	75	;'K'
  1094  06D8  343D               	retlw	61	;'='
  1095  06D9  3430               	retlw	48	;'0'
  1096  06DA  3430               	retlw	48	;'0'
  1097  06DB  3431               	retlw	49	;'1'
  1098  06DC  3433               	retlw	51	;'3'
  1099  06DD  342C               	retlw	44	;','
  1100  06DE  3445               	retlw	69	;'E'
  1101  06DF  3446               	retlw	70	;'F'
  1102  06E0  342C               	retlw	44	;','
  1103  06E1  3430               	retlw	48	;'0'
  1104  06E2  3430               	retlw	48	;'0'
  1105  06E3  3431               	retlw	49	;'1'
  1106  06E4  3434               	retlw	52	;'4'
  1107  06E5  3442               	retlw	66	;'B'
  1108  06E6  3442               	retlw	66	;'B'
  1109  06E7  340D               	retlw	13
  1110  06E8  340A               	retlw	10
  1111  06E9  3400               	retlw	0
  1112  06EA                     STR_98:	
  1113  06EA  3441               	retlw	65	;'A'
  1114  06EB  3454               	retlw	84	;'T'
  1115  06EC  342B               	retlw	43	;'+'
  1116  06ED  344E               	retlw	78	;'N'
  1117  06EE  3441               	retlw	65	;'A'
  1118  06EF  344D               	retlw	77	;'M'
  1119  06F0  3445               	retlw	69	;'E'
  1120  06F1  343D               	retlw	61	;'='
  1121  06F2  3422               	retlw	34	;'"'
  1122  06F3  3445               	retlw	69	;'E'
  1123  06F4  3473               	retlw	115	;'s'
  1124  06F5  3463               	retlw	99	;'c'
  1125  06F6  3472               	retlw	114	;'r'
  1126  06F7  3461               	retlw	97	;'a'
  1127  06F8  3476               	retlw	118	;'v'
  1128  06F9  346F               	retlw	111	;'o'
  1129  06FA  3422               	retlw	34	;'"'
  1130  06FB  340D               	retlw	13
  1131  06FC  340A               	retlw	10
  1132  06FD  3400               	retlw	0
  1133  06FE                     STR_85:	
  1134  06FE  3441               	retlw	65	;'A'
  1135  06FF  3454               	retlw	84	;'T'
  1136  0700  342B               	retlw	43	;'+'
  1137  0701  3455               	retlw	85	;'U'
  1138  0702  3441               	retlw	65	;'A'
  1139  0703  3452               	retlw	82	;'R'
  1140  0704  3454               	retlw	84	;'T'
  1141  0705  343D               	retlw	61	;'='
  1142  0706  3439               	retlw	57	;'9'
  1143  0707  3436               	retlw	54	;'6'
  1144  0708  3430               	retlw	48	;'0'
  1145  0709  3430               	retlw	48	;'0'
  1146  070A  342C               	retlw	44	;','
  1147  070B  3430               	retlw	48	;'0'
  1148  070C  342C               	retlw	44	;','
  1149  070D  3430               	retlw	48	;'0'
  1150  070E  340D               	retlw	13
  1151  070F  340A               	retlw	10
  1152  0710  3400               	retlw	0
  1153  0711                     STR_118:	
  1154  0711  3420               	retlw	32	;' '
  1155  0712  3420               	retlw	32	;' '
  1156  0713  3420               	retlw	32	;' '
  1157  0714  3420               	retlw	32	;' '
  1158  0715  3454               	retlw	84	;'T'
  1159  0716  3452               	retlw	82	;'R'
  1160  0717  344F               	retlw	79	;'O'
  1161  0718  3443               	retlw	67	;'C'
  1162  0719  3441               	retlw	65	;'A'
  1163  071A  344E               	retlw	78	;'N'
  1164  071B  3444               	retlw	68	;'D'
  1165  071C  344F               	retlw	79	;'O'
  1166  071D  3420               	retlw	32	;' '
  1167  071E  3420               	retlw	32	;' '
  1168  071F  3420               	retlw	32	;' '
  1169  0720  3420               	retlw	32	;' '
  1170  0721  3400               	retlw	0
  1171  0722                     STR_117:	
  1172  0722  3420               	retlw	32	;' '
  1173  0723  3420               	retlw	32	;' '
  1174  0724  3420               	retlw	32	;' '
  1175  0725  3420               	retlw	32	;' '
  1176  0726  3444               	retlw	68	;'D'
  1177  0727  3445               	retlw	69	;'E'
  1178  0728  3420               	retlw	32	;' '
  1179  0729  3444               	retlw	68	;'D'
  1180  072A  3441               	retlw	65	;'A'
  1181  072B  3444               	retlw	68	;'D'
  1182  072C  344F               	retlw	79	;'O'
  1183  072D  3453               	retlw	83	;'S'
  1184  072E  3420               	retlw	32	;' '
  1185  072F  3420               	retlw	32	;' '
  1186  0730  3420               	retlw	32	;' '
  1187  0731  3420               	retlw	32	;' '
  1188  0732  3400               	retlw	0
  1189  0733                     STR_119:	
  1190  0733  3420               	retlw	32	;' '
  1191  0734  3420               	retlw	32	;' '
  1192  0735  3420               	retlw	32	;' '
  1193  0736  3449               	retlw	73	;'I'
  1194  0737  344E               	retlw	78	;'N'
  1195  0738  3446               	retlw	70	;'F'
  1196  0739  344F               	retlw	79	;'O'
  1197  073A  3452               	retlw	82	;'R'
  1198  073B  344D               	retlw	77	;'M'
  1199  073C  3441               	retlw	65	;'A'
  1200  073D  3443               	retlw	67	;'C'
  1201  073E  3441               	retlw	65	;'A'
  1202  073F  344F               	retlw	79	;'O'
  1203  0740  3420               	retlw	32	;' '
  1204  0741  3420               	retlw	32	;' '
  1205  0742  3420               	retlw	32	;' '
  1206  0743  3400               	retlw	0
  1207  0744                     STR_127:	
  1208  0744  3444               	retlw	68	;'D'
  1209  0745  3445               	retlw	69	;'E'
  1210  0746  3453               	retlw	83	;'S'
  1211  0747  3443               	retlw	67	;'C'
  1212  0748  344F               	retlw	79	;'O'
  1213  0749  344E               	retlw	78	;'N'
  1214  074A  3445               	retlw	69	;'E'
  1215  074B  3443               	retlw	67	;'C'
  1216  074C  3454               	retlw	84	;'T'
  1217  074D  3441               	retlw	65	;'A'
  1218  074E  344E               	retlw	78	;'N'
  1219  074F  3444               	retlw	68	;'D'
  1220  0750  344F               	retlw	79	;'O'
  1221  0751  3420               	retlw	32	;' '
  1222  0752  3420               	retlw	32	;' '
  1223  0753  3420               	retlw	32	;' '
  1224  0754  3400               	retlw	0
  1225  0755                     STR_125:	
  1226  0755  3420               	retlw	32	;' '
  1227  0756  3450               	retlw	80	;'P'
  1228  0757  3441               	retlw	65	;'A'
  1229  0758  3452               	retlw	82	;'R'
  1230  0759  3445               	retlw	69	;'E'
  1231  075A  3441               	retlw	65	;'A'
  1232  075B  3452               	retlw	82	;'R'
  1233  075C  3420               	retlw	32	;' '
  1234  075D  3443               	retlw	67	;'C'
  1235  075E  344F               	retlw	79	;'O'
  1236  075F  344D               	retlw	77	;'M'
  1237  0760  3420               	retlw	32	;' '
  1238  0761  3449               	retlw	73	;'I'
  1239  0762  3450               	retlw	80	;'P'
  1240  0763  3420               	retlw	32	;' '
  1241  0764  3420               	retlw	32	;' '
  1242  0765  3400               	retlw	0
  1243  0766                     STR_123:	
  1244  0766  3450               	retlw	80	;'P'
  1245  0767  3441               	retlw	65	;'A'
  1246  0768  3452               	retlw	82	;'R'
  1247  0769  3445               	retlw	69	;'E'
  1248  076A  3441               	retlw	65	;'A'
  1249  076B  3452               	retlw	82	;'R'
  1250  076C  3420               	retlw	32	;' '
  1251  076D  3420               	retlw	32	;' '
  1252  076E  3420               	retlw	32	;' '
  1253  076F  3420               	retlw	32	;' '
  1254  0770  3420               	retlw	32	;' '
  1255  0771  3420               	retlw	32	;' '
  1256  0772  3442               	retlw	66	;'B'
  1257  0773  3454               	retlw	84	;'T'
  1258  0774  3420               	retlw	32	;' '
  1259  0775  3420               	retlw	32	;' '
  1260  0776  3400               	retlw	0
  1261  0777                     STR_124:	
  1262  0777  3444               	retlw	68	;'D'
  1263  0778  3445               	retlw	69	;'E'
  1264  0779  3453               	retlw	83	;'S'
  1265  077A  3443               	retlw	67	;'C'
  1266  077B  344F               	retlw	79	;'O'
  1267  077C  344E               	retlw	78	;'N'
  1268  077D  3445               	retlw	69	;'E'
  1269  077E  3443               	retlw	67	;'C'
  1270  077F  3454               	retlw	84	;'T'
  1271  0780  3441               	retlw	65	;'A'
  1272  0781  3452               	retlw	82	;'R'
  1273  0782  3420               	retlw	32	;' '
  1274  0783  3442               	retlw	66	;'B'
  1275  0784  3454               	retlw	84	;'T'
  1276  0785  3420               	retlw	32	;' '
  1277  0786  3420               	retlw	32	;' '
  1278  0787  3400               	retlw	0
  1279  0788                     STR_116:	
  1280  0788  3420               	retlw	32	;' '
  1281  0789  3443               	retlw	67	;'C'
  1282  078A  344F               	retlw	79	;'O'
  1283  078B  344E               	retlw	78	;'N'
  1284  078C  3446               	retlw	70	;'F'
  1285  078D  3449               	retlw	73	;'I'
  1286  078E  3452               	retlw	82	;'R'
  1287  078F  344D               	retlw	77	;'M'
  1288  0790  3441               	retlw	65	;'A'
  1289  0791  3420               	retlw	32	;' '
  1290  0792  3454               	retlw	84	;'T'
  1291  0793  3452               	retlw	82	;'R'
  1292  0794  344F               	retlw	79	;'O'
  1293  0795  3443               	retlw	67	;'C'
  1294  0796  3441               	retlw	65	;'A'
  1295  0797  3420               	retlw	32	;' '
  1296  0798  3400               	retlw	0
  1297  0799                     STR_126:	
  1298  0799  3431               	retlw	49	;'1'
  1299  079A  3420               	retlw	32	;' '
  1300  079B  3432               	retlw	50	;'2'
  1301  079C  3420               	retlw	32	;' '
  1302  079D  3433               	retlw	51	;'3'
  1303  079E  3420               	retlw	32	;' '
  1304  079F  3434               	retlw	52	;'4'
  1305  07A0  3420               	retlw	32	;' '
  1306  07A1  3420               	retlw	32	;' '
  1307  07A2  3435               	retlw	53	;'5'
  1308  07A3  3420               	retlw	32	;' '
  1309  07A4  3436               	retlw	54	;'6'
  1310  07A5  3420               	retlw	32	;' '
  1311  07A6  3437               	retlw	55	;'7'
  1312  07A7  3420               	retlw	32	;' '
  1313  07A8  3438               	retlw	56	;'8'
  1314  07A9  3400               	retlw	0
  1315  07AA                     STR_122:	
  1316  07AA  3442               	retlw	66	;'B'
  1317  07AB  344C               	retlw	76	;'L'
  1318  07AC  3455               	retlw	85	;'U'
  1319  07AD  3445               	retlw	69	;'E'
  1320  07AE  3454               	retlw	84	;'T'
  1321  07AF  344F               	retlw	79	;'O'
  1322  07B0  344F               	retlw	79	;'O'
  1323  07B1  3454               	retlw	84	;'T'
  1324  07B2  3448               	retlw	72	;'H'
  1325  07B3  3420               	retlw	32	;' '
  1326  07B4  343C               	retlw	60	;'<'
  1327  07B5  342D               	retlw	45	;'-'
  1328  07B6  342D               	retlw	45	;'-'
  1329  07B7  342D               	retlw	45	;'-'
  1330  07B8  342D               	retlw	45	;'-'
  1331  07B9  343E               	retlw	62	;'>'
  1332  07BA  3400               	retlw	0
  1333  07BB                     STR_110:	
  1334  07BB  344D               	retlw	77	;'M'
  1335  07BC  344F               	retlw	79	;'O'
  1336  07BD  3444               	retlw	68	;'D'
  1337  07BE  3455               	retlw	85	;'U'
  1338  07BF  344C               	retlw	76	;'L'
  1339  07C0  344F               	retlw	79	;'O'
  1340  07C1  3420               	retlw	32	;' '
  1341  07C2  3420               	retlw	32	;' '
  1342  07C3  3444               	retlw	68	;'D'
  1343  07C4  3445               	retlw	69	;'E'
  1344  07C5  3453               	retlw	83	;'S'
  1345  07C6  3445               	retlw	69	;'E'
  1346  07C7  344A               	retlw	74	;'J'
  1347  07C8  3441               	retlw	65	;'A'
  1348  07C9  3444               	retlw	68	;'D'
  1349  07CA  344F               	retlw	79	;'O'
  1350  07CB  3400               	retlw	0
  1351  07CC                     STR_111:	
  1352  07CC  3445               	retlw	69	;'E'
  1353  07CD  3453               	retlw	83	;'S'
  1354  07CE  3454               	retlw	84	;'T'
  1355  07CF  3445               	retlw	69	;'E'
  1356  07D0  3449               	retlw	73	;'I'
  1357  07D1  3452               	retlw	82	;'R'
  1358  07D2  3441               	retlw	65	;'A'
  1359  07D3  3420               	retlw	32	;' '
  1360  07D4  3420               	retlw	32	;' '
  1361  07D5  3420               	retlw	32	;' '
  1362  07D6  3420               	retlw	32	;' '
  1363  07D7  3420               	retlw	32	;' '
  1364  07D8  3420               	retlw	32	;' '
  1365  07D9  3443               	retlw	67	;'C'
  1366  07DA  344C               	retlw	76	;'L'
  1367  07DB  3450               	retlw	80	;'P'
  1368  07DC  3400               	retlw	0
  1369  07DD                     STR_91:	
  1370  07DD  3441               	retlw	65	;'A'
  1371  07DE  3454               	retlw	84	;'T'
  1372  07DF  342B               	retlw	43	;'+'
  1373  07E0  3450               	retlw	80	;'P'
  1374  07E1  3453               	retlw	83	;'S'
  1375  07E2  3457               	retlw	87	;'W'
  1376  07E3  3444               	retlw	68	;'D'
  1377  07E4  343D               	retlw	61	;'='
  1378  07E5  3422               	retlw	34	;'"'
  1379  07E6  3430               	retlw	48	;'0'
  1380  07E7  3439               	retlw	57	;'9'
  1381  07E8  3431               	retlw	49	;'1'
  1382  07E9  3430               	retlw	48	;'0'
  1383  07EA  3422               	retlw	34	;'"'
  1384  07EB  340D               	retlw	13
  1385  07EC  340A               	retlw	10
  1386  07ED  3400               	retlw	0
  1387  07EE                     STR_68:	
  1388  07EE  3420               	retlw	32	;' '
  1389  07EF  3420               	retlw	32	;' '
  1390  07F0  3420               	retlw	32	;' '
  1391  07F1  3420               	retlw	32	;' '
  1392  07F2  3420               	retlw	32	;' '
  1393  07F3  3420               	retlw	32	;' '
  1394  07F4  3420               	retlw	32	;' '
  1395  07F5  3420               	retlw	32	;' '
  1396  07F6  3420               	retlw	32	;' '
  1397  07F7  3420               	retlw	32	;' '
  1398  07F8  3420               	retlw	32	;' '
  1399  07F9  3420               	retlw	32	;' '
  1400  07FA  3420               	retlw	32	;' '
  1401  07FB  3420               	retlw	32	;' '
  1402  07FC  3420               	retlw	32	;' '
  1403  07FD  3420               	retlw	32	;' '
  1404  07FE  3400               	retlw	0
  1405  07FF                     STR_77:	
  1406  07FF  3420               	retlw	32	;' '
  1407  0800  3420               	retlw	32	;' '
  1408  0801  3420               	retlw	32	;' '
  1409  0802  3420               	retlw	32	;' '
  1410  0803  3420               	retlw	32	;' '
  1411  0804  3420               	retlw	32	;' '
  1412  0805  3441               	retlw	65	;'A'
  1413  0806  3452               	retlw	82	;'R'
  1414  0807  3452               	retlw	82	;'R'
  1415  0808  3449               	retlw	73	;'I'
  1416  0809  3420               	retlw	32	;' '
  1417  080A  3420               	retlw	32	;' '
  1418  080B  3420               	retlw	32	;' '
  1419  080C  3420               	retlw	32	;' '
  1420  080D  3420               	retlw	32	;' '
  1421  080E  3420               	retlw	32	;' '
  1422  080F  3400               	retlw	0
  1423  0810                     STR_78:	
  1424  0810  3420               	retlw	32	;' '
  1425  0811  3420               	retlw	32	;' '
  1426  0812  3420               	retlw	32	;' '
  1427  0813  3420               	retlw	32	;' '
  1428  0814  3420               	retlw	32	;' '
  1429  0815  3445               	retlw	69	;'E'
  1430  0816  3447               	retlw	71	;'G'
  1431  0817  3455               	retlw	85	;'U'
  1432  0818  3441               	retlw	65	;'A'
  1433  0819  3441               	retlw	65	;'A'
  1434  081A  3441               	retlw	65	;'A'
  1435  081B  3420               	retlw	32	;' '
  1436  081C  3420               	retlw	32	;' '
  1437  081D  3420               	retlw	32	;' '
  1438  081E  3420               	retlw	32	;' '
  1439  081F  3420               	retlw	32	;' '
  1440  0820  3400               	retlw	0
  1441  0821                     STR_73:	
  1442  0821  3445               	retlw	69	;'E'
  1443  0822  3452               	retlw	82	;'R'
  1444  0823  3449               	retlw	73	;'I'
  1445  0824  3443               	retlw	67	;'C'
  1446  0825  3420               	retlw	32	;' '
  1447  0826  3453               	retlw	83	;'S'
  1448  0827  3441               	retlw	65	;'A'
  1449  0828  344E               	retlw	78	;'N'
  1450  0829  3454               	retlw	84	;'T'
  1451  082A  344F               	retlw	79	;'O'
  1452  082B  3453               	retlw	83	;'S'
  1453  082C  3420               	retlw	32	;' '
  1454  082D  3420               	retlw	32	;' '
  1455  082E  3420               	retlw	32	;' '
  1456  082F  3420               	retlw	32	;' '
  1457  0830  3420               	retlw	32	;' '
  1458  0831  3400               	retlw	0
  1459  0832                     STR_69:	
  1460  0832  3447               	retlw	71	;'G'
  1461  0833  3455               	retlw	85	;'U'
  1462  0834  3449               	retlw	73	;'I'
  1463  0835  342E               	retlw	46	;'.'
  1464  0836  3420               	retlw	32	;' '
  1465  0837  3452               	retlw	82	;'R'
  1466  0838  3449               	retlw	73	;'I'
  1467  0839  3442               	retlw	66	;'B'
  1468  083A  3445               	retlw	69	;'E'
  1469  083B  3449               	retlw	73	;'I'
  1470  083C  3452               	retlw	82	;'R'
  1471  083D  344F               	retlw	79	;'O'
  1472  083E  3420               	retlw	32	;' '
  1473  083F  3420               	retlw	32	;' '
  1474  0840  3420               	retlw	32	;' '
  1475  0841  3420               	retlw	32	;' '
  1476  0842  3400               	retlw	0
  1477  0843                     STR_71:	
  1478  0843  3447               	retlw	71	;'G'
  1479  0844  3441               	retlw	65	;'A'
  1480  0845  3442               	retlw	66	;'B'
  1481  0846  3452               	retlw	82	;'R'
  1482  0847  3449               	retlw	73	;'I'
  1483  0848  3445               	retlw	69	;'E'
  1484  0849  344C               	retlw	76	;'L'
  1485  084A  3420               	retlw	32	;' '
  1486  084B  3447               	retlw	71	;'G'
  1487  084C  3445               	retlw	69	;'E'
  1488  084D  344E               	retlw	78	;'N'
  1489  084E  3455               	retlw	85	;'U'
  1490  084F  3420               	retlw	32	;' '
  1491  0850  3420               	retlw	32	;' '
  1492  0851  3420               	retlw	32	;' '
  1493  0852  3420               	retlw	32	;' '
  1494  0853  3400               	retlw	0
  1495  0854                     STR_6:	
  1496  0854  3420               	retlw	32	;' '
  1497  0855  3420               	retlw	32	;' '
  1498  0856  3420               	retlw	32	;' '
  1499  0857  3420               	retlw	32	;' '
  1500  0858  3454               	retlw	84	;'T'
  1501  0859  3465               	retlw	101	;'e'
  1502  085A  3463               	retlw	99	;'c'
  1503  085B  346E               	retlw	110	;'n'
  1504  085C  346F               	retlw	111	;'o'
  1505  085D  346C               	retlw	108	;'l'
  1506  085E  346F               	retlw	111	;'o'
  1507  085F  3467               	retlw	103	;'g'
  1508  0860  3420               	retlw	32	;' '
  1509  0861  3420               	retlw	32	;' '
  1510  0862  3420               	retlw	32	;' '
  1511  0863  3420               	retlw	32	;' '
  1512  0864  3400               	retlw	0
  1513  0865                     STR_8:	
  1514  0865  3420               	retlw	32	;' '
  1515  0866  3420               	retlw	32	;' '
  1516  0867  3420               	retlw	32	;' '
  1517  0868  342D               	retlw	45	;'-'
  1518  0869  342D               	retlw	45	;'-'
  1519  086A  342D               	retlw	45	;'-'
  1520  086B  342D               	retlw	45	;'-'
  1521  086C  342D               	retlw	45	;'-'
  1522  086D  342D               	retlw	45	;'-'
  1523  086E  342D               	retlw	45	;'-'
  1524  086F  342D               	retlw	45	;'-'
  1525  0870  342D               	retlw	45	;'-'
  1526  0871  342D               	retlw	45	;'-'
  1527  0872  3420               	retlw	32	;' '
  1528  0873  3420               	retlw	32	;' '
  1529  0874  3420               	retlw	32	;' '
  1530  0875  3400               	retlw	0
  1531  0876                     STR_66:	
  1532  0876  3457               	retlw	87	;'W'
  1533  0877  3441               	retlw	65	;'A'
  1534  0878  344C               	retlw	76	;'L'
  1535  0879  344C               	retlw	76	;'L'
  1536  087A  3441               	retlw	65	;'A'
  1537  087B  3443               	retlw	67	;'C'
  1538  087C  3445               	retlw	69	;'E'
  1539  087D  3420               	retlw	32	;' '
  1540  087E  3450               	retlw	80	;'P'
  1541  087F  3449               	retlw	73	;'I'
  1542  0880  3452               	retlw	82	;'R'
  1543  0881  3445               	retlw	69	;'E'
  1544  0882  3453               	retlw	83	;'S'
  1545  0883  3420               	retlw	32	;' '
  1546  0884  3420               	retlw	32	;' '
  1547  0885  3420               	retlw	32	;' '
  1548  0886  3400               	retlw	0
  1549  0887                     STR_75:	
  1550  0887  344C               	retlw	76	;'L'
  1551  0888  3449               	retlw	73	;'I'
  1552  0889  344E               	retlw	78	;'N'
  1553  088A  3443               	retlw	67	;'C'
  1554  088B  344F               	retlw	79	;'O'
  1555  088C  344E               	retlw	78	;'N'
  1556  088D  3420               	retlw	32	;' '
  1557  088E  344E               	retlw	78	;'N'
  1558  088F  344F               	retlw	79	;'O'
  1559  0890  3456               	retlw	86	;'V'
  1560  0891  3441               	retlw	65	;'A'
  1561  0892  3449               	retlw	73	;'I'
  1562  0893  3453               	retlw	83	;'S'
  1563  0894  3420               	retlw	32	;' '
  1564  0895  3420               	retlw	32	;' '
  1565  0896  3420               	retlw	32	;' '
  1566  0897  3400               	retlw	0
  1567  0898                     STR_9:	
  1568  0898  3420               	retlw	32	;' '
  1569  0899  3420               	retlw	32	;' '
  1570  089A  3420               	retlw	32	;' '
  1571  089B  3450               	retlw	80	;'P'
  1572  089C  3461               	retlw	97	;'a'
  1573  089D  3472               	retlw	114	;'r'
  1574  089E  3465               	retlw	101	;'e'
  1575  089F  3461               	retlw	97	;'a'
  1576  08A0  346D               	retlw	109	;'m'
  1577  08A1  3465               	retlw	101	;'e'
  1578  08A2  346E               	retlw	110	;'n'
  1579  08A3  3474               	retlw	116	;'t'
  1580  08A4  346F               	retlw	111	;'o'
  1581  08A5  3420               	retlw	32	;' '
  1582  08A6  3420               	retlw	32	;' '
  1583  08A7  3420               	retlw	32	;' '
  1584  08A8  3400               	retlw	0
  1585  08A9                     STR_7:	
  1586  08A9  3420               	retlw	32	;' '
  1587  08AA  3420               	retlw	32	;' '
  1588  08AB  3420               	retlw	32	;' '
  1589  08AC  3443               	retlw	67	;'C'
  1590  08AD  346F               	retlw	111	;'o'
  1591  08AE  346E               	retlw	110	;'n'
  1592  08AF  3466               	retlw	102	;'f'
  1593  08B0  3469               	retlw	105	;'i'
  1594  08B1  3467               	retlw	103	;'g'
  1595  08B2  3475               	retlw	117	;'u'
  1596  08B3  3472               	retlw	114	;'r'
  1597  08B4  3461               	retlw	97	;'a'
  1598  08B5  3472               	retlw	114	;'r'
  1599  08B6  3420               	retlw	32	;' '
  1600  08B7  3420               	retlw	32	;' '
  1601  08B8  3420               	retlw	32	;' '
  1602  08B9  3400               	retlw	0
  1603  08BA                     STR_67:	
  1604  08BA  344D               	retlw	77	;'M'
  1605  08BB  3441               	retlw	65	;'A'
  1606  08BC  3454               	retlw	84	;'T'
  1607  08BD  3445               	retlw	69	;'E'
  1608  08BE  3455               	retlw	85	;'U'
  1609  08BF  3453               	retlw	83	;'S'
  1610  08C0  3420               	retlw	32	;' '
  1611  08C1  3450               	retlw	80	;'P'
  1612  08C2  3449               	retlw	73	;'I'
  1613  08C3  344E               	retlw	78	;'N'
  1614  08C4  3448               	retlw	72	;'H'
  1615  08C5  3445               	retlw	69	;'E'
  1616  08C6  3449               	retlw	73	;'I'
  1617  08C7  3452               	retlw	82	;'R'
  1618  08C8  344F               	retlw	79	;'O'
  1619  08C9  3420               	retlw	32	;' '
  1620  08CA  3400               	retlw	0
  1621  08CB                     STR_11:	
  1622  08CB  3420               	retlw	32	;' '
  1623  08CC  3445               	retlw	69	;'E'
  1624  08CD  346E               	retlw	110	;'n'
  1625  08CE  3476               	retlw	118	;'v'
  1626  08CF  3469               	retlw	105	;'i'
  1627  08D0  346F               	retlw	111	;'o'
  1628  08D1  3420               	retlw	32	;' '
  1629  08D2  3464               	retlw	100	;'d'
  1630  08D3  3465               	retlw	101	;'e'
  1631  08D4  3420               	retlw	32	;' '
  1632  08D5  3444               	retlw	68	;'D'
  1633  08D6  3461               	retlw	97	;'a'
  1634  08D7  3464               	retlw	100	;'d'
  1635  08D8  346F               	retlw	111	;'o'
  1636  08D9  3473               	retlw	115	;'s'
  1637  08DA  3420               	retlw	32	;' '
  1638  08DB  3400               	retlw	0
  1639  08DC                     STR_80:	
  1640  08DC  3421               	retlw	33	;'!'
  1641  08DD  342A               	retlw	42	;'*'
  1642  08DE  342D               	retlw	45	;'-'
  1643  08DF  342A               	retlw	42	;'*'
  1644  08E0  3420               	retlw	32	;' '
  1645  08E1  3445               	retlw	69	;'E'
  1646  08E2  3447               	retlw	71	;'G'
  1647  08E3  3455               	retlw	85	;'U'
  1648  08E4  3441               	retlw	65	;'A'
  1649  08E5  3441               	retlw	65	;'A'
  1650  08E6  3441               	retlw	65	;'A'
  1651  08E7  3420               	retlw	32	;' '
  1652  08E8  342A               	retlw	42	;'*'
  1653  08E9  342D               	retlw	45	;'-'
  1654  08EA  342A               	retlw	42	;'*'
  1655  08EB  3421               	retlw	33	;'!'
  1656  08EC  3400               	retlw	0
  1657  08ED                     STR_82:	
  1658  08ED  3431               	retlw	49	;'1'
  1659  08EE  3433               	retlw	51	;'3'
  1660  08EF  3420               	retlw	32	;' '
  1661  08F0  3420               	retlw	32	;' '
  1662  08F1  3420               	retlw	32	;' '
  1663  08F2  3445               	retlw	69	;'E'
  1664  08F3  3447               	retlw	71	;'G'
  1665  08F4  3455               	retlw	85	;'U'
  1666  08F5  3441               	retlw	65	;'A'
  1667  08F6  3441               	retlw	65	;'A'
  1668  08F7  3441               	retlw	65	;'A'
  1669  08F8  3420               	retlw	32	;' '
  1670  08F9  3420               	retlw	32	;' '
  1671  08FA  3420               	retlw	32	;' '
  1672  08FB  3435               	retlw	53	;'5'
  1673  08FC  3430               	retlw	48	;'0'
  1674  08FD  3400               	retlw	0
  1675  08FE                     STR_81:	
  1676  08FE  3435               	retlw	53	;'5'
  1677  08FF  3430               	retlw	48	;'0'
  1678  0900  3420               	retlw	32	;' '
  1679  0901  3420               	retlw	32	;' '
  1680  0902  3420               	retlw	32	;' '
  1681  0903  3420               	retlw	32	;' '
  1682  0904  3441               	retlw	65	;'A'
  1683  0905  3452               	retlw	82	;'R'
  1684  0906  3452               	retlw	82	;'R'
  1685  0907  3449               	retlw	73	;'I'
  1686  0908  3420               	retlw	32	;' '
  1687  0909  3420               	retlw	32	;' '
  1688  090A  3420               	retlw	32	;' '
  1689  090B  3420               	retlw	32	;' '
  1690  090C  3431               	retlw	49	;'1'
  1691  090D  3433               	retlw	51	;'3'
  1692  090E  3400               	retlw	0
  1693  090F                     STR_83:	
  1694  090F  343A               	retlw	58	;':'
  1695  0910  3433               	retlw	51	;'3'
  1696  0911  3420               	retlw	32	;' '
  1697  0912  342A               	retlw	42	;'*'
  1698  0913  342D               	retlw	45	;'-'
  1699  0914  342A               	retlw	42	;'*'
  1700  0915  3441               	retlw	65	;'A'
  1701  0916  3452               	retlw	82	;'R'
  1702  0917  3452               	retlw	82	;'R'
  1703  0918  3449               	retlw	73	;'I'
  1704  0919  342A               	retlw	42	;'*'
  1705  091A  342D               	retlw	45	;'-'
  1706  091B  342A               	retlw	42	;'*'
  1707  091C  3420               	retlw	32	;' '
  1708  091D  3458               	retlw	88	;'X'
  1709  091E  3444               	retlw	68	;'D'
  1710  091F  3400               	retlw	0
  1711  0920                     STR_79:	
  1712  0920  3458               	retlw	88	;'X'
  1713  0921  3444               	retlw	68	;'D'
  1714  0922  3420               	retlw	32	;' '
  1715  0923  342A               	retlw	42	;'*'
  1716  0924  342D               	retlw	45	;'-'
  1717  0925  342A               	retlw	42	;'*'
  1718  0926  3441               	retlw	65	;'A'
  1719  0927  3452               	retlw	82	;'R'
  1720  0928  3452               	retlw	82	;'R'
  1721  0929  3449               	retlw	73	;'I'
  1722  092A  342A               	retlw	42	;'*'
  1723  092B  342D               	retlw	45	;'-'
  1724  092C  342A               	retlw	42	;'*'
  1725  092D  3420               	retlw	32	;' '
  1726  092E  3458               	retlw	88	;'X'
  1727  092F  3444               	retlw	68	;'D'
  1728  0930  3400               	retlw	0
  1729  0931                     STR_1:	
  1730  0931  345F               	retlw	95	;'_'
  1731  0932  345F               	retlw	95	;'_'
  1732  0933  3420               	retlw	32	;' '
  1733  0934  3420               	retlw	32	;' '
  1734  0935  3420               	retlw	32	;' '
  1735  0936  3420               	retlw	32	;' '
  1736  0937  3420               	retlw	32	;' '
  1737  0938  3420               	retlw	32	;' '
  1738  0939  3420               	retlw	32	;' '
  1739  093A  3420               	retlw	32	;' '
  1740  093B  3420               	retlw	32	;' '
  1741  093C  3420               	retlw	32	;' '
  1742  093D  3420               	retlw	32	;' '
  1743  093E  3420               	retlw	32	;' '
  1744  093F  345F               	retlw	95	;'_'
  1745  0940  345F               	retlw	95	;'_'
  1746  0941  3400               	retlw	0
  1747  0942                     STR_88:	
  1748  0942  3441               	retlw	65	;'A'
  1749  0943  3454               	retlw	84	;'T'
  1750  0944  342B               	retlw	43	;'+'
  1751  0945  3449               	retlw	73	;'I'
  1752  0946  344E               	retlw	78	;'N'
  1753  0947  3451               	retlw	81	;'Q'
  1754  0948  344D               	retlw	77	;'M'
  1755  0949  343D               	retlw	61	;'='
  1756  094A  3430               	retlw	48	;'0'
  1757  094B  342C               	retlw	44	;','
  1758  094C  3435               	retlw	53	;'5'
  1759  094D  342C               	retlw	44	;','
  1760  094E  3435               	retlw	53	;'5'
  1761  094F  340D               	retlw	13
  1762  0950  340A               	retlw	10
  1763  0951  3400               	retlw	0
  1764  0952                     STR_121:	
  1765  0952  3446               	retlw	70	;'F'
  1766  0953  3472               	retlw	114	;'r'
  1767  0954  3461               	retlw	97	;'a'
  1768  0955  346D               	retlw	109	;'m'
  1769  0956  3469               	retlw	105	;'i'
  1770  0957  346E               	retlw	110	;'n'
  1771  0958  3467               	retlw	103	;'g'
  1772  0959  3420               	retlw	32	;' '
  1773  095A  3445               	retlw	69	;'E'
  1774  095B  3472               	retlw	114	;'r'
  1775  095C  3472               	retlw	114	;'r'
  1776  095D  346F               	retlw	111	;'o'
  1777  095E  3472               	retlw	114	;'r'
  1778  095F  3400               	retlw	0
  1779  0960                     STR_120:	
  1780  0960  344F               	retlw	79	;'O'
  1781  0961  3476               	retlw	118	;'v'
  1782  0962  3465               	retlw	101	;'e'
  1783  0963  3472               	retlw	114	;'r'
  1784  0964  3472               	retlw	114	;'r'
  1785  0965  3475               	retlw	117	;'u'
  1786  0966  346E               	retlw	110	;'n'
  1787  0967  3420               	retlw	32	;' '
  1788  0968  3445               	retlw	69	;'E'
  1789  0969  3472               	retlw	114	;'r'
  1790  096A  3472               	retlw	114	;'r'
  1791  096B  346F               	retlw	111	;'o'
  1792  096C  3472               	retlw	114	;'r'
  1793  096D  3400               	retlw	0
  1794  096E                     STR_113:	
  1795  096E  3420               	retlw	32	;' '
  1796  096F  3450               	retlw	80	;'P'
  1797  0970  342F               	retlw	47	;'/'
  1798  0971  3420               	retlw	32	;' '
  1799  0972  3445               	retlw	69	;'E'
  1800  0973  3473               	retlw	115	;'s'
  1801  0974  3474               	retlw	116	;'t'
  1802  0975  3465               	retlw	101	;'e'
  1803  0976  3469               	retlw	105	;'i'
  1804  0977  3472               	retlw	114	;'r'
  1805  0978  3461               	retlw	97	;'a'
  1806  0979  3420               	retlw	32	;' '
  1807  097A  3400               	retlw	0
  1808  097B                     STR_87:	
  1809  097B  3441               	retlw	65	;'A'
  1810  097C  3454               	retlw	84	;'T'
  1811  097D  342B               	retlw	43	;'+'
  1812  097E  3443               	retlw	67	;'C'
  1813  097F  344D               	retlw	77	;'M'
  1814  0980  344F               	retlw	79	;'O'
  1815  0981  3444               	retlw	68	;'D'
  1816  0982  3445               	retlw	69	;'E'
  1817  0983  343D               	retlw	61	;'='
  1818  0984  3430               	retlw	48	;'0'
  1819  0985  340D               	retlw	13
  1820  0986  340A               	retlw	10
  1821  0987  3400               	retlw	0
  1822  0988                     STR_94:	
  1823  0988  3441               	retlw	65	;'A'
  1824  0989  3454               	retlw	84	;'T'
  1825  098A  342B               	retlw	43	;'+'
  1826  098B  3452               	retlw	82	;'R'
  1827  098C  344F               	retlw	79	;'O'
  1828  098D  344C               	retlw	76	;'L'
  1829  098E  3445               	retlw	69	;'E'
  1830  098F  343D               	retlw	61	;'='
  1831  0990  3430               	retlw	48	;'0'
  1832  0991  340D               	retlw	13
  1833  0992  340A               	retlw	10
  1834  0993  3400               	retlw	0
  1835  0994                     STR_86:	
  1836  0994  3441               	retlw	65	;'A'
  1837  0995  3454               	retlw	84	;'T'
  1838  0996  342B               	retlw	43	;'+'
  1839  0997  3452               	retlw	82	;'R'
  1840  0998  344F               	retlw	79	;'O'
  1841  0999  344C               	retlw	76	;'L'
  1842  099A  3445               	retlw	69	;'E'
  1843  099B  343D               	retlw	61	;'='
  1844  099C  3431               	retlw	49	;'1'
  1845  099D  340D               	retlw	13
  1846  099E  340A               	retlw	10
  1847  099F  3400               	retlw	0
  1848  09A0                     STR_112:	
  1849  09A0  3420               	retlw	32	;' '
  1850  09A1  3445               	retlw	69	;'E'
  1851  09A2  346E               	retlw	110	;'n'
  1852  09A3  3476               	retlw	118	;'v'
  1853  09A4  3469               	retlw	105	;'i'
  1854  09A5  3461               	retlw	97	;'a'
  1855  09A6  346E               	retlw	110	;'n'
  1856  09A7  3464               	retlw	100	;'d'
  1857  09A8  346F               	retlw	111	;'o'
  1858  09A9  3420               	retlw	32	;' '
  1859  09AA  3400               	retlw	0
  1860  09AB                     STR_93:	
  1861  09AB  3441               	retlw	65	;'A'
  1862  09AC  3454               	retlw	84	;'T'
  1863  09AD  342B               	retlw	43	;'+'
  1864  09AE  3452               	retlw	82	;'R'
  1865  09AF  344D               	retlw	77	;'M'
  1866  09B0  3441               	retlw	65	;'A'
  1867  09B1  3441               	retlw	65	;'A'
  1868  09B2  3444               	retlw	68	;'D'
  1869  09B3  340D               	retlw	13
  1870  09B4  340A               	retlw	10
  1871  09B5  3400               	retlw	0
  1872  09B6                     STR_109:	
  1873  09B6  3441               	retlw	65	;'A'
  1874  09B7  3454               	retlw	84	;'T'
  1875  09B8  342B               	retlw	43	;'+'
  1876  09B9  3444               	retlw	68	;'D'
  1877  09BA  3449               	retlw	73	;'I'
  1878  09BB  3453               	retlw	83	;'S'
  1879  09BC  3443               	retlw	67	;'C'
  1880  09BD  340D               	retlw	13
  1881  09BE  340A               	retlw	10
  1882  09BF  3400               	retlw	0
  1883  09C0                     STR_89:	
  1884  09C0  3441               	retlw	65	;'A'
  1885  09C1  3454               	retlw	84	;'T'
  1886  09C2  342B               	retlw	43	;'+'
  1887  09C3  3449               	retlw	73	;'I'
  1888  09C4  344E               	retlw	78	;'N'
  1889  09C5  3449               	retlw	73	;'I'
  1890  09C6  3454               	retlw	84	;'T'
  1891  09C7  340D               	retlw	13
  1892  09C8  340A               	retlw	10
  1893  09C9  3400               	retlw	0
  1894  09CA                     STR_115:	
  1895  09CA  3420               	retlw	32	;' '
  1896  09CB  3450               	retlw	80	;'P'
  1897  09CC  342F               	retlw	47	;'/'
  1898  09CD  3420               	retlw	32	;' '
  1899  09CE  3443               	retlw	67	;'C'
  1900  09CF  344C               	retlw	76	;'L'
  1901  09D0  3450               	retlw	80	;'P'
  1902  09D1  3420               	retlw	32	;' '
  1903  09D2  3400               	retlw	0
  1904  09D3                     STR_90:	
  1905  09D3  3441               	retlw	65	;'A'
  1906  09D4  3454               	retlw	84	;'T'
  1907  09D5  342B               	retlw	43	;'+'
  1908  09D6  3449               	retlw	73	;'I'
  1909  09D7  344E               	retlw	78	;'N'
  1910  09D8  3451               	retlw	81	;'Q'
  1911  09D9  340D               	retlw	13
  1912  09DA  340A               	retlw	10
  1913  09DB  3400               	retlw	0
  1914  09DC                     STR_47:	
  1915  09DC  3445               	retlw	69	;'E'
  1916  09DD  3453               	retlw	83	;'S'
  1917  09DE  3454               	retlw	84	;'T'
  1918  09DF  3445               	retlw	69	;'E'
  1919  09E0  3449               	retlw	73	;'I'
  1920  09E1  3452               	retlw	82	;'R'
  1921  09E2  3441               	retlw	65	;'A'
  1922  09E3  3400               	retlw	0
  1923  09E4                     STR_51:	
  1924  09E4  3450               	retlw	80	;'P'
  1925  09E5  3441               	retlw	65	;'A'
  1926  09E6  3452               	retlw	82	;'R'
  1927  09E7  3445               	retlw	69	;'E'
  1928  09E8  3441               	retlw	65	;'A'
  1929  09E9  3452               	retlw	82	;'R'
  1930  09EA  3400               	retlw	0
  1931  09EB                     STR_57:	
  1932  09EB  342E               	retlw	46	;'.'
  1933  09EC  3420               	retlw	32	;' '
  1934  09ED  3420               	retlw	32	;' '
  1935  09EE  3400               	retlw	0
  1936  09EF                     STR_58:	
  1937  09EF  3420               	retlw	32	;' '
  1938  09F0  342E               	retlw	46	;'.'
  1939  09F1  3420               	retlw	32	;' '
  1940  09F2  3400               	retlw	0
  1941  09F3                     STR_64:	
  1942  09F3  342E               	retlw	46	;'.'
  1943  09F4  342E               	retlw	46	;'.'
  1944  09F5  3420               	retlw	32	;' '
  1945  09F6  3400               	retlw	0
  1946  09F7                     STR_59:	
  1947  09F7  3420               	retlw	32	;' '
  1948  09F8  3420               	retlw	32	;' '
  1949  09F9  342E               	retlw	46	;'.'
  1950  09FA  3400               	retlw	0
  1951  09FB                     STR_65:	
  1952  09FB  342E               	retlw	46	;'.'
  1953  09FC  342E               	retlw	46	;'.'
  1954  09FD  342E               	retlw	46	;'.'
  1955  09FE  3400               	retlw	0
  1956  09FF                     STR_16:	
  1957  09FF  3431               	retlw	49	;'1'
  1958  0A00  3400               	retlw	0
  1959  0A01                     STR_14:	
  1960  0A01  3432               	retlw	50	;'2'
  1961  0A02  3400               	retlw	0
  1962  0A03                     STR_22:	
  1963  0A03  3434               	retlw	52	;'4'
  1964  0A04  3400               	retlw	0
  1965  0A05                     STR_26:	
  1966  0A05  3435               	retlw	53	;'5'
  1967  0A06  3400               	retlw	0
  1968  0A07                     STR_30:	
  1969  0A07  3436               	retlw	54	;'6'
  1970  0A08  3400               	retlw	0
  1971  0A09                     STR_34:	
  1972  0A09  3437               	retlw	55	;'7'
  1973  0A0A  3400               	retlw	0
  1974  0A0B                     STR_2:	
  1975  0A0B  3442               	retlw	66	;'B'
  1976  0A0C  3400               	retlw	0
  1977  0A0D                     STR_5:	
  1978  0A0D  3465               	retlw	101	;'e'
  1979  0A0E  3400               	retlw	0
  1980  0A0F                     STR_3:	
  1981  0A0F  346C               	retlw	108	;'l'
  1982  0A10  3400               	retlw	0
  1983  0A11                     STR_4:	
  1984  0A11  3475               	retlw	117	;'u'
  1985  0A12  3400               	retlw	0
  1986  07ED                     
  1987                           ; #config settings
  1988  0000                     
  1989                           	psect	cinit
  1990  0015                     start_initialization:	
  1991  0015                     __initialization:	
  1992                           
  1993                           ; Clear objects allocated to COMMON
  1994  0015  01FC               	clrf	__pbssCOMMON& (0+127)
  1995                           
  1996                           ; Clear objects allocated to BANK0
  1997  0016  1383               	bcf	3,7	;select IRP bank0
  1998  0017  3049               	movlw	low __pbssBANK0
  1999  0018  0084               	movwf	4
  2000  0019  3056               	movlw	low (__pbssBANK0+13)
  2001  001A  160A  158A  274D  120A  118A  	fcall	clear_ram0
  2002                           
  2003                           ; Clear objects allocated to BANK1
  2004  001F  30A0               	movlw	low __pbssBANK1
  2005  0020  0084               	movwf	4
  2006  0021  30BE               	movlw	low (__pbssBANK1+30)
  2007  0022  160A  158A  274D   	fcall	clear_ram0
  2008  0025                     end_of_initialization:	
  2009                           ;End of C runtime variable initialization code
  2010                           
  2011  0025                     __end_of__initialization:	
  2012  0025  0183               	clrf	3
  2013  0026  120A  118A  2829   	ljmp	_main	;jump to C main() function
  2014                           
  2015                           	psect	bssCOMMON
  2016  007C                     __pbssCOMMON:	
  2017  007C                     _fifoHead:	
  2018  007C                     	ds	1
  2019                           
  2020                           	psect	bssBANK0
  2021  0049                     __pbssBANK0:	
  2022  0049                     _t0cont:	
  2023  0049                     	ds	2
  2024  004B                     _t0final:	
  2025  004B                     	ds	2
  2026  004D                     _fifoTail:	
  2027  004D                     	ds	1
  2028  004E                     _estadoAnteriorB3:	
  2029  004E                     	ds	1
  2030  004F                     _estadoAnteriorB2:	
  2031  004F                     	ds	1
  2032  0050                     _estadoAnteriorB1:	
  2033  0050                     	ds	1
  2034  0051                     _serial:	
  2035  0051                     	ds	1
  2036  0052                     _comp:	
  2037  0052                     	ds	1
  2038  0053                     _tdez:	
  2039  0053                     	ds	1
  2040  0054                     _tuni:	
  2041  0054                     	ds	1
  2042  0055                     _rhex:	
  2043  0055                     	ds	1
  2044                           
  2045                           	psect	bssBANK1
  2046  00A0                     __pbssBANK1:	
  2047  00A0                     _fifo:	
  2048  00A0                     	ds	30
  2049                           
  2050                           	psect	clrtext
  2051  1F4D                     clear_ram0:	
  2052                           ;	Called with FSR containing the base address, and
  2053                           ;	W with the last address+1
  2054                           
  2055  1F4D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2056  1F4E                     clrloop0:	
  2057  1F4E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2058  1F4F  0A84               	incf	4,f	;increment pointer
  2059  1F50  0604               	xorwf	4,w	;XOR with final address
  2060  1F51  1903               	btfsc	3,2	;have we reached the end yet?
  2061  1F52  3400               	retlw	0	;all done for this memory range, return
  2062  1F53  0604               	xorwf	4,w	;XOR again to restore value
  2063  1F54  2F4E               	goto	clrloop0	;do the next byte
  2064                           
  2065                           	psect	cstackCOMMON
  2066  0070                     __pcstackCOMMON:	
  2067  0070                     ?_serialOut:	
  2068  0070                     ?_writeEUSART:	
  2069                           ; 1 bytes @ 0x0
  2070                           
  2071  0070                     ?_cmdLCD:	
  2072                           ; 1 bytes @ 0x0
  2073                           
  2074  0070                     ?_bordaSubidaB2:	
  2075                           ; 1 bytes @ 0x0
  2076                           
  2077  0070                     ?_bordaSubidaB3:	
  2078                           ; 1 bytes @ 0x0
  2079                           
  2080  0070                     ?_interrupt_EUSART_RX:	
  2081                           ; 1 bytes @ 0x0
  2082                           
  2083  0070                     ?_intt0_1ms:	
  2084                           ; 1 bytes @ 0x0
  2085                           
  2086  0070                     ??_intt0_1ms:	
  2087                           ; 1 bytes @ 0x0
  2088                           
  2089  0070                     ?_initTimer0:	
  2090                           ; 1 bytes @ 0x0
  2091                           
  2092  0070                     ?_resetErrorRxEUSART:	
  2093                           ; 1 bytes @ 0x0
  2094                           
  2095  0070                     ?_statusFIFO:	
  2096                           ; 1 bytes @ 0x0
  2097                           
  2098  0070                     ?_getFIFO:	
  2099                           ; 1 bytes @ 0x0
  2100                           
  2101  0070                     ?_errorRxEUSART:	
  2102                           ; 1 bytes @ 0x0
  2103                           
  2104  0070                     ?_putFIFO:	
  2105                           ; 1 bytes @ 0x0
  2106                           
  2107  0070                     ?_initSerial:	
  2108                           ; 1 bytes @ 0x0
  2109                           
  2110  0070                     ?_serialIn:	
  2111                           ; 1 bytes @ 0x0
  2112                           
  2113  0070                     ?_hexToAscii:	
  2114                           ; 1 bytes @ 0x0
  2115                           
  2116  0070                     ?_transmite:	
  2117                           ; 1 bytes @ 0x0
  2118                           
  2119  0070                     ?_logo:	
  2120                           ; 1 bytes @ 0x0
  2121                           
  2122  0070                     ?_textConfig:	
  2123                           ; 1 bytes @ 0x0
  2124                           
  2125  0070                     ?_textCMpar:	
  2126                           ; 1 bytes @ 0x0
  2127                           
  2128  0070                     ?_textCMdat:	
  2129                           ; 1 bytes @ 0x0
  2130                           
  2131  0070                     ?_textSelection1:	
  2132                           ; 1 bytes @ 0x0
  2133                           
  2134  0070                     ?_textSelection2:	
  2135                           ; 1 bytes @ 0x0
  2136                           
  2137  0070                     ?_textSelection3:	
  2138                           ; 1 bytes @ 0x0
  2139                           
  2140  0070                     ?_textSelection4:	
  2141                           ; 1 bytes @ 0x0
  2142                           
  2143  0070                     ?_textSelection5:	
  2144                           ; 1 bytes @ 0x0
  2145                           
  2146  0070                     ?_textSelection6:	
  2147                           ; 1 bytes @ 0x0
  2148                           
  2149  0070                     ?_textSelection7:	
  2150                           ; 1 bytes @ 0x0
  2151                           
  2152  0070                     ?_textSelection8:	
  2153                           ; 1 bytes @ 0x0
  2154                           
  2155  0070                     ?_textSelectionEST:	
  2156                           ; 1 bytes @ 0x0
  2157                           
  2158  0070                     ?_textSelectionCLP:	
  2159                           ; 1 bytes @ 0x0
  2160                           
  2161  0070                     ?_textLoading:	
  2162                           ; 1 bytes @ 0x0
  2163                           
  2164  0070                     ?_easterEgg:	
  2165                           ; 1 bytes @ 0x0
  2166                           
  2167  0070                     ?_initBT:	
  2168                           ; 1 bytes @ 0x0
  2169                           
  2170  0070                     ?_B1:	
  2171                           ; 1 bytes @ 0x0
  2172                           
  2173  0070                     ?_B2:	
  2174                           ; 1 bytes @ 0x0
  2175                           
  2176  0070                     ?_B3:	
  2177                           ; 1 bytes @ 0x0
  2178                           
  2179  0070                     ?_bordaSubidaB1:	
  2180                           ; 1 bytes @ 0x0
  2181                           
  2182  0070                     ?_master1:	
  2183                           ; 1 bytes @ 0x0
  2184                           
  2185  0070                     ?_slave1:	
  2186                           ; 1 bytes @ 0x0
  2187                           
  2188  0070                     ?_modulo2:	
  2189                           ; 1 bytes @ 0x0
  2190                           
  2191  0070                     ?_desconectar:	
  2192                           ; 1 bytes @ 0x0
  2193                           
  2194  0070                     ?_putLCD:	
  2195                           ; 1 bytes @ 0x0
  2196                           
  2197  0070                     ?_initLCD:	
  2198                           ; 1 bytes @ 0x0
  2199                           
  2200  0070                     ?_geral:	
  2201                           ; 1 bytes @ 0x0
  2202                           
  2203  0070                     ?_main:	
  2204                           ; 1 bytes @ 0x0
  2205                           
  2206  0070                     ?i1___awmod:	
  2207                           ; 1 bytes @ 0x0
  2208                           
  2209  0070                     i1___awmod@divisor:	
  2210                           ; 2 bytes @ 0x0
  2211                           
  2212                           
  2213                           ; 2 bytes @ 0x0
  2214  0070                     	ds	2
  2215  0072                     i1___awmod@dividend:	
  2216                           
  2217                           ; 2 bytes @ 0x2
  2218  0072                     	ds	2
  2219  0074                     ??i1___awmod:	
  2220                           
  2221                           ; 1 bytes @ 0x4
  2222  0074                     	ds	1
  2223  0075                     i1___awmod@counter:	
  2224                           
  2225                           ; 1 bytes @ 0x5
  2226  0075                     	ds	1
  2227  0076                     i1___awmod@sign:	
  2228                           
  2229                           ; 1 bytes @ 0x6
  2230  0076                     	ds	1
  2231  0077                     ??_putFIFO:	
  2232                           
  2233                           ; 1 bytes @ 0x7
  2234  0077                     	ds	4
  2235  007B                     putFIFO@c:	
  2236                           
  2237                           ; 1 bytes @ 0xB
  2238  007B                     	ds	1
  2239  007C                     ??_interrupt_EUSART_RX:	
  2240                           
  2241                           	psect	cstackBANK0
  2242  0020                     __pcstackBANK0:	
  2243                           ; 1 bytes @ 0xC
  2244                           
  2245  0020                     ??_geral:	
  2246                           
  2247                           ; 1 bytes @ 0x0
  2248  0020                     	ds	4
  2249  0024                     ??_serialOut:	
  2250  0024                     ??_writeEUSART:	
  2251                           ; 1 bytes @ 0x4
  2252                           
  2253  0024                     ??_cmdLCD:	
  2254                           ; 1 bytes @ 0x4
  2255                           
  2256  0024                     ??_bordaSubidaB3:	
  2257                           ; 1 bytes @ 0x4
  2258                           
  2259  0024                     ??_resetErrorRxEUSART:	
  2260                           ; 1 bytes @ 0x4
  2261                           
  2262  0024                     ??_errorRxEUSART:	
  2263                           ; 1 bytes @ 0x4
  2264                           
  2265  0024                     ??_serialIn:	
  2266                           ; 1 bytes @ 0x4
  2267                           
  2268  0024                     ??_hexToAscii:	
  2269                           ; 1 bytes @ 0x4
  2270                           
  2271  0024                     ?_asciiToHex:	
  2272                           ; 1 bytes @ 0x4
  2273                           
  2274  0024                     ??_initBT:	
  2275                           ; 1 bytes @ 0x4
  2276                           
  2277  0024                     ??_B1:	
  2278                           ; 1 bytes @ 0x4
  2279                           
  2280  0024                     ??_B2:	
  2281                           ; 1 bytes @ 0x4
  2282                           
  2283  0024                     ??_B3:	
  2284                           ; 1 bytes @ 0x4
  2285                           
  2286  0024                     ??_bordaSubidaB1:	
  2287                           ; 1 bytes @ 0x4
  2288                           
  2289  0024                     ??_putLCD:	
  2290                           ; 1 bytes @ 0x4
  2291                           
  2292  0024                     ?_setT0limite:	
  2293                           ; 1 bytes @ 0x4
  2294                           
  2295  0024                     ?___bmul:	
  2296                           ; 1 bytes @ 0x4
  2297                           
  2298  0024                     ?_statusT0:	
  2299                           ; 1 bytes @ 0x4
  2300                           
  2301  0024                     ?_statusT0limite:	
  2302                           ; 2 bytes @ 0x4
  2303                           
  2304  0024                     ?___awmod:	
  2305                           ; 2 bytes @ 0x4
  2306                           
  2307  0024                     ?___lldiv:	
  2308                           ; 2 bytes @ 0x4
  2309                           
  2310  0024                     asciiToHex@a2:	
  2311                           ; 4 bytes @ 0x4
  2312                           
  2313  0024                     writeEUSART@d:	
  2314                           ; 1 bytes @ 0x4
  2315                           
  2316  0024                     ___bmul@multiplicand:	
  2317                           ; 1 bytes @ 0x4
  2318                           
  2319  0024                     setT0limite@c:	
  2320                           ; 1 bytes @ 0x4
  2321                           
  2322  0024                     ___awmod@divisor:	
  2323                           ; 2 bytes @ 0x4
  2324                           
  2325  0024                     ___lldiv@divisor:	
  2326                           ; 2 bytes @ 0x4
  2327                           
  2328                           
  2329                           ; 4 bytes @ 0x4
  2330  0024                     	ds	1
  2331  0025                     ??_bordaSubidaB2:	
  2332  0025                     ?_writeString:	
  2333                           ; 1 bytes @ 0x5
  2334                           
  2335  0025                     ??_asciiToHex:	
  2336                           ; 1 bytes @ 0x5
  2337                           
  2338  0025                     ??___bmul:	
  2339                           ; 1 bytes @ 0x5
  2340                           
  2341  0025                     serialOut@d:	
  2342                           ; 1 bytes @ 0x5
  2343                           
  2344  0025                     serialIn@dado:	
  2345                           ; 1 bytes @ 0x5
  2346                           
  2347  0025                     hexToAscii@dado:	
  2348                           ; 1 bytes @ 0x5
  2349                           
  2350  0025                     bordaSubidaB1@resp:	
  2351                           ; 1 bytes @ 0x5
  2352                           
  2353  0025                     bordaSubidaB3@resp2:	
  2354                           ; 1 bytes @ 0x5
  2355                           
  2356  0025                     putLCD@c:	
  2357                           ; 1 bytes @ 0x5
  2358                           
  2359  0025                     writeString@str:	
  2360                           ; 1 bytes @ 0x5
  2361                           
  2362                           
  2363                           ; 2 bytes @ 0x5
  2364  0025                     	ds	1
  2365  0026                     ??_statusT0:	
  2366  0026                     ??_statusT0limite:	
  2367                           ; 1 bytes @ 0x6
  2368                           
  2369  0026                     ??_initTimer0:	
  2370                           ; 1 bytes @ 0x6
  2371                           
  2372  0026                     ??_setT0limite:	
  2373                           ; 1 bytes @ 0x6
  2374                           
  2375  0026                     ?___awdiv:	
  2376                           ; 1 bytes @ 0x6
  2377                           
  2378  0026                     serialOut@i:	
  2379                           ; 2 bytes @ 0x6
  2380                           
  2381  0026                     serialIn@i:	
  2382                           ; 1 bytes @ 0x6
  2383                           
  2384  0026                     hexToAscii@uni:	
  2385                           ; 1 bytes @ 0x6
  2386                           
  2387  0026                     asciiToHex@a1:	
  2388                           ; 1 bytes @ 0x6
  2389                           
  2390  0026                     bordaSubidaB1@estadoAtualB1:	
  2391                           ; 1 bytes @ 0x6
  2392                           
  2393  0026                     bordaSubidaB2@resp1:	
  2394                           ; 1 bytes @ 0x6
  2395                           
  2396  0026                     bordaSubidaB3@estadoAtualB3:	
  2397                           ; 1 bytes @ 0x6
  2398                           
  2399  0026                     cmdLCD@cmd:	
  2400                           ; 1 bytes @ 0x6
  2401                           
  2402  0026                     putLCD@nibble:	
  2403                           ; 1 bytes @ 0x6
  2404                           
  2405  0026                     ___bmul@product:	
  2406                           ; 1 bytes @ 0x6
  2407                           
  2408  0026                     ___awdiv@divisor:	
  2409                           ; 1 bytes @ 0x6
  2410                           
  2411  0026                     ___awmod@dividend:	
  2412                           ; 2 bytes @ 0x6
  2413                           
  2414                           
  2415                           ; 2 bytes @ 0x6
  2416  0026                     	ds	1
  2417  0027                     ??_writeString:	
  2418  0027                     ??_initSerial:	
  2419                           ; 1 bytes @ 0x7
  2420                           
  2421  0027                     hexToAscii@dez:	
  2422                           ; 1 bytes @ 0x7
  2423                           
  2424  0027                     asciiToHex@uni:	
  2425                           ; 1 bytes @ 0x7
  2426                           
  2427  0027                     bordaSubidaB2@estadoAtualB2:	
  2428                           ; 1 bytes @ 0x7
  2429                           
  2430  0027                     cmdLCD@nibble:	
  2431                           ; 1 bytes @ 0x7
  2432                           
  2433  0027                     ___bmul@multiplier:	
  2434                           ; 1 bytes @ 0x7
  2435                           
  2436                           
  2437                           ; 1 bytes @ 0x7
  2438  0027                     	ds	1
  2439  0028                     ??_transmite:	
  2440  0028                     ?_gotoxy:	
  2441                           ; 1 bytes @ 0x8
  2442                           
  2443  0028                     ??_initLCD:	
  2444                           ; 1 bytes @ 0x8
  2445                           
  2446  0028                     ??___awmod:	
  2447                           ; 1 bytes @ 0x8
  2448                           
  2449  0028                     asciiToHex@dez:	
  2450                           ; 1 bytes @ 0x8
  2451                           
  2452  0028                     gotoxy@y:	
  2453                           ; 1 bytes @ 0x8
  2454                           
  2455  0028                     ___awdiv@dividend:	
  2456                           ; 1 bytes @ 0x8
  2457                           
  2458  0028                     ___lldiv@dividend:	
  2459                           ; 2 bytes @ 0x8
  2460                           
  2461                           
  2462                           ; 4 bytes @ 0x8
  2463  0028                     	ds	1
  2464  0029                     ??_gotoxy:	
  2465  0029                     ___awmod@counter:	
  2466                           ; 1 bytes @ 0x9
  2467                           
  2468                           
  2469                           ; 1 bytes @ 0x9
  2470  0029                     	ds	1
  2471  002A                     ??___awdiv:	
  2472  002A                     ___awmod@sign:	
  2473                           ; 1 bytes @ 0xA
  2474                           
  2475                           
  2476                           ; 1 bytes @ 0xA
  2477  002A                     	ds	1
  2478  002B                     ??_statusFIFO:	
  2479  002B                     ??_getFIFO:	
  2480                           ; 1 bytes @ 0xB
  2481                           
  2482  002B                     gotoxy@x:	
  2483                           ; 1 bytes @ 0xB
  2484                           
  2485  002B                     ___awdiv@counter:	
  2486                           ; 1 bytes @ 0xB
  2487                           
  2488                           
  2489                           ; 1 bytes @ 0xB
  2490  002B                     	ds	1
  2491  002C                     ?_writeLCD:	
  2492  002C                     ??___lldiv:	
  2493                           ; 1 bytes @ 0xC
  2494                           
  2495  002C                     writeLCD@y:	
  2496                           ; 1 bytes @ 0xC
  2497                           
  2498  002C                     ___awdiv@sign:	
  2499                           ; 1 bytes @ 0xC
  2500                           
  2501                           
  2502                           ; 1 bytes @ 0xC
  2503  002C                     	ds	1
  2504  002D                     writeLCD@ptr:	
  2505  002D                     ___awdiv@quotient:	
  2506                           ; 2 bytes @ 0xD
  2507                           
  2508  002D                     ___lldiv@quotient:	
  2509                           ; 2 bytes @ 0xD
  2510                           
  2511                           
  2512                           ; 4 bytes @ 0xD
  2513  002D                     	ds	2
  2514  002F                     ??_writeLCD:	
  2515  002F                     getFIFO@aux:	
  2516                           ; 1 bytes @ 0xF
  2517                           
  2518                           
  2519                           ; 1 bytes @ 0xF
  2520  002F                     	ds	1
  2521  0030                     writeLCD@x:	
  2522                           
  2523                           ; 1 bytes @ 0x10
  2524  0030                     	ds	1
  2525  0031                     ??_logo:	
  2526  0031                     ??_textConfig:	
  2527                           ; 1 bytes @ 0x11
  2528                           
  2529  0031                     ??_textCMpar:	
  2530                           ; 1 bytes @ 0x11
  2531                           
  2532  0031                     ??_textCMdat:	
  2533                           ; 1 bytes @ 0x11
  2534                           
  2535  0031                     ??_textSelection1:	
  2536                           ; 1 bytes @ 0x11
  2537                           
  2538  0031                     ??_textSelection2:	
  2539                           ; 1 bytes @ 0x11
  2540                           
  2541  0031                     ??_textSelection3:	
  2542                           ; 1 bytes @ 0x11
  2543                           
  2544  0031                     ??_textSelection4:	
  2545                           ; 1 bytes @ 0x11
  2546                           
  2547  0031                     ??_textSelection5:	
  2548                           ; 1 bytes @ 0x11
  2549                           
  2550  0031                     ??_textSelection6:	
  2551                           ; 1 bytes @ 0x11
  2552                           
  2553  0031                     ??_textSelection7:	
  2554                           ; 1 bytes @ 0x11
  2555                           
  2556  0031                     ??_textSelection8:	
  2557                           ; 1 bytes @ 0x11
  2558                           
  2559  0031                     ??_textSelectionEST:	
  2560                           ; 1 bytes @ 0x11
  2561                           
  2562  0031                     ??_textSelectionCLP:	
  2563                           ; 1 bytes @ 0x11
  2564                           
  2565  0031                     ??_textLoading:	
  2566                           ; 1 bytes @ 0x11
  2567                           
  2568  0031                     ??_easterEgg:	
  2569                           ; 1 bytes @ 0x11
  2570                           
  2571  0031                     ___lldiv@counter:	
  2572                           ; 1 bytes @ 0x11
  2573                           
  2574                           
  2575                           ; 1 bytes @ 0x11
  2576  0031                     	ds	1
  2577  0032                     ?_initEUSART:	
  2578  0032                     initEUSART@baudRate:	
  2579                           ; 1 bytes @ 0x12
  2580                           
  2581                           
  2582                           ; 4 bytes @ 0x12
  2583  0032                     	ds	4
  2584  0036                     ??_initEUSART:	
  2585                           
  2586                           ; 1 bytes @ 0x16
  2587  0036                     	ds	6
  2588  003C                     ??_master1:	
  2589  003C                     ??_slave1:	
  2590                           ; 1 bytes @ 0x1C
  2591                           
  2592  003C                     ??_modulo2:	
  2593                           ; 1 bytes @ 0x1C
  2594                           
  2595  003C                     ??_desconectar:	
  2596                           ; 1 bytes @ 0x1C
  2597                           
  2598                           
  2599                           ; 1 bytes @ 0x1C
  2600  003C                     	ds	3
  2601  003F                     ??_main:	
  2602                           
  2603                           ; 1 bytes @ 0x1F
  2604  003F                     	ds	3
  2605  0042                     main@a1:	
  2606                           
  2607                           ; 1 bytes @ 0x22
  2608  0042                     	ds	1
  2609  0043                     main@a2:	
  2610                           
  2611                           ; 1 bytes @ 0x23
  2612  0043                     	ds	1
  2613  0044                     main@t:	
  2614                           
  2615                           ; 1 bytes @ 0x24
  2616  0044                     	ds	1
  2617  0045                     main@i:	
  2618                           
  2619                           ; 1 bytes @ 0x25
  2620  0045                     	ds	1
  2621  0046                     main@a:	
  2622                           
  2623                           ; 1 bytes @ 0x26
  2624  0046                     	ds	1
  2625  0047                     main@aux:	
  2626                           
  2627                           ; 2 bytes @ 0x27
  2628  0047                     	ds	2
  2629                           
  2630                           	psect	maintext
  2631  0029                     __pmaintext:	
  2632 ;;
  2633 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2634 ;;
  2635 ;; *************** function _main *****************
  2636 ;; Defined at:
  2637 ;;		line 30 in file "main.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;		None
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  a2              1   35[BANK0 ] unsigned char 
  2642 ;;  a1              1   34[BANK0 ] unsigned char 
  2643 ;;  t               1   36[BANK0 ] unsigned char 
  2644 ;;  aux             2   39[BANK0 ] unsigned int 
  2645 ;;  a               1   38[BANK0 ] unsigned char 
  2646 ;;  i               1   37[BANK0 ] unsigned char 
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      void 
  2649 ;; Registers used:
  2650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : B00/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2656 ;;      Params:         0       0       0       0       0
  2657 ;;      Locals:         0       7       0       0       0
  2658 ;;      Temps:          0       3       0       0       0
  2659 ;;      Totals:         0      10       0       0       0
  2660 ;;Total ram usage:       10 bytes
  2661 ;; Hardware stack levels required when called:    8
  2662 ;; This function calls:
  2663 ;;		_B1
  2664 ;;		_B2
  2665 ;;		_B3
  2666 ;;		_asciiToHex
  2667 ;;		_bordaSubidaB1
  2668 ;;		_bordaSubidaB2
  2669 ;;		_bordaSubidaB3
  2670 ;;		_cmdLCD
  2671 ;;		_desconectar
  2672 ;;		_easterEgg
  2673 ;;		_errorRxEUSART
  2674 ;;		_getFIFO
  2675 ;;		_initBT
  2676 ;;		_initEUSART
  2677 ;;		_initLCD
  2678 ;;		_initSerial
  2679 ;;		_initTimer0
  2680 ;;		_logo
  2681 ;;		_master1
  2682 ;;		_modulo2
  2683 ;;		_resetErrorRxEUSART
  2684 ;;		_serialOut
  2685 ;;		_slave1
  2686 ;;		_statusFIFO
  2687 ;;		_textCMdat
  2688 ;;		_textCMpar
  2689 ;;		_textConfig
  2690 ;;		_textLoading
  2691 ;;		_textSelection1
  2692 ;;		_textSelection2
  2693 ;;		_textSelection3
  2694 ;;		_textSelection4
  2695 ;;		_textSelection5
  2696 ;;		_textSelection6
  2697 ;;		_textSelection7
  2698 ;;		_textSelection8
  2699 ;;		_textSelectionCLP
  2700 ;;		_textSelectionEST
  2701 ;;		_transmite
  2702 ;;		_writeLCD
  2703 ;; This function is called by:
  2704 ;;		Startup code after reset
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           
  2709                           ;psect for function _main
  2710  0029                     _main:	
  2711                           
  2712                           ;main.c: 32: initBT();
  2713                           
  2714                           ;incstack = 0
  2715                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2716  0029  160A  158A  2755  120A  118A  	fcall	_initBT
  2717                           
  2718                           ;main.c: 33: initLCD();
  2719  002E  160A  118A  226D  120A  118A  	fcall	_initLCD
  2720                           
  2721                           ;main.c: 34: initTimer0();
  2722  0033  160A  118A  205C  120A  118A  	fcall	_initTimer0
  2723                           
  2724                           ;main.c: 35: initEUSART(9600);
  2725  0038  3000               	movlw	0
  2726  0039  1283               	bcf	3,5	;RP0=0, select bank0
  2727  003A  1303               	bcf	3,6	;RP1=0, select bank0
  2728  003B  00B5               	movwf	initEUSART@baudRate+3
  2729  003C  3000               	movlw	0
  2730  003D  00B4               	movwf	initEUSART@baudRate+2
  2731  003E  3025               	movlw	37
  2732  003F  00B3               	movwf	initEUSART@baudRate+1
  2733  0040  3080               	movlw	128
  2734  0041  00B2               	movwf	initEUSART@baudRate
  2735  0042  160A  118A  243D  120A  118A  	fcall	_initEUSART
  2736                           
  2737                           ;main.c: 36: initSerial();
  2738  0047  160A  158A  2786  120A  118A  	fcall	_initSerial
  2739                           
  2740                           ;main.c: 39: unsigned int aux = 0;
  2741  004C  1283               	bcf	3,5	;RP0=0, select bank0
  2742  004D  1303               	bcf	3,6	;RP1=0, select bank0
  2743  004E  01C7               	clrf	main@aux
  2744  004F  01C8               	clrf	main@aux+1
  2745                           
  2746                           ;main.c: 40: unsigned char a = 0;
  2747  0050  01C6               	clrf	main@a
  2748                           
  2749                           ;main.c: 41: unsigned char i = 0;
  2750  0051  01C5               	clrf	main@i
  2751                           
  2752                           ;main.c: 44: {
  2753                           ;main.c: 45: switch (aux)
  2754                           
  2755                           ;main.c: 43: while(1)
  2756  0052  2D57               	goto	l3913
  2757  0053                     l3463:	
  2758                           ;main.c: 46: {
  2759                           ;main.c: 47: case 0 :
  2760                           
  2761                           
  2762                           ;main.c: 48: logo();
  2763  0053  120A  158A  23A2  120A  118A  	fcall	_logo
  2764  0058  29C5               	goto	L49
  2765  0059                     l3467:	
  2766                           ;main.c: 52: case 1:
  2767                           
  2768                           ;main.c: 50: break;
  2769                           
  2770                           ;main.c: 49: aux = 1;
  2771                           
  2772                           
  2773                           ;main.c: 53: textConfig();
  2774  0059  160A  118A  20F3  120A  118A  	fcall	_textConfig
  2775                           
  2776                           ;main.c: 54: aux = 10;
  2777  005E  300A               	movlw	10
  2778  005F  2D48               	goto	L45
  2779  0060                     l3471:	
  2780                           ;main.c: 57: case 2:
  2781                           
  2782                           ;main.c: 55: break;
  2783                           
  2784                           
  2785                           ;main.c: 58: textCMdat();
  2786  0060  160A  118A  20B3  120A  118A  	fcall	_textCMdat
  2787                           
  2788                           ;main.c: 59: aux = 20;
  2789  0065  3014               	movlw	20
  2790  0066  2D48               	goto	L45
  2791  0067                     l3475:	
  2792                           ;main.c: 62: case 3:
  2793                           
  2794                           ;main.c: 60: break;
  2795                           
  2796                           
  2797                           ;main.c: 63: textCMpar();
  2798  0067  160A  118A  20D3  120A  118A  	fcall	_textCMpar
  2799                           
  2800                           ;main.c: 64: aux = 30;
  2801  006C  301E               	movlw	30
  2802  006D  2D48               	goto	L45
  2803  006E                     l3479:	
  2804                           ;main.c: 69: case 10:
  2805                           
  2806                           ;main.c: 65: break;
  2807                           
  2808                           
  2809                           ;main.c: 70: if(bordaSubidaB1()) aux = 2;
  2810  006E  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  2811  0073  3A00               	xorlw	0
  2812  0074  1903               	skipnz
  2813  0075  287C               	goto	l3483
  2814  0076  3002               	movlw	2
  2815  0077  1283               	bcf	3,5	;RP0=0, select bank0
  2816  0078  1303               	bcf	3,6	;RP1=0, select bank0
  2817  0079  00C7               	movwf	main@aux
  2818  007A  3000               	movlw	0
  2819  007B  00C8               	movwf	main@aux+1
  2820  007C                     l3483:	
  2821                           
  2822                           ;main.c: 71: if(bordaSubidaB2()) aux = 3;
  2823  007C  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  2824  0081  3A00               	xorlw	0
  2825  0082  1903               	skipnz
  2826  0083  288A               	goto	l3487
  2827  0084  3003               	movlw	3
  2828  0085  1283               	bcf	3,5	;RP0=0, select bank0
  2829  0086  1303               	bcf	3,6	;RP1=0, select bank0
  2830  0087  00C7               	movwf	main@aux
  2831  0088  3000               	movlw	0
  2832  0089  00C8               	movwf	main@aux+1
  2833  008A                     l3487:	
  2834                           
  2835                           ;main.c: 72: if(bordaSubidaB3()) aux = 100;
  2836  008A  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  2837  008F  3A00               	xorlw	0
  2838  0090  1903               	skipnz
  2839  0091  2D57               	goto	l3913
  2840  0092  3064               	movlw	100
  2841  0093  2D48               	goto	L45
  2842  0094                     l3491:	
  2843                           ;main.c: 75: case 20:
  2844                           
  2845                           ;main.c: 73: break;
  2846                           
  2847                           
  2848                           ;main.c: 76: if(bordaSubidaB1()) aux = 3;
  2849  0094  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  2850  0099  3A00               	xorlw	0
  2851  009A  1903               	skipnz
  2852  009B  28A2               	goto	l3495
  2853  009C  3003               	movlw	3
  2854  009D  1283               	bcf	3,5	;RP0=0, select bank0
  2855  009E  1303               	bcf	3,6	;RP1=0, select bank0
  2856  009F  00C7               	movwf	main@aux
  2857  00A0  3000               	movlw	0
  2858  00A1  00C8               	movwf	main@aux+1
  2859  00A2                     l3495:	
  2860                           
  2861                           ;main.c: 77: if(bordaSubidaB2()) aux = 1;
  2862  00A2  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  2863  00A7  3A00               	xorlw	0
  2864  00A8  1903               	skipnz
  2865  00A9  28B0               	goto	l3499
  2866  00AA  3001               	movlw	1
  2867  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  2868  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  2869  00AD  00C7               	movwf	main@aux
  2870  00AE  3000               	movlw	0
  2871  00AF  00C8               	movwf	main@aux+1
  2872  00B0                     l3499:	
  2873                           
  2874                           ;main.c: 78: if(bordaSubidaB3()) aux = 200;
  2875  00B0  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  2876  00B5  3A00               	xorlw	0
  2877  00B6  1903               	skipnz
  2878  00B7  2D57               	goto	l3913
  2879  00B8  30C8               	movlw	200
  2880  00B9  2D48               	goto	L45
  2881  00BA                     l3503:	
  2882                           ;main.c: 81: case 30:
  2883                           
  2884                           ;main.c: 79: break;
  2885                           
  2886                           
  2887                           ;main.c: 82: if(bordaSubidaB1()) aux = 1;
  2888  00BA  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  2889  00BF  3A00               	xorlw	0
  2890  00C0  1903               	skipnz
  2891  00C1  28C8               	goto	l3507
  2892  00C2  3001               	movlw	1
  2893  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  2894  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  2895  00C5  00C7               	movwf	main@aux
  2896  00C6  3000               	movlw	0
  2897  00C7  00C8               	movwf	main@aux+1
  2898  00C8                     l3507:	
  2899                           
  2900                           ;main.c: 83: if(bordaSubidaB2()) aux = 2;
  2901  00C8  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  2902  00CD  3A00               	xorlw	0
  2903  00CE  1903               	skipnz
  2904  00CF  28D6               	goto	l3511
  2905  00D0  3002               	movlw	2
  2906  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  2907  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  2908  00D3  00C7               	movwf	main@aux
  2909  00D4  3000               	movlw	0
  2910  00D5  00C8               	movwf	main@aux+1
  2911  00D6                     l3511:	
  2912                           
  2913                           ;main.c: 84: if(bordaSubidaB3()) aux = 300;
  2914  00D6  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  2915  00DB  3A00               	xorlw	0
  2916  00DC  1903               	skipnz
  2917  00DD  28E4               	goto	l3515
  2918  00DE  302C               	movlw	44
  2919  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  2920  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  2921  00E1  00C7               	movwf	main@aux
  2922  00E2  3001               	movlw	1
  2923  00E3  00C8               	movwf	main@aux+1
  2924  00E4                     l3515:	
  2925                           
  2926                           ;main.c: 85: if(B2() & B3()) aux = 666;
  2927  00E4  160A  158A  272D  120A  118A  	fcall	_B3
  2928  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  2929  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  2930  00EB  00BF               	movwf	??_main
  2931  00EC  160A  158A  2738  120A  118A  	fcall	_B2
  2932  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  2933  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  2934  00F3  053F               	andwf	??_main,w
  2935  00F4  1903               	btfsc	3,2
  2936  00F5  2D57               	goto	l3913
  2937  00F6  309A               	movlw	154
  2938  00F7  00C7               	movwf	main@aux
  2939  00F8  3002               	movlw	2
  2940  00F9  2D4C               	goto	L34
  2941  00FA                     l3519:	
  2942                           ;main.c: 90: case 100:
  2943                           
  2944                           ;main.c: 86: break;
  2945                           
  2946                           
  2947                           ;main.c: 91: cmdLCD(0x01);
  2948  00FA  3001               	movlw	1
  2949  00FB  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  2950                           
  2951                           ;main.c: 92: writeLCD(0,0,"MODULO  DESEJADO");
  2952  0100  1283               	bcf	3,5	;RP0=0, select bank0
  2953  0101  1303               	bcf	3,6	;RP1=0, select bank0
  2954  0102  01AC               	clrf	writeLCD@y
  2955  0103  30BB               	movlw	low (STR_110| (0+32768))
  2956  0104  00AD               	movwf	writeLCD@ptr
  2957  0105  3087               	movlw	high (STR_110| (0+32768))
  2958  0106  00AE               	movwf	writeLCD@ptr+1
  2959  0107  3000               	movlw	0
  2960  0108  160A  118A  223B  120A  118A  	fcall	_writeLCD
  2961                           
  2962                           ;main.c: 93: writeLCD(0,1,"ESTEIRA      CLP");
  2963  010D  1283               	bcf	3,5	;RP0=0, select bank0
  2964  010E  1303               	bcf	3,6	;RP1=0, select bank0
  2965  010F  01AC               	clrf	writeLCD@y
  2966  0110  0AAC               	incf	writeLCD@y,f
  2967  0111  30CC               	movlw	low (STR_111| (0+32768))
  2968  0112  00AD               	movwf	writeLCD@ptr
  2969  0113  3087               	movlw	high (STR_111| (0+32768))
  2970  0114  00AE               	movwf	writeLCD@ptr+1
  2971  0115  3000               	movlw	0
  2972  0116  160A  118A  223B  120A  118A  	fcall	_writeLCD
  2973                           
  2974                           ;main.c: 94: aux = 110;
  2975  011B  306E               	movlw	110
  2976  011C  2D48               	goto	L45
  2977  011D                     l3527:	
  2978                           ;main.c: 99: {
  2979                           ;main.c: 100: case 0:
  2980                           
  2981                           ;main.c: 98: switch(i)
  2982                           
  2983                           ;main.c: 97: case 110:
  2984                           
  2985                           ;main.c: 95: break;
  2986                           
  2987                           
  2988                           ;main.c: 101: textSelectionEST();
  2989  011D  160A  118A  238E  120A  118A  	fcall	_textSelectionEST
  2990                           
  2991                           ;main.c: 102: if(bordaSubidaB2()) i = 1;
  2992  0122  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  2993  0127  3A00               	xorlw	0
  2994  0128  1903               	skipnz
  2995  0129  292E               	goto	l3533
  2996  012A  1283               	bcf	3,5	;RP0=0, select bank0
  2997  012B  1303               	bcf	3,6	;RP1=0, select bank0
  2998  012C  01C5               	clrf	main@i
  2999  012D  0AC5               	incf	main@i,f
  3000  012E                     l3533:	
  3001                           
  3002                           ;main.c: 103: if(bordaSubidaB3()) aux = 111;
  3003  012E  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3004  0133  3A00               	xorlw	0
  3005  0134  1903               	skipnz
  3006  0135  2956               	goto	l3551
  3007  0136  306F               	movlw	111
  3008  0137  2951               	goto	L50
  3009  0138                     l3541:	
  3010                           ;main.c: 107: case 1:
  3011                           
  3012                           ;main.c: 105: break;
  3013                           
  3014                           ;main.c: 104: if(B1() & B2()) aux = 10;
  3015                           
  3016                           
  3017                           ;main.c: 108: textSelectionCLP();
  3018  0138  160A  118A  2339  120A  118A  	fcall	_textSelectionCLP
  3019                           
  3020                           ;main.c: 109: if(bordaSubidaB1()) i=0;
  3021  013D  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3022  0142  3A00               	xorlw	0
  3023  0143  1903               	skipnz
  3024  0144  2948               	goto	l3547
  3025  0145  1283               	bcf	3,5	;RP0=0, select bank0
  3026  0146  1303               	bcf	3,6	;RP1=0, select bank0
  3027  0147  01C5               	clrf	main@i
  3028  0148                     l3547:	
  3029                           
  3030                           ;main.c: 110: if(bordaSubidaB3()) aux = 112;
  3031  0148  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3032  014D  3A00               	xorlw	0
  3033  014E  1903               	skipnz
  3034  014F  2956               	goto	l3551
  3035  0150  3070               	movlw	112
  3036  0151                     L50:	
  3037  0151  1283               	bcf	3,5	;RP0=0, select bank0
  3038  0152  1303               	bcf	3,6	;RP1=0, select bank0
  3039  0153  00C7               	movwf	main@aux
  3040  0154  3000               	movlw	0
  3041  0155  00C8               	movwf	main@aux+1
  3042  0156                     l3551:	
  3043                           
  3044                           ;main.c: 111: if(B1() & B2()) aux = 10;
  3045  0156  160A  158A  2738  120A  118A  	fcall	_B2
  3046  015B  1283               	bcf	3,5	;RP0=0, select bank0
  3047  015C  1303               	bcf	3,6	;RP1=0, select bank0
  3048  015D  00BF               	movwf	??_main
  3049  015E  160A  158A  2728  120A  118A  	fcall	_B1
  3050  0163  1283               	bcf	3,5	;RP0=0, select bank0
  3051  0164  1303               	bcf	3,6	;RP1=0, select bank0
  3052  0165  053F               	andwf	??_main,w
  3053  0166  1903               	btfsc	3,2
  3054  0167  2D57               	goto	l3913
  3055  0168  300A               	movlw	10
  3056  0169  2D4A               	goto	L36
  3057  016A                     l3557:	
  3058                           ;main.c: 114: }
  3059                           
  3060                           ;main.c: 112: break;
  3061                           
  3062  016A  0845               	movf	main@i,w
  3063                           
  3064                           ; Switch size 1, requested type "space"
  3065                           ; Number of cases is 2, Range of values is 0 to 1
  3066                           ; switch strategies available:
  3067                           ; Name         Instructions Cycles
  3068                           ; simple_byte            7     4 (average)
  3069                           ; direct_byte           14     8 (fixed)
  3070                           ; jumptable            260     6 (fixed)
  3071                           ;	Chosen strategy is simple_byte
  3072  016B  3A00               	xorlw	0	; case 0
  3073  016C  1903               	skipnz
  3074  016D  291D               	goto	l3527
  3075  016E  3A01               	xorlw	1	; case 1
  3076  016F  1903               	skipnz
  3077  0170  2938               	goto	l3541
  3078  0171  2D57               	goto	l3913
  3079                           
  3080                           ;main.c: 115: break;
  3081  0172  2D57               	goto	l3913
  3082  0173                     l3559:	
  3083                           ;main.c: 117: case 111:
  3084                           
  3085                           
  3086                           ;main.c: 118: cmdLCD(0x01);
  3087  0173  3001               	movlw	1
  3088  0174  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  3089                           
  3090                           ;main.c: 119: writeLCD(0,0," Enviando ");
  3091  0179  1283               	bcf	3,5	;RP0=0, select bank0
  3092  017A  1303               	bcf	3,6	;RP1=0, select bank0
  3093  017B  01AC               	clrf	writeLCD@y
  3094  017C  30A0               	movlw	low (STR_112| (0+32768))
  3095  017D  00AD               	movwf	writeLCD@ptr
  3096  017E  3089               	movlw	high (STR_112| (0+32768))
  3097  017F  00AE               	movwf	writeLCD@ptr+1
  3098  0180  3000               	movlw	0
  3099  0181  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3100                           
  3101                           ;main.c: 120: writeLCD(0,1," P/ Esteira ");
  3102  0186  1283               	bcf	3,5	;RP0=0, select bank0
  3103  0187  1303               	bcf	3,6	;RP1=0, select bank0
  3104  0188  01AC               	clrf	writeLCD@y
  3105  0189  0AAC               	incf	writeLCD@y,f
  3106  018A  306E               	movlw	low (STR_113| (0+32768))
  3107  018B  00AD               	movwf	writeLCD@ptr
  3108  018C  3089               	movlw	high (STR_113| (0+32768))
  3109  018D  00AE               	movwf	writeLCD@ptr+1
  3110  018E  3000               	movlw	0
  3111  018F  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3112                           
  3113                           ;main.c: 121: slave1();
  3114  0194  120A  158A  244C  120A  118A  	fcall	_slave1
  3115  0199  29C0               	goto	L51
  3116  019A                     l3571:	
  3117                           ;main.c: 126: case 112:
  3118                           
  3119                           ;main.c: 124: break;
  3120                           
  3121                           ;main.c: 123: aux = 1;
  3122                           
  3123                           ;main.c: 122: textLoading();
  3124                           
  3125                           
  3126                           ;main.c: 127: cmdLCD(0x01);
  3127  019A  3001               	movlw	1
  3128  019B  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  3129                           
  3130                           ;main.c: 128: writeLCD(0,0," Enviando ");
  3131  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  3132  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  3133  01A2  01AC               	clrf	writeLCD@y
  3134  01A3  30A0               	movlw	low (STR_112| (0+32768))
  3135  01A4  00AD               	movwf	writeLCD@ptr
  3136  01A5  3089               	movlw	high (STR_112| (0+32768))
  3137  01A6  00AE               	movwf	writeLCD@ptr+1
  3138  01A7  3000               	movlw	0
  3139  01A8  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3140                           
  3141                           ;main.c: 129: writeLCD(0,1," P/ CLP ");
  3142  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  3143  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  3144  01AF  01AC               	clrf	writeLCD@y
  3145  01B0  0AAC               	incf	writeLCD@y,f
  3146  01B1  30CA               	movlw	low (STR_115| (0+32768))
  3147  01B2  00AD               	movwf	writeLCD@ptr
  3148  01B3  3089               	movlw	high (STR_115| (0+32768))
  3149  01B4  00AE               	movwf	writeLCD@ptr+1
  3150  01B5  3000               	movlw	0
  3151  01B6  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3152                           
  3153                           ;main.c: 130: master1();
  3154  01BB  120A  158A  2301  120A  118A  	fcall	_master1
  3155  01C0                     L51:	
  3156                           
  3157                           ;main.c: 131: textLoading();
  3158  01C0  120A  158A  2506  120A  118A  	fcall	_textLoading
  3159  01C5                     L49:	
  3160                           
  3161                           ;main.c: 132: aux = 1;
  3162  01C5  3001               	movlw	1
  3163  01C6  2D48               	goto	L45
  3164  01C7                     l3583:	
  3165                           ;main.c: 139: case 200:
  3166                           
  3167                           ;main.c: 133: break;
  3168                           
  3169                           
  3170                           ;main.c: 140: cmdLCD(0x01);
  3171  01C7  3001               	movlw	1
  3172  01C8  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  3173                           
  3174                           ;main.c: 141: writeLCD(0,0," CONFIRMA TROCA ");
  3175  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  3176  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  3177  01CF  01AC               	clrf	writeLCD@y
  3178  01D0  3088               	movlw	low (STR_116| (0+32768))
  3179  01D1  00AD               	movwf	writeLCD@ptr
  3180  01D2  3087               	movlw	high (STR_116| (0+32768))
  3181  01D3  00AE               	movwf	writeLCD@ptr+1
  3182  01D4  3000               	movlw	0
  3183  01D5  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3184                           
  3185                           ;main.c: 142: writeLCD(0,1,"    DE DADOS    ");
  3186  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  3187  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  3188  01DC  01AC               	clrf	writeLCD@y
  3189  01DD  0AAC               	incf	writeLCD@y,f
  3190  01DE  3022               	movlw	low (STR_117| (0+32768))
  3191  01DF  00AD               	movwf	writeLCD@ptr
  3192  01E0  3087               	movlw	high (STR_117| (0+32768))
  3193  01E1  00AE               	movwf	writeLCD@ptr+1
  3194  01E2  3000               	movlw	0
  3195  01E3  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3196                           
  3197                           ;main.c: 143: aux = 210;
  3198  01E8  30D2               	movlw	210
  3199  01E9  2D48               	goto	L45
  3200  01EA                     l3591:	
  3201                           ;main.c: 146: case 210:
  3202                           
  3203                           ;main.c: 144: break;
  3204                           
  3205                           
  3206                           ;main.c: 147: if(B1() & B2()) aux = 20;
  3207  01EA  160A  158A  2738  120A  118A  	fcall	_B2
  3208  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  3209  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  3210  01F1  00BF               	movwf	??_main
  3211  01F2  160A  158A  2728  120A  118A  	fcall	_B1
  3212  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  3213  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  3214  01F9  053F               	andwf	??_main,w
  3215  01FA  1903               	btfsc	3,2
  3216  01FB  2A00               	goto	l3595
  3217  01FC  3014               	movlw	20
  3218  01FD  00C7               	movwf	main@aux
  3219  01FE  3000               	movlw	0
  3220  01FF  00C8               	movwf	main@aux+1
  3221  0200                     l3595:	
  3222                           
  3223                           ;main.c: 148: if(bordaSubidaB3())
  3224  0200  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3225  0205  3A00               	xorlw	0
  3226  0206  1903               	skipnz
  3227  0207  2D57               	goto	l3913
  3228                           
  3229                           ;main.c: 149: {
  3230                           ;main.c: 150: cmdLCD(0x01);
  3231  0208  3001               	movlw	1
  3232  0209  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  3233                           
  3234                           ;main.c: 151: writeLCD(0,0,"    TROCANDO    ");
  3235  020E  1283               	bcf	3,5	;RP0=0, select bank0
  3236  020F  1303               	bcf	3,6	;RP1=0, select bank0
  3237  0210  01AC               	clrf	writeLCD@y
  3238  0211  3011               	movlw	low (STR_118| (0+32768))
  3239  0212  00AD               	movwf	writeLCD@ptr
  3240  0213  3087               	movlw	high (STR_118| (0+32768))
  3241  0214  00AE               	movwf	writeLCD@ptr+1
  3242  0215  3000               	movlw	0
  3243  0216  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3244                           
  3245                           ;main.c: 152: writeLCD(0,1,"   INFORMACAO   ");
  3246  021B  1283               	bcf	3,5	;RP0=0, select bank0
  3247  021C  1303               	bcf	3,6	;RP1=0, select bank0
  3248  021D  01AC               	clrf	writeLCD@y
  3249  021E  0AAC               	incf	writeLCD@y,f
  3250  021F  3033               	movlw	low (STR_119| (0+32768))
  3251  0220  00AD               	movwf	writeLCD@ptr
  3252  0221  3087               	movlw	high (STR_119| (0+32768))
  3253  0222  00AE               	movwf	writeLCD@ptr+1
  3254  0223  3000               	movlw	0
  3255  0224  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3256                           
  3257                           ;main.c: 154: char t = 1;
  3258  0229  1283               	bcf	3,5	;RP0=0, select bank0
  3259  022A  1303               	bcf	3,6	;RP1=0, select bank0
  3260  022B  01C4               	clrf	main@t
  3261  022C  0AC4               	incf	main@t,f
  3262                           
  3263                           ;main.c: 156: PORTBbits.RB4 = 0;
  3264  022D  1206               	bcf	6,4	;volatile
  3265                           
  3266                           ;main.c: 158: while(t)
  3267  022E  2AB5               	goto	l3629
  3268  022F                     l3607:	
  3269                           ;main.c: 161: {
  3270                           ;main.c: 162: case 2: writeLCD(0,1, "Overrun Error");
  3271                           
  3272                           ;main.c: 159: {
  3273                           ;main.c: 160: switch( errorRxEUSART() )
  3274                           
  3275  022F  1283               	bcf	3,5	;RP0=0, select bank0
  3276  0230  1303               	bcf	3,6	;RP1=0, select bank0
  3277  0231  01AC               	clrf	writeLCD@y
  3278  0232  0AAC               	incf	writeLCD@y,f
  3279  0233  3060               	movlw	low (STR_120| (0+32768))
  3280  0234  00AD               	movwf	writeLCD@ptr
  3281  0235  3089               	movlw	high (STR_120| (0+32768))
  3282  0236  00AE               	movwf	writeLCD@ptr+1
  3283  0237  3000               	movlw	0
  3284  0238  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3285                           
  3286                           ;main.c: 163: resetErrorRxEUSART();
  3287  023D  160A  118A  21B3  120A  118A  	fcall	_resetErrorRxEUSART
  3288                           
  3289                           ;main.c: 164: break;
  3290  0242  2A96               	goto	l3625
  3291  0243                     l3611:	
  3292                           ;main.c: 165: case 1: writeLCD(0,1, "Framing Error");
  3293                           
  3294  0243  1283               	bcf	3,5	;RP0=0, select bank0
  3295  0244  1303               	bcf	3,6	;RP1=0, select bank0
  3296  0245  01AC               	clrf	writeLCD@y
  3297  0246  0AAC               	incf	writeLCD@y,f
  3298  0247  3052               	movlw	low (STR_121| (0+32768))
  3299  0248  00AD               	movwf	writeLCD@ptr
  3300  0249  3089               	movlw	high (STR_121| (0+32768))
  3301  024A  00AE               	movwf	writeLCD@ptr+1
  3302  024B  3000               	movlw	0
  3303  024C  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3304                           
  3305                           ;main.c: 166: resetErrorRxEUSART();
  3306  0251  160A  118A  21B3  120A  118A  	fcall	_resetErrorRxEUSART
  3307                           
  3308                           ;main.c: 167: break;
  3309  0256  2A96               	goto	l3625
  3310  0257                     l3615:	
  3311                           ;main.c: 169: case 0:
  3312                           
  3313                           ;main.c: 168: default:
  3314                           
  3315                           
  3316                           ;main.c: 171: if( statusFIFO() >= 2 )
  3317  0257  160A  118A  2077  120A  118A  	fcall	_statusFIFO
  3318  025C  1283               	bcf	3,5	;RP0=0, select bank0
  3319  025D  1303               	bcf	3,6	;RP1=0, select bank0
  3320  025E  00BF               	movwf	??_main
  3321  025F  3002               	movlw	2
  3322  0260  023F               	subwf	??_main,w
  3323  0261  1C03               	skipc
  3324  0262  2A96               	goto	l3625
  3325                           
  3326                           ;main.c: 172: {
  3327                           ;main.c: 173: unsigned char a1 = getFIFO();
  3328  0263  160A  118A  218A  120A  118A  	fcall	_getFIFO
  3329  0268  1283               	bcf	3,5	;RP0=0, select bank0
  3330  0269  1303               	bcf	3,6	;RP1=0, select bank0
  3331  026A  00BF               	movwf	??_main
  3332  026B  083F               	movf	??_main,w
  3333  026C  00C2               	movwf	main@a1
  3334                           
  3335                           ;main.c: 174: unsigned char a2 = getFIFO();
  3336  026D  160A  118A  218A  120A  118A  	fcall	_getFIFO
  3337  0272  1283               	bcf	3,5	;RP0=0, select bank0
  3338  0273  1303               	bcf	3,6	;RP1=0, select bank0
  3339  0274  00BF               	movwf	??_main
  3340  0275  083F               	movf	??_main,w
  3341  0276  00C3               	movwf	main@a2
  3342                           
  3343                           ;main.c: 175: serialOut( asciiToHex( a1, a2 ) );
  3344  0277  0843               	movf	main@a2,w
  3345  0278  00BF               	movwf	??_main
  3346  0279  083F               	movf	??_main,w
  3347  027A  00A4               	movwf	asciiToHex@a2
  3348  027B  0842               	movf	main@a1,w
  3349  027C  120A  158A  2216  120A  118A  	fcall	_asciiToHex
  3350  0281  160A  158A  27B4  120A  118A  	fcall	_serialOut
  3351                           
  3352                           ;main.c: 179: }
  3353                           
  3354                           ;main.c: 177: }
  3355                           ;main.c: 178: break;
  3356  0286  2A96               	goto	l3625
  3357  0287                     l3623:	
  3358  0287  160A  118A  2001  120A  118A  	fcall	_errorRxEUSART
  3359                           
  3360                           ; Switch size 1, requested type "space"
  3361                           ; Number of cases is 3, Range of values is 0 to 2
  3362                           ; switch strategies available:
  3363                           ; Name         Instructions Cycles
  3364                           ; simple_byte           10     6 (average)
  3365                           ; direct_byte           17     8 (fixed)
  3366                           ; jumptable            260     6 (fixed)
  3367                           ;	Chosen strategy is simple_byte
  3368  028C  3A00               	xorlw	0	; case 0
  3369  028D  1903               	skipnz
  3370  028E  2A57               	goto	l3615
  3371  028F  3A01               	xorlw	1	; case 1
  3372  0290  1903               	skipnz
  3373  0291  2A43               	goto	l3611
  3374  0292  3A03               	xorlw	3	; case 2
  3375  0293  1903               	skipnz
  3376  0294  2A2F               	goto	l3607
  3377  0295  2A57               	goto	l3615
  3378  0296                     l3625:	
  3379                           
  3380                           ;main.c: 181: serialOut(rhex);
  3381  0296  1283               	bcf	3,5	;RP0=0, select bank0
  3382  0297  1303               	bcf	3,6	;RP1=0, select bank0
  3383  0298  0855               	movf	_rhex,w
  3384  0299  160A  158A  27B4  120A  118A  	fcall	_serialOut
  3385                           
  3386                           ;main.c: 182: transmite();
  3387  029E  120A  118A  25BF  120A  118A  	fcall	_transmite
  3388                           
  3389                           ;main.c: 184: if(B1() & B2()) t = 0;
  3390  02A3  160A  158A  2738  120A  118A  	fcall	_B2
  3391  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  3392  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  3393  02AA  00BF               	movwf	??_main
  3394  02AB  160A  158A  2728  120A  118A  	fcall	_B1
  3395  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  3396  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  3397  02B2  053F               	andwf	??_main,w
  3398  02B3  1D03               	btfss	3,2
  3399  02B4  01C4               	clrf	main@t
  3400  02B5                     l3629:	
  3401  02B5  0844               	movf	main@t,w
  3402  02B6  1D03               	btfss	3,2
  3403  02B7  2A87               	goto	l3623
  3404                           
  3405                           ;main.c: 185: }
  3406                           ;main.c: 186: PORTBbits.RB4 = 1;
  3407  02B8  1606               	bsf	6,4	;volatile
  3408                           
  3409                           ;main.c: 187: aux = 2;
  3410  02B9  3002               	movlw	2
  3411  02BA  2D4A               	goto	L36
  3412  02BB                     l3633:	
  3413                           ;main.c: 193: case 300:
  3414                           
  3415                           ;main.c: 188: }
  3416                           ;main.c: 189: break;
  3417                           
  3418                           
  3419                           ;main.c: 194: cmdLCD(0x01);
  3420  02BB  3001               	movlw	1
  3421  02BC  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  3422                           
  3423                           ;main.c: 195: writeLCD(0,0,"BLUETOOTH <---->");
  3424  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  3425  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  3426  02C3  01AC               	clrf	writeLCD@y
  3427  02C4  30AA               	movlw	low (STR_122| (0+32768))
  3428  02C5  00AD               	movwf	writeLCD@ptr
  3429  02C6  3087               	movlw	high (STR_122| (0+32768))
  3430  02C7  00AE               	movwf	writeLCD@ptr+1
  3431  02C8  3000               	movlw	0
  3432  02C9  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3433                           
  3434                           ;main.c: 196: aux = 301;
  3435  02CE  302D               	movlw	45
  3436  02CF  2B4A               	goto	L37
  3437  02D0                     l3639:	
  3438                           ;main.c: 199: case 301:
  3439                           
  3440                           ;main.c: 197: break;
  3441                           
  3442                           
  3443                           ;main.c: 200: writeLCD(0,1,"PAREAR      BT  ");
  3444  02D0  01AC               	clrf	writeLCD@y
  3445  02D1  0AAC               	incf	writeLCD@y,f
  3446  02D2  3066               	movlw	low (STR_123| (0+32768))
  3447  02D3  00AD               	movwf	writeLCD@ptr
  3448  02D4  3087               	movlw	high (STR_123| (0+32768))
  3449  02D5  00AE               	movwf	writeLCD@ptr+1
  3450  02D6  3000               	movlw	0
  3451  02D7  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3452                           
  3453                           ;main.c: 201: if(bordaSubidaB1() || bordaSubidaB2()) aux = 302;
  3454  02DC  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3455  02E1  3A00               	xorlw	0
  3456  02E2  1D03               	skipz
  3457  02E3  2AEC               	goto	l3645
  3458  02E4  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  3459  02E9  3A00               	xorlw	0
  3460  02EA  1903               	skipnz
  3461  02EB  2AF2               	goto	l3647
  3462  02EC                     l3645:	
  3463  02EC  302E               	movlw	46
  3464  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  3465  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  3466  02EF  00C7               	movwf	main@aux
  3467  02F0  3001               	movlw	1
  3468  02F1  00C8               	movwf	main@aux+1
  3469  02F2                     l3647:	
  3470                           
  3471                           ;main.c: 202: if(bordaSubidaB3()) aux = 305;
  3472  02F2  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3473  02F7  3A00               	xorlw	0
  3474  02F8  1903               	skipnz
  3475  02F9  2CCE               	goto	l3831
  3476  02FA  3031               	movlw	49
  3477  02FB  2CC9               	goto	L52
  3478  02FC                     l3655:	
  3479                           ;main.c: 206: case 302:
  3480                           
  3481                           ;main.c: 204: break;
  3482                           
  3483                           ;main.c: 203: if(B1() & B2()) aux = 30;
  3484                           
  3485                           
  3486                           ;main.c: 207: writeLCD(0,1,"DESCONECTAR BT  ");
  3487  02FC  01AC               	clrf	writeLCD@y
  3488  02FD  0AAC               	incf	writeLCD@y,f
  3489  02FE  3077               	movlw	low (STR_124| (0+32768))
  3490  02FF  00AD               	movwf	writeLCD@ptr
  3491  0300  3087               	movlw	high (STR_124| (0+32768))
  3492  0301  00AE               	movwf	writeLCD@ptr+1
  3493  0302  3000               	movlw	0
  3494  0303  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3495                           
  3496                           ;main.c: 208: if(bordaSubidaB1() || bordaSubidaB2()) aux = 301;
  3497  0308  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3498  030D  3A00               	xorlw	0
  3499  030E  1D03               	skipz
  3500  030F  2B18               	goto	l3661
  3501  0310  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  3502  0315  3A00               	xorlw	0
  3503  0316  1903               	skipnz
  3504  0317  2B1E               	goto	l3663
  3505  0318                     l3661:	
  3506  0318  302D               	movlw	45
  3507  0319  1283               	bcf	3,5	;RP0=0, select bank0
  3508  031A  1303               	bcf	3,6	;RP1=0, select bank0
  3509  031B  00C7               	movwf	main@aux
  3510  031C  3001               	movlw	1
  3511  031D  00C8               	movwf	main@aux+1
  3512  031E                     l3663:	
  3513                           
  3514                           ;main.c: 209: if(bordaSubidaB3()) aux = 306;
  3515  031E  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3516  0323  3A00               	xorlw	0
  3517  0324  1903               	skipnz
  3518  0325  2CCE               	goto	l3831
  3519  0326  3032               	movlw	50
  3520  0327  2CC9               	goto	L52
  3521  0328                     l3671:	
  3522                           ;main.c: 214: case 305:
  3523                           
  3524                           ;main.c: 211: break;
  3525                           
  3526                           ;main.c: 210: if(B1() & B2()) aux = 30;
  3527                           
  3528                           
  3529                           ;main.c: 215: cmdLCD(0x01);
  3530  0328  3001               	movlw	1
  3531  0329  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  3532                           
  3533                           ;main.c: 216: writeLCD(0,0," PAREAR COM IP  ");
  3534  032E  1283               	bcf	3,5	;RP0=0, select bank0
  3535  032F  1303               	bcf	3,6	;RP1=0, select bank0
  3536  0330  01AC               	clrf	writeLCD@y
  3537  0331  3055               	movlw	low (STR_125| (0+32768))
  3538  0332  00AD               	movwf	writeLCD@ptr
  3539  0333  3087               	movlw	high (STR_125| (0+32768))
  3540  0334  00AE               	movwf	writeLCD@ptr+1
  3541  0335  3000               	movlw	0
  3542  0336  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3543                           
  3544                           ;main.c: 217: writeLCD(0,1,"1 2 3 4  5 6 7 8");
  3545  033B  1283               	bcf	3,5	;RP0=0, select bank0
  3546  033C  1303               	bcf	3,6	;RP1=0, select bank0
  3547  033D  01AC               	clrf	writeLCD@y
  3548  033E  0AAC               	incf	writeLCD@y,f
  3549  033F  3099               	movlw	low (STR_126| (0+32768))
  3550  0340  00AD               	movwf	writeLCD@ptr
  3551  0341  3087               	movlw	high (STR_126| (0+32768))
  3552  0342  00AE               	movwf	writeLCD@ptr+1
  3553  0343  3000               	movlw	0
  3554  0344  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3555                           
  3556                           ;main.c: 218: aux = 310;
  3557  0349  3036               	movlw	54
  3558  034A                     L37:	
  3559  034A  1283               	bcf	3,5	;RP0=0, select bank0
  3560  034B  1303               	bcf	3,6	;RP1=0, select bank0
  3561  034C  00C7               	movwf	main@aux
  3562  034D  3001               	movlw	1
  3563  034E  2D4C               	goto	L34
  3564  034F                     l3679:	
  3565                           ;main.c: 221: case 306:
  3566                           
  3567                           ;main.c: 219: break;
  3568                           
  3569                           
  3570                           ;main.c: 222: cmdLCD(0x01);
  3571  034F  3001               	movlw	1
  3572  0350  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  3573                           
  3574                           ;main.c: 223: writeLCD(0,0,"DESCONECTANDO   ");
  3575  0355  1283               	bcf	3,5	;RP0=0, select bank0
  3576  0356  1303               	bcf	3,6	;RP1=0, select bank0
  3577  0357  01AC               	clrf	writeLCD@y
  3578  0358  3044               	movlw	low (STR_127| (0+32768))
  3579  0359  00AD               	movwf	writeLCD@ptr
  3580  035A  3087               	movlw	high (STR_127| (0+32768))
  3581  035B  00AE               	movwf	writeLCD@ptr+1
  3582  035C  3000               	movlw	0
  3583  035D  160A  118A  223B  120A  118A  	fcall	_writeLCD
  3584                           
  3585                           ;main.c: 224: desconectar();
  3586  0362  160A  118A  2161  120A  118A  	fcall	_desconectar
  3587                           
  3588                           ;main.c: 225: textLoading();
  3589  0367  120A  158A  2506  120A  118A  	fcall	_textLoading
  3590                           
  3591                           ;main.c: 226: _delay((unsigned long)((500)*(20000000/4000.0)));
  3592  036C  300D               	movlw	13
  3593  036D  1283               	bcf	3,5	;RP0=0, select bank0
  3594  036E  1303               	bcf	3,6	;RP1=0, select bank0
  3595  036F  00C1               	movwf	??_main+2
  3596  0370  30AF               	movlw	175
  3597  0371  00C0               	movwf	??_main+1
  3598  0372  30B5               	movlw	181
  3599  0373  00BF               	movwf	??_main
  3600  0374                     u2937:	
  3601  0374  0BBF               	decfsz	??_main,f
  3602  0375  2B74               	goto	u2937
  3603  0376  0BC0               	decfsz	??_main+1,f
  3604  0377  2B74               	goto	u2937
  3605  0378  0BC1               	decfsz	??_main+2,f
  3606  0379  2B74               	goto	u2937
  3607  037A  2B7B               	nop2
  3608  037B  2D47               	goto	L35
  3609  037C                     l3691:	
  3610                           ;main.c: 233: {
  3611                           ;main.c: 234: case 0:
  3612                           
  3613                           ;main.c: 232: switch(a)
  3614                           
  3615                           ;main.c: 231: case 310:
  3616                           
  3617                           ;main.c: 228: break;
  3618                           
  3619                           ;main.c: 227: aux = 3;
  3620                           
  3621                           
  3622                           ;main.c: 235: textSelection1();
  3623  037C  160A  118A  25AE  120A  118A  	fcall	_textSelection1
  3624                           
  3625                           ;main.c: 236: if(bordaSubidaB1()) a=7;
  3626  0381  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3627  0386  3A00               	xorlw	0
  3628  0387  1903               	skipnz
  3629  0388  2B8F               	goto	l3697
  3630  0389  3007               	movlw	7
  3631  038A  1283               	bcf	3,5	;RP0=0, select bank0
  3632  038B  1303               	bcf	3,6	;RP1=0, select bank0
  3633  038C  00BF               	movwf	??_main
  3634  038D  083F               	movf	??_main,w
  3635  038E  00C6               	movwf	main@a
  3636  038F                     l3697:	
  3637                           
  3638                           ;main.c: 237: if(bordaSubidaB2()) a=1;
  3639  038F  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  3640  0394  3A00               	xorlw	0
  3641  0395  1903               	skipnz
  3642  0396  2B9B               	goto	l3701
  3643  0397  1283               	bcf	3,5	;RP0=0, select bank0
  3644  0398  1303               	bcf	3,6	;RP1=0, select bank0
  3645  0399  01C6               	clrf	main@a
  3646  039A  0AC6               	incf	main@a,f
  3647  039B                     l3701:	
  3648                           
  3649                           ;main.c: 238: if(bordaSubidaB3()) aux = 311;
  3650  039B  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3651  03A0  3A00               	xorlw	0
  3652  03A1  1903               	skipnz
  3653  03A2  2CCE               	goto	l3831
  3654  03A3  3037               	movlw	55
  3655  03A4  2CC9               	goto	L52
  3656  03A5                     l3709:	
  3657                           ;main.c: 242: case 1:
  3658                           
  3659                           ;main.c: 240: break;
  3660                           
  3661                           ;main.c: 239: if(B1() & B2()) aux = 30;
  3662                           
  3663                           
  3664                           ;main.c: 243: textSelection2();
  3665  03A5  160A  118A  2611  120A  118A  	fcall	_textSelection2
  3666                           
  3667                           ;main.c: 244: if(bordaSubidaB1()) a=0;
  3668  03AA  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3669  03AF  3A00               	xorlw	0
  3670  03B0  1903               	skipnz
  3671  03B1  2BB5               	goto	l3715
  3672  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  3673  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  3674  03B4  01C6               	clrf	main@a
  3675  03B5                     l3715:	
  3676                           
  3677                           ;main.c: 245: if(bordaSubidaB2()) a=2;
  3678  03B5  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  3679  03BA  3A00               	xorlw	0
  3680  03BB  1903               	skipnz
  3681  03BC  2BC3               	goto	l3719
  3682  03BD  3002               	movlw	2
  3683  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3684  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  3685  03C0  00BF               	movwf	??_main
  3686  03C1  083F               	movf	??_main,w
  3687  03C2  00C6               	movwf	main@a
  3688  03C3                     l3719:	
  3689                           
  3690                           ;main.c: 246: if(bordaSubidaB3()) aux = 312;
  3691  03C3  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3692  03C8  3A00               	xorlw	0
  3693  03C9  1903               	skipnz
  3694  03CA  2CCE               	goto	l3831
  3695  03CB  3038               	movlw	56
  3696  03CC  2CC9               	goto	L52
  3697  03CD                     l3727:	
  3698                           ;main.c: 250: case 2:
  3699                           
  3700                           ;main.c: 248: break;
  3701                           
  3702                           ;main.c: 247: if(B1() & B2()) aux = 30;
  3703                           
  3704                           
  3705                           ;main.c: 251: textSelection3();
  3706  03CD  160A  118A  2674  120A  118A  	fcall	_textSelection3
  3707                           
  3708                           ;main.c: 252: if(bordaSubidaB1()) a=1;
  3709  03D2  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3710  03D7  3A00               	xorlw	0
  3711  03D8  1903               	skipnz
  3712  03D9  2BDE               	goto	l3733
  3713  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  3714  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  3715  03DC  01C6               	clrf	main@a
  3716  03DD  0AC6               	incf	main@a,f
  3717  03DE                     l3733:	
  3718                           
  3719                           ;main.c: 253: if(bordaSubidaB2()) a=3;
  3720  03DE  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  3721  03E3  3A00               	xorlw	0
  3722  03E4  1903               	skipnz
  3723  03E5  2BEC               	goto	l3737
  3724  03E6  3003               	movlw	3
  3725  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  3726  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  3727  03E9  00BF               	movwf	??_main
  3728  03EA  083F               	movf	??_main,w
  3729  03EB  00C6               	movwf	main@a
  3730  03EC                     l3737:	
  3731                           
  3732                           ;main.c: 254: if(bordaSubidaB3()) aux = 313;
  3733  03EC  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3734  03F1  3A00               	xorlw	0
  3735  03F2  1903               	skipnz
  3736  03F3  2CCE               	goto	l3831
  3737  03F4  3039               	movlw	57
  3738  03F5  2CC9               	goto	L52
  3739  03F6                     l3745:	
  3740                           ;main.c: 258: case 3:
  3741                           
  3742                           ;main.c: 256: break;
  3743                           
  3744                           ;main.c: 255: if(B1() & B2()) aux = 30;
  3745                           
  3746                           
  3747                           ;main.c: 259: textSelection4();
  3748  03F6  160A  118A  26D7  120A  118A  	fcall	_textSelection4
  3749                           
  3750                           ;main.c: 260: if(bordaSubidaB1()) a=2;
  3751  03FB  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3752  0400  3A00               	xorlw	0
  3753  0401  1903               	skipnz
  3754  0402  2C09               	goto	l3751
  3755  0403  3002               	movlw	2
  3756  0404  1283               	bcf	3,5	;RP0=0, select bank0
  3757  0405  1303               	bcf	3,6	;RP1=0, select bank0
  3758  0406  00BF               	movwf	??_main
  3759  0407  083F               	movf	??_main,w
  3760  0408  00C6               	movwf	main@a
  3761  0409                     l3751:	
  3762                           
  3763                           ;main.c: 261: if(bordaSubidaB2()) a=4;
  3764  0409  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  3765  040E  3A00               	xorlw	0
  3766  040F  1903               	skipnz
  3767  0410  2C17               	goto	l3755
  3768  0411  3004               	movlw	4
  3769  0412  1283               	bcf	3,5	;RP0=0, select bank0
  3770  0413  1303               	bcf	3,6	;RP1=0, select bank0
  3771  0414  00BF               	movwf	??_main
  3772  0415  083F               	movf	??_main,w
  3773  0416  00C6               	movwf	main@a
  3774  0417                     l3755:	
  3775                           
  3776                           ;main.c: 262: if(bordaSubidaB3()) aux = 314;
  3777  0417  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3778  041C  3A00               	xorlw	0
  3779  041D  1903               	skipnz
  3780  041E  2CCE               	goto	l3831
  3781  041F  303A               	movlw	58
  3782  0420  2CC9               	goto	L52
  3783  0421                     l3763:	
  3784                           ;main.c: 266: case 4:
  3785                           
  3786                           ;main.c: 264: break;
  3787                           
  3788                           ;main.c: 263: if(B1() & B2()) aux = 30;
  3789                           
  3790                           
  3791                           ;main.c: 267: textSelection5();
  3792  0421  160A  118A  273A  120A  118A  	fcall	_textSelection5
  3793                           
  3794                           ;main.c: 268: if(bordaSubidaB1()) a=3;
  3795  0426  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3796  042B  3A00               	xorlw	0
  3797  042C  1903               	skipnz
  3798  042D  2C34               	goto	l3769
  3799  042E  3003               	movlw	3
  3800  042F  1283               	bcf	3,5	;RP0=0, select bank0
  3801  0430  1303               	bcf	3,6	;RP1=0, select bank0
  3802  0431  00BF               	movwf	??_main
  3803  0432  083F               	movf	??_main,w
  3804  0433  00C6               	movwf	main@a
  3805  0434                     l3769:	
  3806                           
  3807                           ;main.c: 269: if(bordaSubidaB2()) a=5;
  3808  0434  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  3809  0439  3A00               	xorlw	0
  3810  043A  1903               	skipnz
  3811  043B  2C42               	goto	l3773
  3812  043C  3005               	movlw	5
  3813  043D  1283               	bcf	3,5	;RP0=0, select bank0
  3814  043E  1303               	bcf	3,6	;RP1=0, select bank0
  3815  043F  00BF               	movwf	??_main
  3816  0440  083F               	movf	??_main,w
  3817  0441  00C6               	movwf	main@a
  3818  0442                     l3773:	
  3819                           
  3820                           ;main.c: 270: if(bordaSubidaB3()) aux = 315;
  3821  0442  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3822  0447  3A00               	xorlw	0
  3823  0448  1903               	skipnz
  3824  0449  2CCE               	goto	l3831
  3825  044A  303B               	movlw	59
  3826  044B  2CC9               	goto	L52
  3827  044C                     l3781:	
  3828                           ;main.c: 274: case 5:
  3829                           
  3830                           ;main.c: 272: break;
  3831                           
  3832                           ;main.c: 271: if(B1() & B2()) aux = 30;
  3833                           
  3834                           
  3835                           ;main.c: 275: textSelection6();
  3836  044C  160A  118A  279D  120A  118A  	fcall	_textSelection6
  3837                           
  3838                           ;main.c: 276: if(bordaSubidaB1()) a=4;
  3839  0451  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3840  0456  3A00               	xorlw	0
  3841  0457  1903               	skipnz
  3842  0458  2C5F               	goto	l3787
  3843  0459  3004               	movlw	4
  3844  045A  1283               	bcf	3,5	;RP0=0, select bank0
  3845  045B  1303               	bcf	3,6	;RP1=0, select bank0
  3846  045C  00BF               	movwf	??_main
  3847  045D  083F               	movf	??_main,w
  3848  045E  00C6               	movwf	main@a
  3849  045F                     l3787:	
  3850                           
  3851                           ;main.c: 277: if(bordaSubidaB2()) a=6;
  3852  045F  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  3853  0464  3A00               	xorlw	0
  3854  0465  1903               	skipnz
  3855  0466  2C6D               	goto	l3791
  3856  0467  3006               	movlw	6
  3857  0468  1283               	bcf	3,5	;RP0=0, select bank0
  3858  0469  1303               	bcf	3,6	;RP1=0, select bank0
  3859  046A  00BF               	movwf	??_main
  3860  046B  083F               	movf	??_main,w
  3861  046C  00C6               	movwf	main@a
  3862  046D                     l3791:	
  3863                           
  3864                           ;main.c: 278: if(bordaSubidaB3()) aux = 316;
  3865  046D  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3866  0472  3A00               	xorlw	0
  3867  0473  1903               	skipnz
  3868  0474  2CCE               	goto	l3831
  3869  0475  303C               	movlw	60
  3870  0476  2CC9               	goto	L52
  3871  0477                     l3799:	
  3872                           ;main.c: 282: case 6:
  3873                           
  3874                           ;main.c: 280: break;
  3875                           
  3876                           ;main.c: 279: if(B1() & B2()) aux = 30;
  3877                           
  3878                           
  3879                           ;main.c: 283: textSelection7();
  3880  0477  120A  158A  223B  120A  118A  	fcall	_textSelection7
  3881                           
  3882                           ;main.c: 284: if(bordaSubidaB1()) a=5;
  3883  047C  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3884  0481  3A00               	xorlw	0
  3885  0482  1903               	skipnz
  3886  0483  2C8A               	goto	l3805
  3887  0484  3005               	movlw	5
  3888  0485  1283               	bcf	3,5	;RP0=0, select bank0
  3889  0486  1303               	bcf	3,6	;RP1=0, select bank0
  3890  0487  00BF               	movwf	??_main
  3891  0488  083F               	movf	??_main,w
  3892  0489  00C6               	movwf	main@a
  3893  048A                     l3805:	
  3894                           
  3895                           ;main.c: 285: if(bordaSubidaB2()) a=7;
  3896  048A  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  3897  048F  3A00               	xorlw	0
  3898  0490  1903               	skipnz
  3899  0491  2C98               	goto	l3809
  3900  0492  3007               	movlw	7
  3901  0493  1283               	bcf	3,5	;RP0=0, select bank0
  3902  0494  1303               	bcf	3,6	;RP1=0, select bank0
  3903  0495  00BF               	movwf	??_main
  3904  0496  083F               	movf	??_main,w
  3905  0497  00C6               	movwf	main@a
  3906  0498                     l3809:	
  3907                           
  3908                           ;main.c: 286: if(bordaSubidaB3()) aux = 317;
  3909  0498  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3910  049D  3A00               	xorlw	0
  3911  049E  1903               	skipnz
  3912  049F  2CCE               	goto	l3831
  3913  04A0  303D               	movlw	61
  3914  04A1  2CC9               	goto	L52
  3915  04A2                     l3817:	
  3916                           ;main.c: 290: case 7:
  3917                           
  3918                           ;main.c: 288: break;
  3919                           
  3920                           ;main.c: 287: if(B1() & B2()) aux = 30;
  3921                           
  3922                           
  3923                           ;main.c: 291: textSelection8();
  3924  04A2  120A  158A  229E  120A  118A  	fcall	_textSelection8
  3925                           
  3926                           ;main.c: 292: if(bordaSubidaB1()) a=6;
  3927  04A7  160A  158A  27E6  120A  118A  	fcall	_bordaSubidaB1
  3928  04AC  3A00               	xorlw	0
  3929  04AD  1903               	skipnz
  3930  04AE  2CB5               	goto	l3823
  3931  04AF  3006               	movlw	6
  3932  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  3933  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  3934  04B2  00BF               	movwf	??_main
  3935  04B3  083F               	movf	??_main,w
  3936  04B4  00C6               	movwf	main@a
  3937  04B5                     l3823:	
  3938                           
  3939                           ;main.c: 293: if(bordaSubidaB2()) a=0;
  3940  04B5  160A  118A  200D  120A  118A  	fcall	_bordaSubidaB2
  3941  04BA  3A00               	xorlw	0
  3942  04BB  1903               	skipnz
  3943  04BC  2CC0               	goto	l3827
  3944  04BD  1283               	bcf	3,5	;RP0=0, select bank0
  3945  04BE  1303               	bcf	3,6	;RP1=0, select bank0
  3946  04BF  01C6               	clrf	main@a
  3947  04C0                     l3827:	
  3948                           
  3949                           ;main.c: 294: if(bordaSubidaB3()) aux = 318;
  3950  04C0  160A  118A  2027  120A  118A  	fcall	_bordaSubidaB3
  3951  04C5  3A00               	xorlw	0
  3952  04C6  1903               	skipnz
  3953  04C7  2CCE               	goto	l3831
  3954  04C8  303E               	movlw	62
  3955  04C9                     L52:	
  3956  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  3957  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  3958  04CB  00C7               	movwf	main@aux
  3959  04CC  3001               	movlw	1
  3960  04CD  00C8               	movwf	main@aux+1
  3961  04CE                     l3831:	
  3962                           
  3963                           ;main.c: 295: if(B1() & B2()) aux = 30;
  3964  04CE  160A  158A  2738  120A  118A  	fcall	_B2
  3965  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3966  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  3967  04D5  00BF               	movwf	??_main
  3968  04D6  160A  158A  2728  120A  118A  	fcall	_B1
  3969  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  3970  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  3971  04DD  053F               	andwf	??_main,w
  3972  04DE  1903               	btfsc	3,2
  3973  04DF  2D57               	goto	l3913
  3974  04E0  301E               	movlw	30
  3975  04E1  2D4A               	goto	L36
  3976  04E2                     l3837:	
  3977                           ;main.c: 297: }
  3978                           
  3979                           ;main.c: 296: break;
  3980                           
  3981  04E2  0846               	movf	main@a,w
  3982                           
  3983                           ; Switch size 1, requested type "space"
  3984                           ; Number of cases is 8, Range of values is 0 to 7
  3985                           ; switch strategies available:
  3986                           ; Name         Instructions Cycles
  3987                           ; simple_byte           25    13 (average)
  3988                           ; direct_byte           32     8 (fixed)
  3989                           ; jumptable            260     6 (fixed)
  3990                           ;	Chosen strategy is simple_byte
  3991  04E3  3A00               	xorlw	0	; case 0
  3992  04E4  1903               	skipnz
  3993  04E5  2B7C               	goto	l3691
  3994  04E6  3A01               	xorlw	1	; case 1
  3995  04E7  1903               	skipnz
  3996  04E8  2BA5               	goto	l3709
  3997  04E9  3A03               	xorlw	3	; case 2
  3998  04EA  1903               	skipnz
  3999  04EB  2BCD               	goto	l3727
  4000  04EC  3A01               	xorlw	1	; case 3
  4001  04ED  1903               	skipnz
  4002  04EE  2BF6               	goto	l3745
  4003  04EF  3A07               	xorlw	7	; case 4
  4004  04F0  1903               	skipnz
  4005  04F1  2C21               	goto	l3763
  4006  04F2  3A01               	xorlw	1	; case 5
  4007  04F3  1903               	skipnz
  4008  04F4  2C4C               	goto	l3781
  4009  04F5  3A03               	xorlw	3	; case 6
  4010  04F6  1903               	skipnz
  4011  04F7  2C77               	goto	l3799
  4012  04F8  3A01               	xorlw	1	; case 7
  4013  04F9  1903               	skipnz
  4014  04FA  2CA2               	goto	l3817
  4015  04FB  2D57               	goto	l3913
  4016                           
  4017                           ;main.c: 298: break;
  4018  04FC  2D57               	goto	l3913
  4019  04FD                     l3839:	
  4020                           ;main.c: 300: case 311:
  4021                           
  4022                           
  4023                           ;main.c: 301: cmdLCD(0x01);
  4024  04FD  3001               	movlw	1
  4025  04FE  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  4026                           
  4027                           ;main.c: 302: writeLCD(0,0," Enviando ");
  4028  0503  1283               	bcf	3,5	;RP0=0, select bank0
  4029  0504  1303               	bcf	3,6	;RP1=0, select bank0
  4030  0505  01AC               	clrf	writeLCD@y
  4031  0506  30A0               	movlw	low (STR_112| (0+32768))
  4032  0507  00AD               	movwf	writeLCD@ptr
  4033  0508  3089               	movlw	high (STR_112| (0+32768))
  4034  0509  00AE               	movwf	writeLCD@ptr+1
  4035  050A  3000               	movlw	0
  4036  050B  160A  118A  223B  120A  118A  	fcall	_writeLCD
  4037                           
  4038                           ;main.c: 303: modulo2();
  4039  0510  160A  118A  2498  120A  118A  	fcall	_modulo2
  4040  0515  2D42               	goto	L48
  4041  0516                     l3849:	
  4042                           ;main.c: 308: case 312:
  4043                           
  4044                           ;main.c: 306: break;
  4045                           
  4046                           ;main.c: 305: aux = 3;
  4047                           
  4048                           ;main.c: 304: textLoading();
  4049                           
  4050                           
  4051                           ;main.c: 309: cmdLCD(0x01);
  4052  0516  3001               	movlw	1
  4053  0517  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  4054                           
  4055                           ;main.c: 310: writeLCD(0,0," Enviando ");
  4056  051C  1283               	bcf	3,5	;RP0=0, select bank0
  4057  051D  1303               	bcf	3,6	;RP1=0, select bank0
  4058  051E  01AC               	clrf	writeLCD@y
  4059  051F  30A0               	movlw	low (STR_112| (0+32768))
  4060  0520  00AD               	movwf	writeLCD@ptr
  4061  0521  3089               	movlw	high (STR_112| (0+32768))
  4062  0522  00AE               	movwf	writeLCD@ptr+1
  4063  0523  3000               	movlw	0
  4064  0524  160A  118A  223B  120A  118A  	fcall	_writeLCD
  4065                           
  4066                           ;main.c: 311: modulo2();
  4067  0529  160A  118A  2498  120A  118A  	fcall	_modulo2
  4068  052E  2D42               	goto	L48
  4069  052F                     l3859:	
  4070                           ;main.c: 316: case 313:
  4071                           
  4072                           ;main.c: 314: break;
  4073                           
  4074                           ;main.c: 313: aux = 3;
  4075                           
  4076                           ;main.c: 312: textLoading();
  4077                           
  4078  052F                     l3867:	
  4079                           ;main.c: 324: case 314:
  4080                           
  4081                           ;main.c: 322: break;
  4082                           
  4083                           ;main.c: 321: aux = 3;
  4084                           
  4085                           ;main.c: 320: textLoading();
  4086                           
  4087                           ;main.c: 318: writeLCD(0,0," Enviando ");
  4088                           
  4089                           ;main.c: 317: cmdLCD(0x01);
  4090                           
  4091  052F                     l3875:	
  4092                           ;main.c: 332: case 315:
  4093                           
  4094                           ;main.c: 330: break;
  4095                           
  4096                           ;main.c: 329: aux = 3;
  4097                           
  4098                           ;main.c: 328: textLoading();
  4099                           
  4100                           ;main.c: 326: writeLCD(0,0," Enviando ");
  4101                           
  4102                           ;main.c: 325: cmdLCD(0x01);
  4103                           
  4104  052F                     l3883:	
  4105                           ;main.c: 340: case 316:
  4106                           
  4107                           ;main.c: 338: break;
  4108                           
  4109                           ;main.c: 337: aux = 3;
  4110                           
  4111                           ;main.c: 336: textLoading();
  4112                           
  4113                           ;main.c: 334: writeLCD(0,0," Enviando ");
  4114                           
  4115                           ;main.c: 333: cmdLCD(0x01);
  4116                           
  4117  052F                     l3891:	
  4118                           ;main.c: 348: case 317:
  4119                           
  4120                           ;main.c: 346: break;
  4121                           
  4122                           ;main.c: 345: aux = 3;
  4123                           
  4124                           ;main.c: 344: textLoading();
  4125                           
  4126                           ;main.c: 342: writeLCD(0,0," Enviando ");
  4127                           
  4128                           ;main.c: 341: cmdLCD(0x01);
  4129                           
  4130  052F                     l3899:	
  4131                           ;main.c: 356: case 318:
  4132                           
  4133                           ;main.c: 354: break;
  4134                           
  4135                           ;main.c: 353: aux = 3;
  4136                           
  4137                           ;main.c: 352: textLoading();
  4138                           
  4139                           ;main.c: 350: writeLCD(0,0," Enviando ");
  4140                           
  4141                           ;main.c: 349: cmdLCD(0x01);
  4142                           
  4143                           
  4144                           ;main.c: 357: cmdLCD(0x01);
  4145  052F  3001               	movlw	1
  4146  0530  160A  118A  23E3  120A  118A  	fcall	_cmdLCD
  4147                           
  4148                           ;main.c: 358: writeLCD(0,0," Enviando ");
  4149  0535  1283               	bcf	3,5	;RP0=0, select bank0
  4150  0536  1303               	bcf	3,6	;RP1=0, select bank0
  4151  0537  01AC               	clrf	writeLCD@y
  4152  0538  30A0               	movlw	low (STR_112| (0+32768))
  4153  0539  00AD               	movwf	writeLCD@ptr
  4154  053A  3089               	movlw	high (STR_112| (0+32768))
  4155  053B  00AE               	movwf	writeLCD@ptr+1
  4156  053C  3000               	movlw	0
  4157  053D  160A  118A  223B  120A  118A  	fcall	_writeLCD
  4158  0542                     L48:	
  4159                           
  4160                           ;main.c: 360: textLoading();
  4161  0542  120A  158A  2506  120A  118A  	fcall	_textLoading
  4162  0547                     L35:	
  4163                           
  4164                           ;main.c: 361: aux = 3;
  4165  0547  3003               	movlw	3
  4166  0548                     L45:	
  4167  0548  1283               	bcf	3,5	;RP0=0, select bank0
  4168  0549  1303               	bcf	3,6	;RP1=0, select bank0
  4169  054A                     L36:	
  4170  054A  00C7               	movwf	main@aux
  4171  054B  3000               	movlw	0
  4172  054C                     L34:	
  4173  054C  00C8               	movwf	main@aux+1
  4174                           
  4175                           ;main.c: 362: break;
  4176  054D  2D57               	goto	l3913
  4177  054E                     l3907:	
  4178                           ;main.c: 366: case 666:
  4179                           
  4180                           
  4181                           ;main.c: 367: easterEgg();
  4182  054E  120A  158A  2603  120A  118A  	fcall	_easterEgg
  4183                           
  4184                           ;main.c: 368: aux = 0;
  4185  0553  1283               	bcf	3,5	;RP0=0, select bank0
  4186  0554  1303               	bcf	3,6	;RP1=0, select bank0
  4187  0555  01C7               	clrf	main@aux
  4188  0556  01C8               	clrf	main@aux+1
  4189  0557                     l3913:	
  4190                           ;main.c: 370: }
  4191                           
  4192                           ;main.c: 369: break;
  4193                           
  4194                           
  4195                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  4196                           ; Switch size 1, requested type "space"
  4197                           ; Number of cases is 3, Range of values is 0 to 2
  4198                           ; switch strategies available:
  4199                           ; Name         Instructions Cycles
  4200                           ; simple_byte           10     6 (average)
  4201                           ; direct_byte           17     8 (fixed)
  4202                           ; jumptable            260     6 (fixed)
  4203                           ;	Chosen strategy is simple_byte
  4204  0557  1283               	bcf	3,5	;RP0=0, select bank0
  4205  0558  1303               	bcf	3,6	;RP1=0, select bank0
  4206  0559  0848               	movf	main@aux+1,w
  4207  055A  3A00               	xorlw	0	; case 0
  4208  055B  1903               	skipnz
  4209  055C  2D64               	goto	l3997
  4210  055D  3A01               	xorlw	1	; case 1
  4211  055E  1903               	skipnz
  4212  055F  2D8D               	goto	l3999
  4213  0560  3A03               	xorlw	3	; case 2
  4214  0561  1903               	skipnz
  4215  0562  2DB9               	goto	l4001
  4216  0563  2D57               	goto	l3913
  4217  0564                     l3997:	
  4218                           
  4219                           ; Switch size 1, requested type "space"
  4220                           ; Number of cases is 13, Range of values is 0 to 210
  4221                           ; switch strategies available:
  4222                           ; Name         Instructions Cycles
  4223                           ; simple_byte           40    21 (average)
  4224                           ; jumptable            260     6 (fixed)
  4225                           ;	Chosen strategy is simple_byte
  4226  0564  0847               	movf	main@aux,w
  4227  0565  3A00               	xorlw	0	; case 0
  4228  0566  1903               	skipnz
  4229  0567  2853               	goto	l3463
  4230  0568  3A01               	xorlw	1	; case 1
  4231  0569  1903               	skipnz
  4232  056A  2859               	goto	l3467
  4233  056B  3A03               	xorlw	3	; case 2
  4234  056C  1903               	skipnz
  4235  056D  2860               	goto	l3471
  4236  056E  3A01               	xorlw	1	; case 3
  4237  056F  1903               	skipnz
  4238  0570  2867               	goto	l3475
  4239  0571  3A09               	xorlw	9	; case 10
  4240  0572  1903               	skipnz
  4241  0573  286E               	goto	l3479
  4242  0574  3A1E               	xorlw	30	; case 20
  4243  0575  1903               	skipnz
  4244  0576  2894               	goto	l3491
  4245  0577  3A0A               	xorlw	10	; case 30
  4246  0578  1903               	skipnz
  4247  0579  28BA               	goto	l3503
  4248  057A  3A7A               	xorlw	122	; case 100
  4249  057B  1903               	skipnz
  4250  057C  28FA               	goto	l3519
  4251  057D  3A0A               	xorlw	10	; case 110
  4252  057E  1903               	skipnz
  4253  057F  296A               	goto	l3557
  4254  0580  3A01               	xorlw	1	; case 111
  4255  0581  1903               	skipnz
  4256  0582  2973               	goto	l3559
  4257  0583  3A1F               	xorlw	31	; case 112
  4258  0584  1903               	skipnz
  4259  0585  299A               	goto	l3571
  4260  0586  3AB8               	xorlw	184	; case 200
  4261  0587  1903               	skipnz
  4262  0588  29C7               	goto	l3583
  4263  0589  3A1A               	xorlw	26	; case 210
  4264  058A  1903               	skipnz
  4265  058B  29EA               	goto	l3591
  4266  058C  2D57               	goto	l3913
  4267  058D                     l3999:	
  4268                           
  4269                           ; Switch size 1, requested type "space"
  4270                           ; Number of cases is 14, Range of values is 44 to 62
  4271                           ; switch strategies available:
  4272                           ; Name         Instructions Cycles
  4273                           ; simple_byte           43    22 (average)
  4274                           ; direct_byte           68    11 (fixed)
  4275                           ; jumptable            263     9 (fixed)
  4276                           ;	Chosen strategy is simple_byte
  4277  058D  0847               	movf	main@aux,w
  4278  058E  3A2C               	xorlw	44	; case 44
  4279  058F  1903               	skipnz
  4280  0590  2ABB               	goto	l3633
  4281  0591  3A01               	xorlw	1	; case 45
  4282  0592  1903               	skipnz
  4283  0593  2AD0               	goto	l3639
  4284  0594  3A03               	xorlw	3	; case 46
  4285  0595  1903               	skipnz
  4286  0596  2AFC               	goto	l3655
  4287  0597  3A1F               	xorlw	31	; case 49
  4288  0598  1903               	skipnz
  4289  0599  2B28               	goto	l3671
  4290  059A  3A03               	xorlw	3	; case 50
  4291  059B  1903               	skipnz
  4292  059C  2B4F               	goto	l3679
  4293  059D  3A04               	xorlw	4	; case 54
  4294  059E  1903               	skipnz
  4295  059F  2CE2               	goto	l3837
  4296  05A0  3A01               	xorlw	1	; case 55
  4297  05A1  1903               	skipnz
  4298  05A2  2CFD               	goto	l3839
  4299  05A3  3A0F               	xorlw	15	; case 56
  4300  05A4  1903               	skipnz
  4301  05A5  2D16               	goto	l3849
  4302  05A6  3A01               	xorlw	1	; case 57
  4303  05A7  1903               	skipnz
  4304  05A8  2D2F               	goto	l3859
  4305  05A9  3A03               	xorlw	3	; case 58
  4306  05AA  1903               	skipnz
  4307  05AB  2D2F               	goto	l3867
  4308  05AC  3A01               	xorlw	1	; case 59
  4309  05AD  1903               	skipnz
  4310  05AE  2D2F               	goto	l3875
  4311  05AF  3A07               	xorlw	7	; case 60
  4312  05B0  1903               	skipnz
  4313  05B1  2D2F               	goto	l3883
  4314  05B2  3A01               	xorlw	1	; case 61
  4315  05B3  1903               	skipnz
  4316  05B4  2D2F               	goto	l3891
  4317  05B5  3A03               	xorlw	3	; case 62
  4318  05B6  1903               	skipnz
  4319  05B7  2D2F               	goto	l3899
  4320  05B8  2D57               	goto	l3913
  4321  05B9                     l4001:	
  4322                           
  4323                           ; Switch size 1, requested type "space"
  4324                           ; Number of cases is 1, Range of values is 154 to 154
  4325                           ; switch strategies available:
  4326                           ; Name         Instructions Cycles
  4327                           ; simple_byte            4     3 (average)
  4328                           ; direct_byte           14    11 (fixed)
  4329                           ; jumptable            263     9 (fixed)
  4330                           ;	Chosen strategy is simple_byte
  4331  05B9  0847               	movf	main@aux,w
  4332  05BA  3A9A               	xorlw	154	; case 154
  4333  05BB  1903               	skipnz
  4334  05BC  2D4E               	goto	l3907
  4335  05BD  2D57               	goto	l3913
  4336  05BE  2D57               	goto	l3913
  4337  05BF                     __end_of_main:	
  4338                           
  4339                           	psect	text1
  4340  05BF                     __ptext1:	
  4341 ;; *************** function _transmite *****************
  4342 ;; Defined at:
  4343 ;;		line 83 in file "Serial.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;		None
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;		None
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, pclath, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4357 ;;      Params:         0       0       0       0       0
  4358 ;;      Locals:         0       0       0       0       0
  4359 ;;      Temps:          0       2       0       0       0
  4360 ;;      Totals:         0       2       0       0       0
  4361 ;;Total ram usage:        2 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    5
  4364 ;; This function calls:
  4365 ;;		_hexToAscii
  4366 ;;		_serialIn
  4367 ;;		_writeEUSART
  4368 ;; This function is called by:
  4369 ;;		_main
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           
  4374                           ;psect for function _transmite
  4375  05BF                     _transmite:	
  4376                           
  4377                           ;Serial.c: 85: serial = serialIn();
  4378                           
  4379                           ;incstack = 0
  4380                           ; Regs used in _transmite: [wreg+status,2+status,0+pclath+cstack]
  4381  05BF  160A  158A  27CD  120A  118A  	fcall	_serialIn
  4382  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  4383  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  4384  05C6  00A8               	movwf	??_transmite
  4385  05C7  0828               	movf	??_transmite,w
  4386  05C8  00D1               	movwf	_serial
  4387                           
  4388                           ;Serial.c: 86: _delay((unsigned long)((10)*(20000000/4000.0)));
  4389  05C9  3041               	movlw	65
  4390  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  4391  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  4392  05CC  00A9               	movwf	??_transmite+1
  4393  05CD  30ED               	movlw	237
  4394  05CE  00A8               	movwf	??_transmite
  4395  05CF                     u2947:	
  4396  05CF  0BA8               	decfsz	??_transmite,f
  4397  05D0  2DCF               	goto	u2947
  4398  05D1  0BA9               	decfsz	??_transmite+1,f
  4399  05D2  2DCF               	goto	u2947
  4400  05D3  2DD4               	nop2
  4401                           
  4402                           ;Serial.c: 87: if(serial != comp)
  4403  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  4404  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  4405  05D6  0851               	movf	_serial,w
  4406  05D7  0652               	xorwf	_comp,w
  4407  05D8  1903               	skipnz
  4408  05D9  0008               	return
  4409                           
  4410                           ;Serial.c: 88: {
  4411                           ;Serial.c: 89: hexToAscii(serialIn());
  4412  05DA  160A  158A  27CD  120A  118A  	fcall	_serialIn
  4413  05DF  160A  118A  21DE  120A  118A  	fcall	_hexToAscii
  4414                           
  4415                           ;Serial.c: 90: writeEUSART(tdez);
  4416  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  4417  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  4418  05E6  0853               	movf	_tdez,w
  4419  05E7  160A  158A  2732  120A  118A  	fcall	_writeEUSART
  4420                           
  4421                           ;Serial.c: 91: writeEUSART(tuni);
  4422  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  4423  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  4424  05EE  0854               	movf	_tuni,w
  4425  05EF  160A  158A  2732   	fcall	_writeEUSART
  4426                           
  4427                           ;Serial.c: 92: comp = serial;
  4428  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  4429  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  4430  05F4  0851               	movf	_serial,w
  4431  05F5  00A8               	movwf	??_transmite
  4432  05F6  0828               	movf	??_transmite,w
  4433  05F7  00D2               	movwf	_comp
  4434  05F8  0008               	return
  4435  05F9                     __end_of_transmite:	
  4436                           
  4437                           	psect	text2
  4438  1FCD                     __ptext2:	
  4439 ;; *************** function _serialIn *****************
  4440 ;; Defined at:
  4441 ;;		line 40 in file "Serial.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;		None
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  i               1    6[BANK0 ] unsigned char 
  4446 ;;  dado            1    5[BANK0 ] unsigned char 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  1    wreg      unsigned char 
  4449 ;; Registers used:
  4450 ;;		wreg, status,2, status,0
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4456 ;;      Params:         0       0       0       0       0
  4457 ;;      Locals:         0       2       0       0       0
  4458 ;;      Temps:          0       1       0       0       0
  4459 ;;      Totals:         0       3       0       0       0
  4460 ;;Total ram usage:        3 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; Hardware stack levels required when called:    4
  4463 ;; This function calls:
  4464 ;;		Nothing
  4465 ;; This function is called by:
  4466 ;;		_transmite
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           
  4471                           ;psect for function _serialIn
  4472  1FCD                     _serialIn:	
  4473                           
  4474                           ;Serial.c: 42: unsigned char i = 0x80;
  4475                           
  4476                           ;incstack = 0
  4477                           ; Regs used in _serialIn: [wreg+status,2+status,0]
  4478  1FCD  3080               	movlw	128
  4479  1FCE  1283               	bcf	3,5	;RP0=0, select bank0
  4480  1FCF  1303               	bcf	3,6	;RP1=0, select bank0
  4481  1FD0  00A4               	movwf	??_serialIn
  4482  1FD1  0824               	movf	??_serialIn,w
  4483  1FD2  00A6               	movwf	serialIn@i
  4484                           
  4485                           ;Serial.c: 43: unsigned char dado = 0;
  4486  1FD3  01A5               	clrf	serialIn@dado
  4487                           
  4488                           ;Serial.c: 44: PORTBbits.RB3 = 0;
  4489  1FD4  1186               	bcf	6,3	;volatile
  4490                           
  4491                           ;Serial.c: 45: PORTBbits.RB3 = 1;
  4492  1FD5  1586               	bsf	6,3	;volatile
  4493  1FD6                     l2713:	
  4494                           ;Serial.c: 46: while (i)
  4495                           
  4496  1FD6  0826               	movf	serialIn@i,w
  4497  1FD7  1903               	btfsc	3,2
  4498  1FD8  2FE4               	goto	l2715
  4499                           
  4500                           ;Serial.c: 47: {
  4501                           ;Serial.c: 48: PORTBbits.RB2 = 0;
  4502  1FD9  1106               	bcf	6,2	;volatile
  4503                           
  4504                           ;Serial.c: 49: if(PORTBbits.RB1)
  4505  1FDA  1C86               	btfss	6,1	;volatile
  4506  1FDB  2FE0               	goto	l2709
  4507                           
  4508                           ;Serial.c: 50: dado |=i;
  4509  1FDC  0826               	movf	serialIn@i,w
  4510  1FDD  00A4               	movwf	??_serialIn
  4511  1FDE  0824               	movf	??_serialIn,w
  4512  1FDF  04A5               	iorwf	serialIn@dado,f
  4513  1FE0                     l2709:	
  4514                           
  4515                           ;Serial.c: 51: i >>=1;
  4516  1FE0  1003               	clrc
  4517  1FE1  0CA6               	rrf	serialIn@i,f
  4518                           
  4519                           ;Serial.c: 52: PORTBbits.RB2 = 1;
  4520  1FE2  1506               	bsf	6,2	;volatile
  4521  1FE3  2FD6               	goto	l2713
  4522  1FE4                     l2715:	
  4523                           
  4524                           ;Serial.c: 53: }
  4525                           ;Serial.c: 54: return(dado);
  4526  1FE4  0825               	movf	serialIn@dado,w
  4527  1FE5  0008               	return
  4528  1FE6                     __end_of_serialIn:	
  4529                           
  4530                           	psect	text3
  4531  11DE                     __ptext3:	
  4532 ;; *************** function _hexToAscii *****************
  4533 ;; Defined at:
  4534 ;;		line 57 in file "Serial.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  dado            1    wreg     unsigned char 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  dado            1    5[BANK0 ] unsigned char 
  4539 ;;  dez             1    7[BANK0 ] unsigned char 
  4540 ;;  uni             1    6[BANK0 ] unsigned char 
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      void 
  4543 ;; Registers used:
  4544 ;;		wreg, status,2, status,0
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4550 ;;      Params:         0       0       0       0       0
  4551 ;;      Locals:         0       3       0       0       0
  4552 ;;      Temps:          0       1       0       0       0
  4553 ;;      Totals:         0       4       0       0       0
  4554 ;;Total ram usage:        4 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:    4
  4557 ;; This function calls:
  4558 ;;		Nothing
  4559 ;; This function is called by:
  4560 ;;		_transmite
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           
  4565                           ;psect for function _hexToAscii
  4566  11DE                     _hexToAscii:	
  4567                           
  4568                           ;incstack = 0
  4569                           ; Regs used in _hexToAscii: [wreg+status,2+status,0]
  4570                           ;hexToAscii@dado stored from wreg
  4571  11DE  1283               	bcf	3,5	;RP0=0, select bank0
  4572  11DF  1303               	bcf	3,6	;RP1=0, select bank0
  4573  11E0  00A5               	movwf	hexToAscii@dado
  4574                           
  4575                           ;Serial.c: 59: char dez;
  4576                           ;Serial.c: 60: char uni;
  4577                           ;Serial.c: 62: uni = dado & 0x0F;
  4578  11E1  0825               	movf	hexToAscii@dado,w
  4579  11E2  390F               	andlw	15
  4580  11E3  00A4               	movwf	??_hexToAscii
  4581  11E4  0824               	movf	??_hexToAscii,w
  4582  11E5  00A6               	movwf	hexToAscii@uni
  4583                           
  4584                           ;Serial.c: 63: dez = dado & 0xF0;
  4585  11E6  0825               	movf	hexToAscii@dado,w
  4586  11E7  39F0               	andlw	240
  4587  11E8  00A4               	movwf	??_hexToAscii
  4588  11E9  0824               	movf	??_hexToAscii,w
  4589  11EA  00A7               	movwf	hexToAscii@dez
  4590                           
  4591                           ;Serial.c: 64: dez >>= 4 ;
  4592  11EB  0EA7               	swapf	hexToAscii@dez,f
  4593  11EC  300F               	movlw	15
  4594  11ED  05A7               	andwf	hexToAscii@dez,f
  4595                           
  4596                           ;Serial.c: 66: if (uni > 0x09)
  4597  11EE  300A               	movlw	10
  4598  11EF  0226               	subwf	hexToAscii@uni,w
  4599  11F0  1C03               	skipc
  4600  11F1  29F4               	goto	l2727
  4601                           
  4602                           ;Serial.c: 67: uni += 0x37;
  4603  11F2  3037               	movlw	55
  4604  11F3  29F5               	goto	L53
  4605  11F4                     l2727:	
  4606                           
  4607                           ;Serial.c: 68: else
  4608                           ;Serial.c: 69: uni += 0x30;
  4609  11F4  3030               	movlw	48
  4610  11F5                     L53:	
  4611  11F5  00A4               	movwf	??_hexToAscii
  4612  11F6  0824               	movf	??_hexToAscii,w
  4613  11F7  07A6               	addwf	hexToAscii@uni,f
  4614                           
  4615                           ;Serial.c: 71: if (dez > 0x09)
  4616  11F8  300A               	movlw	10
  4617  11F9  0227               	subwf	hexToAscii@dez,w
  4618  11FA  1C03               	skipc
  4619  11FB  29FE               	goto	l2733
  4620                           
  4621                           ;Serial.c: 72: dez += 0x37;
  4622  11FC  3037               	movlw	55
  4623  11FD  29FF               	goto	L54
  4624  11FE                     l2733:	
  4625                           
  4626                           ;Serial.c: 73: else
  4627                           ;Serial.c: 74: dez += 0x30;
  4628  11FE  3030               	movlw	48
  4629  11FF                     L54:	
  4630  11FF  00A4               	movwf	??_hexToAscii
  4631  1200  0824               	movf	??_hexToAscii,w
  4632  1201  07A7               	addwf	hexToAscii@dez,f
  4633                           
  4634                           ;Serial.c: 76: tdez = dez;
  4635  1202  0827               	movf	hexToAscii@dez,w
  4636  1203  00A4               	movwf	??_hexToAscii
  4637  1204  0824               	movf	??_hexToAscii,w
  4638  1205  00D3               	movwf	_tdez
  4639                           
  4640                           ;Serial.c: 77: tuni = uni;
  4641  1206  0826               	movf	hexToAscii@uni,w
  4642  1207  00A4               	movwf	??_hexToAscii
  4643  1208  0824               	movf	??_hexToAscii,w
  4644  1209  00D4               	movwf	_tuni
  4645  120A  0008               	return
  4646  120B                     __end_of_hexToAscii:	
  4647                           
  4648                           	psect	text4
  4649  138E                     __ptext4:	
  4650 ;; *************** function _textSelectionEST *****************
  4651 ;; Defined at:
  4652 ;;		line 120 in file "auxiliar.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;		None
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;		None
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  1    wreg      void 
  4659 ;; Registers used:
  4660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4666 ;;      Params:         0       0       0       0       0
  4667 ;;      Locals:         0       0       0       0       0
  4668 ;;      Temps:          0       3       0       0       0
  4669 ;;      Totals:         0       3       0       0       0
  4670 ;;Total ram usage:        3 bytes
  4671 ;; Hardware stack levels used:    1
  4672 ;; Hardware stack levels required when called:    7
  4673 ;; This function calls:
  4674 ;;		___awdiv
  4675 ;;		_statusT0
  4676 ;;		_statusT0limite
  4677 ;;		_writeLCD
  4678 ;; This function is called by:
  4679 ;;		_main
  4680 ;; This function uses a non-reentrant model
  4681 ;;
  4682                           
  4683                           
  4684                           ;psect for function _textSelectionEST
  4685  138E                     _textSelectionEST:	
  4686                           
  4687                           ;auxiliar.c: 122: writeLCD(13,1,"CLP");
  4688                           
  4689                           ;incstack = 0
  4690                           ; Regs used in _textSelectionEST: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4691  138E  1283               	bcf	3,5	;RP0=0, select bank0
  4692  138F  1303               	bcf	3,6	;RP1=0, select bank0
  4693  1390  01AC               	clrf	writeLCD@y
  4694  1391  0AAC               	incf	writeLCD@y,f
  4695  1392  30D9               	movlw	low ((STR_111+13)| (0+32768))
  4696  1393  00AD               	movwf	writeLCD@ptr
  4697  1394  3087               	movlw	high ((STR_111+13)| (0+32768))
  4698  1395  00AE               	movwf	writeLCD@ptr+1
  4699  1396  300D               	movlw	13
  4700  1397  160A  118A  223B  160A  118A  	fcall	_writeLCD
  4701                           
  4702                           ;auxiliar.c: 123: if( statusT0() < ( statusT0limite()/2 ) )
  4703  139C  160A  158A  2746  160A  118A  	fcall	_statusT0
  4704  13A1  1283               	bcf	3,5	;RP0=0, select bank0
  4705  13A2  1303               	bcf	3,6	;RP1=0, select bank0
  4706  13A3  0824               	movf	?_statusT0,w
  4707  13A4  00B1               	movwf	??_textSelectionEST
  4708  13A5  0825               	movf	?_statusT0+1,w
  4709  13A6  00B2               	movwf	??_textSelectionEST+1
  4710  13A7  3002               	movlw	2
  4711  13A8  00A6               	movwf	___awdiv@divisor
  4712  13A9  3000               	movlw	0
  4713  13AA  00A7               	movwf	___awdiv@divisor+1
  4714  13AB  120A  118A  25F9  160A  118A  	fcall	_statusT0limite
  4715  13B0  1283               	bcf	3,5	;RP0=0, select bank0
  4716  13B1  1303               	bcf	3,6	;RP1=0, select bank0
  4717  13B2  0825               	movf	?_statusT0limite+1,w
  4718  13B3  00A9               	movwf	___awdiv@dividend+1
  4719  13B4  0824               	movf	?_statusT0limite,w
  4720  13B5  00A8               	movwf	___awdiv@dividend
  4721  13B6  160A  118A  24F3  160A  118A  	fcall	___awdiv
  4722  13BB  1283               	bcf	3,5	;RP0=0, select bank0
  4723  13BC  1303               	bcf	3,6	;RP1=0, select bank0
  4724  13BD  0832               	movf	??_textSelectionEST+1,w
  4725  13BE  3A80               	xorlw	128
  4726  13BF  00B3               	movwf	??_textSelectionEST+2
  4727  13C0  0827               	movf	?___awdiv+1,w
  4728  13C1  3A80               	xorlw	128
  4729  13C2  0233               	subwf	??_textSelectionEST+2,w
  4730  13C3  1D03               	skipz
  4731  13C4  2BC7               	goto	u2145
  4732  13C5  0826               	movf	?___awdiv,w
  4733  13C6  0231               	subwf	??_textSelectionEST,w
  4734  13C7                     u2145:	
  4735  13C7  1803               	skipnc
  4736  13C8  2BD6               	goto	l3071
  4737                           
  4738                           ;auxiliar.c: 124: writeLCD(0,1,"       ");
  4739  13C9  1283               	bcf	3,5	;RP0=0, select bank0
  4740  13CA  1303               	bcf	3,6	;RP1=0, select bank0
  4741  13CB  01AC               	clrf	writeLCD@y
  4742  13CC  0AAC               	incf	writeLCD@y,f
  4743  13CD  30F7               	movlw	low ((STR_68+9)| (0+32768))
  4744  13CE  00AD               	movwf	writeLCD@ptr
  4745  13CF  3087               	movlw	high ((STR_68+9)| (0+32768))
  4746  13D0  00AE               	movwf	writeLCD@ptr+1
  4747  13D1  3000               	movlw	0
  4748  13D2  160A  118A  223B   	fcall	_writeLCD
  4749  13D5  0008               	return
  4750  13D6                     l3071:	
  4751                           
  4752                           ;auxiliar.c: 125: else
  4753                           ;auxiliar.c: 126: writeLCD(0,1,"ESTEIRA");
  4754  13D6  1283               	bcf	3,5	;RP0=0, select bank0
  4755  13D7  1303               	bcf	3,6	;RP1=0, select bank0
  4756  13D8  01AC               	clrf	writeLCD@y
  4757  13D9  0AAC               	incf	writeLCD@y,f
  4758  13DA  30DC               	movlw	low (STR_47| (0+32768))
  4759  13DB  00AD               	movwf	writeLCD@ptr
  4760  13DC  3089               	movlw	high (STR_47| (0+32768))
  4761  13DD  00AE               	movwf	writeLCD@ptr+1
  4762  13DE  3000               	movlw	0
  4763  13DF  160A  118A  223B   	fcall	_writeLCD
  4764  13E2  0008               	return
  4765  13E3                     __end_of_textSelectionEST:	
  4766                           
  4767                           	psect	text5
  4768  1339                     __ptext5:	
  4769 ;; *************** function _textSelectionCLP *****************
  4770 ;; Defined at:
  4771 ;;		line 128 in file "auxiliar.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;		None
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;		None
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  1    wreg      void 
  4778 ;; Registers used:
  4779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4785 ;;      Params:         0       0       0       0       0
  4786 ;;      Locals:         0       0       0       0       0
  4787 ;;      Temps:          0       3       0       0       0
  4788 ;;      Totals:         0       3       0       0       0
  4789 ;;Total ram usage:        3 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    7
  4792 ;; This function calls:
  4793 ;;		___awdiv
  4794 ;;		_statusT0
  4795 ;;		_statusT0limite
  4796 ;;		_writeLCD
  4797 ;; This function is called by:
  4798 ;;		_main
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           
  4803                           ;psect for function _textSelectionCLP
  4804  1339                     _textSelectionCLP:	
  4805                           
  4806                           ;auxiliar.c: 130: writeLCD(0,1,"ESTEIRA");
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in _textSelectionCLP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4810  1339  1283               	bcf	3,5	;RP0=0, select bank0
  4811  133A  1303               	bcf	3,6	;RP1=0, select bank0
  4812  133B  01AC               	clrf	writeLCD@y
  4813  133C  0AAC               	incf	writeLCD@y,f
  4814  133D  30DC               	movlw	low (STR_47| (0+32768))
  4815  133E  00AD               	movwf	writeLCD@ptr
  4816  133F  3089               	movlw	high (STR_47| (0+32768))
  4817  1340  00AE               	movwf	writeLCD@ptr+1
  4818  1341  3000               	movlw	0
  4819  1342  160A  118A  223B  160A  118A  	fcall	_writeLCD
  4820                           
  4821                           ;auxiliar.c: 131: if( statusT0() < ( statusT0limite()/2 ) )
  4822  1347  160A  158A  2746  160A  118A  	fcall	_statusT0
  4823  134C  1283               	bcf	3,5	;RP0=0, select bank0
  4824  134D  1303               	bcf	3,6	;RP1=0, select bank0
  4825  134E  0824               	movf	?_statusT0,w
  4826  134F  00B1               	movwf	??_textSelectionCLP
  4827  1350  0825               	movf	?_statusT0+1,w
  4828  1351  00B2               	movwf	??_textSelectionCLP+1
  4829  1352  3002               	movlw	2
  4830  1353  00A6               	movwf	___awdiv@divisor
  4831  1354  3000               	movlw	0
  4832  1355  00A7               	movwf	___awdiv@divisor+1
  4833  1356  120A  118A  25F9  160A  118A  	fcall	_statusT0limite
  4834  135B  1283               	bcf	3,5	;RP0=0, select bank0
  4835  135C  1303               	bcf	3,6	;RP1=0, select bank0
  4836  135D  0825               	movf	?_statusT0limite+1,w
  4837  135E  00A9               	movwf	___awdiv@dividend+1
  4838  135F  0824               	movf	?_statusT0limite,w
  4839  1360  00A8               	movwf	___awdiv@dividend
  4840  1361  160A  118A  24F3  160A  118A  	fcall	___awdiv
  4841  1366  1283               	bcf	3,5	;RP0=0, select bank0
  4842  1367  1303               	bcf	3,6	;RP1=0, select bank0
  4843  1368  0832               	movf	??_textSelectionCLP+1,w
  4844  1369  3A80               	xorlw	128
  4845  136A  00B3               	movwf	??_textSelectionCLP+2
  4846  136B  0827               	movf	?___awdiv+1,w
  4847  136C  3A80               	xorlw	128
  4848  136D  0233               	subwf	??_textSelectionCLP+2,w
  4849  136E  1D03               	skipz
  4850  136F  2B72               	goto	u2155
  4851  1370  0826               	movf	?___awdiv,w
  4852  1371  0231               	subwf	??_textSelectionCLP,w
  4853  1372                     u2155:	
  4854  1372  1803               	skipnc
  4855  1373  2B81               	goto	l3079
  4856                           
  4857                           ;auxiliar.c: 132: writeLCD(13,1,"   ");
  4858  1374  1283               	bcf	3,5	;RP0=0, select bank0
  4859  1375  1303               	bcf	3,6	;RP1=0, select bank0
  4860  1376  01AC               	clrf	writeLCD@y
  4861  1377  0AAC               	incf	writeLCD@y,f
  4862  1378  30FB               	movlw	low ((STR_68+13)| (0+32768))
  4863  1379  00AD               	movwf	writeLCD@ptr
  4864  137A  3087               	movlw	high ((STR_68+13)| (0+32768))
  4865  137B  00AE               	movwf	writeLCD@ptr+1
  4866  137C  300D               	movlw	13
  4867  137D  160A  118A  223B   	fcall	_writeLCD
  4868  1380  0008               	return
  4869  1381                     l3079:	
  4870                           
  4871                           ;auxiliar.c: 133: else
  4872                           ;auxiliar.c: 134: writeLCD(13,1,"CLP");
  4873  1381  1283               	bcf	3,5	;RP0=0, select bank0
  4874  1382  1303               	bcf	3,6	;RP1=0, select bank0
  4875  1383  01AC               	clrf	writeLCD@y
  4876  1384  0AAC               	incf	writeLCD@y,f
  4877  1385  30D9               	movlw	low ((STR_111+13)| (0+32768))
  4878  1386  00AD               	movwf	writeLCD@ptr
  4879  1387  3087               	movlw	high ((STR_111+13)| (0+32768))
  4880  1388  00AE               	movwf	writeLCD@ptr+1
  4881  1389  300D               	movlw	13
  4882  138A  160A  118A  223B   	fcall	_writeLCD
  4883  138D  0008               	return
  4884  138E                     __end_of_textSelectionCLP:	
  4885                           
  4886                           	psect	text6
  4887  0A9E                     __ptext6:	
  4888 ;; *************** function _textSelection8 *****************
  4889 ;; Defined at:
  4890 ;;		line 110 in file "auxiliar.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;		None
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;		None
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      void 
  4897 ;; Registers used:
  4898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4904 ;;      Params:         0       0       0       0       0
  4905 ;;      Locals:         0       0       0       0       0
  4906 ;;      Temps:          0       3       0       0       0
  4907 ;;      Totals:         0       3       0       0       0
  4908 ;;Total ram usage:        3 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    7
  4911 ;; This function calls:
  4912 ;;		___awdiv
  4913 ;;		_statusT0
  4914 ;;		_statusT0limite
  4915 ;;		_writeLCD
  4916 ;; This function is called by:
  4917 ;;		_main
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           
  4922                           ;psect for function _textSelection8
  4923  0A9E                     _textSelection8:	
  4924                           
  4925                           ;auxiliar.c: 112: writeLCD(13,1,"7");
  4926                           
  4927                           ;incstack = 0
  4928                           ; Regs used in _textSelection8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4929  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  4930  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  4931  0AA0  01AC               	clrf	writeLCD@y
  4932  0AA1  0AAC               	incf	writeLCD@y,f
  4933  0AA2  3009               	movlw	low (STR_34| (0+32768))
  4934  0AA3  00AD               	movwf	writeLCD@ptr
  4935  0AA4  308A               	movlw	high (STR_34| (0+32768))
  4936  0AA5  00AE               	movwf	writeLCD@ptr+1
  4937  0AA6  300D               	movlw	13
  4938  0AA7  160A  118A  223B  120A  158A  	fcall	_writeLCD
  4939                           
  4940                           ;auxiliar.c: 113: writeLCD(0,1,"1");
  4941  0AAC  1283               	bcf	3,5	;RP0=0, select bank0
  4942  0AAD  1303               	bcf	3,6	;RP1=0, select bank0
  4943  0AAE  01AC               	clrf	writeLCD@y
  4944  0AAF  0AAC               	incf	writeLCD@y,f
  4945  0AB0  30FF               	movlw	low (STR_16| (0+32768))
  4946  0AB1  00AD               	movwf	writeLCD@ptr
  4947  0AB2  3089               	movlw	high (STR_16| (0+32768))
  4948  0AB3  00AE               	movwf	writeLCD@ptr+1
  4949  0AB4  3000               	movlw	0
  4950  0AB5  160A  118A  223B  120A  158A  	fcall	_writeLCD
  4951                           
  4952                           ;auxiliar.c: 114: if( statusT0() < ( statusT0limite()/2 ) )
  4953  0ABA  160A  158A  2746  120A  158A  	fcall	_statusT0
  4954  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
  4955  0AC0  1303               	bcf	3,6	;RP1=0, select bank0
  4956  0AC1  0824               	movf	?_statusT0,w
  4957  0AC2  00B1               	movwf	??_textSelection8
  4958  0AC3  0825               	movf	?_statusT0+1,w
  4959  0AC4  00B2               	movwf	??_textSelection8+1
  4960  0AC5  3002               	movlw	2
  4961  0AC6  00A6               	movwf	___awdiv@divisor
  4962  0AC7  3000               	movlw	0
  4963  0AC8  00A7               	movwf	___awdiv@divisor+1
  4964  0AC9  120A  118A  25F9  120A  158A  	fcall	_statusT0limite
  4965  0ACE  1283               	bcf	3,5	;RP0=0, select bank0
  4966  0ACF  1303               	bcf	3,6	;RP1=0, select bank0
  4967  0AD0  0825               	movf	?_statusT0limite+1,w
  4968  0AD1  00A9               	movwf	___awdiv@dividend+1
  4969  0AD2  0824               	movf	?_statusT0limite,w
  4970  0AD3  00A8               	movwf	___awdiv@dividend
  4971  0AD4  160A  118A  24F3  120A  158A  	fcall	___awdiv
  4972  0AD9  1283               	bcf	3,5	;RP0=0, select bank0
  4973  0ADA  1303               	bcf	3,6	;RP1=0, select bank0
  4974  0ADB  0832               	movf	??_textSelection8+1,w
  4975  0ADC  3A80               	xorlw	128
  4976  0ADD  00B3               	movwf	??_textSelection8+2
  4977  0ADE  0827               	movf	?___awdiv+1,w
  4978  0ADF  3A80               	xorlw	128
  4979  0AE0  0233               	subwf	??_textSelection8+2,w
  4980  0AE1  1D03               	skipz
  4981  0AE2  2AE5               	goto	u2135
  4982  0AE3  0826               	movf	?___awdiv,w
  4983  0AE4  0231               	subwf	??_textSelection8,w
  4984  0AE5                     u2135:	
  4985  0AE5  1803               	skipnc
  4986  0AE6  2AF4               	goto	l3063
  4987                           
  4988                           ;auxiliar.c: 115: writeLCD(15,1," ");
  4989  0AE7  1283               	bcf	3,5	;RP0=0, select bank0
  4990  0AE8  1303               	bcf	3,6	;RP1=0, select bank0
  4991  0AE9  01AC               	clrf	writeLCD@y
  4992  0AEA  0AAC               	incf	writeLCD@y,f
  4993  0AEB  30FD               	movlw	low ((STR_68+15)| (0+32768))
  4994  0AEC  00AD               	movwf	writeLCD@ptr
  4995  0AED  3087               	movlw	high ((STR_68+15)| (0+32768))
  4996  0AEE  00AE               	movwf	writeLCD@ptr+1
  4997  0AEF  300F               	movlw	15
  4998  0AF0  160A  118A  223B   	fcall	_writeLCD
  4999  0AF3  0008               	return
  5000  0AF4                     l3063:	
  5001                           
  5002                           ;auxiliar.c: 116: else
  5003                           ;auxiliar.c: 117: writeLCD(15,1,"8");
  5004  0AF4  1283               	bcf	3,5	;RP0=0, select bank0
  5005  0AF5  1303               	bcf	3,6	;RP1=0, select bank0
  5006  0AF6  01AC               	clrf	writeLCD@y
  5007  0AF7  0AAC               	incf	writeLCD@y,f
  5008  0AF8  30A8               	movlw	low ((STR_126+15)| (0+32768))
  5009  0AF9  00AD               	movwf	writeLCD@ptr
  5010  0AFA  3087               	movlw	high ((STR_126+15)| (0+32768))
  5011  0AFB  00AE               	movwf	writeLCD@ptr+1
  5012  0AFC  300F               	movlw	15
  5013  0AFD  160A  118A  223B   	fcall	_writeLCD
  5014  0B00  0008               	return
  5015  0B01                     __end_of_textSelection8:	
  5016                           
  5017                           	psect	text7
  5018  0A3B                     __ptext7:	
  5019 ;; *************** function _textSelection7 *****************
  5020 ;; Defined at:
  5021 ;;		line 100 in file "auxiliar.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;		None
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;		None
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5035 ;;      Params:         0       0       0       0       0
  5036 ;;      Locals:         0       0       0       0       0
  5037 ;;      Temps:          0       3       0       0       0
  5038 ;;      Totals:         0       3       0       0       0
  5039 ;;Total ram usage:        3 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    7
  5042 ;; This function calls:
  5043 ;;		___awdiv
  5044 ;;		_statusT0
  5045 ;;		_statusT0limite
  5046 ;;		_writeLCD
  5047 ;; This function is called by:
  5048 ;;		_main
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           
  5053                           ;psect for function _textSelection7
  5054  0A3B                     _textSelection7:	
  5055                           
  5056                           ;auxiliar.c: 102: writeLCD(11,1,"6");
  5057                           
  5058                           ;incstack = 0
  5059                           ; Regs used in _textSelection7: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5060  0A3B  1283               	bcf	3,5	;RP0=0, select bank0
  5061  0A3C  1303               	bcf	3,6	;RP1=0, select bank0
  5062  0A3D  01AC               	clrf	writeLCD@y
  5063  0A3E  0AAC               	incf	writeLCD@y,f
  5064  0A3F  3007               	movlw	low (STR_30| (0+32768))
  5065  0A40  00AD               	movwf	writeLCD@ptr
  5066  0A41  308A               	movlw	high (STR_30| (0+32768))
  5067  0A42  00AE               	movwf	writeLCD@ptr+1
  5068  0A43  300B               	movlw	11
  5069  0A44  160A  118A  223B  120A  158A  	fcall	_writeLCD
  5070                           
  5071                           ;auxiliar.c: 103: writeLCD(15,1,"8");
  5072  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  5073  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  5074  0A4B  01AC               	clrf	writeLCD@y
  5075  0A4C  0AAC               	incf	writeLCD@y,f
  5076  0A4D  30A8               	movlw	low ((STR_126+15)| (0+32768))
  5077  0A4E  00AD               	movwf	writeLCD@ptr
  5078  0A4F  3087               	movlw	high ((STR_126+15)| (0+32768))
  5079  0A50  00AE               	movwf	writeLCD@ptr+1
  5080  0A51  300F               	movlw	15
  5081  0A52  160A  118A  223B  120A  158A  	fcall	_writeLCD
  5082                           
  5083                           ;auxiliar.c: 104: if( statusT0() < ( statusT0limite()/2 ) )
  5084  0A57  160A  158A  2746  120A  158A  	fcall	_statusT0
  5085  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  5086  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  5087  0A5E  0824               	movf	?_statusT0,w
  5088  0A5F  00B1               	movwf	??_textSelection7
  5089  0A60  0825               	movf	?_statusT0+1,w
  5090  0A61  00B2               	movwf	??_textSelection7+1
  5091  0A62  3002               	movlw	2
  5092  0A63  00A6               	movwf	___awdiv@divisor
  5093  0A64  3000               	movlw	0
  5094  0A65  00A7               	movwf	___awdiv@divisor+1
  5095  0A66  120A  118A  25F9  120A  158A  	fcall	_statusT0limite
  5096  0A6B  1283               	bcf	3,5	;RP0=0, select bank0
  5097  0A6C  1303               	bcf	3,6	;RP1=0, select bank0
  5098  0A6D  0825               	movf	?_statusT0limite+1,w
  5099  0A6E  00A9               	movwf	___awdiv@dividend+1
  5100  0A6F  0824               	movf	?_statusT0limite,w
  5101  0A70  00A8               	movwf	___awdiv@dividend
  5102  0A71  160A  118A  24F3  120A  158A  	fcall	___awdiv
  5103  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  5104  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  5105  0A78  0832               	movf	??_textSelection7+1,w
  5106  0A79  3A80               	xorlw	128
  5107  0A7A  00B3               	movwf	??_textSelection7+2
  5108  0A7B  0827               	movf	?___awdiv+1,w
  5109  0A7C  3A80               	xorlw	128
  5110  0A7D  0233               	subwf	??_textSelection7+2,w
  5111  0A7E  1D03               	skipz
  5112  0A7F  2A82               	goto	u2125
  5113  0A80  0826               	movf	?___awdiv,w
  5114  0A81  0231               	subwf	??_textSelection7,w
  5115  0A82                     u2125:	
  5116  0A82  1803               	skipnc
  5117  0A83  2A91               	goto	l3055
  5118                           
  5119                           ;auxiliar.c: 105: writeLCD(13,1," ");
  5120  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  5121  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  5122  0A86  01AC               	clrf	writeLCD@y
  5123  0A87  0AAC               	incf	writeLCD@y,f
  5124  0A88  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5125  0A89  00AD               	movwf	writeLCD@ptr
  5126  0A8A  3087               	movlw	high ((STR_68+15)| (0+32768))
  5127  0A8B  00AE               	movwf	writeLCD@ptr+1
  5128  0A8C  300D               	movlw	13
  5129  0A8D  160A  118A  223B   	fcall	_writeLCD
  5130  0A90  0008               	return
  5131  0A91                     l3055:	
  5132                           
  5133                           ;auxiliar.c: 106: else
  5134                           ;auxiliar.c: 107: writeLCD(13,1,"7");
  5135  0A91  1283               	bcf	3,5	;RP0=0, select bank0
  5136  0A92  1303               	bcf	3,6	;RP1=0, select bank0
  5137  0A93  01AC               	clrf	writeLCD@y
  5138  0A94  0AAC               	incf	writeLCD@y,f
  5139  0A95  3009               	movlw	low (STR_34| (0+32768))
  5140  0A96  00AD               	movwf	writeLCD@ptr
  5141  0A97  308A               	movlw	high (STR_34| (0+32768))
  5142  0A98  00AE               	movwf	writeLCD@ptr+1
  5143  0A99  300D               	movlw	13
  5144  0A9A  160A  118A  223B   	fcall	_writeLCD
  5145  0A9D  0008               	return
  5146  0A9E                     __end_of_textSelection7:	
  5147                           
  5148                           	psect	text8
  5149  179D                     __ptext8:	
  5150 ;; *************** function _textSelection6 *****************
  5151 ;; Defined at:
  5152 ;;		line 90 in file "auxiliar.c"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;		None
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;		None
  5157 ;; Return value:  Size  Location     Type
  5158 ;;                  1    wreg      void 
  5159 ;; Registers used:
  5160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5166 ;;      Params:         0       0       0       0       0
  5167 ;;      Locals:         0       0       0       0       0
  5168 ;;      Temps:          0       3       0       0       0
  5169 ;;      Totals:         0       3       0       0       0
  5170 ;;Total ram usage:        3 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:    7
  5173 ;; This function calls:
  5174 ;;		___awdiv
  5175 ;;		_statusT0
  5176 ;;		_statusT0limite
  5177 ;;		_writeLCD
  5178 ;; This function is called by:
  5179 ;;		_main
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           
  5184                           ;psect for function _textSelection6
  5185  179D                     _textSelection6:	
  5186                           
  5187                           ;auxiliar.c: 92: writeLCD(9,1,"5");
  5188                           
  5189                           ;incstack = 0
  5190                           ; Regs used in _textSelection6: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5191  179D  1283               	bcf	3,5	;RP0=0, select bank0
  5192  179E  1303               	bcf	3,6	;RP1=0, select bank0
  5193  179F  01AC               	clrf	writeLCD@y
  5194  17A0  0AAC               	incf	writeLCD@y,f
  5195  17A1  3005               	movlw	low (STR_26| (0+32768))
  5196  17A2  00AD               	movwf	writeLCD@ptr
  5197  17A3  308A               	movlw	high (STR_26| (0+32768))
  5198  17A4  00AE               	movwf	writeLCD@ptr+1
  5199  17A5  3009               	movlw	9
  5200  17A6  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5201                           
  5202                           ;auxiliar.c: 93: writeLCD(13,1,"7");
  5203  17AB  1283               	bcf	3,5	;RP0=0, select bank0
  5204  17AC  1303               	bcf	3,6	;RP1=0, select bank0
  5205  17AD  01AC               	clrf	writeLCD@y
  5206  17AE  0AAC               	incf	writeLCD@y,f
  5207  17AF  3009               	movlw	low (STR_34| (0+32768))
  5208  17B0  00AD               	movwf	writeLCD@ptr
  5209  17B1  308A               	movlw	high (STR_34| (0+32768))
  5210  17B2  00AE               	movwf	writeLCD@ptr+1
  5211  17B3  300D               	movlw	13
  5212  17B4  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5213                           
  5214                           ;auxiliar.c: 94: if( statusT0() < ( statusT0limite()/2 ) )
  5215  17B9  160A  158A  2746  160A  118A  	fcall	_statusT0
  5216  17BE  1283               	bcf	3,5	;RP0=0, select bank0
  5217  17BF  1303               	bcf	3,6	;RP1=0, select bank0
  5218  17C0  0824               	movf	?_statusT0,w
  5219  17C1  00B1               	movwf	??_textSelection6
  5220  17C2  0825               	movf	?_statusT0+1,w
  5221  17C3  00B2               	movwf	??_textSelection6+1
  5222  17C4  3002               	movlw	2
  5223  17C5  00A6               	movwf	___awdiv@divisor
  5224  17C6  3000               	movlw	0
  5225  17C7  00A7               	movwf	___awdiv@divisor+1
  5226  17C8  120A  118A  25F9  160A  118A  	fcall	_statusT0limite
  5227  17CD  1283               	bcf	3,5	;RP0=0, select bank0
  5228  17CE  1303               	bcf	3,6	;RP1=0, select bank0
  5229  17CF  0825               	movf	?_statusT0limite+1,w
  5230  17D0  00A9               	movwf	___awdiv@dividend+1
  5231  17D1  0824               	movf	?_statusT0limite,w
  5232  17D2  00A8               	movwf	___awdiv@dividend
  5233  17D3  160A  118A  24F3  160A  118A  	fcall	___awdiv
  5234  17D8  1283               	bcf	3,5	;RP0=0, select bank0
  5235  17D9  1303               	bcf	3,6	;RP1=0, select bank0
  5236  17DA  0832               	movf	??_textSelection6+1,w
  5237  17DB  3A80               	xorlw	128
  5238  17DC  00B3               	movwf	??_textSelection6+2
  5239  17DD  0827               	movf	?___awdiv+1,w
  5240  17DE  3A80               	xorlw	128
  5241  17DF  0233               	subwf	??_textSelection6+2,w
  5242  17E0  1D03               	skipz
  5243  17E1  2FE4               	goto	u2115
  5244  17E2  0826               	movf	?___awdiv,w
  5245  17E3  0231               	subwf	??_textSelection6,w
  5246  17E4                     u2115:	
  5247  17E4  1803               	skipnc
  5248  17E5  2FF3               	goto	l3047
  5249                           
  5250                           ;auxiliar.c: 95: writeLCD(11,1," ");
  5251  17E6  1283               	bcf	3,5	;RP0=0, select bank0
  5252  17E7  1303               	bcf	3,6	;RP1=0, select bank0
  5253  17E8  01AC               	clrf	writeLCD@y
  5254  17E9  0AAC               	incf	writeLCD@y,f
  5255  17EA  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5256  17EB  00AD               	movwf	writeLCD@ptr
  5257  17EC  3087               	movlw	high ((STR_68+15)| (0+32768))
  5258  17ED  00AE               	movwf	writeLCD@ptr+1
  5259  17EE  300B               	movlw	11
  5260  17EF  160A  118A  223B   	fcall	_writeLCD
  5261  17F2  0008               	return
  5262  17F3                     l3047:	
  5263                           
  5264                           ;auxiliar.c: 96: else
  5265                           ;auxiliar.c: 97: writeLCD(11,1,"6");
  5266  17F3  1283               	bcf	3,5	;RP0=0, select bank0
  5267  17F4  1303               	bcf	3,6	;RP1=0, select bank0
  5268  17F5  01AC               	clrf	writeLCD@y
  5269  17F6  0AAC               	incf	writeLCD@y,f
  5270  17F7  3007               	movlw	low (STR_30| (0+32768))
  5271  17F8  00AD               	movwf	writeLCD@ptr
  5272  17F9  308A               	movlw	high (STR_30| (0+32768))
  5273  17FA  00AE               	movwf	writeLCD@ptr+1
  5274  17FB  300B               	movlw	11
  5275  17FC  160A  118A  223B   	fcall	_writeLCD
  5276  17FF  0008               	return
  5277  1800                     __end_of_textSelection6:	
  5278                           
  5279                           	psect	text9
  5280  173A                     __ptext9:	
  5281 ;; *************** function _textSelection5 *****************
  5282 ;; Defined at:
  5283 ;;		line 80 in file "auxiliar.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;		None
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;		None
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      void 
  5290 ;; Registers used:
  5291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5297 ;;      Params:         0       0       0       0       0
  5298 ;;      Locals:         0       0       0       0       0
  5299 ;;      Temps:          0       3       0       0       0
  5300 ;;      Totals:         0       3       0       0       0
  5301 ;;Total ram usage:        3 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    7
  5304 ;; This function calls:
  5305 ;;		___awdiv
  5306 ;;		_statusT0
  5307 ;;		_statusT0limite
  5308 ;;		_writeLCD
  5309 ;; This function is called by:
  5310 ;;		_main
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           
  5315                           ;psect for function _textSelection5
  5316  173A                     _textSelection5:	
  5317                           
  5318                           ;auxiliar.c: 82: writeLCD(6,1,"4");
  5319                           
  5320                           ;incstack = 0
  5321                           ; Regs used in _textSelection5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5322  173A  1283               	bcf	3,5	;RP0=0, select bank0
  5323  173B  1303               	bcf	3,6	;RP1=0, select bank0
  5324  173C  01AC               	clrf	writeLCD@y
  5325  173D  0AAC               	incf	writeLCD@y,f
  5326  173E  3003               	movlw	low (STR_22| (0+32768))
  5327  173F  00AD               	movwf	writeLCD@ptr
  5328  1740  308A               	movlw	high (STR_22| (0+32768))
  5329  1741  00AE               	movwf	writeLCD@ptr+1
  5330  1742  3006               	movlw	6
  5331  1743  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5332                           
  5333                           ;auxiliar.c: 83: writeLCD(11,1,"6");
  5334  1748  1283               	bcf	3,5	;RP0=0, select bank0
  5335  1749  1303               	bcf	3,6	;RP1=0, select bank0
  5336  174A  01AC               	clrf	writeLCD@y
  5337  174B  0AAC               	incf	writeLCD@y,f
  5338  174C  3007               	movlw	low (STR_30| (0+32768))
  5339  174D  00AD               	movwf	writeLCD@ptr
  5340  174E  308A               	movlw	high (STR_30| (0+32768))
  5341  174F  00AE               	movwf	writeLCD@ptr+1
  5342  1750  300B               	movlw	11
  5343  1751  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5344                           
  5345                           ;auxiliar.c: 84: if( statusT0() < ( statusT0limite()/2 ) )
  5346  1756  160A  158A  2746  160A  118A  	fcall	_statusT0
  5347  175B  1283               	bcf	3,5	;RP0=0, select bank0
  5348  175C  1303               	bcf	3,6	;RP1=0, select bank0
  5349  175D  0824               	movf	?_statusT0,w
  5350  175E  00B1               	movwf	??_textSelection5
  5351  175F  0825               	movf	?_statusT0+1,w
  5352  1760  00B2               	movwf	??_textSelection5+1
  5353  1761  3002               	movlw	2
  5354  1762  00A6               	movwf	___awdiv@divisor
  5355  1763  3000               	movlw	0
  5356  1764  00A7               	movwf	___awdiv@divisor+1
  5357  1765  120A  118A  25F9  160A  118A  	fcall	_statusT0limite
  5358  176A  1283               	bcf	3,5	;RP0=0, select bank0
  5359  176B  1303               	bcf	3,6	;RP1=0, select bank0
  5360  176C  0825               	movf	?_statusT0limite+1,w
  5361  176D  00A9               	movwf	___awdiv@dividend+1
  5362  176E  0824               	movf	?_statusT0limite,w
  5363  176F  00A8               	movwf	___awdiv@dividend
  5364  1770  160A  118A  24F3  160A  118A  	fcall	___awdiv
  5365  1775  1283               	bcf	3,5	;RP0=0, select bank0
  5366  1776  1303               	bcf	3,6	;RP1=0, select bank0
  5367  1777  0832               	movf	??_textSelection5+1,w
  5368  1778  3A80               	xorlw	128
  5369  1779  00B3               	movwf	??_textSelection5+2
  5370  177A  0827               	movf	?___awdiv+1,w
  5371  177B  3A80               	xorlw	128
  5372  177C  0233               	subwf	??_textSelection5+2,w
  5373  177D  1D03               	skipz
  5374  177E  2F81               	goto	u2105
  5375  177F  0826               	movf	?___awdiv,w
  5376  1780  0231               	subwf	??_textSelection5,w
  5377  1781                     u2105:	
  5378  1781  1803               	skipnc
  5379  1782  2F90               	goto	l3039
  5380                           
  5381                           ;auxiliar.c: 85: writeLCD(9,1," ");
  5382  1783  1283               	bcf	3,5	;RP0=0, select bank0
  5383  1784  1303               	bcf	3,6	;RP1=0, select bank0
  5384  1785  01AC               	clrf	writeLCD@y
  5385  1786  0AAC               	incf	writeLCD@y,f
  5386  1787  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5387  1788  00AD               	movwf	writeLCD@ptr
  5388  1789  3087               	movlw	high ((STR_68+15)| (0+32768))
  5389  178A  00AE               	movwf	writeLCD@ptr+1
  5390  178B  3009               	movlw	9
  5391  178C  160A  118A  223B   	fcall	_writeLCD
  5392  178F  0008               	return
  5393  1790                     l3039:	
  5394                           
  5395                           ;auxiliar.c: 86: else
  5396                           ;auxiliar.c: 87: writeLCD(9,1,"5");
  5397  1790  1283               	bcf	3,5	;RP0=0, select bank0
  5398  1791  1303               	bcf	3,6	;RP1=0, select bank0
  5399  1792  01AC               	clrf	writeLCD@y
  5400  1793  0AAC               	incf	writeLCD@y,f
  5401  1794  3005               	movlw	low (STR_26| (0+32768))
  5402  1795  00AD               	movwf	writeLCD@ptr
  5403  1796  308A               	movlw	high (STR_26| (0+32768))
  5404  1797  00AE               	movwf	writeLCD@ptr+1
  5405  1798  3009               	movlw	9
  5406  1799  160A  118A  223B   	fcall	_writeLCD
  5407  179C  0008               	return
  5408  179D                     __end_of_textSelection5:	
  5409                           
  5410                           	psect	text10
  5411  16D7                     __ptext10:	
  5412 ;; *************** function _textSelection4 *****************
  5413 ;; Defined at:
  5414 ;;		line 70 in file "auxiliar.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;		None
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;		None
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  1    wreg      void 
  5421 ;; Registers used:
  5422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5428 ;;      Params:         0       0       0       0       0
  5429 ;;      Locals:         0       0       0       0       0
  5430 ;;      Temps:          0       3       0       0       0
  5431 ;;      Totals:         0       3       0       0       0
  5432 ;;Total ram usage:        3 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    7
  5435 ;; This function calls:
  5436 ;;		___awdiv
  5437 ;;		_statusT0
  5438 ;;		_statusT0limite
  5439 ;;		_writeLCD
  5440 ;; This function is called by:
  5441 ;;		_main
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           
  5446                           ;psect for function _textSelection4
  5447  16D7                     _textSelection4:	
  5448                           
  5449                           ;auxiliar.c: 72: writeLCD(4,1,"3");
  5450                           
  5451                           ;incstack = 0
  5452                           ; Regs used in _textSelection4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5453  16D7  1283               	bcf	3,5	;RP0=0, select bank0
  5454  16D8  1303               	bcf	3,6	;RP1=0, select bank0
  5455  16D9  01AC               	clrf	writeLCD@y
  5456  16DA  0AAC               	incf	writeLCD@y,f
  5457  16DB  300D               	movlw	low ((STR_81+15)| (0+32768))
  5458  16DC  00AD               	movwf	writeLCD@ptr
  5459  16DD  3089               	movlw	high ((STR_81+15)| (0+32768))
  5460  16DE  00AE               	movwf	writeLCD@ptr+1
  5461  16DF  3004               	movlw	4
  5462  16E0  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5463                           
  5464                           ;auxiliar.c: 73: writeLCD(9,1,"5");
  5465  16E5  1283               	bcf	3,5	;RP0=0, select bank0
  5466  16E6  1303               	bcf	3,6	;RP1=0, select bank0
  5467  16E7  01AC               	clrf	writeLCD@y
  5468  16E8  0AAC               	incf	writeLCD@y,f
  5469  16E9  3005               	movlw	low (STR_26| (0+32768))
  5470  16EA  00AD               	movwf	writeLCD@ptr
  5471  16EB  308A               	movlw	high (STR_26| (0+32768))
  5472  16EC  00AE               	movwf	writeLCD@ptr+1
  5473  16ED  3009               	movlw	9
  5474  16EE  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5475                           
  5476                           ;auxiliar.c: 74: if( statusT0() < ( statusT0limite()/2 ) )
  5477  16F3  160A  158A  2746  160A  118A  	fcall	_statusT0
  5478  16F8  1283               	bcf	3,5	;RP0=0, select bank0
  5479  16F9  1303               	bcf	3,6	;RP1=0, select bank0
  5480  16FA  0824               	movf	?_statusT0,w
  5481  16FB  00B1               	movwf	??_textSelection4
  5482  16FC  0825               	movf	?_statusT0+1,w
  5483  16FD  00B2               	movwf	??_textSelection4+1
  5484  16FE  3002               	movlw	2
  5485  16FF  00A6               	movwf	___awdiv@divisor
  5486  1700  3000               	movlw	0
  5487  1701  00A7               	movwf	___awdiv@divisor+1
  5488  1702  120A  118A  25F9  160A  118A  	fcall	_statusT0limite
  5489  1707  1283               	bcf	3,5	;RP0=0, select bank0
  5490  1708  1303               	bcf	3,6	;RP1=0, select bank0
  5491  1709  0825               	movf	?_statusT0limite+1,w
  5492  170A  00A9               	movwf	___awdiv@dividend+1
  5493  170B  0824               	movf	?_statusT0limite,w
  5494  170C  00A8               	movwf	___awdiv@dividend
  5495  170D  160A  118A  24F3  160A  118A  	fcall	___awdiv
  5496  1712  1283               	bcf	3,5	;RP0=0, select bank0
  5497  1713  1303               	bcf	3,6	;RP1=0, select bank0
  5498  1714  0832               	movf	??_textSelection4+1,w
  5499  1715  3A80               	xorlw	128
  5500  1716  00B3               	movwf	??_textSelection4+2
  5501  1717  0827               	movf	?___awdiv+1,w
  5502  1718  3A80               	xorlw	128
  5503  1719  0233               	subwf	??_textSelection4+2,w
  5504  171A  1D03               	skipz
  5505  171B  2F1E               	goto	u2095
  5506  171C  0826               	movf	?___awdiv,w
  5507  171D  0231               	subwf	??_textSelection4,w
  5508  171E                     u2095:	
  5509  171E  1803               	skipnc
  5510  171F  2F2D               	goto	l3031
  5511                           
  5512                           ;auxiliar.c: 75: writeLCD(6,1," ");
  5513  1720  1283               	bcf	3,5	;RP0=0, select bank0
  5514  1721  1303               	bcf	3,6	;RP1=0, select bank0
  5515  1722  01AC               	clrf	writeLCD@y
  5516  1723  0AAC               	incf	writeLCD@y,f
  5517  1724  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5518  1725  00AD               	movwf	writeLCD@ptr
  5519  1726  3087               	movlw	high ((STR_68+15)| (0+32768))
  5520  1727  00AE               	movwf	writeLCD@ptr+1
  5521  1728  3006               	movlw	6
  5522  1729  160A  118A  223B   	fcall	_writeLCD
  5523  172C  0008               	return
  5524  172D                     l3031:	
  5525                           
  5526                           ;auxiliar.c: 76: else
  5527                           ;auxiliar.c: 77: writeLCD(6,1,"4");
  5528  172D  1283               	bcf	3,5	;RP0=0, select bank0
  5529  172E  1303               	bcf	3,6	;RP1=0, select bank0
  5530  172F  01AC               	clrf	writeLCD@y
  5531  1730  0AAC               	incf	writeLCD@y,f
  5532  1731  3003               	movlw	low (STR_22| (0+32768))
  5533  1732  00AD               	movwf	writeLCD@ptr
  5534  1733  308A               	movlw	high (STR_22| (0+32768))
  5535  1734  00AE               	movwf	writeLCD@ptr+1
  5536  1735  3006               	movlw	6
  5537  1736  160A  118A  223B   	fcall	_writeLCD
  5538  1739  0008               	return
  5539  173A                     __end_of_textSelection4:	
  5540                           
  5541                           	psect	text11
  5542  1674                     __ptext11:	
  5543 ;; *************** function _textSelection3 *****************
  5544 ;; Defined at:
  5545 ;;		line 60 in file "auxiliar.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;		None
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;		None
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5559 ;;      Params:         0       0       0       0       0
  5560 ;;      Locals:         0       0       0       0       0
  5561 ;;      Temps:          0       3       0       0       0
  5562 ;;      Totals:         0       3       0       0       0
  5563 ;;Total ram usage:        3 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    7
  5566 ;; This function calls:
  5567 ;;		___awdiv
  5568 ;;		_statusT0
  5569 ;;		_statusT0limite
  5570 ;;		_writeLCD
  5571 ;; This function is called by:
  5572 ;;		_main
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           
  5577                           ;psect for function _textSelection3
  5578  1674                     _textSelection3:	
  5579                           
  5580                           ;auxiliar.c: 62: writeLCD(2,1,"2");
  5581                           
  5582                           ;incstack = 0
  5583                           ; Regs used in _textSelection3: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5584  1674  1283               	bcf	3,5	;RP0=0, select bank0
  5585  1675  1303               	bcf	3,6	;RP1=0, select bank0
  5586  1676  01AC               	clrf	writeLCD@y
  5587  1677  0AAC               	incf	writeLCD@y,f
  5588  1678  3001               	movlw	low (STR_14| (0+32768))
  5589  1679  00AD               	movwf	writeLCD@ptr
  5590  167A  308A               	movlw	high (STR_14| (0+32768))
  5591  167B  00AE               	movwf	writeLCD@ptr+1
  5592  167C  3002               	movlw	2
  5593  167D  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5594                           
  5595                           ;auxiliar.c: 63: writeLCD(6,1,"4");;
  5596  1682  1283               	bcf	3,5	;RP0=0, select bank0
  5597  1683  1303               	bcf	3,6	;RP1=0, select bank0
  5598  1684  01AC               	clrf	writeLCD@y
  5599  1685  0AAC               	incf	writeLCD@y,f
  5600  1686  3003               	movlw	low (STR_22| (0+32768))
  5601  1687  00AD               	movwf	writeLCD@ptr
  5602  1688  308A               	movlw	high (STR_22| (0+32768))
  5603  1689  00AE               	movwf	writeLCD@ptr+1
  5604  168A  3006               	movlw	6
  5605  168B  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5606                           
  5607                           ;auxiliar.c: 64: if( statusT0() < ( statusT0limite()/2 ) )
  5608  1690  160A  158A  2746  160A  118A  	fcall	_statusT0
  5609  1695  1283               	bcf	3,5	;RP0=0, select bank0
  5610  1696  1303               	bcf	3,6	;RP1=0, select bank0
  5611  1697  0824               	movf	?_statusT0,w
  5612  1698  00B1               	movwf	??_textSelection3
  5613  1699  0825               	movf	?_statusT0+1,w
  5614  169A  00B2               	movwf	??_textSelection3+1
  5615  169B  3002               	movlw	2
  5616  169C  00A6               	movwf	___awdiv@divisor
  5617  169D  3000               	movlw	0
  5618  169E  00A7               	movwf	___awdiv@divisor+1
  5619  169F  120A  118A  25F9  160A  118A  	fcall	_statusT0limite
  5620  16A4  1283               	bcf	3,5	;RP0=0, select bank0
  5621  16A5  1303               	bcf	3,6	;RP1=0, select bank0
  5622  16A6  0825               	movf	?_statusT0limite+1,w
  5623  16A7  00A9               	movwf	___awdiv@dividend+1
  5624  16A8  0824               	movf	?_statusT0limite,w
  5625  16A9  00A8               	movwf	___awdiv@dividend
  5626  16AA  160A  118A  24F3  160A  118A  	fcall	___awdiv
  5627  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  5628  16B0  1303               	bcf	3,6	;RP1=0, select bank0
  5629  16B1  0832               	movf	??_textSelection3+1,w
  5630  16B2  3A80               	xorlw	128
  5631  16B3  00B3               	movwf	??_textSelection3+2
  5632  16B4  0827               	movf	?___awdiv+1,w
  5633  16B5  3A80               	xorlw	128
  5634  16B6  0233               	subwf	??_textSelection3+2,w
  5635  16B7  1D03               	skipz
  5636  16B8  2EBB               	goto	u2085
  5637  16B9  0826               	movf	?___awdiv,w
  5638  16BA  0231               	subwf	??_textSelection3,w
  5639  16BB                     u2085:	
  5640  16BB  1803               	skipnc
  5641  16BC  2ECA               	goto	l3023
  5642                           
  5643                           ;auxiliar.c: 65: writeLCD(4,1," ");
  5644  16BD  1283               	bcf	3,5	;RP0=0, select bank0
  5645  16BE  1303               	bcf	3,6	;RP1=0, select bank0
  5646  16BF  01AC               	clrf	writeLCD@y
  5647  16C0  0AAC               	incf	writeLCD@y,f
  5648  16C1  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5649  16C2  00AD               	movwf	writeLCD@ptr
  5650  16C3  3087               	movlw	high ((STR_68+15)| (0+32768))
  5651  16C4  00AE               	movwf	writeLCD@ptr+1
  5652  16C5  3004               	movlw	4
  5653  16C6  160A  118A  223B   	fcall	_writeLCD
  5654  16C9  0008               	return
  5655  16CA                     l3023:	
  5656                           
  5657                           ;auxiliar.c: 66: else
  5658                           ;auxiliar.c: 67: writeLCD(4,1,"3");
  5659  16CA  1283               	bcf	3,5	;RP0=0, select bank0
  5660  16CB  1303               	bcf	3,6	;RP1=0, select bank0
  5661  16CC  01AC               	clrf	writeLCD@y
  5662  16CD  0AAC               	incf	writeLCD@y,f
  5663  16CE  300D               	movlw	low ((STR_81+15)| (0+32768))
  5664  16CF  00AD               	movwf	writeLCD@ptr
  5665  16D0  3089               	movlw	high ((STR_81+15)| (0+32768))
  5666  16D1  00AE               	movwf	writeLCD@ptr+1
  5667  16D2  3004               	movlw	4
  5668  16D3  160A  118A  223B   	fcall	_writeLCD
  5669  16D6  0008               	return
  5670  16D7                     __end_of_textSelection3:	
  5671                           
  5672                           	psect	text12
  5673  1611                     __ptext12:	
  5674 ;; *************** function _textSelection2 *****************
  5675 ;; Defined at:
  5676 ;;		line 50 in file "auxiliar.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;		None
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;		None
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      void 
  5683 ;; Registers used:
  5684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5690 ;;      Params:         0       0       0       0       0
  5691 ;;      Locals:         0       0       0       0       0
  5692 ;;      Temps:          0       3       0       0       0
  5693 ;;      Totals:         0       3       0       0       0
  5694 ;;Total ram usage:        3 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    7
  5697 ;; This function calls:
  5698 ;;		___awdiv
  5699 ;;		_statusT0
  5700 ;;		_statusT0limite
  5701 ;;		_writeLCD
  5702 ;; This function is called by:
  5703 ;;		_main
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           
  5708                           ;psect for function _textSelection2
  5709  1611                     _textSelection2:	
  5710                           
  5711                           ;auxiliar.c: 52: writeLCD(0,1,"1");
  5712                           
  5713                           ;incstack = 0
  5714                           ; Regs used in _textSelection2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5715  1611  1283               	bcf	3,5	;RP0=0, select bank0
  5716  1612  1303               	bcf	3,6	;RP1=0, select bank0
  5717  1613  01AC               	clrf	writeLCD@y
  5718  1614  0AAC               	incf	writeLCD@y,f
  5719  1615  30FF               	movlw	low (STR_16| (0+32768))
  5720  1616  00AD               	movwf	writeLCD@ptr
  5721  1617  3089               	movlw	high (STR_16| (0+32768))
  5722  1618  00AE               	movwf	writeLCD@ptr+1
  5723  1619  3000               	movlw	0
  5724  161A  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5725                           
  5726                           ;auxiliar.c: 53: writeLCD(4,1,"3");
  5727  161F  1283               	bcf	3,5	;RP0=0, select bank0
  5728  1620  1303               	bcf	3,6	;RP1=0, select bank0
  5729  1621  01AC               	clrf	writeLCD@y
  5730  1622  0AAC               	incf	writeLCD@y,f
  5731  1623  300D               	movlw	low ((STR_81+15)| (0+32768))
  5732  1624  00AD               	movwf	writeLCD@ptr
  5733  1625  3089               	movlw	high ((STR_81+15)| (0+32768))
  5734  1626  00AE               	movwf	writeLCD@ptr+1
  5735  1627  3004               	movlw	4
  5736  1628  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5737                           
  5738                           ;auxiliar.c: 54: if( statusT0() < ( statusT0limite()/2 ) )
  5739  162D  160A  158A  2746  160A  118A  	fcall	_statusT0
  5740  1632  1283               	bcf	3,5	;RP0=0, select bank0
  5741  1633  1303               	bcf	3,6	;RP1=0, select bank0
  5742  1634  0824               	movf	?_statusT0,w
  5743  1635  00B1               	movwf	??_textSelection2
  5744  1636  0825               	movf	?_statusT0+1,w
  5745  1637  00B2               	movwf	??_textSelection2+1
  5746  1638  3002               	movlw	2
  5747  1639  00A6               	movwf	___awdiv@divisor
  5748  163A  3000               	movlw	0
  5749  163B  00A7               	movwf	___awdiv@divisor+1
  5750  163C  120A  118A  25F9  160A  118A  	fcall	_statusT0limite
  5751  1641  1283               	bcf	3,5	;RP0=0, select bank0
  5752  1642  1303               	bcf	3,6	;RP1=0, select bank0
  5753  1643  0825               	movf	?_statusT0limite+1,w
  5754  1644  00A9               	movwf	___awdiv@dividend+1
  5755  1645  0824               	movf	?_statusT0limite,w
  5756  1646  00A8               	movwf	___awdiv@dividend
  5757  1647  160A  118A  24F3  160A  118A  	fcall	___awdiv
  5758  164C  1283               	bcf	3,5	;RP0=0, select bank0
  5759  164D  1303               	bcf	3,6	;RP1=0, select bank0
  5760  164E  0832               	movf	??_textSelection2+1,w
  5761  164F  3A80               	xorlw	128
  5762  1650  00B3               	movwf	??_textSelection2+2
  5763  1651  0827               	movf	?___awdiv+1,w
  5764  1652  3A80               	xorlw	128
  5765  1653  0233               	subwf	??_textSelection2+2,w
  5766  1654  1D03               	skipz
  5767  1655  2E58               	goto	u2075
  5768  1656  0826               	movf	?___awdiv,w
  5769  1657  0231               	subwf	??_textSelection2,w
  5770  1658                     u2075:	
  5771  1658  1803               	skipnc
  5772  1659  2E67               	goto	l3015
  5773                           
  5774                           ;auxiliar.c: 55: writeLCD(2,1," ");
  5775  165A  1283               	bcf	3,5	;RP0=0, select bank0
  5776  165B  1303               	bcf	3,6	;RP1=0, select bank0
  5777  165C  01AC               	clrf	writeLCD@y
  5778  165D  0AAC               	incf	writeLCD@y,f
  5779  165E  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5780  165F  00AD               	movwf	writeLCD@ptr
  5781  1660  3087               	movlw	high ((STR_68+15)| (0+32768))
  5782  1661  00AE               	movwf	writeLCD@ptr+1
  5783  1662  3002               	movlw	2
  5784  1663  160A  118A  223B   	fcall	_writeLCD
  5785  1666  0008               	return
  5786  1667                     l3015:	
  5787                           
  5788                           ;auxiliar.c: 56: else
  5789                           ;auxiliar.c: 57: writeLCD(2,1,"2");
  5790  1667  1283               	bcf	3,5	;RP0=0, select bank0
  5791  1668  1303               	bcf	3,6	;RP1=0, select bank0
  5792  1669  01AC               	clrf	writeLCD@y
  5793  166A  0AAC               	incf	writeLCD@y,f
  5794  166B  3001               	movlw	low (STR_14| (0+32768))
  5795  166C  00AD               	movwf	writeLCD@ptr
  5796  166D  308A               	movlw	high (STR_14| (0+32768))
  5797  166E  00AE               	movwf	writeLCD@ptr+1
  5798  166F  3002               	movlw	2
  5799  1670  160A  118A  223B   	fcall	_writeLCD
  5800  1673  0008               	return
  5801  1674                     __end_of_textSelection2:	
  5802                           
  5803                           	psect	text13
  5804  15AE                     __ptext13:	
  5805 ;; *************** function _textSelection1 *****************
  5806 ;; Defined at:
  5807 ;;		line 39 in file "auxiliar.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;		None
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;		None
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  1    wreg      void 
  5814 ;; Registers used:
  5815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5821 ;;      Params:         0       0       0       0       0
  5822 ;;      Locals:         0       0       0       0       0
  5823 ;;      Temps:          0       3       0       0       0
  5824 ;;      Totals:         0       3       0       0       0
  5825 ;;Total ram usage:        3 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; Hardware stack levels required when called:    7
  5828 ;; This function calls:
  5829 ;;		___awdiv
  5830 ;;		_statusT0
  5831 ;;		_statusT0limite
  5832 ;;		_writeLCD
  5833 ;; This function is called by:
  5834 ;;		_main
  5835 ;; This function uses a non-reentrant model
  5836 ;;
  5837                           
  5838                           
  5839                           ;psect for function _textSelection1
  5840  15AE                     _textSelection1:	
  5841                           
  5842                           ;auxiliar.c: 41: writeLCD(15,1,"8");
  5843                           
  5844                           ;incstack = 0
  5845                           ; Regs used in _textSelection1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5846  15AE  1283               	bcf	3,5	;RP0=0, select bank0
  5847  15AF  1303               	bcf	3,6	;RP1=0, select bank0
  5848  15B0  01AC               	clrf	writeLCD@y
  5849  15B1  0AAC               	incf	writeLCD@y,f
  5850  15B2  30A8               	movlw	low ((STR_126+15)| (0+32768))
  5851  15B3  00AD               	movwf	writeLCD@ptr
  5852  15B4  3087               	movlw	high ((STR_126+15)| (0+32768))
  5853  15B5  00AE               	movwf	writeLCD@ptr+1
  5854  15B6  300F               	movlw	15
  5855  15B7  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5856                           
  5857                           ;auxiliar.c: 42: writeLCD(2,1,"2");
  5858  15BC  1283               	bcf	3,5	;RP0=0, select bank0
  5859  15BD  1303               	bcf	3,6	;RP1=0, select bank0
  5860  15BE  01AC               	clrf	writeLCD@y
  5861  15BF  0AAC               	incf	writeLCD@y,f
  5862  15C0  3001               	movlw	low (STR_14| (0+32768))
  5863  15C1  00AD               	movwf	writeLCD@ptr
  5864  15C2  308A               	movlw	high (STR_14| (0+32768))
  5865  15C3  00AE               	movwf	writeLCD@ptr+1
  5866  15C4  3002               	movlw	2
  5867  15C5  160A  118A  223B  160A  118A  	fcall	_writeLCD
  5868                           
  5869                           ;auxiliar.c: 43: if( statusT0() < ( statusT0limite()/2 ) )
  5870  15CA  160A  158A  2746  160A  118A  	fcall	_statusT0
  5871  15CF  1283               	bcf	3,5	;RP0=0, select bank0
  5872  15D0  1303               	bcf	3,6	;RP1=0, select bank0
  5873  15D1  0824               	movf	?_statusT0,w
  5874  15D2  00B1               	movwf	??_textSelection1
  5875  15D3  0825               	movf	?_statusT0+1,w
  5876  15D4  00B2               	movwf	??_textSelection1+1
  5877  15D5  3002               	movlw	2
  5878  15D6  00A6               	movwf	___awdiv@divisor
  5879  15D7  3000               	movlw	0
  5880  15D8  00A7               	movwf	___awdiv@divisor+1
  5881  15D9  120A  118A  25F9  160A  118A  	fcall	_statusT0limite
  5882  15DE  1283               	bcf	3,5	;RP0=0, select bank0
  5883  15DF  1303               	bcf	3,6	;RP1=0, select bank0
  5884  15E0  0825               	movf	?_statusT0limite+1,w
  5885  15E1  00A9               	movwf	___awdiv@dividend+1
  5886  15E2  0824               	movf	?_statusT0limite,w
  5887  15E3  00A8               	movwf	___awdiv@dividend
  5888  15E4  160A  118A  24F3  160A  118A  	fcall	___awdiv
  5889  15E9  1283               	bcf	3,5	;RP0=0, select bank0
  5890  15EA  1303               	bcf	3,6	;RP1=0, select bank0
  5891  15EB  0832               	movf	??_textSelection1+1,w
  5892  15EC  3A80               	xorlw	128
  5893  15ED  00B3               	movwf	??_textSelection1+2
  5894  15EE  0827               	movf	?___awdiv+1,w
  5895  15EF  3A80               	xorlw	128
  5896  15F0  0233               	subwf	??_textSelection1+2,w
  5897  15F1  1D03               	skipz
  5898  15F2  2DF5               	goto	u2065
  5899  15F3  0826               	movf	?___awdiv,w
  5900  15F4  0231               	subwf	??_textSelection1,w
  5901  15F5                     u2065:	
  5902  15F5  1803               	skipnc
  5903  15F6  2E04               	goto	l3007
  5904                           
  5905                           ;auxiliar.c: 44: writeLCD(0,1," ");
  5906  15F7  1283               	bcf	3,5	;RP0=0, select bank0
  5907  15F8  1303               	bcf	3,6	;RP1=0, select bank0
  5908  15F9  01AC               	clrf	writeLCD@y
  5909  15FA  0AAC               	incf	writeLCD@y,f
  5910  15FB  30FD               	movlw	low ((STR_68+15)| (0+32768))
  5911  15FC  00AD               	movwf	writeLCD@ptr
  5912  15FD  3087               	movlw	high ((STR_68+15)| (0+32768))
  5913  15FE  00AE               	movwf	writeLCD@ptr+1
  5914  15FF  3000               	movlw	0
  5915  1600  160A  118A  223B   	fcall	_writeLCD
  5916  1603  0008               	return
  5917  1604                     l3007:	
  5918                           
  5919                           ;auxiliar.c: 45: else
  5920                           ;auxiliar.c: 46: writeLCD(0,1,"1");
  5921  1604  1283               	bcf	3,5	;RP0=0, select bank0
  5922  1605  1303               	bcf	3,6	;RP1=0, select bank0
  5923  1606  01AC               	clrf	writeLCD@y
  5924  1607  0AAC               	incf	writeLCD@y,f
  5925  1608  30FF               	movlw	low (STR_16| (0+32768))
  5926  1609  00AD               	movwf	writeLCD@ptr
  5927  160A  3089               	movlw	high (STR_16| (0+32768))
  5928  160B  00AE               	movwf	writeLCD@ptr+1
  5929  160C  3000               	movlw	0
  5930  160D  160A  118A  223B   	fcall	_writeLCD
  5931  1610  0008               	return
  5932  1611                     __end_of_textSelection1:	
  5933                           
  5934                           	psect	text14
  5935  05F9                     __ptext14:	
  5936 ;; *************** function _statusT0limite *****************
  5937 ;; Defined at:
  5938 ;;		line 33 in file "timer0.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;		None
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;		None
  5943 ;; Return value:  Size  Location     Type
  5944 ;;                  2    4[BANK0 ] int 
  5945 ;; Registers used:
  5946 ;;		wreg
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5952 ;;      Params:         0       2       0       0       0
  5953 ;;      Locals:         0       0       0       0       0
  5954 ;;      Temps:          0       0       0       0       0
  5955 ;;      Totals:         0       2       0       0       0
  5956 ;;Total ram usage:        2 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; Hardware stack levels required when called:    4
  5959 ;; This function calls:
  5960 ;;		Nothing
  5961 ;; This function is called by:
  5962 ;;		_textSelection1
  5963 ;;		_textSelection2
  5964 ;;		_textSelection3
  5965 ;;		_textSelection4
  5966 ;;		_textSelection5
  5967 ;;		_textSelection6
  5968 ;;		_textSelection7
  5969 ;;		_textSelection8
  5970 ;;		_textSelectionEST
  5971 ;;		_textSelectionCLP
  5972 ;;		_textSelectionPAR
  5973 ;;		_textSelectionDES
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           
  5978                           ;psect for function _statusT0limite
  5979  05F9                     _statusT0limite:	
  5980                           
  5981                           ;timer0.c: 35: return( t0final );
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _statusT0limite: [wreg]
  5985  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  5986  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  5987  05FB  084C               	movf	_t0final+1,w
  5988  05FC  00A5               	movwf	?_statusT0limite+1
  5989  05FD  084B               	movf	_t0final,w
  5990  05FE  00A4               	movwf	?_statusT0limite
  5991  05FF  0008               	return
  5992  0600                     __end_of_statusT0limite:	
  5993                           
  5994                           	psect	text15
  5995  1F46                     __ptext15:	
  5996 ;; *************** function _statusT0 *****************
  5997 ;; Defined at:
  5998 ;;		line 24 in file "timer0.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;		None
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;		None
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  2    4[BANK0 ] int 
  6005 ;; Registers used:
  6006 ;;		wreg
  6007 ;; Tracked objects:
  6008 ;;		On entry : 0/0
  6009 ;;		On exit  : 0/0
  6010 ;;		Unchanged: 0/0
  6011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6012 ;;      Params:         0       2       0       0       0
  6013 ;;      Locals:         0       0       0       0       0
  6014 ;;      Temps:          0       0       0       0       0
  6015 ;;      Totals:         0       2       0       0       0
  6016 ;;Total ram usage:        2 bytes
  6017 ;; Hardware stack levels used:    1
  6018 ;; Hardware stack levels required when called:    4
  6019 ;; This function calls:
  6020 ;;		Nothing
  6021 ;; This function is called by:
  6022 ;;		_textSelection1
  6023 ;;		_textSelection2
  6024 ;;		_textSelection3
  6025 ;;		_textSelection4
  6026 ;;		_textSelection5
  6027 ;;		_textSelection6
  6028 ;;		_textSelection7
  6029 ;;		_textSelection8
  6030 ;;		_textSelectionEST
  6031 ;;		_textSelectionCLP
  6032 ;;		_textSelectionPAR
  6033 ;;		_textSelectionDES
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           
  6038                           ;psect for function _statusT0
  6039  1F46                     _statusT0:	
  6040                           
  6041                           ;timer0.c: 26: return( t0cont );
  6042                           
  6043                           ;incstack = 0
  6044                           ; Regs used in _statusT0: [wreg]
  6045  1F46  1283               	bcf	3,5	;RP0=0, select bank0
  6046  1F47  1303               	bcf	3,6	;RP1=0, select bank0
  6047  1F48  084A               	movf	_t0cont+1,w
  6048  1F49  00A5               	movwf	?_statusT0+1
  6049  1F4A  0849               	movf	_t0cont,w
  6050  1F4B  00A4               	movwf	?_statusT0
  6051  1F4C  0008               	return
  6052  1F4D                     __end_of_statusT0:	
  6053                           
  6054                           	psect	text16
  6055  14F3                     __ptext16:	
  6056 ;; *************** function ___awdiv *****************
  6057 ;; Defined at:
  6058 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;  divisor         2    6[BANK0 ] int 
  6061 ;;  dividend        2    8[BANK0 ] int 
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  quotient        2   13[BANK0 ] int 
  6064 ;;  sign            1   12[BANK0 ] unsigned char 
  6065 ;;  counter         1   11[BANK0 ] unsigned char 
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  2    6[BANK0 ] int 
  6068 ;; Registers used:
  6069 ;;		wreg, status,2, status,0
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6075 ;;      Params:         0       4       0       0       0
  6076 ;;      Locals:         0       4       0       0       0
  6077 ;;      Temps:          0       1       0       0       0
  6078 ;;      Totals:         0       9       0       0       0
  6079 ;;Total ram usage:        9 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    4
  6082 ;; This function calls:
  6083 ;;		Nothing
  6084 ;; This function is called by:
  6085 ;;		_textSelection1
  6086 ;;		_textSelection2
  6087 ;;		_textSelection3
  6088 ;;		_textSelection4
  6089 ;;		_textSelection5
  6090 ;;		_textSelection6
  6091 ;;		_textSelection7
  6092 ;;		_textSelection8
  6093 ;;		_textSelectionEST
  6094 ;;		_textSelectionCLP
  6095 ;;		_textSelectionPAR
  6096 ;;		_textSelectionDES
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function ___awdiv
  6102  14F3                     ___awdiv:	
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6106  14F3  1283               	bcf	3,5	;RP0=0, select bank0
  6107  14F4  1303               	bcf	3,6	;RP1=0, select bank0
  6108  14F5  01AC               	clrf	___awdiv@sign
  6109  14F6  1FA7               	btfss	___awdiv@divisor+1,7
  6110  14F7  2CFF               	goto	l2843
  6111  14F8  09A6               	comf	___awdiv@divisor,f
  6112  14F9  09A7               	comf	___awdiv@divisor+1,f
  6113  14FA  0AA6               	incf	___awdiv@divisor,f
  6114  14FB  1903               	skipnz
  6115  14FC  0AA7               	incf	___awdiv@divisor+1,f
  6116  14FD  01AC               	clrf	___awdiv@sign
  6117  14FE  0AAC               	incf	___awdiv@sign,f
  6118  14FF                     l2843:	
  6119  14FF  1FA9               	btfss	___awdiv@dividend+1,7
  6120  1500  2D0A               	goto	l2849
  6121  1501  09A8               	comf	___awdiv@dividend,f
  6122  1502  09A9               	comf	___awdiv@dividend+1,f
  6123  1503  0AA8               	incf	___awdiv@dividend,f
  6124  1504  1903               	skipnz
  6125  1505  0AA9               	incf	___awdiv@dividend+1,f
  6126  1506  3001               	movlw	1
  6127  1507  00AA               	movwf	??___awdiv
  6128  1508  082A               	movf	??___awdiv,w
  6129  1509  06AC               	xorwf	___awdiv@sign,f
  6130  150A                     l2849:	
  6131  150A  01AD               	clrf	___awdiv@quotient
  6132  150B  01AE               	clrf	___awdiv@quotient+1
  6133  150C  0826               	movf	___awdiv@divisor,w
  6134  150D  0427               	iorwf	___awdiv@divisor+1,w
  6135  150E  1903               	btfsc	3,2
  6136  150F  2D41               	goto	l2871
  6137  1510  01AB               	clrf	___awdiv@counter
  6138  1511  0AAB               	incf	___awdiv@counter,f
  6139  1512                     l2859:	
  6140  1512  1BA7               	btfsc	___awdiv@divisor+1,7
  6141  1513  2D20               	goto	l2861
  6142  1514  3001               	movlw	1
  6143  1515                     u1875:	
  6144  1515  1003               	clrc
  6145  1516  0DA6               	rlf	___awdiv@divisor,f
  6146  1517  0DA7               	rlf	___awdiv@divisor+1,f
  6147  1518  3EFF               	addlw	-1
  6148  1519  1D03               	skipz
  6149  151A  2D15               	goto	u1875
  6150  151B  3001               	movlw	1
  6151  151C  00AA               	movwf	??___awdiv
  6152  151D  082A               	movf	??___awdiv,w
  6153  151E  07AB               	addwf	___awdiv@counter,f
  6154  151F  2D12               	goto	l2859
  6155  1520                     l2861:	
  6156  1520  3001               	movlw	1
  6157  1521                     u1895:	
  6158  1521  1003               	clrc
  6159  1522  0DAD               	rlf	___awdiv@quotient,f
  6160  1523  0DAE               	rlf	___awdiv@quotient+1,f
  6161  1524  3EFF               	addlw	-1
  6162  1525  1D03               	skipz
  6163  1526  2D21               	goto	u1895
  6164  1527  0827               	movf	___awdiv@divisor+1,w
  6165  1528  0229               	subwf	___awdiv@dividend+1,w
  6166  1529  1D03               	skipz
  6167  152A  2D2D               	goto	u1905
  6168  152B  0826               	movf	___awdiv@divisor,w
  6169  152C  0228               	subwf	___awdiv@dividend,w
  6170  152D                     u1905:	
  6171  152D  1C03               	skipc
  6172  152E  2D36               	goto	l2867
  6173  152F  0826               	movf	___awdiv@divisor,w
  6174  1530  02A8               	subwf	___awdiv@dividend,f
  6175  1531  0827               	movf	___awdiv@divisor+1,w
  6176  1532  1C03               	skipc
  6177  1533  03A9               	decf	___awdiv@dividend+1,f
  6178  1534  02A9               	subwf	___awdiv@dividend+1,f
  6179  1535  142D               	bsf	___awdiv@quotient,0
  6180  1536                     l2867:	
  6181  1536  3001               	movlw	1
  6182  1537                     u1915:	
  6183  1537  1003               	clrc
  6184  1538  0CA7               	rrf	___awdiv@divisor+1,f
  6185  1539  0CA6               	rrf	___awdiv@divisor,f
  6186  153A  3EFF               	addlw	-1
  6187  153B  1D03               	skipz
  6188  153C  2D37               	goto	u1915
  6189  153D  3001               	movlw	1
  6190  153E  02AB               	subwf	___awdiv@counter,f
  6191  153F  1D03               	btfss	3,2
  6192  1540  2D20               	goto	l2861
  6193  1541                     l2871:	
  6194  1541  082C               	movf	___awdiv@sign,w
  6195  1542  1903               	btfsc	3,2
  6196  1543  2D49               	goto	l2875
  6197  1544  09AD               	comf	___awdiv@quotient,f
  6198  1545  09AE               	comf	___awdiv@quotient+1,f
  6199  1546  0AAD               	incf	___awdiv@quotient,f
  6200  1547  1903               	skipnz
  6201  1548  0AAE               	incf	___awdiv@quotient+1,f
  6202  1549                     l2875:	
  6203  1549  082E               	movf	___awdiv@quotient+1,w
  6204  154A  00A7               	movwf	?___awdiv+1
  6205  154B  082D               	movf	___awdiv@quotient,w
  6206  154C  00A6               	movwf	?___awdiv
  6207  154D  0008               	return
  6208  154E                     __end_of___awdiv:	
  6209                           
  6210                           	psect	text17
  6211  0D06                     __ptext17:	
  6212 ;; *************** function _textLoading *****************
  6213 ;; Defined at:
  6214 ;;		line 156 in file "auxiliar.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;		None
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;		None
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  1    wreg      void 
  6221 ;; Registers used:
  6222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6228 ;;      Params:         0       0       0       0       0
  6229 ;;      Locals:         0       0       0       0       0
  6230 ;;      Temps:          0       3       0       0       0
  6231 ;;      Totals:         0       3       0       0       0
  6232 ;;Total ram usage:        3 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    7
  6235 ;; This function calls:
  6236 ;;		_writeLCD
  6237 ;; This function is called by:
  6238 ;;		_main
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           
  6243                           ;psect for function _textLoading
  6244  0D06                     _textLoading:	
  6245                           
  6246                           ;auxiliar.c: 158: writeLCD(9,0,".  ");
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in _textLoading: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6250  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  6251  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  6252  0D08  01AC               	clrf	writeLCD@y
  6253  0D09  30EB               	movlw	low (STR_57| (0+32768))
  6254  0D0A  00AD               	movwf	writeLCD@ptr
  6255  0D0B  3089               	movlw	high (STR_57| (0+32768))
  6256  0D0C  00AE               	movwf	writeLCD@ptr+1
  6257  0D0D  3009               	movlw	9
  6258  0D0E  160A  118A  223B  120A  158A  	fcall	_writeLCD
  6259                           
  6260                           ;auxiliar.c: 159: _delay((unsigned long)((500)*(20000000/4000.0)));
  6261  0D13  300D               	movlw	13
  6262  0D14  1283               	bcf	3,5	;RP0=0, select bank0
  6263  0D15  1303               	bcf	3,6	;RP1=0, select bank0
  6264  0D16  00B3               	movwf	??_textLoading+2
  6265  0D17  30AF               	movlw	175
  6266  0D18  00B2               	movwf	??_textLoading+1
  6267  0D19  30B5               	movlw	181
  6268  0D1A  00B1               	movwf	??_textLoading
  6269  0D1B                     u2957:	
  6270  0D1B  0BB1               	decfsz	??_textLoading,f
  6271  0D1C  2D1B               	goto	u2957
  6272  0D1D  0BB2               	decfsz	??_textLoading+1,f
  6273  0D1E  2D1B               	goto	u2957
  6274  0D1F  0BB3               	decfsz	??_textLoading+2,f
  6275  0D20  2D1B               	goto	u2957
  6276  0D21  2D22               	nop2
  6277                           
  6278                           ;auxiliar.c: 160: writeLCD(9,0," . ");
  6279  0D22  1283               	bcf	3,5	;RP0=0, select bank0
  6280  0D23  1303               	bcf	3,6	;RP1=0, select bank0
  6281  0D24  01AC               	clrf	writeLCD@y
  6282  0D25  30EF               	movlw	low (STR_58| (0+32768))
  6283  0D26  00AD               	movwf	writeLCD@ptr
  6284  0D27  3089               	movlw	high (STR_58| (0+32768))
  6285  0D28  00AE               	movwf	writeLCD@ptr+1
  6286  0D29  3009               	movlw	9
  6287  0D2A  160A  118A  223B  120A  158A  	fcall	_writeLCD
  6288                           
  6289                           ;auxiliar.c: 161: _delay((unsigned long)((500)*(20000000/4000.0)));
  6290  0D2F  300D               	movlw	13
  6291  0D30  1283               	bcf	3,5	;RP0=0, select bank0
  6292  0D31  1303               	bcf	3,6	;RP1=0, select bank0
  6293  0D32  00B3               	movwf	??_textLoading+2
  6294  0D33  30AF               	movlw	175
  6295  0D34  00B2               	movwf	??_textLoading+1
  6296  0D35  30B5               	movlw	181
  6297  0D36  00B1               	movwf	??_textLoading
  6298  0D37                     u2967:	
  6299  0D37  0BB1               	decfsz	??_textLoading,f
  6300  0D38  2D37               	goto	u2967
  6301  0D39  0BB2               	decfsz	??_textLoading+1,f
  6302  0D3A  2D37               	goto	u2967
  6303  0D3B  0BB3               	decfsz	??_textLoading+2,f
  6304  0D3C  2D37               	goto	u2967
  6305  0D3D  2D3E               	nop2
  6306                           
  6307                           ;auxiliar.c: 162: writeLCD(9,0,"  .");
  6308  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  6309  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  6310  0D40  01AC               	clrf	writeLCD@y
  6311  0D41  30F7               	movlw	low (STR_59| (0+32768))
  6312  0D42  00AD               	movwf	writeLCD@ptr
  6313  0D43  3089               	movlw	high (STR_59| (0+32768))
  6314  0D44  00AE               	movwf	writeLCD@ptr+1
  6315  0D45  3009               	movlw	9
  6316  0D46  160A  118A  223B  120A  158A  	fcall	_writeLCD
  6317                           
  6318                           ;auxiliar.c: 163: _delay((unsigned long)((500)*(20000000/4000.0)));
  6319  0D4B  300D               	movlw	13
  6320  0D4C  1283               	bcf	3,5	;RP0=0, select bank0
  6321  0D4D  1303               	bcf	3,6	;RP1=0, select bank0
  6322  0D4E  00B3               	movwf	??_textLoading+2
  6323  0D4F  30AF               	movlw	175
  6324  0D50  00B2               	movwf	??_textLoading+1
  6325  0D51  30B5               	movlw	181
  6326  0D52  00B1               	movwf	??_textLoading
  6327  0D53                     u2977:	
  6328  0D53  0BB1               	decfsz	??_textLoading,f
  6329  0D54  2D53               	goto	u2977
  6330  0D55  0BB2               	decfsz	??_textLoading+1,f
  6331  0D56  2D53               	goto	u2977
  6332  0D57  0BB3               	decfsz	??_textLoading+2,f
  6333  0D58  2D53               	goto	u2977
  6334  0D59  2D5A               	nop2
  6335                           
  6336                           ;auxiliar.c: 164: writeLCD(9,0,".  ");
  6337  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  6338  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  6339  0D5C  01AC               	clrf	writeLCD@y
  6340  0D5D  30EB               	movlw	low (STR_57| (0+32768))
  6341  0D5E  00AD               	movwf	writeLCD@ptr
  6342  0D5F  3089               	movlw	high (STR_57| (0+32768))
  6343  0D60  00AE               	movwf	writeLCD@ptr+1
  6344  0D61  3009               	movlw	9
  6345  0D62  160A  118A  223B  120A  158A  	fcall	_writeLCD
  6346                           
  6347                           ;auxiliar.c: 165: _delay((unsigned long)((500)*(20000000/4000.0)));
  6348  0D67  300D               	movlw	13
  6349  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  6350  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  6351  0D6A  00B3               	movwf	??_textLoading+2
  6352  0D6B  30AF               	movlw	175
  6353  0D6C  00B2               	movwf	??_textLoading+1
  6354  0D6D  30B5               	movlw	181
  6355  0D6E  00B1               	movwf	??_textLoading
  6356  0D6F                     u2987:	
  6357  0D6F  0BB1               	decfsz	??_textLoading,f
  6358  0D70  2D6F               	goto	u2987
  6359  0D71  0BB2               	decfsz	??_textLoading+1,f
  6360  0D72  2D6F               	goto	u2987
  6361  0D73  0BB3               	decfsz	??_textLoading+2,f
  6362  0D74  2D6F               	goto	u2987
  6363  0D75  2D76               	nop2
  6364                           
  6365                           ;auxiliar.c: 166: writeLCD(9,0," . ");
  6366  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  6367  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  6368  0D78  01AC               	clrf	writeLCD@y
  6369  0D79  30EF               	movlw	low (STR_58| (0+32768))
  6370  0D7A  00AD               	movwf	writeLCD@ptr
  6371  0D7B  3089               	movlw	high (STR_58| (0+32768))
  6372  0D7C  00AE               	movwf	writeLCD@ptr+1
  6373  0D7D  3009               	movlw	9
  6374  0D7E  160A  118A  223B  120A  158A  	fcall	_writeLCD
  6375                           
  6376                           ;auxiliar.c: 167: _delay((unsigned long)((500)*(20000000/4000.0)));
  6377  0D83  300D               	movlw	13
  6378  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  6379  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  6380  0D86  00B3               	movwf	??_textLoading+2
  6381  0D87  30AF               	movlw	175
  6382  0D88  00B2               	movwf	??_textLoading+1
  6383  0D89  30B5               	movlw	181
  6384  0D8A  00B1               	movwf	??_textLoading
  6385  0D8B                     u2997:	
  6386  0D8B  0BB1               	decfsz	??_textLoading,f
  6387  0D8C  2D8B               	goto	u2997
  6388  0D8D  0BB2               	decfsz	??_textLoading+1,f
  6389  0D8E  2D8B               	goto	u2997
  6390  0D8F  0BB3               	decfsz	??_textLoading+2,f
  6391  0D90  2D8B               	goto	u2997
  6392  0D91  2D92               	nop2
  6393                           
  6394                           ;auxiliar.c: 168: writeLCD(9,0,"  .");
  6395  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  6396  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  6397  0D94  01AC               	clrf	writeLCD@y
  6398  0D95  30F7               	movlw	low (STR_59| (0+32768))
  6399  0D96  00AD               	movwf	writeLCD@ptr
  6400  0D97  3089               	movlw	high (STR_59| (0+32768))
  6401  0D98  00AE               	movwf	writeLCD@ptr+1
  6402  0D99  3009               	movlw	9
  6403  0D9A  160A  118A  223B  120A  158A  	fcall	_writeLCD
  6404                           
  6405                           ;auxiliar.c: 169: _delay((unsigned long)((500)*(20000000/4000.0)));
  6406  0D9F  300D               	movlw	13
  6407  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  6408  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  6409  0DA2  00B3               	movwf	??_textLoading+2
  6410  0DA3  30AF               	movlw	175
  6411  0DA4  00B2               	movwf	??_textLoading+1
  6412  0DA5  30B5               	movlw	181
  6413  0DA6  00B1               	movwf	??_textLoading
  6414  0DA7                     u3007:	
  6415  0DA7  0BB1               	decfsz	??_textLoading,f
  6416  0DA8  2DA7               	goto	u3007
  6417  0DA9  0BB2               	decfsz	??_textLoading+1,f
  6418  0DAA  2DA7               	goto	u3007
  6419  0DAB  0BB3               	decfsz	??_textLoading+2,f
  6420  0DAC  2DA7               	goto	u3007
  6421  0DAD  2DAE               	nop2
  6422                           
  6423                           ;auxiliar.c: 171: writeLCD(9,0,".  ");
  6424  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  6425  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  6426  0DB0  01AC               	clrf	writeLCD@y
  6427  0DB1  30EB               	movlw	low (STR_57| (0+32768))
  6428  0DB2  00AD               	movwf	writeLCD@ptr
  6429  0DB3  3089               	movlw	high (STR_57| (0+32768))
  6430  0DB4  00AE               	movwf	writeLCD@ptr+1
  6431  0DB5  3009               	movlw	9
  6432  0DB6  160A  118A  223B  120A  158A  	fcall	_writeLCD
  6433                           
  6434                           ;auxiliar.c: 172: _delay((unsigned long)((500)*(20000000/4000.0)));
  6435  0DBB  300D               	movlw	13
  6436  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  6437  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  6438  0DBE  00B3               	movwf	??_textLoading+2
  6439  0DBF  30AF               	movlw	175
  6440  0DC0  00B2               	movwf	??_textLoading+1
  6441  0DC1  30B5               	movlw	181
  6442  0DC2  00B1               	movwf	??_textLoading
  6443  0DC3                     u3017:	
  6444  0DC3  0BB1               	decfsz	??_textLoading,f
  6445  0DC4  2DC3               	goto	u3017
  6446  0DC5  0BB2               	decfsz	??_textLoading+1,f
  6447  0DC6  2DC3               	goto	u3017
  6448  0DC7  0BB3               	decfsz	??_textLoading+2,f
  6449  0DC8  2DC3               	goto	u3017
  6450  0DC9  2DCA               	nop2
  6451                           
  6452                           ;auxiliar.c: 173: writeLCD(9,0,".. ");
  6453  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  6454  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  6455  0DCC  01AC               	clrf	writeLCD@y
  6456  0DCD  30F3               	movlw	low (STR_64| (0+32768))
  6457  0DCE  00AD               	movwf	writeLCD@ptr
  6458  0DCF  3089               	movlw	high (STR_64| (0+32768))
  6459  0DD0  00AE               	movwf	writeLCD@ptr+1
  6460  0DD1  3009               	movlw	9
  6461  0DD2  160A  118A  223B  120A  158A  	fcall	_writeLCD
  6462                           
  6463                           ;auxiliar.c: 174: _delay((unsigned long)((500)*(20000000/4000.0)));
  6464  0DD7  300D               	movlw	13
  6465  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  6466  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  6467  0DDA  00B3               	movwf	??_textLoading+2
  6468  0DDB  30AF               	movlw	175
  6469  0DDC  00B2               	movwf	??_textLoading+1
  6470  0DDD  30B5               	movlw	181
  6471  0DDE  00B1               	movwf	??_textLoading
  6472  0DDF                     u3027:	
  6473  0DDF  0BB1               	decfsz	??_textLoading,f
  6474  0DE0  2DDF               	goto	u3027
  6475  0DE1  0BB2               	decfsz	??_textLoading+1,f
  6476  0DE2  2DDF               	goto	u3027
  6477  0DE3  0BB3               	decfsz	??_textLoading+2,f
  6478  0DE4  2DDF               	goto	u3027
  6479  0DE5  2DE6               	nop2
  6480                           
  6481                           ;auxiliar.c: 175: writeLCD(9,0,"...");
  6482  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  6483  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  6484  0DE8  01AC               	clrf	writeLCD@y
  6485  0DE9  30FB               	movlw	low (STR_65| (0+32768))
  6486  0DEA  00AD               	movwf	writeLCD@ptr
  6487  0DEB  3089               	movlw	high (STR_65| (0+32768))
  6488  0DEC  00AE               	movwf	writeLCD@ptr+1
  6489  0DED  3009               	movlw	9
  6490  0DEE  160A  118A  223B  120A  158A  	fcall	_writeLCD
  6491                           
  6492                           ;auxiliar.c: 176: _delay((unsigned long)((700)*(20000000/4000.0)));
  6493  0DF3  3012               	movlw	18
  6494  0DF4  1283               	bcf	3,5	;RP0=0, select bank0
  6495  0DF5  1303               	bcf	3,6	;RP1=0, select bank0
  6496  0DF6  00B3               	movwf	??_textLoading+2
  6497  0DF7  30C2               	movlw	194
  6498  0DF8  00B2               	movwf	??_textLoading+1
  6499  0DF9  3065               	movlw	101
  6500  0DFA  00B1               	movwf	??_textLoading
  6501  0DFB                     u3037:	
  6502  0DFB  0BB1               	decfsz	??_textLoading,f
  6503  0DFC  2DFB               	goto	u3037
  6504  0DFD  0BB2               	decfsz	??_textLoading+1,f
  6505  0DFE  2DFB               	goto	u3037
  6506  0DFF  0BB3               	decfsz	??_textLoading+2,f
  6507  0E00  2DFB               	goto	u3037
  6508  0E01  2E02               	nop2
  6509  0E02  0008               	return
  6510  0E03                     __end_of_textLoading:	
  6511                           
  6512                           	psect	text18
  6513  10F3                     __ptext18:	
  6514 ;; *************** function _textConfig *****************
  6515 ;; Defined at:
  6516 ;;		line 18 in file "auxiliar.c"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;		None
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;		None
  6521 ;; Return value:  Size  Location     Type
  6522 ;;                  1    wreg      void 
  6523 ;; Registers used:
  6524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6530 ;;      Params:         0       0       0       0       0
  6531 ;;      Locals:         0       0       0       0       0
  6532 ;;      Temps:          0       0       0       0       0
  6533 ;;      Totals:         0       0       0       0       0
  6534 ;;Total ram usage:        0 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:    7
  6537 ;; This function calls:
  6538 ;;		_cmdLCD
  6539 ;;		_writeLCD
  6540 ;; This function is called by:
  6541 ;;		_main
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           
  6546                           ;psect for function _textConfig
  6547  10F3                     _textConfig:	
  6548                           
  6549                           ;auxiliar.c: 20: cmdLCD(0x01);
  6550                           
  6551                           ;incstack = 0
  6552                           ; Regs used in _textConfig: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6553  10F3  3001               	movlw	1
  6554  10F4  160A  118A  23E3  160A  118A  	fcall	_cmdLCD
  6555                           
  6556                           ;auxiliar.c: 21: writeLCD(0,0,"   Configurar   ");
  6557  10F9  1283               	bcf	3,5	;RP0=0, select bank0
  6558  10FA  1303               	bcf	3,6	;RP1=0, select bank0
  6559  10FB  01AC               	clrf	writeLCD@y
  6560  10FC  30A9               	movlw	low (STR_7| (0+32768))
  6561  10FD  00AD               	movwf	writeLCD@ptr
  6562  10FE  3088               	movlw	high (STR_7| (0+32768))
  6563  10FF  00AE               	movwf	writeLCD@ptr+1
  6564  1100  3000               	movlw	0
  6565  1101  160A  118A  223B  160A  118A  	fcall	_writeLCD
  6566                           
  6567                           ;auxiliar.c: 22: writeLCD(0,1,"   ----------   ");
  6568  1106  1283               	bcf	3,5	;RP0=0, select bank0
  6569  1107  1303               	bcf	3,6	;RP1=0, select bank0
  6570  1108  01AC               	clrf	writeLCD@y
  6571  1109  0AAC               	incf	writeLCD@y,f
  6572  110A  3065               	movlw	low (STR_8| (0+32768))
  6573  110B  00AD               	movwf	writeLCD@ptr
  6574  110C  3088               	movlw	high (STR_8| (0+32768))
  6575  110D  00AE               	movwf	writeLCD@ptr+1
  6576  110E  3000               	movlw	0
  6577  110F  160A  118A  223B   	fcall	_writeLCD
  6578  1112  0008               	return
  6579  1113                     __end_of_textConfig:	
  6580                           
  6581                           	psect	text19
  6582  10D3                     __ptext19:	
  6583 ;; *************** function _textCMpar *****************
  6584 ;; Defined at:
  6585 ;;		line 25 in file "auxiliar.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;		None
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;		None
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  1    wreg      void 
  6592 ;; Registers used:
  6593 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6594 ;; Tracked objects:
  6595 ;;		On entry : 0/0
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6599 ;;      Params:         0       0       0       0       0
  6600 ;;      Locals:         0       0       0       0       0
  6601 ;;      Temps:          0       0       0       0       0
  6602 ;;      Totals:         0       0       0       0       0
  6603 ;;Total ram usage:        0 bytes
  6604 ;; Hardware stack levels used:    1
  6605 ;; Hardware stack levels required when called:    7
  6606 ;; This function calls:
  6607 ;;		_cmdLCD
  6608 ;;		_writeLCD
  6609 ;; This function is called by:
  6610 ;;		_main
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           
  6615                           ;psect for function _textCMpar
  6616  10D3                     _textCMpar:	
  6617                           
  6618                           ;auxiliar.c: 27: cmdLCD(0x01);
  6619                           
  6620                           ;incstack = 0
  6621                           ; Regs used in _textCMpar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6622  10D3  3001               	movlw	1
  6623  10D4  160A  118A  23E3  160A  118A  	fcall	_cmdLCD
  6624                           
  6625                           ;auxiliar.c: 28: writeLCD(0,0,"   Pareamento   ");
  6626  10D9  1283               	bcf	3,5	;RP0=0, select bank0
  6627  10DA  1303               	bcf	3,6	;RP1=0, select bank0
  6628  10DB  01AC               	clrf	writeLCD@y
  6629  10DC  3098               	movlw	low (STR_9| (0+32768))
  6630  10DD  00AD               	movwf	writeLCD@ptr
  6631  10DE  3088               	movlw	high (STR_9| (0+32768))
  6632  10DF  00AE               	movwf	writeLCD@ptr+1
  6633  10E0  3000               	movlw	0
  6634  10E1  160A  118A  223B  160A  118A  	fcall	_writeLCD
  6635                           
  6636                           ;auxiliar.c: 29: writeLCD(0,1,"   ----------   ");
  6637  10E6  1283               	bcf	3,5	;RP0=0, select bank0
  6638  10E7  1303               	bcf	3,6	;RP1=0, select bank0
  6639  10E8  01AC               	clrf	writeLCD@y
  6640  10E9  0AAC               	incf	writeLCD@y,f
  6641  10EA  3065               	movlw	low (STR_8| (0+32768))
  6642  10EB  00AD               	movwf	writeLCD@ptr
  6643  10EC  3088               	movlw	high (STR_8| (0+32768))
  6644  10ED  00AE               	movwf	writeLCD@ptr+1
  6645  10EE  3000               	movlw	0
  6646  10EF  160A  118A  223B   	fcall	_writeLCD
  6647  10F2  0008               	return
  6648  10F3                     __end_of_textCMpar:	
  6649                           
  6650                           	psect	text20
  6651  10B3                     __ptext20:	
  6652 ;; *************** function _textCMdat *****************
  6653 ;; Defined at:
  6654 ;;		line 32 in file "auxiliar.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6668 ;;      Params:         0       0       0       0       0
  6669 ;;      Locals:         0       0       0       0       0
  6670 ;;      Temps:          0       0       0       0       0
  6671 ;;      Totals:         0       0       0       0       0
  6672 ;;Total ram usage:        0 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    7
  6675 ;; This function calls:
  6676 ;;		_cmdLCD
  6677 ;;		_writeLCD
  6678 ;; This function is called by:
  6679 ;;		_main
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           
  6684                           ;psect for function _textCMdat
  6685  10B3                     _textCMdat:	
  6686                           
  6687                           ;auxiliar.c: 34: cmdLCD(0x01);
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in _textCMdat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6691  10B3  3001               	movlw	1
  6692  10B4  160A  118A  23E3  160A  118A  	fcall	_cmdLCD
  6693                           
  6694                           ;auxiliar.c: 35: writeLCD(0,0," Envio de Dados ");
  6695  10B9  1283               	bcf	3,5	;RP0=0, select bank0
  6696  10BA  1303               	bcf	3,6	;RP1=0, select bank0
  6697  10BB  01AC               	clrf	writeLCD@y
  6698  10BC  30CB               	movlw	low (STR_11| (0+32768))
  6699  10BD  00AD               	movwf	writeLCD@ptr
  6700  10BE  3088               	movlw	high (STR_11| (0+32768))
  6701  10BF  00AE               	movwf	writeLCD@ptr+1
  6702  10C0  3000               	movlw	0
  6703  10C1  160A  118A  223B  160A  118A  	fcall	_writeLCD
  6704                           
  6705                           ;auxiliar.c: 36: writeLCD(0,1,"   ----------   ");
  6706  10C6  1283               	bcf	3,5	;RP0=0, select bank0
  6707  10C7  1303               	bcf	3,6	;RP1=0, select bank0
  6708  10C8  01AC               	clrf	writeLCD@y
  6709  10C9  0AAC               	incf	writeLCD@y,f
  6710  10CA  3065               	movlw	low (STR_8| (0+32768))
  6711  10CB  00AD               	movwf	writeLCD@ptr
  6712  10CC  3088               	movlw	high (STR_8| (0+32768))
  6713  10CD  00AE               	movwf	writeLCD@ptr+1
  6714  10CE  3000               	movlw	0
  6715  10CF  160A  118A  223B   	fcall	_writeLCD
  6716  10D2  0008               	return
  6717  10D3                     __end_of_textCMdat:	
  6718                           
  6719                           	psect	text21
  6720  1077                     __ptext21:	
  6721 ;; *************** function _statusFIFO *****************
  6722 ;; Defined at:
  6723 ;;		line 35 in file "fifo.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      unsigned char 
  6730 ;; Registers used:
  6731 ;;		wreg, status,2, status,0, pclath, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6737 ;;      Params:         0       0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0
  6739 ;;      Temps:          0       2       0       0       0
  6740 ;;      Totals:         0       2       0       0       0
  6741 ;;Total ram usage:        2 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    5
  6744 ;; This function calls:
  6745 ;;		___awmod
  6746 ;; This function is called by:
  6747 ;;		_main
  6748 ;;		_statusRxEUSART
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           
  6753                           ;psect for function _statusFIFO
  6754  1077                     _statusFIFO:	
  6755                           
  6756                           ;fifo.c: 37: return( (fifoHead - fifoTail) % 30 );
  6757                           
  6758                           ;incstack = 0
  6759                           ; Regs used in _statusFIFO: [wreg+status,2+status,0+pclath+cstack]
  6760  1077  301E               	movlw	30
  6761  1078  1283               	bcf	3,5	;RP0=0, select bank0
  6762  1079  1303               	bcf	3,6	;RP1=0, select bank0
  6763  107A  00A4               	movwf	___awmod@divisor
  6764  107B  3000               	movlw	0
  6765  107C  00A5               	movwf	___awmod@divisor+1
  6766  107D  084D               	movf	_fifoTail,w
  6767  107E  00AB               	movwf	??_statusFIFO
  6768  107F  01AC               	clrf	??_statusFIFO+1
  6769  1080  09AB               	comf	??_statusFIFO,f
  6770  1081  09AC               	comf	??_statusFIFO+1,f
  6771  1082  0AAB               	incf	??_statusFIFO,f
  6772  1083  1903               	skipnz
  6773  1084  0AAC               	incf	??_statusFIFO+1,f
  6774  1085  087C               	movf	_fifoHead,w
  6775  1086  072B               	addwf	??_statusFIFO,w
  6776  1087  00A6               	movwf	___awmod@dividend
  6777  1088  082C               	movf	??_statusFIFO+1,w
  6778  1089  1803               	skipnc
  6779  108A  0A2C               	incf	??_statusFIFO+1,w
  6780  108B  00A7               	movwf	___awmod@dividend+1
  6781  108C  160A  118A  22EC   	fcall	___awmod
  6782  108F  1283               	bcf	3,5	;RP0=0, select bank0
  6783  1090  1303               	bcf	3,6	;RP1=0, select bank0
  6784  1091  0824               	movf	?___awmod,w
  6785  1092  0008               	return
  6786  1093                     __end_of_statusFIFO:	
  6787                           
  6788                           	psect	text22
  6789  0C4C                     __ptext22:	
  6790 ;; *************** function _slave1 *****************
  6791 ;; Defined at:
  6792 ;;		line 22 in file "bluetooth.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;		None
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;		None
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      void 
  6799 ;; Registers used:
  6800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6806 ;;      Params:         0       0       0       0       0
  6807 ;;      Locals:         0       0       0       0       0
  6808 ;;      Temps:          0       3       0       0       0
  6809 ;;      Totals:         0       3       0       0       0
  6810 ;;Total ram usage:        3 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    6
  6813 ;; This function calls:
  6814 ;;		_initEUSART
  6815 ;;		_writeString
  6816 ;; This function is called by:
  6817 ;;		_main
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           
  6822                           ;psect for function _slave1
  6823  0C4C                     _slave1:	
  6824                           
  6825                           ;bluetooth.c: 24: initEUSART(9600);
  6826                           
  6827                           ;incstack = 0
  6828                           ; Regs used in _slave1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6829  0C4C  3000               	movlw	0
  6830  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  6831  0C4E  1303               	bcf	3,6	;RP1=0, select bank0
  6832  0C4F  00B5               	movwf	initEUSART@baudRate+3
  6833  0C50  3000               	movlw	0
  6834  0C51  00B4               	movwf	initEUSART@baudRate+2
  6835  0C52  3025               	movlw	37
  6836  0C53  00B3               	movwf	initEUSART@baudRate+1
  6837  0C54  3080               	movlw	128
  6838  0C55  00B2               	movwf	initEUSART@baudRate
  6839  0C56  160A  118A  243D  120A  158A  	fcall	_initEUSART
  6840                           
  6841                           ;bluetooth.c: 25: writeString("AT+UART=9600,0,0\r\n");
  6842  0C5B  30FE               	movlw	low (STR_85| (0+32768))
  6843  0C5C  1283               	bcf	3,5	;RP0=0, select bank0
  6844  0C5D  1303               	bcf	3,6	;RP1=0, select bank0
  6845  0C5E  00A5               	movwf	writeString@str
  6846  0C5F  3086               	movlw	high (STR_85| (0+32768))
  6847  0C60  00A6               	movwf	writeString@str+1
  6848  0C61  160A  118A  2138  120A  158A  	fcall	_writeString
  6849                           
  6850                           ;bluetooth.c: 26: writeString("AT+RMAAD\r\n");
  6851  0C66  30AB               	movlw	low (STR_93| (0+32768))
  6852  0C67  1283               	bcf	3,5	;RP0=0, select bank0
  6853  0C68  1303               	bcf	3,6	;RP1=0, select bank0
  6854  0C69  00A5               	movwf	writeString@str
  6855  0C6A  3089               	movlw	high (STR_93| (0+32768))
  6856  0C6B  00A6               	movwf	writeString@str+1
  6857  0C6C  160A  118A  2138  120A  158A  	fcall	_writeString
  6858                           
  6859                           ;bluetooth.c: 27: _delay((unsigned long)((100)*(20000000/4000.0)));
  6860  0C71  3003               	movlw	3
  6861  0C72  1283               	bcf	3,5	;RP0=0, select bank0
  6862  0C73  1303               	bcf	3,6	;RP1=0, select bank0
  6863  0C74  00BE               	movwf	??_slave1+2
  6864  0C75  308A               	movlw	138
  6865  0C76  00BD               	movwf	??_slave1+1
  6866  0C77  3055               	movlw	85
  6867  0C78  00BC               	movwf	??_slave1
  6868  0C79                     u3047:	
  6869  0C79  0BBC               	decfsz	??_slave1,f
  6870  0C7A  2C79               	goto	u3047
  6871  0C7B  0BBD               	decfsz	??_slave1+1,f
  6872  0C7C  2C79               	goto	u3047
  6873  0C7D  0BBE               	decfsz	??_slave1+2,f
  6874  0C7E  2C79               	goto	u3047
  6875                           
  6876                           ;bluetooth.c: 28: writeString("AT+ROLE=0\r\n");
  6877  0C7F  3088               	movlw	low (STR_94| (0+32768))
  6878  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  6879  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  6880  0C82  00A5               	movwf	writeString@str
  6881  0C83  3089               	movlw	high (STR_94| (0+32768))
  6882  0C84  00A6               	movwf	writeString@str+1
  6883  0C85  160A  118A  2138  120A  158A  	fcall	_writeString
  6884                           
  6885                           ;bluetooth.c: 29: _delay((unsigned long)((100)*(20000000/4000.0)));
  6886  0C8A  3003               	movlw	3
  6887  0C8B  1283               	bcf	3,5	;RP0=0, select bank0
  6888  0C8C  1303               	bcf	3,6	;RP1=0, select bank0
  6889  0C8D  00BE               	movwf	??_slave1+2
  6890  0C8E  308A               	movlw	138
  6891  0C8F  00BD               	movwf	??_slave1+1
  6892  0C90  3055               	movlw	85
  6893  0C91  00BC               	movwf	??_slave1
  6894  0C92                     u3057:	
  6895  0C92  0BBC               	decfsz	??_slave1,f
  6896  0C93  2C92               	goto	u3057
  6897  0C94  0BBD               	decfsz	??_slave1+1,f
  6898  0C95  2C92               	goto	u3057
  6899  0C96  0BBE               	decfsz	??_slave1+2,f
  6900  0C97  2C92               	goto	u3057
  6901                           
  6902                           ;bluetooth.c: 30: writeString("AT+CMODE=0\r\n");
  6903  0C98  307B               	movlw	low (STR_87| (0+32768))
  6904  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  6905  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  6906  0C9B  00A5               	movwf	writeString@str
  6907  0C9C  3089               	movlw	high (STR_87| (0+32768))
  6908  0C9D  00A6               	movwf	writeString@str+1
  6909  0C9E  160A  118A  2138  120A  158A  	fcall	_writeString
  6910                           
  6911                           ;bluetooth.c: 31: _delay((unsigned long)((100)*(20000000/4000.0)));
  6912  0CA3  3003               	movlw	3
  6913  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  6914  0CA5  1303               	bcf	3,6	;RP1=0, select bank0
  6915  0CA6  00BE               	movwf	??_slave1+2
  6916  0CA7  308A               	movlw	138
  6917  0CA8  00BD               	movwf	??_slave1+1
  6918  0CA9  3055               	movlw	85
  6919  0CAA  00BC               	movwf	??_slave1
  6920  0CAB                     u3067:	
  6921  0CAB  0BBC               	decfsz	??_slave1,f
  6922  0CAC  2CAB               	goto	u3067
  6923  0CAD  0BBD               	decfsz	??_slave1+1,f
  6924  0CAE  2CAB               	goto	u3067
  6925  0CAF  0BBE               	decfsz	??_slave1+2,f
  6926  0CB0  2CAB               	goto	u3067
  6927                           
  6928                           ;bluetooth.c: 32: writeString("AT+INQM=0,5,5\r\n");
  6929  0CB1  3042               	movlw	low (STR_88| (0+32768))
  6930  0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  6931  0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  6932  0CB4  00A5               	movwf	writeString@str
  6933  0CB5  3089               	movlw	high (STR_88| (0+32768))
  6934  0CB6  00A6               	movwf	writeString@str+1
  6935  0CB7  160A  118A  2138  120A  158A  	fcall	_writeString
  6936                           
  6937                           ;bluetooth.c: 33: _delay((unsigned long)((100)*(20000000/4000.0)));
  6938  0CBC  3003               	movlw	3
  6939  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  6940  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  6941  0CBF  00BE               	movwf	??_slave1+2
  6942  0CC0  308A               	movlw	138
  6943  0CC1  00BD               	movwf	??_slave1+1
  6944  0CC2  3055               	movlw	85
  6945  0CC3  00BC               	movwf	??_slave1
  6946  0CC4                     u3077:	
  6947  0CC4  0BBC               	decfsz	??_slave1,f
  6948  0CC5  2CC4               	goto	u3077
  6949  0CC6  0BBD               	decfsz	??_slave1+1,f
  6950  0CC7  2CC4               	goto	u3077
  6951  0CC8  0BBE               	decfsz	??_slave1+2,f
  6952  0CC9  2CC4               	goto	u3077
  6953                           
  6954                           ;bluetooth.c: 34: writeString("AT+INIT\r\n");
  6955  0CCA  30C0               	movlw	low (STR_89| (0+32768))
  6956  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  6957  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  6958  0CCD  00A5               	movwf	writeString@str
  6959  0CCE  3089               	movlw	high (STR_89| (0+32768))
  6960  0CCF  00A6               	movwf	writeString@str+1
  6961  0CD0  160A  118A  2138  120A  158A  	fcall	_writeString
  6962                           
  6963                           ;bluetooth.c: 35: _delay((unsigned long)((100)*(20000000/4000.0)));
  6964  0CD5  3003               	movlw	3
  6965  0CD6  1283               	bcf	3,5	;RP0=0, select bank0
  6966  0CD7  1303               	bcf	3,6	;RP1=0, select bank0
  6967  0CD8  00BE               	movwf	??_slave1+2
  6968  0CD9  308A               	movlw	138
  6969  0CDA  00BD               	movwf	??_slave1+1
  6970  0CDB  3055               	movlw	85
  6971  0CDC  00BC               	movwf	??_slave1
  6972  0CDD                     u3087:	
  6973  0CDD  0BBC               	decfsz	??_slave1,f
  6974  0CDE  2CDD               	goto	u3087
  6975  0CDF  0BBD               	decfsz	??_slave1+1,f
  6976  0CE0  2CDD               	goto	u3087
  6977  0CE1  0BBE               	decfsz	??_slave1+2,f
  6978  0CE2  2CDD               	goto	u3087
  6979                           
  6980                           ;bluetooth.c: 36: writeString("AT+NAME=\"Escravo\"\r\n");
  6981  0CE3  30EA               	movlw	low (STR_98| (0+32768))
  6982  0CE4  1283               	bcf	3,5	;RP0=0, select bank0
  6983  0CE5  1303               	bcf	3,6	;RP1=0, select bank0
  6984  0CE6  00A5               	movwf	writeString@str
  6985  0CE7  3086               	movlw	high (STR_98| (0+32768))
  6986  0CE8  00A6               	movwf	writeString@str+1
  6987  0CE9  160A  118A  2138  120A  158A  	fcall	_writeString
  6988                           
  6989                           ;bluetooth.c: 37: _delay((unsigned long)((100)*(20000000/4000.0)));
  6990  0CEE  3003               	movlw	3
  6991  0CEF  1283               	bcf	3,5	;RP0=0, select bank0
  6992  0CF0  1303               	bcf	3,6	;RP1=0, select bank0
  6993  0CF1  00BE               	movwf	??_slave1+2
  6994  0CF2  308A               	movlw	138
  6995  0CF3  00BD               	movwf	??_slave1+1
  6996  0CF4  3055               	movlw	85
  6997  0CF5  00BC               	movwf	??_slave1
  6998  0CF6                     u3097:	
  6999  0CF6  0BBC               	decfsz	??_slave1,f
  7000  0CF7  2CF6               	goto	u3097
  7001  0CF8  0BBD               	decfsz	??_slave1+1,f
  7002  0CF9  2CF6               	goto	u3097
  7003  0CFA  0BBE               	decfsz	??_slave1+2,f
  7004  0CFB  2CF6               	goto	u3097
  7005                           
  7006                           ;bluetooth.c: 38: writeString("AT+PSWD=\"0910\"\r\n");
  7007  0CFC  30DD               	movlw	low (STR_91| (0+32768))
  7008  0CFD  1283               	bcf	3,5	;RP0=0, select bank0
  7009  0CFE  1303               	bcf	3,6	;RP1=0, select bank0
  7010  0CFF  00A5               	movwf	writeString@str
  7011  0D00  3087               	movlw	high (STR_91| (0+32768))
  7012  0D01  00A6               	movwf	writeString@str+1
  7013  0D02  160A  118A  2138   	fcall	_writeString
  7014  0D05  0008               	return
  7015  0D06                     __end_of_slave1:	
  7016                           
  7017                           	psect	text23
  7018  11B3                     __ptext23:	
  7019 ;; *************** function _resetErrorRxEUSART *****************
  7020 ;; Defined at:
  7021 ;;		line 88 in file "eusart.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  aux             1    0        unsigned char 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      void 
  7028 ;; Registers used:
  7029 ;;		wreg
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7035 ;;      Params:         0       0       0       0       0
  7036 ;;      Locals:         0       0       0       0       0
  7037 ;;      Temps:          0       3       0       0       0
  7038 ;;      Totals:         0       3       0       0       0
  7039 ;;Total ram usage:        3 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    4
  7042 ;; This function calls:
  7043 ;;		Nothing
  7044 ;; This function is called by:
  7045 ;;		_main
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049                           
  7050                           ;psect for function _resetErrorRxEUSART
  7051  11B3                     _resetErrorRxEUSART:	
  7052                           
  7053                           ;eusart.c: 90: unsigned char aux;
  7054                           ;eusart.c: 92: if( RCSTAbits.FERR )
  7055                           
  7056                           ;incstack = 0
  7057                           ; Regs used in _resetErrorRxEUSART: [wreg]
  7058  11B3  1283               	bcf	3,5	;RP0=0, select bank0
  7059  11B4  1303               	bcf	3,6	;RP1=0, select bank0
  7060  11B5  1D18               	btfss	24,2	;volatile
  7061  11B6  29C9               	goto	l3345
  7062                           
  7063                           ;eusart.c: 93: {
  7064                           ;eusart.c: 94: RCSTAbits.SPEN = 0;
  7065  11B7  1398               	bcf	24,7	;volatile
  7066                           
  7067                           ;eusart.c: 95: _delay((unsigned long)((100)*(20000000/4000.0)));
  7068  11B8  3003               	movlw	3
  7069  11B9  1283               	bcf	3,5	;RP0=0, select bank0
  7070  11BA  1303               	bcf	3,6	;RP1=0, select bank0
  7071  11BB  00A6               	movwf	??_resetErrorRxEUSART+2
  7072  11BC  308A               	movlw	138
  7073  11BD  00A5               	movwf	??_resetErrorRxEUSART+1
  7074  11BE  3055               	movlw	85
  7075  11BF  00A4               	movwf	??_resetErrorRxEUSART
  7076  11C0                     u3107:	
  7077  11C0  0BA4               	decfsz	??_resetErrorRxEUSART,f
  7078  11C1  29C0               	goto	u3107
  7079  11C2  0BA5               	decfsz	??_resetErrorRxEUSART+1,f
  7080  11C3  29C0               	goto	u3107
  7081  11C4  0BA6               	decfsz	??_resetErrorRxEUSART+2,f
  7082  11C5  29C0               	goto	u3107
  7083                           
  7084                           ;eusart.c: 96: RCSTAbits.SPEN = 1;
  7085  11C6  1283               	bcf	3,5	;RP0=0, select bank0
  7086  11C7  1303               	bcf	3,6	;RP1=0, select bank0
  7087  11C8  1798               	bsf	24,7	;volatile
  7088  11C9                     l3345:	
  7089                           
  7090                           ;eusart.c: 97: }
  7091                           ;eusart.c: 98: if( RCSTAbits.OERR )
  7092  11C9  1C98               	btfss	24,1	;volatile
  7093  11CA  0008               	return
  7094                           
  7095                           ;eusart.c: 99: {
  7096                           ;eusart.c: 100: RCSTAbits.CREN = 0;
  7097  11CB  1218               	bcf	24,4	;volatile
  7098                           
  7099                           ;eusart.c: 101: _delay((unsigned long)((100)*(20000000/4000.0)));
  7100  11CC  3003               	movlw	3
  7101  11CD  1283               	bcf	3,5	;RP0=0, select bank0
  7102  11CE  1303               	bcf	3,6	;RP1=0, select bank0
  7103  11CF  00A6               	movwf	??_resetErrorRxEUSART+2
  7104  11D0  308A               	movlw	138
  7105  11D1  00A5               	movwf	??_resetErrorRxEUSART+1
  7106  11D2  3055               	movlw	85
  7107  11D3  00A4               	movwf	??_resetErrorRxEUSART
  7108  11D4                     u3117:	
  7109  11D4  0BA4               	decfsz	??_resetErrorRxEUSART,f
  7110  11D5  29D4               	goto	u3117
  7111  11D6  0BA5               	decfsz	??_resetErrorRxEUSART+1,f
  7112  11D7  29D4               	goto	u3117
  7113  11D8  0BA6               	decfsz	??_resetErrorRxEUSART+2,f
  7114  11D9  29D4               	goto	u3117
  7115                           
  7116                           ;eusart.c: 102: RCSTAbits.CREN = 1;
  7117  11DA  1283               	bcf	3,5	;RP0=0, select bank0
  7118  11DB  1303               	bcf	3,6	;RP1=0, select bank0
  7119  11DC  1618               	bsf	24,4	;volatile
  7120  11DD  0008               	return
  7121  11DE                     __end_of_resetErrorRxEUSART:	
  7122                           
  7123                           	psect	text24
  7124  1498                     __ptext24:	
  7125 ;; *************** function _modulo2 *****************
  7126 ;; Defined at:
  7127 ;;		line 54 in file "bluetooth.c"
  7128 ;; Parameters:    Size  Location     Type
  7129 ;;		None
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;		None
  7132 ;; Return value:  Size  Location     Type
  7133 ;;                  1    wreg      void 
  7134 ;; Registers used:
  7135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7141 ;;      Params:         0       0       0       0       0
  7142 ;;      Locals:         0       0       0       0       0
  7143 ;;      Temps:          0       3       0       0       0
  7144 ;;      Totals:         0       3       0       0       0
  7145 ;;Total ram usage:        3 bytes
  7146 ;; Hardware stack levels used:    1
  7147 ;; Hardware stack levels required when called:    6
  7148 ;; This function calls:
  7149 ;;		_initEUSART
  7150 ;;		_writeString
  7151 ;; This function is called by:
  7152 ;;		_main
  7153 ;; This function uses a non-reentrant model
  7154 ;;
  7155                           
  7156                           
  7157                           ;psect for function _modulo2
  7158  1498                     _modulo2:	
  7159                           
  7160                           ;bluetooth.c: 56: initEUSART(9600);
  7161                           
  7162                           ;incstack = 0
  7163                           ; Regs used in _modulo2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7164  1498  3000               	movlw	0
  7165  1499  1283               	bcf	3,5	;RP0=0, select bank0
  7166  149A  1303               	bcf	3,6	;RP1=0, select bank0
  7167  149B  00B5               	movwf	initEUSART@baudRate+3
  7168  149C  3000               	movlw	0
  7169  149D  00B4               	movwf	initEUSART@baudRate+2
  7170  149E  3025               	movlw	37
  7171  149F  00B3               	movwf	initEUSART@baudRate+1
  7172  14A0  3080               	movlw	128
  7173  14A1  00B2               	movwf	initEUSART@baudRate
  7174  14A2  160A  118A  243D  160A  118A  	fcall	_initEUSART
  7175                           
  7176                           ;bluetooth.c: 57: writeString("AT+PAIR=0013,EF,0014BB,20\r\n");
  7177  14A7  3038               	movlw	low (STR_103| (0+32768))
  7178  14A8  1283               	bcf	3,5	;RP0=0, select bank0
  7179  14A9  1303               	bcf	3,6	;RP1=0, select bank0
  7180  14AA  00A5               	movwf	writeString@str
  7181  14AB  3086               	movlw	high (STR_103| (0+32768))
  7182  14AC  00A6               	movwf	writeString@str+1
  7183  14AD  160A  118A  2138  160A  118A  	fcall	_writeString
  7184                           
  7185                           ;bluetooth.c: 58: _delay((unsigned long)((100)*(20000000/4000.0)));
  7186  14B2  3003               	movlw	3
  7187  14B3  1283               	bcf	3,5	;RP0=0, select bank0
  7188  14B4  1303               	bcf	3,6	;RP1=0, select bank0
  7189  14B5  00BE               	movwf	??_modulo2+2
  7190  14B6  308A               	movlw	138
  7191  14B7  00BD               	movwf	??_modulo2+1
  7192  14B8  3055               	movlw	85
  7193  14B9  00BC               	movwf	??_modulo2
  7194  14BA                     u3127:	
  7195  14BA  0BBC               	decfsz	??_modulo2,f
  7196  14BB  2CBA               	goto	u3127
  7197  14BC  0BBD               	decfsz	??_modulo2+1,f
  7198  14BD  2CBA               	goto	u3127
  7199  14BE  0BBE               	decfsz	??_modulo2+2,f
  7200  14BF  2CBA               	goto	u3127
  7201                           
  7202                           ;bluetooth.c: 59: writeString("AT+LINK=0013,EF,0014BB\r\n");
  7203  14C0  30D1               	movlw	low (STR_104| (0+32768))
  7204  14C1  1283               	bcf	3,5	;RP0=0, select bank0
  7205  14C2  1303               	bcf	3,6	;RP1=0, select bank0
  7206  14C3  00A5               	movwf	writeString@str
  7207  14C4  3086               	movlw	high (STR_104| (0+32768))
  7208  14C5  00A6               	movwf	writeString@str+1
  7209  14C6  160A  118A  2138  160A  118A  	fcall	_writeString
  7210                           
  7211                           ;bluetooth.c: 60: _delay((unsigned long)((100)*(20000000/4000.0)));
  7212  14CB  3003               	movlw	3
  7213  14CC  1283               	bcf	3,5	;RP0=0, select bank0
  7214  14CD  1303               	bcf	3,6	;RP1=0, select bank0
  7215  14CE  00BE               	movwf	??_modulo2+2
  7216  14CF  308A               	movlw	138
  7217  14D0  00BD               	movwf	??_modulo2+1
  7218  14D1  3055               	movlw	85
  7219  14D2  00BC               	movwf	??_modulo2
  7220  14D3                     u3137:	
  7221  14D3  0BBC               	decfsz	??_modulo2,f
  7222  14D4  2CD3               	goto	u3137
  7223  14D5  0BBD               	decfsz	??_modulo2+1,f
  7224  14D6  2CD3               	goto	u3137
  7225  14D7  0BBE               	decfsz	??_modulo2+2,f
  7226  14D8  2CD3               	goto	u3137
  7227                           
  7228                           ;bluetooth.c: 61: writeString("AT+BIND=0013,EF,0014BB\r\n");
  7229  14D9  30B8               	movlw	low (STR_105| (0+32768))
  7230  14DA  1283               	bcf	3,5	;RP0=0, select bank0
  7231  14DB  1303               	bcf	3,6	;RP1=0, select bank0
  7232  14DC  00A5               	movwf	writeString@str
  7233  14DD  3086               	movlw	high (STR_105| (0+32768))
  7234  14DE  00A6               	movwf	writeString@str+1
  7235  14DF  160A  118A  2138  160A  118A  	fcall	_writeString
  7236                           
  7237                           ;bluetooth.c: 62: _delay((unsigned long)((100)*(20000000/4000.0)));
  7238  14E4  3003               	movlw	3
  7239  14E5  1283               	bcf	3,5	;RP0=0, select bank0
  7240  14E6  1303               	bcf	3,6	;RP1=0, select bank0
  7241  14E7  00BE               	movwf	??_modulo2+2
  7242  14E8  308A               	movlw	138
  7243  14E9  00BD               	movwf	??_modulo2+1
  7244  14EA  3055               	movlw	85
  7245  14EB  00BC               	movwf	??_modulo2
  7246  14EC                     u3147:	
  7247  14EC  0BBC               	decfsz	??_modulo2,f
  7248  14ED  2CEC               	goto	u3147
  7249  14EE  0BBD               	decfsz	??_modulo2+1,f
  7250  14EF  2CEC               	goto	u3147
  7251  14F0  0BBE               	decfsz	??_modulo2+2,f
  7252  14F1  2CEC               	goto	u3147
  7253  14F2  0008               	return
  7254  14F3                     __end_of_modulo2:	
  7255                           
  7256                           	psect	text25
  7257  0B01                     __ptext25:	
  7258 ;; *************** function _master1 *****************
  7259 ;; Defined at:
  7260 ;;		line 5 in file "bluetooth.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;		None
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;		None
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  1    wreg      void 
  7267 ;; Registers used:
  7268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7274 ;;      Params:         0       0       0       0       0
  7275 ;;      Locals:         0       0       0       0       0
  7276 ;;      Temps:          0       3       0       0       0
  7277 ;;      Totals:         0       3       0       0       0
  7278 ;;Total ram usage:        3 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; Hardware stack levels required when called:    6
  7281 ;; This function calls:
  7282 ;;		_initEUSART
  7283 ;;		_writeString
  7284 ;; This function is called by:
  7285 ;;		_main
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288                           
  7289                           
  7290                           ;psect for function _master1
  7291  0B01                     _master1:	
  7292                           
  7293                           ;bluetooth.c: 7: initEUSART(9600);
  7294                           
  7295                           ;incstack = 0
  7296                           ; Regs used in _master1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7297  0B01  3000               	movlw	0
  7298  0B02  1283               	bcf	3,5	;RP0=0, select bank0
  7299  0B03  1303               	bcf	3,6	;RP1=0, select bank0
  7300  0B04  00B5               	movwf	initEUSART@baudRate+3
  7301  0B05  3000               	movlw	0
  7302  0B06  00B4               	movwf	initEUSART@baudRate+2
  7303  0B07  3025               	movlw	37
  7304  0B08  00B3               	movwf	initEUSART@baudRate+1
  7305  0B09  3080               	movlw	128
  7306  0B0A  00B2               	movwf	initEUSART@baudRate
  7307  0B0B  160A  118A  243D  120A  158A  	fcall	_initEUSART
  7308                           
  7309                           ;bluetooth.c: 8: writeString("AT+UART=9600,0,0\r\n");
  7310  0B10  30FE               	movlw	low (STR_85| (0+32768))
  7311  0B11  1283               	bcf	3,5	;RP0=0, select bank0
  7312  0B12  1303               	bcf	3,6	;RP1=0, select bank0
  7313  0B13  00A5               	movwf	writeString@str
  7314  0B14  3086               	movlw	high (STR_85| (0+32768))
  7315  0B15  00A6               	movwf	writeString@str+1
  7316  0B16  160A  118A  2138  120A  158A  	fcall	_writeString
  7317                           
  7318                           ;bluetooth.c: 9: writeString("AT+ROLE=1\r\n");
  7319  0B1B  3094               	movlw	low (STR_86| (0+32768))
  7320  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
  7321  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
  7322  0B1E  00A5               	movwf	writeString@str
  7323  0B1F  3089               	movlw	high (STR_86| (0+32768))
  7324  0B20  00A6               	movwf	writeString@str+1
  7325  0B21  160A  118A  2138  120A  158A  	fcall	_writeString
  7326                           
  7327                           ;bluetooth.c: 10: _delay((unsigned long)((100)*(20000000/4000.0)));
  7328  0B26  3003               	movlw	3
  7329  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  7330  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  7331  0B29  00BE               	movwf	??_master1+2
  7332  0B2A  308A               	movlw	138
  7333  0B2B  00BD               	movwf	??_master1+1
  7334  0B2C  3055               	movlw	85
  7335  0B2D  00BC               	movwf	??_master1
  7336  0B2E                     u3157:	
  7337  0B2E  0BBC               	decfsz	??_master1,f
  7338  0B2F  2B2E               	goto	u3157
  7339  0B30  0BBD               	decfsz	??_master1+1,f
  7340  0B31  2B2E               	goto	u3157
  7341  0B32  0BBE               	decfsz	??_master1+2,f
  7342  0B33  2B2E               	goto	u3157
  7343                           
  7344                           ;bluetooth.c: 11: writeString("AT+CMODE=0\r\n");
  7345  0B34  307B               	movlw	low (STR_87| (0+32768))
  7346  0B35  1283               	bcf	3,5	;RP0=0, select bank0
  7347  0B36  1303               	bcf	3,6	;RP1=0, select bank0
  7348  0B37  00A5               	movwf	writeString@str
  7349  0B38  3089               	movlw	high (STR_87| (0+32768))
  7350  0B39  00A6               	movwf	writeString@str+1
  7351  0B3A  160A  118A  2138  120A  158A  	fcall	_writeString
  7352                           
  7353                           ;bluetooth.c: 12: _delay((unsigned long)((100)*(20000000/4000.0)));
  7354  0B3F  3003               	movlw	3
  7355  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  7356  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  7357  0B42  00BE               	movwf	??_master1+2
  7358  0B43  308A               	movlw	138
  7359  0B44  00BD               	movwf	??_master1+1
  7360  0B45  3055               	movlw	85
  7361  0B46  00BC               	movwf	??_master1
  7362  0B47                     u3167:	
  7363  0B47  0BBC               	decfsz	??_master1,f
  7364  0B48  2B47               	goto	u3167
  7365  0B49  0BBD               	decfsz	??_master1+1,f
  7366  0B4A  2B47               	goto	u3167
  7367  0B4B  0BBE               	decfsz	??_master1+2,f
  7368  0B4C  2B47               	goto	u3167
  7369                           
  7370                           ;bluetooth.c: 13: writeString("AT+INQM=0,5,5\r\n");
  7371  0B4D  3042               	movlw	low (STR_88| (0+32768))
  7372  0B4E  1283               	bcf	3,5	;RP0=0, select bank0
  7373  0B4F  1303               	bcf	3,6	;RP1=0, select bank0
  7374  0B50  00A5               	movwf	writeString@str
  7375  0B51  3089               	movlw	high (STR_88| (0+32768))
  7376  0B52  00A6               	movwf	writeString@str+1
  7377  0B53  160A  118A  2138  120A  158A  	fcall	_writeString
  7378                           
  7379                           ;bluetooth.c: 14: _delay((unsigned long)((100)*(20000000/4000.0)));
  7380  0B58  3003               	movlw	3
  7381  0B59  1283               	bcf	3,5	;RP0=0, select bank0
  7382  0B5A  1303               	bcf	3,6	;RP1=0, select bank0
  7383  0B5B  00BE               	movwf	??_master1+2
  7384  0B5C  308A               	movlw	138
  7385  0B5D  00BD               	movwf	??_master1+1
  7386  0B5E  3055               	movlw	85
  7387  0B5F  00BC               	movwf	??_master1
  7388  0B60                     u3177:	
  7389  0B60  0BBC               	decfsz	??_master1,f
  7390  0B61  2B60               	goto	u3177
  7391  0B62  0BBD               	decfsz	??_master1+1,f
  7392  0B63  2B60               	goto	u3177
  7393  0B64  0BBE               	decfsz	??_master1+2,f
  7394  0B65  2B60               	goto	u3177
  7395                           
  7396                           ;bluetooth.c: 15: writeString("AT+INIT\r\n");
  7397  0B66  30C0               	movlw	low (STR_89| (0+32768))
  7398  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  7399  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  7400  0B69  00A5               	movwf	writeString@str
  7401  0B6A  3089               	movlw	high (STR_89| (0+32768))
  7402  0B6B  00A6               	movwf	writeString@str+1
  7403  0B6C  160A  118A  2138  120A  158A  	fcall	_writeString
  7404                           
  7405                           ;bluetooth.c: 16: _delay((unsigned long)((100)*(20000000/4000.0)));
  7406  0B71  3003               	movlw	3
  7407  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  7408  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  7409  0B74  00BE               	movwf	??_master1+2
  7410  0B75  308A               	movlw	138
  7411  0B76  00BD               	movwf	??_master1+1
  7412  0B77  3055               	movlw	85
  7413  0B78  00BC               	movwf	??_master1
  7414  0B79                     u3187:	
  7415  0B79  0BBC               	decfsz	??_master1,f
  7416  0B7A  2B79               	goto	u3187
  7417  0B7B  0BBD               	decfsz	??_master1+1,f
  7418  0B7C  2B79               	goto	u3187
  7419  0B7D  0BBE               	decfsz	??_master1+2,f
  7420  0B7E  2B79               	goto	u3187
  7421                           
  7422                           ;bluetooth.c: 17: writeString("AT+INQ\r\n");
  7423  0B7F  30D3               	movlw	low (STR_90| (0+32768))
  7424  0B80  1283               	bcf	3,5	;RP0=0, select bank0
  7425  0B81  1303               	bcf	3,6	;RP1=0, select bank0
  7426  0B82  00A5               	movwf	writeString@str
  7427  0B83  3089               	movlw	high (STR_90| (0+32768))
  7428  0B84  00A6               	movwf	writeString@str+1
  7429  0B85  160A  118A  2138  120A  158A  	fcall	_writeString
  7430                           
  7431                           ;bluetooth.c: 18: _delay((unsigned long)((100)*(20000000/4000.0)));
  7432  0B8A  3003               	movlw	3
  7433  0B8B  1283               	bcf	3,5	;RP0=0, select bank0
  7434  0B8C  1303               	bcf	3,6	;RP1=0, select bank0
  7435  0B8D  00BE               	movwf	??_master1+2
  7436  0B8E  308A               	movlw	138
  7437  0B8F  00BD               	movwf	??_master1+1
  7438  0B90  3055               	movlw	85
  7439  0B91  00BC               	movwf	??_master1
  7440  0B92                     u3197:	
  7441  0B92  0BBC               	decfsz	??_master1,f
  7442  0B93  2B92               	goto	u3197
  7443  0B94  0BBD               	decfsz	??_master1+1,f
  7444  0B95  2B92               	goto	u3197
  7445  0B96  0BBE               	decfsz	??_master1+2,f
  7446  0B97  2B92               	goto	u3197
  7447                           
  7448                           ;bluetooth.c: 19: writeString("AT+PSWD=\"0910\"\r\n");
  7449  0B98  30DD               	movlw	low (STR_91| (0+32768))
  7450  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  7451  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
  7452  0B9B  00A5               	movwf	writeString@str
  7453  0B9C  3087               	movlw	high (STR_91| (0+32768))
  7454  0B9D  00A6               	movwf	writeString@str+1
  7455  0B9E  160A  118A  2138   	fcall	_writeString
  7456  0BA1  0008               	return
  7457  0BA2                     __end_of_master1:	
  7458                           
  7459                           	psect	text26
  7460  0BA2                     __ptext26:	
  7461 ;; *************** function _logo *****************
  7462 ;; Defined at:
  7463 ;;		line 8 in file "auxiliar.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;		None
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;		None
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      void 
  7470 ;; Registers used:
  7471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7477 ;;      Params:         0       0       0       0       0
  7478 ;;      Locals:         0       0       0       0       0
  7479 ;;      Temps:          0       3       0       0       0
  7480 ;;      Totals:         0       3       0       0       0
  7481 ;;Total ram usage:        3 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; Hardware stack levels required when called:    7
  7484 ;; This function calls:
  7485 ;;		_cmdLCD
  7486 ;;		_writeLCD
  7487 ;; This function is called by:
  7488 ;;		_main
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           
  7493                           ;psect for function _logo
  7494  0BA2                     _logo:	
  7495                           
  7496                           ;auxiliar.c: 10: cmdLCD(0x01);
  7497                           
  7498                           ;incstack = 0
  7499                           ; Regs used in _logo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7500  0BA2  3001               	movlw	1
  7501  0BA3  160A  118A  23E3  120A  158A  	fcall	_cmdLCD
  7502                           
  7503                           ;auxiliar.c: 11: writeLCD(0,0,"__            __"); _delay((unsigned long)((200)*(2000000
      +                          0/4000.0)));
  7504  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  7505  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  7506  0BAA  01AC               	clrf	writeLCD@y
  7507  0BAB  3031               	movlw	low (STR_1| (0+32768))
  7508  0BAC  00AD               	movwf	writeLCD@ptr
  7509  0BAD  3089               	movlw	high (STR_1| (0+32768))
  7510  0BAE  00AE               	movwf	writeLCD@ptr+1
  7511  0BAF  3000               	movlw	0
  7512  0BB0  160A  118A  223B  120A  158A  	fcall	_writeLCD
  7513  0BB5  3006               	movlw	6
  7514  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
  7515  0BB7  1303               	bcf	3,6	;RP1=0, select bank0
  7516  0BB8  00B3               	movwf	??_logo+2
  7517  0BB9  3013               	movlw	19
  7518  0BBA  00B2               	movwf	??_logo+1
  7519  0BBB  30AD               	movlw	173
  7520  0BBC  00B1               	movwf	??_logo
  7521  0BBD                     u3207:	
  7522  0BBD  0BB1               	decfsz	??_logo,f
  7523  0BBE  2BBD               	goto	u3207
  7524  0BBF  0BB2               	decfsz	??_logo+1,f
  7525  0BC0  2BBD               	goto	u3207
  7526  0BC1  0BB3               	decfsz	??_logo+2,f
  7527  0BC2  2BBD               	goto	u3207
  7528                           
  7529                           ;auxiliar.c: 12: writeLCD(6,0,"B"); _delay((unsigned long)((600)*(20000000/4000.0)));
  7530  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  7531  0BC4  1303               	bcf	3,6	;RP1=0, select bank0
  7532  0BC5  01AC               	clrf	writeLCD@y
  7533  0BC6  300B               	movlw	low (STR_2| (0+32768))
  7534  0BC7  00AD               	movwf	writeLCD@ptr
  7535  0BC8  308A               	movlw	high (STR_2| (0+32768))
  7536  0BC9  00AE               	movwf	writeLCD@ptr+1
  7537  0BCA  3006               	movlw	6
  7538  0BCB  160A  118A  223B  120A  158A  	fcall	_writeLCD
  7539  0BD0  3010               	movlw	16
  7540  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  7541  0BD2  1303               	bcf	3,6	;RP1=0, select bank0
  7542  0BD3  00B3               	movwf	??_logo+2
  7543  0BD4  3039               	movlw	57
  7544  0BD5  00B2               	movwf	??_logo+1
  7545  0BD6  300D               	movlw	13
  7546  0BD7  00B1               	movwf	??_logo
  7547  0BD8                     u3217:	
  7548  0BD8  0BB1               	decfsz	??_logo,f
  7549  0BD9  2BD8               	goto	u3217
  7550  0BDA  0BB2               	decfsz	??_logo+1,f
  7551  0BDB  2BD8               	goto	u3217
  7552  0BDC  0BB3               	decfsz	??_logo+2,f
  7553  0BDD  2BD8               	goto	u3217
  7554                           
  7555                           ;auxiliar.c: 13: writeLCD(7,0,"l"); _delay((unsigned long)((600)*(20000000/4000.0)));
  7556  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  7557  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  7558  0BE0  01AC               	clrf	writeLCD@y
  7559  0BE1  300F               	movlw	low (STR_3| (0+32768))
  7560  0BE2  00AD               	movwf	writeLCD@ptr
  7561  0BE3  308A               	movlw	high (STR_3| (0+32768))
  7562  0BE4  00AE               	movwf	writeLCD@ptr+1
  7563  0BE5  3007               	movlw	7
  7564  0BE6  160A  118A  223B  120A  158A  	fcall	_writeLCD
  7565  0BEB  3010               	movlw	16
  7566  0BEC  1283               	bcf	3,5	;RP0=0, select bank0
  7567  0BED  1303               	bcf	3,6	;RP1=0, select bank0
  7568  0BEE  00B3               	movwf	??_logo+2
  7569  0BEF  3039               	movlw	57
  7570  0BF0  00B2               	movwf	??_logo+1
  7571  0BF1  300D               	movlw	13
  7572  0BF2  00B1               	movwf	??_logo
  7573  0BF3                     u3227:	
  7574  0BF3  0BB1               	decfsz	??_logo,f
  7575  0BF4  2BF3               	goto	u3227
  7576  0BF5  0BB2               	decfsz	??_logo+1,f
  7577  0BF6  2BF3               	goto	u3227
  7578  0BF7  0BB3               	decfsz	??_logo+2,f
  7579  0BF8  2BF3               	goto	u3227
  7580                           
  7581                           ;auxiliar.c: 14: writeLCD(8,0,"u"); _delay((unsigned long)((600)*(20000000/4000.0)));
  7582  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  7583  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  7584  0BFB  01AC               	clrf	writeLCD@y
  7585  0BFC  3011               	movlw	low (STR_4| (0+32768))
  7586  0BFD  00AD               	movwf	writeLCD@ptr
  7587  0BFE  308A               	movlw	high (STR_4| (0+32768))
  7588  0BFF  00AE               	movwf	writeLCD@ptr+1
  7589  0C00  3008               	movlw	8
  7590  0C01  160A  118A  223B  120A  158A  	fcall	_writeLCD
  7591  0C06  3010               	movlw	16
  7592  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  7593  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  7594  0C09  00B3               	movwf	??_logo+2
  7595  0C0A  3039               	movlw	57
  7596  0C0B  00B2               	movwf	??_logo+1
  7597  0C0C  300D               	movlw	13
  7598  0C0D  00B1               	movwf	??_logo
  7599  0C0E                     u3237:	
  7600  0C0E  0BB1               	decfsz	??_logo,f
  7601  0C0F  2C0E               	goto	u3237
  7602  0C10  0BB2               	decfsz	??_logo+1,f
  7603  0C11  2C0E               	goto	u3237
  7604  0C12  0BB3               	decfsz	??_logo+2,f
  7605  0C13  2C0E               	goto	u3237
  7606                           
  7607                           ;auxiliar.c: 15: writeLCD(9,0,"e"); _delay((unsigned long)((600)*(20000000/4000.0)));
  7608  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  7609  0C15  1303               	bcf	3,6	;RP1=0, select bank0
  7610  0C16  01AC               	clrf	writeLCD@y
  7611  0C17  300D               	movlw	low (STR_5| (0+32768))
  7612  0C18  00AD               	movwf	writeLCD@ptr
  7613  0C19  308A               	movlw	high (STR_5| (0+32768))
  7614  0C1A  00AE               	movwf	writeLCD@ptr+1
  7615  0C1B  3009               	movlw	9
  7616  0C1C  160A  118A  223B  120A  158A  	fcall	_writeLCD
  7617  0C21  3010               	movlw	16
  7618  0C22  1283               	bcf	3,5	;RP0=0, select bank0
  7619  0C23  1303               	bcf	3,6	;RP1=0, select bank0
  7620  0C24  00B3               	movwf	??_logo+2
  7621  0C25  3039               	movlw	57
  7622  0C26  00B2               	movwf	??_logo+1
  7623  0C27  300D               	movlw	13
  7624  0C28  00B1               	movwf	??_logo
  7625  0C29                     u3247:	
  7626  0C29  0BB1               	decfsz	??_logo,f
  7627  0C2A  2C29               	goto	u3247
  7628  0C2B  0BB2               	decfsz	??_logo+1,f
  7629  0C2C  2C29               	goto	u3247
  7630  0C2D  0BB3               	decfsz	??_logo+2,f
  7631  0C2E  2C29               	goto	u3247
  7632                           
  7633                           ;auxiliar.c: 16: writeLCD(0,1,"    Tecnolog    "); _delay((unsigned long)((2500)*(200000
      +                          00/4000.0)));
  7634  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
  7635  0C30  1303               	bcf	3,6	;RP1=0, select bank0
  7636  0C31  01AC               	clrf	writeLCD@y
  7637  0C32  0AAC               	incf	writeLCD@y,f
  7638  0C33  3054               	movlw	low (STR_6| (0+32768))
  7639  0C34  00AD               	movwf	writeLCD@ptr
  7640  0C35  3088               	movlw	high (STR_6| (0+32768))
  7641  0C36  00AE               	movwf	writeLCD@ptr+1
  7642  0C37  3000               	movlw	0
  7643  0C38  160A  118A  223B  120A  158A  	fcall	_writeLCD
  7644  0C3D  3040               	movlw	64
  7645  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  7646  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  7647  0C40  00B3               	movwf	??_logo+2
  7648  0C41  306A               	movlw	106
  7649  0C42  00B2               	movwf	??_logo+1
  7650  0C43  3097               	movlw	151
  7651  0C44  00B1               	movwf	??_logo
  7652  0C45                     u3257:	
  7653  0C45  0BB1               	decfsz	??_logo,f
  7654  0C46  2C45               	goto	u3257
  7655  0C47  0BB2               	decfsz	??_logo+1,f
  7656  0C48  2C45               	goto	u3257
  7657  0C49  0BB3               	decfsz	??_logo+2,f
  7658  0C4A  2C45               	goto	u3257
  7659  0C4B  0008               	return
  7660  0C4C                     __end_of_logo:	
  7661                           
  7662                           	psect	text27
  7663  105C                     __ptext27:	
  7664 ;; *************** function _initTimer0 *****************
  7665 ;; Defined at:
  7666 ;;		line 38 in file "timer0.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;		None
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;		None
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      void 
  7673 ;; Registers used:
  7674 ;;		wreg, status,2, status,0, pclath, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7680 ;;      Params:         0       0       0       0       0
  7681 ;;      Locals:         0       0       0       0       0
  7682 ;;      Temps:          0       0       0       0       0
  7683 ;;      Totals:         0       0       0       0       0
  7684 ;;Total ram usage:        0 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    5
  7687 ;; This function calls:
  7688 ;;		_setT0limite
  7689 ;; This function is called by:
  7690 ;;		_main
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           
  7695                           ;psect for function _initTimer0
  7696  105C                     _initTimer0:	
  7697                           
  7698                           ;timer0.c: 41: INTCONbits.GIE = 0;
  7699                           
  7700                           ;incstack = 0
  7701                           ; Regs used in _initTimer0: [wreg+status,2+status,0+pclath+cstack]
  7702  105C  138B               	bcf	11,7	;volatile
  7703                           
  7704                           ;timer0.c: 43: ANSEL = 0x00;
  7705  105D  1683               	bsf	3,5	;RP0=1, select bank3
  7706  105E  1703               	bsf	3,6	;RP1=1, select bank3
  7707  105F  0188               	clrf	8	;volatile
  7708                           
  7709                           ;timer0.c: 44: TRISAbits.TRISA4 = 1;
  7710  1060  1683               	bsf	3,5	;RP0=1, select bank1
  7711  1061  1303               	bcf	3,6	;RP1=0, select bank1
  7712  1062  1605               	bsf	5,4	;volatile
  7713                           
  7714                           ;timer0.c: 46: OPTION_REGbits.T0CS = 0;
  7715  1063  1281               	bcf	1,5	;volatile
  7716                           
  7717                           ;timer0.c: 48: OPTION_REGbits.PSA = 0;
  7718  1064  1181               	bcf	1,3	;volatile
  7719                           
  7720                           ;timer0.c: 49: OPTION_REGbits.PS2 = 1;
  7721  1065  1501               	bsf	1,2	;volatile
  7722                           
  7723                           ;timer0.c: 50: OPTION_REGbits.PS1 = 0;
  7724  1066  1081               	bcf	1,1	;volatile
  7725                           
  7726                           ;timer0.c: 51: OPTION_REGbits.PS0 = 0;
  7727  1067  1001               	bcf	1,0	;volatile
  7728                           
  7729                           ;timer0.c: 53: OPTION_REGbits.T0SE = 1;
  7730  1068  1601               	bsf	1,4	;volatile
  7731                           
  7732                           ;timer0.c: 55: TMR0 = 100;
  7733  1069  3064               	movlw	100
  7734  106A  1283               	bcf	3,5	;RP0=0, select bank0
  7735  106B  1303               	bcf	3,6	;RP1=0, select bank0
  7736  106C  0081               	movwf	1	;volatile
  7737                           
  7738                           ;timer0.c: 57: setT0limite( 700 );
  7739  106D  30BC               	movlw	188
  7740  106E  00A4               	movwf	setT0limite@c
  7741  106F  3002               	movlw	2
  7742  1070  00A5               	movwf	setT0limite@c+1
  7743  1071  160A  158A  273F   	fcall	_setT0limite
  7744                           
  7745                           ;timer0.c: 59: INTCONbits.T0IE = 1;
  7746  1074  168B               	bsf	11,5	;volatile
  7747                           
  7748                           ;timer0.c: 60: INTCONbits.GIE = 1;
  7749  1075  178B               	bsf	11,7	;volatile
  7750  1076  0008               	return
  7751  1077                     __end_of_initTimer0:	
  7752                           
  7753                           	psect	text28
  7754  1F3F                     __ptext28:	
  7755 ;; *************** function _setT0limite *****************
  7756 ;; Defined at:
  7757 ;;		line 29 in file "timer0.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  c               2    4[BANK0 ] int 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;		None
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  1    wreg      void 
  7764 ;; Registers used:
  7765 ;;		wreg
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7771 ;;      Params:         0       2       0       0       0
  7772 ;;      Locals:         0       0       0       0       0
  7773 ;;      Temps:          0       0       0       0       0
  7774 ;;      Totals:         0       2       0       0       0
  7775 ;;Total ram usage:        2 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    4
  7778 ;; This function calls:
  7779 ;;		Nothing
  7780 ;; This function is called by:
  7781 ;;		_initTimer0
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           
  7786                           ;psect for function _setT0limite
  7787  1F3F                     _setT0limite:	
  7788                           
  7789                           ;timer0.c: 31: t0final = c;
  7790                           
  7791                           ;incstack = 0
  7792                           ; Regs used in _setT0limite: [wreg]
  7793  1F3F  1283               	bcf	3,5	;RP0=0, select bank0
  7794  1F40  1303               	bcf	3,6	;RP1=0, select bank0
  7795  1F41  0825               	movf	setT0limite@c+1,w
  7796  1F42  00CC               	movwf	_t0final+1
  7797  1F43  0824               	movf	setT0limite@c,w
  7798  1F44  00CB               	movwf	_t0final
  7799  1F45  0008               	return
  7800  1F46                     __end_of_setT0limite:	
  7801                           
  7802                           	psect	text29
  7803  1F86                     __ptext29:	
  7804 ;; *************** function _initSerial *****************
  7805 ;; Defined at:
  7806 ;;		line 11 in file "Serial.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;		None
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;		None
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  1    wreg      void 
  7813 ;; Registers used:
  7814 ;;		wreg, status,2, status,0, pclath, cstack
  7815 ;; Tracked objects:
  7816 ;;		On entry : 0/0
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7820 ;;      Params:         0       0       0       0       0
  7821 ;;      Locals:         0       0       0       0       0
  7822 ;;      Temps:          0       1       0       0       0
  7823 ;;      Totals:         0       1       0       0       0
  7824 ;;Total ram usage:        1 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    5
  7827 ;; This function calls:
  7828 ;;		_serialOut
  7829 ;; This function is called by:
  7830 ;;		_main
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           
  7835                           ;psect for function _initSerial
  7836  1F86                     _initSerial:	
  7837                           
  7838                           ;Serial.c: 13: PORTB = 0x00;
  7839                           
  7840                           ;incstack = 0
  7841                           ; Regs used in _initSerial: [wreg+status,2+status,0+pclath+cstack]
  7842  1F86  1283               	bcf	3,5	;RP0=0, select bank0
  7843  1F87  1303               	bcf	3,6	;RP1=0, select bank0
  7844  1F88  0186               	clrf	6	;volatile
  7845                           
  7846                           ;Serial.c: 14: CCP1CON &= 0xF0;
  7847  1F89  30F0               	movlw	240
  7848  1F8A  00A7               	movwf	??_initSerial
  7849  1F8B  0827               	movf	??_initSerial,w
  7850  1F8C  0597               	andwf	23,f	;volatile
  7851                           
  7852                           ;Serial.c: 15: ANSELH = 0x00;
  7853  1F8D  1683               	bsf	3,5	;RP0=1, select bank3
  7854  1F8E  1703               	bsf	3,6	;RP1=1, select bank3
  7855  1F8F  0189               	clrf	9	;volatile
  7856                           
  7857                           ;Serial.c: 16: TRISB = 0b00000010;
  7858  1F90  3002               	movlw	2
  7859  1F91  1683               	bsf	3,5	;RP0=1, select bank1
  7860  1F92  1303               	bcf	3,6	;RP1=0, select bank1
  7861  1F93  0086               	movwf	6	;volatile
  7862                           
  7863                           ;Serial.c: 18: PORTBbits.RB4 = 1;
  7864  1F94  1283               	bcf	3,5	;RP0=0, select bank0
  7865  1F95  1303               	bcf	3,6	;RP1=0, select bank0
  7866  1F96  1606               	bsf	6,4	;volatile
  7867                           
  7868                           ;Serial.c: 19: serialOut(0x00);
  7869  1F97  3000               	movlw	0
  7870  1F98  160A  158A  27B4   	fcall	_serialOut
  7871  1F9B  0008               	return
  7872  1F9C                     __end_of_initSerial:	
  7873                           
  7874                           	psect	text30
  7875  1FB4                     __ptext30:	
  7876 ;; *************** function _serialOut *****************
  7877 ;; Defined at:
  7878 ;;		line 22 in file "Serial.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  d               1    wreg     unsigned char 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  d               1    5[BANK0 ] unsigned char 
  7883 ;;  i               1    6[BANK0 ] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      void 
  7886 ;; Registers used:
  7887 ;;		wreg, status,2, status,0
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7893 ;;      Params:         0       0       0       0       0
  7894 ;;      Locals:         0       2       0       0       0
  7895 ;;      Temps:          0       1       0       0       0
  7896 ;;      Totals:         0       3       0       0       0
  7897 ;;Total ram usage:        3 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    4
  7900 ;; This function calls:
  7901 ;;		Nothing
  7902 ;; This function is called by:
  7903 ;;		_initSerial
  7904 ;;		_main
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           
  7909                           ;psect for function _serialOut
  7910  1FB4                     _serialOut:	
  7911                           
  7912                           ;incstack = 0
  7913                           ; Regs used in _serialOut: [wreg+status,2+status,0]
  7914                           ;serialOut@d stored from wreg
  7915  1FB4  1283               	bcf	3,5	;RP0=0, select bank0
  7916  1FB5  1303               	bcf	3,6	;RP1=0, select bank0
  7917  1FB6  00A5               	movwf	serialOut@d
  7918                           
  7919                           ;Serial.c: 24: unsigned char i = 0x80;
  7920  1FB7  3080               	movlw	128
  7921  1FB8  00A4               	movwf	??_serialOut
  7922  1FB9  0824               	movf	??_serialOut,w
  7923  1FBA  00A6               	movwf	serialOut@i
  7924                           
  7925                           ;Serial.c: 25: PORTBbits.RB3 = 0;
  7926  1FBB  1186               	bcf	6,3	;volatile
  7927  1FBC                     l2697:	
  7928                           ;Serial.c: 26: while (i)
  7929                           
  7930  1FBC  0826               	movf	serialOut@i,w
  7931  1FBD  1903               	btfsc	3,2
  7932  1FBE  2FCB               	goto	l32
  7933                           
  7934                           ;Serial.c: 27: {
  7935                           ;Serial.c: 28: PORTBbits.RB2 = 0;
  7936  1FBF  1106               	bcf	6,2	;volatile
  7937                           
  7938                           ;Serial.c: 29: if(d & i )
  7939  1FC0  0825               	movf	serialOut@d,w
  7940  1FC1  0526               	andwf	serialOut@i,w
  7941  1FC2  1903               	btfsc	3,2
  7942  1FC3  2FC6               	goto	l30
  7943                           
  7944                           ;Serial.c: 30: PORTBbits.RB0 = 1;
  7945  1FC4  1406               	bsf	6,0	;volatile
  7946  1FC5  2FC7               	goto	l2693
  7947  1FC6                     l30:	
  7948                           
  7949                           ;Serial.c: 31: else
  7950                           ;Serial.c: 32: PORTBbits.RB0 = 0;
  7951  1FC6  1006               	bcf	6,0	;volatile
  7952  1FC7                     l2693:	
  7953                           
  7954                           ;Serial.c: 33: i >>= 1;
  7955  1FC7  1003               	clrc
  7956  1FC8  0CA6               	rrf	serialOut@i,f
  7957                           
  7958                           ;Serial.c: 34: PORTBbits.RB2 = 1;
  7959  1FC9  1506               	bsf	6,2	;volatile
  7960  1FCA  2FBC               	goto	l2697
  7961  1FCB                     l32:	
  7962                           
  7963                           ;Serial.c: 35: }
  7964                           ;Serial.c: 36: PORTBbits.RB3 = 1;
  7965  1FCB  1586               	bsf	6,3	;volatile
  7966  1FCC  0008               	return
  7967  1FCD                     __end_of_serialOut:	
  7968                           
  7969                           	psect	text31
  7970  126D                     __ptext31:	
  7971 ;; *************** function _initLCD *****************
  7972 ;; Defined at:
  7973 ;;		line 71 in file "lcd.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;		None
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;		None
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  1    wreg      void 
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0, pclath, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7987 ;;      Params:         0       0       0       0       0
  7988 ;;      Locals:         0       0       0       0       0
  7989 ;;      Temps:          0       3       0       0       0
  7990 ;;      Totals:         0       3       0       0       0
  7991 ;;Total ram usage:        3 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:    5
  7994 ;; This function calls:
  7995 ;;		_cmdLCD
  7996 ;; This function is called by:
  7997 ;;		_main
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001                           
  8002                           ;psect for function _initLCD
  8003  126D                     _initLCD:	
  8004                           
  8005                           ;lcd.c: 73: LCD.BUS = 0;
  8006                           
  8007                           ;incstack = 0
  8008                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  8009  126D  30F0               	movlw	-16
  8010  126E  1283               	bcf	3,5	;RP0=0, select bank0
  8011  126F  1303               	bcf	3,6	;RP1=0, select bank0
  8012  1270  0588               	andwf	8,f	;volatile
  8013                           
  8014                           ;lcd.c: 74: LCD.RS = 0;
  8015  1271  1208               	bcf	8,4	;volatile
  8016                           
  8017                           ;lcd.c: 75: LCD.EN = 1;
  8018  1272  1688               	bsf	8,5	;volatile
  8019                           
  8020                           ;lcd.c: 76: TRISD = 0x00;
  8021  1273  1683               	bsf	3,5	;RP0=1, select bank1
  8022  1274  1303               	bcf	3,6	;RP1=0, select bank1
  8023  1275  0188               	clrf	8	;volatile
  8024                           
  8025                           ;lcd.c: 78: _delay((unsigned long)((100)*(20000000/4000.0)));
  8026  1276  3003               	movlw	3
  8027  1277  1283               	bcf	3,5	;RP0=0, select bank0
  8028  1278  1303               	bcf	3,6	;RP1=0, select bank0
  8029  1279  00AA               	movwf	??_initLCD+2
  8030  127A  308A               	movlw	138
  8031  127B  00A9               	movwf	??_initLCD+1
  8032  127C  3055               	movlw	85
  8033  127D  00A8               	movwf	??_initLCD
  8034  127E                     u3267:	
  8035  127E  0BA8               	decfsz	??_initLCD,f
  8036  127F  2A7E               	goto	u3267
  8037  1280  0BA9               	decfsz	??_initLCD+1,f
  8038  1281  2A7E               	goto	u3267
  8039  1282  0BAA               	decfsz	??_initLCD+2,f
  8040  1283  2A7E               	goto	u3267
  8041                           
  8042                           ;lcd.c: 79: cmdLCD ( 0x20 );
  8043  1284  3020               	movlw	32
  8044  1285  160A  118A  23E3  160A  118A  	fcall	_cmdLCD
  8045                           
  8046                           ;lcd.c: 80: cmdLCD ( 0x28 );
  8047  128A  3028               	movlw	40
  8048  128B  160A  118A  23E3  160A  118A  	fcall	_cmdLCD
  8049                           
  8050                           ;lcd.c: 81: cmdLCD ( 0x0C );
  8051  1290  300C               	movlw	12
  8052  1291  160A  118A  23E3  160A  118A  	fcall	_cmdLCD
  8053                           
  8054                           ;lcd.c: 82: cmdLCD ( 0x01 );
  8055  1296  3001               	movlw	1
  8056  1297  160A  118A  23E3  160A  118A  	fcall	_cmdLCD
  8057                           
  8058                           ;lcd.c: 83: cmdLCD ( 0x02 );
  8059  129C  3002               	movlw	2
  8060  129D  160A  118A  23E3   	fcall	_cmdLCD
  8061  12A0  0008               	return
  8062  12A1                     __end_of_initLCD:	
  8063                           
  8064                           	psect	text32
  8065  1F55                     __ptext32:	
  8066 ;; *************** function _initBT *****************
  8067 ;; Defined at:
  8068 ;;		line 4 in file "bds.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;		None
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;		None
  8073 ;; Return value:  Size  Location     Type
  8074 ;;                  1    wreg      void 
  8075 ;; Registers used:
  8076 ;;		None
  8077 ;; Tracked objects:
  8078 ;;		On entry : 0/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8082 ;;      Params:         0       0       0       0       0
  8083 ;;      Locals:         0       0       0       0       0
  8084 ;;      Temps:          0       0       0       0       0
  8085 ;;      Totals:         0       0       0       0       0
  8086 ;;Total ram usage:        0 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:    4
  8089 ;; This function calls:
  8090 ;;		Nothing
  8091 ;; This function is called by:
  8092 ;;		_main
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           
  8097                           ;psect for function _initBT
  8098  1F55                     _initBT:	
  8099                           
  8100                           ;bds.c: 7: TRISCbits.TRISC0 = 1;
  8101                           
  8102                           ;incstack = 0
  8103                           ; Regs used in _initBT: []
  8104  1F55  1683               	bsf	3,5	;RP0=1, select bank1
  8105  1F56  1303               	bcf	3,6	;RP1=0, select bank1
  8106  1F57  1407               	bsf	7,0	;volatile
  8107                           
  8108                           ;bds.c: 8: TRISCbits.TRISC1 = 1;
  8109  1F58  1487               	bsf	7,1	;volatile
  8110                           
  8111                           ;bds.c: 9: TRISCbits.TRISC2 = 1;
  8112  1F59  1507               	bsf	7,2	;volatile
  8113                           
  8114                           ;bds.c: 11: PORTCbits.RC0 = 0;
  8115  1F5A  1283               	bcf	3,5	;RP0=0, select bank0
  8116  1F5B  1303               	bcf	3,6	;RP1=0, select bank0
  8117  1F5C  1007               	bcf	7,0	;volatile
  8118                           
  8119                           ;bds.c: 12: PORTCbits.RC1 = 0;
  8120  1F5D  1087               	bcf	7,1	;volatile
  8121                           
  8122                           ;bds.c: 13: PORTCbits.RC2 = 0;
  8123  1F5E  1107               	bcf	7,2	;volatile
  8124  1F5F  0008               	return
  8125  1F60                     __end_of_initBT:	
  8126                           
  8127                           	psect	text33
  8128  118A                     __ptext33:	
  8129 ;; *************** function _getFIFO *****************
  8130 ;; Defined at:
  8131 ;;		line 23 in file "fifo.c"
  8132 ;; Parameters:    Size  Location     Type
  8133 ;;		None
  8134 ;; Auto vars:     Size  Location     Type
  8135 ;;  aux             1   15[BANK0 ] unsigned char 
  8136 ;; Return value:  Size  Location     Type
  8137 ;;                  1    wreg      unsigned char 
  8138 ;; Registers used:
  8139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8140 ;; Tracked objects:
  8141 ;;		On entry : 0/0
  8142 ;;		On exit  : 0/0
  8143 ;;		Unchanged: 0/0
  8144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8145 ;;      Params:         0       0       0       0       0
  8146 ;;      Locals:         0       1       0       0       0
  8147 ;;      Temps:          0       4       0       0       0
  8148 ;;      Totals:         0       5       0       0       0
  8149 ;;Total ram usage:        5 bytes
  8150 ;; Hardware stack levels used:    1
  8151 ;; Hardware stack levels required when called:    5
  8152 ;; This function calls:
  8153 ;;		___awmod
  8154 ;; This function is called by:
  8155 ;;		_main
  8156 ;;		_readEUSART
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           
  8161                           ;psect for function _getFIFO
  8162  118A                     _getFIFO:	
  8163                           
  8164                           ;fifo.c: 25: unsigned char aux = 0;
  8165                           
  8166                           ;incstack = 0
  8167                           ; Regs used in _getFIFO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8168  118A  1283               	bcf	3,5	;RP0=0, select bank0
  8169  118B  1303               	bcf	3,6	;RP1=0, select bank0
  8170  118C  01AF               	clrf	getFIFO@aux
  8171                           
  8172                           ;fifo.c: 27: if( fifoTail != fifoHead )
  8173  118D  084D               	movf	_fifoTail,w
  8174  118E  067C               	xorwf	_fifoHead,w
  8175  118F  1903               	skipnz
  8176  1190  29B1               	goto	l3365
  8177                           
  8178                           ;fifo.c: 28: {
  8179                           ;fifo.c: 29: aux = fifo[ fifoTail ];
  8180  1191  084D               	movf	_fifoTail,w
  8181  1192  3EA0               	addlw	(low (_fifo| 0))& (0+255)
  8182  1193  0084               	movwf	4
  8183  1194  1383               	bcf	3,7	;select IRP bank1
  8184  1195  0800               	movf	0,w
  8185  1196  00AB               	movwf	??_getFIFO
  8186  1197  082B               	movf	??_getFIFO,w
  8187  1198  00AF               	movwf	getFIFO@aux
  8188                           
  8189                           ;fifo.c: 30: fifoTail = ++fifoTail % 30;
  8190  1199  301E               	movlw	30
  8191  119A  00A4               	movwf	___awmod@divisor
  8192  119B  3000               	movlw	0
  8193  119C  00A5               	movwf	___awmod@divisor+1
  8194  119D  3001               	movlw	1
  8195  119E  00AB               	movwf	??_getFIFO
  8196  119F  082B               	movf	??_getFIFO,w
  8197  11A0  07CD               	addwf	_fifoTail,f
  8198  11A1  084D               	movf	_fifoTail,w
  8199  11A2  00AC               	movwf	??_getFIFO+1
  8200  11A3  01AD               	clrf	??_getFIFO+2
  8201  11A4  082C               	movf	??_getFIFO+1,w
  8202  11A5  00A6               	movwf	___awmod@dividend
  8203  11A6  082D               	movf	??_getFIFO+2,w
  8204  11A7  00A7               	movwf	___awmod@dividend+1
  8205  11A8  160A  118A  22EC   	fcall	___awmod
  8206  11AB  1283               	bcf	3,5	;RP0=0, select bank0
  8207  11AC  1303               	bcf	3,6	;RP1=0, select bank0
  8208  11AD  0824               	movf	?___awmod,w
  8209  11AE  00AE               	movwf	??_getFIFO+3
  8210  11AF  082E               	movf	??_getFIFO+3,w
  8211  11B0  00CD               	movwf	_fifoTail
  8212  11B1                     l3365:	
  8213                           
  8214                           ;fifo.c: 31: }
  8215                           ;fifo.c: 32: return( aux );
  8216  11B1  082F               	movf	getFIFO@aux,w
  8217  11B2  0008               	return
  8218  11B3                     __end_of_getFIFO:	
  8219                           
  8220                           	psect	text34
  8221  12EC                     __ptext34:	
  8222 ;; *************** function ___awmod *****************
  8223 ;; Defined at:
  8224 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;  divisor         2    4[BANK0 ] int 
  8227 ;;  dividend        2    6[BANK0 ] int 
  8228 ;; Auto vars:     Size  Location     Type
  8229 ;;  sign            1   10[BANK0 ] unsigned char 
  8230 ;;  counter         1    9[BANK0 ] unsigned char 
  8231 ;; Return value:  Size  Location     Type
  8232 ;;                  2    4[BANK0 ] int 
  8233 ;; Registers used:
  8234 ;;		wreg, status,2, status,0
  8235 ;; Tracked objects:
  8236 ;;		On entry : 0/0
  8237 ;;		On exit  : 0/0
  8238 ;;		Unchanged: 0/0
  8239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8240 ;;      Params:         0       4       0       0       0
  8241 ;;      Locals:         0       2       0       0       0
  8242 ;;      Temps:          0       1       0       0       0
  8243 ;;      Totals:         0       7       0       0       0
  8244 ;;Total ram usage:        7 bytes
  8245 ;; Hardware stack levels used:    1
  8246 ;; Hardware stack levels required when called:    4
  8247 ;; This function calls:
  8248 ;;		Nothing
  8249 ;; This function is called by:
  8250 ;;		_getFIFO
  8251 ;;		_statusFIFO
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           
  8256                           ;psect for function ___awmod
  8257  12EC                     ___awmod:	
  8258                           
  8259                           ;incstack = 0
  8260                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8261  12EC  1283               	bcf	3,5	;RP0=0, select bank0
  8262  12ED  1303               	bcf	3,6	;RP1=0, select bank0
  8263  12EE  01AA               	clrf	___awmod@sign
  8264  12EF  1FA7               	btfss	___awmod@dividend+1,7
  8265  12F0  2AF8               	goto	l2887
  8266  12F1  09A6               	comf	___awmod@dividend,f
  8267  12F2  09A7               	comf	___awmod@dividend+1,f
  8268  12F3  0AA6               	incf	___awmod@dividend,f
  8269  12F4  1903               	skipnz
  8270  12F5  0AA7               	incf	___awmod@dividend+1,f
  8271  12F6  01AA               	clrf	___awmod@sign
  8272  12F7  0AAA               	incf	___awmod@sign,f
  8273  12F8                     l2887:	
  8274  12F8  1FA5               	btfss	___awmod@divisor+1,7
  8275  12F9  2AFF               	goto	l2891
  8276  12FA  09A4               	comf	___awmod@divisor,f
  8277  12FB  09A5               	comf	___awmod@divisor+1,f
  8278  12FC  0AA4               	incf	___awmod@divisor,f
  8279  12FD  1903               	skipnz
  8280  12FE  0AA5               	incf	___awmod@divisor+1,f
  8281  12FF                     l2891:	
  8282  12FF  0824               	movf	___awmod@divisor,w
  8283  1300  0425               	iorwf	___awmod@divisor+1,w
  8284  1301  1903               	btfsc	3,2
  8285  1302  2B2C               	goto	l2909
  8286  1303  01A9               	clrf	___awmod@counter
  8287  1304  0AA9               	incf	___awmod@counter,f
  8288  1305                     l2899:	
  8289  1305  1BA5               	btfsc	___awmod@divisor+1,7
  8290  1306  2B13               	goto	l2901
  8291  1307  3001               	movlw	1
  8292  1308                     u1975:	
  8293  1308  1003               	clrc
  8294  1309  0DA4               	rlf	___awmod@divisor,f
  8295  130A  0DA5               	rlf	___awmod@divisor+1,f
  8296  130B  3EFF               	addlw	-1
  8297  130C  1D03               	skipz
  8298  130D  2B08               	goto	u1975
  8299  130E  3001               	movlw	1
  8300  130F  00A8               	movwf	??___awmod
  8301  1310  0828               	movf	??___awmod,w
  8302  1311  07A9               	addwf	___awmod@counter,f
  8303  1312  2B05               	goto	l2899
  8304  1313                     l2901:	
  8305  1313  0825               	movf	___awmod@divisor+1,w
  8306  1314  0227               	subwf	___awmod@dividend+1,w
  8307  1315  1D03               	skipz
  8308  1316  2B19               	goto	u1995
  8309  1317  0824               	movf	___awmod@divisor,w
  8310  1318  0226               	subwf	___awmod@dividend,w
  8311  1319                     u1995:	
  8312  1319  1C03               	skipc
  8313  131A  2B21               	goto	l2905
  8314  131B  0824               	movf	___awmod@divisor,w
  8315  131C  02A6               	subwf	___awmod@dividend,f
  8316  131D  0825               	movf	___awmod@divisor+1,w
  8317  131E  1C03               	skipc
  8318  131F  03A7               	decf	___awmod@dividend+1,f
  8319  1320  02A7               	subwf	___awmod@dividend+1,f
  8320  1321                     l2905:	
  8321  1321  3001               	movlw	1
  8322  1322                     u2005:	
  8323  1322  1003               	clrc
  8324  1323  0CA5               	rrf	___awmod@divisor+1,f
  8325  1324  0CA4               	rrf	___awmod@divisor,f
  8326  1325  3EFF               	addlw	-1
  8327  1326  1D03               	skipz
  8328  1327  2B22               	goto	u2005
  8329  1328  3001               	movlw	1
  8330  1329  02A9               	subwf	___awmod@counter,f
  8331  132A  1D03               	btfss	3,2
  8332  132B  2B13               	goto	l2901
  8333  132C                     l2909:	
  8334  132C  082A               	movf	___awmod@sign,w
  8335  132D  1903               	btfsc	3,2
  8336  132E  2B34               	goto	l2913
  8337  132F  09A6               	comf	___awmod@dividend,f
  8338  1330  09A7               	comf	___awmod@dividend+1,f
  8339  1331  0AA6               	incf	___awmod@dividend,f
  8340  1332  1903               	skipnz
  8341  1333  0AA7               	incf	___awmod@dividend+1,f
  8342  1334                     l2913:	
  8343  1334  0827               	movf	___awmod@dividend+1,w
  8344  1335  00A5               	movwf	?___awmod+1
  8345  1336  0826               	movf	___awmod@dividend,w
  8346  1337  00A4               	movwf	?___awmod
  8347  1338  0008               	return
  8348  1339                     __end_of___awmod:	
  8349                           
  8350                           	psect	text35
  8351  1001                     __ptext35:	
  8352 ;; *************** function _errorRxEUSART *****************
  8353 ;; Defined at:
  8354 ;;		line 72 in file "eusart.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;		None
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;		None
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  1    wreg      unsigned char 
  8361 ;; Registers used:
  8362 ;;		wreg
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8368 ;;      Params:         0       0       0       0       0
  8369 ;;      Locals:         0       0       0       0       0
  8370 ;;      Temps:          0       0       0       0       0
  8371 ;;      Totals:         0       0       0       0       0
  8372 ;;Total ram usage:        0 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; Hardware stack levels required when called:    4
  8375 ;; This function calls:
  8376 ;;		Nothing
  8377 ;; This function is called by:
  8378 ;;		_main
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           
  8383                           ;psect for function _errorRxEUSART
  8384  1001                     _errorRxEUSART:	
  8385                           
  8386                           ;eusart.c: 74: if( RCSTAbits.FERR )
  8387                           
  8388                           ;incstack = 0
  8389                           ; Regs used in _errorRxEUSART: [wreg]
  8390  1001  1283               	bcf	3,5	;RP0=0, select bank0
  8391  1002  1303               	bcf	3,6	;RP1=0, select bank0
  8392  1003  1D18               	btfss	24,2	;volatile
  8393  1004  2807               	goto	l553
  8394                           
  8395                           ;eusart.c: 75: return( 1 );
  8396  1005  3001               	movlw	1
  8397  1006  0008               	return
  8398  1007                     l553:	
  8399                           
  8400                           ;eusart.c: 76: else if( RCSTAbits.OERR )
  8401  1007  1C98               	btfss	24,1	;volatile
  8402  1008  280B               	goto	l3383
  8403                           
  8404                           ;eusart.c: 77: return( 2 );
  8405  1009  3002               	movlw	2
  8406  100A  0008               	return
  8407  100B                     l3383:	
  8408                           
  8409                           ;eusart.c: 78: else
  8410                           ;eusart.c: 79: return( 0 );
  8411  100B  3000               	movlw	0
  8412  100C  0008               	return
  8413  100D                     __end_of_errorRxEUSART:	
  8414                           
  8415                           	psect	text36
  8416  0E03                     __ptext36:	
  8417 ;; *************** function _easterEgg *****************
  8418 ;; Defined at:
  8419 ;;		line 179 in file "auxiliar.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;		None
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;		None
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      void 
  8426 ;; Registers used:
  8427 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8433 ;;      Params:         0       0       0       0       0
  8434 ;;      Locals:         0       0       0       0       0
  8435 ;;      Temps:          0       3       0       0       0
  8436 ;;      Totals:         0       3       0       0       0
  8437 ;;Total ram usage:        3 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    7
  8440 ;; This function calls:
  8441 ;;		_bordaSubidaB2
  8442 ;;		_bordaSubidaB3
  8443 ;;		_cmdLCD
  8444 ;;		_writeLCD
  8445 ;; This function is called by:
  8446 ;;		_main
  8447 ;; This function uses a non-reentrant model
  8448 ;;
  8449                           
  8450                           
  8451                           ;psect for function _easterEgg
  8452  0E03                     _easterEgg:	
  8453                           
  8454                           ;auxiliar.c: 182: cmdLCD(0x01);
  8455                           
  8456                           ;incstack = 0
  8457                           ; Regs used in _easterEgg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8458  0E03  3001               	movlw	1
  8459  0E04  160A  118A  23E3  120A  158A  	fcall	_cmdLCD
  8460                           
  8461                           ;auxiliar.c: 184: writeLCD(0,0,"WALLACE PIRES   ");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8462  0E09  1283               	bcf	3,5	;RP0=0, select bank0
  8463  0E0A  1303               	bcf	3,6	;RP1=0, select bank0
  8464  0E0B  01AC               	clrf	writeLCD@y
  8465  0E0C  3076               	movlw	low (STR_66| (0+32768))
  8466  0E0D  00AD               	movwf	writeLCD@ptr
  8467  0E0E  3088               	movlw	high (STR_66| (0+32768))
  8468  0E0F  00AE               	movwf	writeLCD@ptr+1
  8469  0E10  3000               	movlw	0
  8470  0E11  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8471  0E16  301A               	movlw	26
  8472  0E17  1283               	bcf	3,5	;RP0=0, select bank0
  8473  0E18  1303               	bcf	3,6	;RP1=0, select bank0
  8474  0E19  00B3               	movwf	??_easterEgg+2
  8475  0E1A  305E               	movlw	94
  8476  0E1B  00B2               	movwf	??_easterEgg+1
  8477  0E1C  306D               	movlw	109
  8478  0E1D  00B1               	movwf	??_easterEgg
  8479  0E1E                     u3277:	
  8480  0E1E  0BB1               	decfsz	??_easterEgg,f
  8481  0E1F  2E1E               	goto	u3277
  8482  0E20  0BB2               	decfsz	??_easterEgg+1,f
  8483  0E21  2E1E               	goto	u3277
  8484  0E22  0BB3               	decfsz	??_easterEgg+2,f
  8485  0E23  2E1E               	goto	u3277
  8486  0E24  2E25               	nop2
  8487                           
  8488                           ;auxiliar.c: 185: writeLCD(0,1,"MATEUS PINHEIRO ");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8489  0E25  1283               	bcf	3,5	;RP0=0, select bank0
  8490  0E26  1303               	bcf	3,6	;RP1=0, select bank0
  8491  0E27  01AC               	clrf	writeLCD@y
  8492  0E28  0AAC               	incf	writeLCD@y,f
  8493  0E29  30BA               	movlw	low (STR_67| (0+32768))
  8494  0E2A  00AD               	movwf	writeLCD@ptr
  8495  0E2B  3088               	movlw	high (STR_67| (0+32768))
  8496  0E2C  00AE               	movwf	writeLCD@ptr+1
  8497  0E2D  3000               	movlw	0
  8498  0E2E  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8499  0E33  301A               	movlw	26
  8500  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  8501  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  8502  0E36  00B3               	movwf	??_easterEgg+2
  8503  0E37  305E               	movlw	94
  8504  0E38  00B2               	movwf	??_easterEgg+1
  8505  0E39  306D               	movlw	109
  8506  0E3A  00B1               	movwf	??_easterEgg
  8507  0E3B                     u3287:	
  8508  0E3B  0BB1               	decfsz	??_easterEgg,f
  8509  0E3C  2E3B               	goto	u3287
  8510  0E3D  0BB2               	decfsz	??_easterEgg+1,f
  8511  0E3E  2E3B               	goto	u3287
  8512  0E3F  0BB3               	decfsz	??_easterEgg+2,f
  8513  0E40  2E3B               	goto	u3287
  8514  0E41  2E42               	nop2
  8515                           
  8516                           ;auxiliar.c: 186: writeLCD(0,0,"                ");
  8517  0E42  1283               	bcf	3,5	;RP0=0, select bank0
  8518  0E43  1303               	bcf	3,6	;RP1=0, select bank0
  8519  0E44  01AC               	clrf	writeLCD@y
  8520  0E45  30EE               	movlw	low (STR_68| (0+32768))
  8521  0E46  00AD               	movwf	writeLCD@ptr
  8522  0E47  3087               	movlw	high (STR_68| (0+32768))
  8523  0E48  00AE               	movwf	writeLCD@ptr+1
  8524  0E49  3000               	movlw	0
  8525  0E4A  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8526                           
  8527                           ;auxiliar.c: 187: writeLCD(0,0,"GUI. RIBEIRO    ");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8528  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  8529  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  8530  0E51  01AC               	clrf	writeLCD@y
  8531  0E52  3032               	movlw	low (STR_69| (0+32768))
  8532  0E53  00AD               	movwf	writeLCD@ptr
  8533  0E54  3088               	movlw	high (STR_69| (0+32768))
  8534  0E55  00AE               	movwf	writeLCD@ptr+1
  8535  0E56  3000               	movlw	0
  8536  0E57  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8537  0E5C  301A               	movlw	26
  8538  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  8539  0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  8540  0E5F  00B3               	movwf	??_easterEgg+2
  8541  0E60  305E               	movlw	94
  8542  0E61  00B2               	movwf	??_easterEgg+1
  8543  0E62  306D               	movlw	109
  8544  0E63  00B1               	movwf	??_easterEgg
  8545  0E64                     u3297:	
  8546  0E64  0BB1               	decfsz	??_easterEgg,f
  8547  0E65  2E64               	goto	u3297
  8548  0E66  0BB2               	decfsz	??_easterEgg+1,f
  8549  0E67  2E64               	goto	u3297
  8550  0E68  0BB3               	decfsz	??_easterEgg+2,f
  8551  0E69  2E64               	goto	u3297
  8552  0E6A  2E6B               	nop2
  8553                           
  8554                           ;auxiliar.c: 188: writeLCD(0,1,"                ");
  8555  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  8556  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  8557  0E6D  01AC               	clrf	writeLCD@y
  8558  0E6E  0AAC               	incf	writeLCD@y,f
  8559  0E6F  30EE               	movlw	low (STR_68| (0+32768))
  8560  0E70  00AD               	movwf	writeLCD@ptr
  8561  0E71  3087               	movlw	high (STR_68| (0+32768))
  8562  0E72  00AE               	movwf	writeLCD@ptr+1
  8563  0E73  3000               	movlw	0
  8564  0E74  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8565                           
  8566                           ;auxiliar.c: 189: writeLCD(0,1,"GABRIEL GENU    ");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8567  0E79  1283               	bcf	3,5	;RP0=0, select bank0
  8568  0E7A  1303               	bcf	3,6	;RP1=0, select bank0
  8569  0E7B  01AC               	clrf	writeLCD@y
  8570  0E7C  0AAC               	incf	writeLCD@y,f
  8571  0E7D  3043               	movlw	low (STR_71| (0+32768))
  8572  0E7E  00AD               	movwf	writeLCD@ptr
  8573  0E7F  3088               	movlw	high (STR_71| (0+32768))
  8574  0E80  00AE               	movwf	writeLCD@ptr+1
  8575  0E81  3000               	movlw	0
  8576  0E82  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8577  0E87  301A               	movlw	26
  8578  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  8579  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  8580  0E8A  00B3               	movwf	??_easterEgg+2
  8581  0E8B  305E               	movlw	94
  8582  0E8C  00B2               	movwf	??_easterEgg+1
  8583  0E8D  306D               	movlw	109
  8584  0E8E  00B1               	movwf	??_easterEgg
  8585  0E8F                     u3307:	
  8586  0E8F  0BB1               	decfsz	??_easterEgg,f
  8587  0E90  2E8F               	goto	u3307
  8588  0E91  0BB2               	decfsz	??_easterEgg+1,f
  8589  0E92  2E8F               	goto	u3307
  8590  0E93  0BB3               	decfsz	??_easterEgg+2,f
  8591  0E94  2E8F               	goto	u3307
  8592  0E95  2E96               	nop2
  8593                           
  8594                           ;auxiliar.c: 190: writeLCD(0,0,"                ");
  8595  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  8596  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  8597  0E98  01AC               	clrf	writeLCD@y
  8598  0E99  30EE               	movlw	low (STR_68| (0+32768))
  8599  0E9A  00AD               	movwf	writeLCD@ptr
  8600  0E9B  3087               	movlw	high (STR_68| (0+32768))
  8601  0E9C  00AE               	movwf	writeLCD@ptr+1
  8602  0E9D  3000               	movlw	0
  8603  0E9E  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8604                           
  8605                           ;auxiliar.c: 191: writeLCD(0,0,"ERIC SANTOS     ");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8606  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  8607  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  8608  0EA5  01AC               	clrf	writeLCD@y
  8609  0EA6  3021               	movlw	low (STR_73| (0+32768))
  8610  0EA7  00AD               	movwf	writeLCD@ptr
  8611  0EA8  3088               	movlw	high (STR_73| (0+32768))
  8612  0EA9  00AE               	movwf	writeLCD@ptr+1
  8613  0EAA  3000               	movlw	0
  8614  0EAB  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8615  0EB0  301A               	movlw	26
  8616  0EB1  1283               	bcf	3,5	;RP0=0, select bank0
  8617  0EB2  1303               	bcf	3,6	;RP1=0, select bank0
  8618  0EB3  00B3               	movwf	??_easterEgg+2
  8619  0EB4  305E               	movlw	94
  8620  0EB5  00B2               	movwf	??_easterEgg+1
  8621  0EB6  306D               	movlw	109
  8622  0EB7  00B1               	movwf	??_easterEgg
  8623  0EB8                     u3317:	
  8624  0EB8  0BB1               	decfsz	??_easterEgg,f
  8625  0EB9  2EB8               	goto	u3317
  8626  0EBA  0BB2               	decfsz	??_easterEgg+1,f
  8627  0EBB  2EB8               	goto	u3317
  8628  0EBC  0BB3               	decfsz	??_easterEgg+2,f
  8629  0EBD  2EB8               	goto	u3317
  8630  0EBE  2EBF               	nop2
  8631                           
  8632                           ;auxiliar.c: 192: writeLCD(0,1,"                ");
  8633  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  8634  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  8635  0EC1  01AC               	clrf	writeLCD@y
  8636  0EC2  0AAC               	incf	writeLCD@y,f
  8637  0EC3  30EE               	movlw	low (STR_68| (0+32768))
  8638  0EC4  00AD               	movwf	writeLCD@ptr
  8639  0EC5  3087               	movlw	high (STR_68| (0+32768))
  8640  0EC6  00AE               	movwf	writeLCD@ptr+1
  8641  0EC7  3000               	movlw	0
  8642  0EC8  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8643                           
  8644                           ;auxiliar.c: 193: writeLCD(0,1,"LINCON NOVAIS   ");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8645  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  8646  0ECE  1303               	bcf	3,6	;RP1=0, select bank0
  8647  0ECF  01AC               	clrf	writeLCD@y
  8648  0ED0  0AAC               	incf	writeLCD@y,f
  8649  0ED1  3087               	movlw	low (STR_75| (0+32768))
  8650  0ED2  00AD               	movwf	writeLCD@ptr
  8651  0ED3  3088               	movlw	high (STR_75| (0+32768))
  8652  0ED4  00AE               	movwf	writeLCD@ptr+1
  8653  0ED5  3000               	movlw	0
  8654  0ED6  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8655  0EDB  301A               	movlw	26
  8656  0EDC  1283               	bcf	3,5	;RP0=0, select bank0
  8657  0EDD  1303               	bcf	3,6	;RP1=0, select bank0
  8658  0EDE  00B3               	movwf	??_easterEgg+2
  8659  0EDF  305E               	movlw	94
  8660  0EE0  00B2               	movwf	??_easterEgg+1
  8661  0EE1  306D               	movlw	109
  8662  0EE2  00B1               	movwf	??_easterEgg
  8663  0EE3                     u3327:	
  8664  0EE3  0BB1               	decfsz	??_easterEgg,f
  8665  0EE4  2EE3               	goto	u3327
  8666  0EE5  0BB2               	decfsz	??_easterEgg+1,f
  8667  0EE6  2EE3               	goto	u3327
  8668  0EE7  0BB3               	decfsz	??_easterEgg+2,f
  8669  0EE8  2EE3               	goto	u3327
  8670  0EE9  2EEA               	nop2
  8671                           
  8672                           ;auxiliar.c: 194: writeLCD(0,0,"                ");_delay((unsigned long)((300)*(2000000
      +                          0/4000.0)));
  8673  0EEA  1283               	bcf	3,5	;RP0=0, select bank0
  8674  0EEB  1303               	bcf	3,6	;RP1=0, select bank0
  8675  0EEC  01AC               	clrf	writeLCD@y
  8676  0EED  30EE               	movlw	low (STR_68| (0+32768))
  8677  0EEE  00AD               	movwf	writeLCD@ptr
  8678  0EEF  3087               	movlw	high (STR_68| (0+32768))
  8679  0EF0  00AE               	movwf	writeLCD@ptr+1
  8680  0EF1  3000               	movlw	0
  8681  0EF2  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8682  0EF7  3008               	movlw	8
  8683  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  8684  0EF9  1303               	bcf	3,6	;RP1=0, select bank0
  8685  0EFA  00B3               	movwf	??_easterEgg+2
  8686  0EFB  309D               	movlw	157
  8687  0EFC  00B2               	movwf	??_easterEgg+1
  8688  0EFD  3005               	movlw	5
  8689  0EFE  00B1               	movwf	??_easterEgg
  8690  0EFF                     u3337:	
  8691  0EFF  0BB1               	decfsz	??_easterEgg,f
  8692  0F00  2EFF               	goto	u3337
  8693  0F01  0BB2               	decfsz	??_easterEgg+1,f
  8694  0F02  2EFF               	goto	u3337
  8695  0F03  0BB3               	decfsz	??_easterEgg+2,f
  8696  0F04  2EFF               	goto	u3337
  8697                           
  8698                           ;auxiliar.c: 196: cmdLCD(0x01);_delay((unsigned long)((200)*(20000000/4000.0)));
  8699  0F05  3001               	movlw	1
  8700  0F06  160A  118A  23E3  120A  158A  	fcall	_cmdLCD
  8701  0F0B  3006               	movlw	6
  8702  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  8703  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  8704  0F0E  00B3               	movwf	??_easterEgg+2
  8705  0F0F  3013               	movlw	19
  8706  0F10  00B2               	movwf	??_easterEgg+1
  8707  0F11  30AD               	movlw	173
  8708  0F12  00B1               	movwf	??_easterEgg
  8709  0F13                     u3347:	
  8710  0F13  0BB1               	decfsz	??_easterEgg,f
  8711  0F14  2F13               	goto	u3347
  8712  0F15  0BB2               	decfsz	??_easterEgg+1,f
  8713  0F16  2F13               	goto	u3347
  8714  0F17  0BB3               	decfsz	??_easterEgg+2,f
  8715  0F18  2F13               	goto	u3347
  8716                           
  8717                           ;auxiliar.c: 197: writeLCD(0,0,"      ARRI      ");_delay((unsigned long)((500)*(2000000
      +                          0/4000.0)));
  8718  0F19  1283               	bcf	3,5	;RP0=0, select bank0
  8719  0F1A  1303               	bcf	3,6	;RP1=0, select bank0
  8720  0F1B  01AC               	clrf	writeLCD@y
  8721  0F1C  30FF               	movlw	low (STR_77| (0+32768))
  8722  0F1D  00AD               	movwf	writeLCD@ptr
  8723  0F1E  3087               	movlw	high (STR_77| (0+32768))
  8724  0F1F  00AE               	movwf	writeLCD@ptr+1
  8725  0F20  3000               	movlw	0
  8726  0F21  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8727  0F26  300D               	movlw	13
  8728  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  8729  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  8730  0F29  00B3               	movwf	??_easterEgg+2
  8731  0F2A  30AF               	movlw	175
  8732  0F2B  00B2               	movwf	??_easterEgg+1
  8733  0F2C  30B5               	movlw	181
  8734  0F2D  00B1               	movwf	??_easterEgg
  8735  0F2E                     u3357:	
  8736  0F2E  0BB1               	decfsz	??_easterEgg,f
  8737  0F2F  2F2E               	goto	u3357
  8738  0F30  0BB2               	decfsz	??_easterEgg+1,f
  8739  0F31  2F2E               	goto	u3357
  8740  0F32  0BB3               	decfsz	??_easterEgg+2,f
  8741  0F33  2F2E               	goto	u3357
  8742  0F34  2F35               	nop2
  8743                           
  8744                           ;auxiliar.c: 198: writeLCD(0,1,"     EGUAAA     ");_delay((unsigned long)((2500)*(200000
      +                          00/4000.0)));
  8745  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  8746  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  8747  0F37  01AC               	clrf	writeLCD@y
  8748  0F38  0AAC               	incf	writeLCD@y,f
  8749  0F39  3010               	movlw	low (STR_78| (0+32768))
  8750  0F3A  00AD               	movwf	writeLCD@ptr
  8751  0F3B  3088               	movlw	high (STR_78| (0+32768))
  8752  0F3C  00AE               	movwf	writeLCD@ptr+1
  8753  0F3D  3000               	movlw	0
  8754  0F3E  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8755  0F43  3040               	movlw	64
  8756  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  8757  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  8758  0F46  00B3               	movwf	??_easterEgg+2
  8759  0F47  306A               	movlw	106
  8760  0F48  00B2               	movwf	??_easterEgg+1
  8761  0F49  3097               	movlw	151
  8762  0F4A  00B1               	movwf	??_easterEgg
  8763  0F4B                     u3367:	
  8764  0F4B  0BB1               	decfsz	??_easterEgg,f
  8765  0F4C  2F4B               	goto	u3367
  8766  0F4D  0BB2               	decfsz	??_easterEgg+1,f
  8767  0F4E  2F4B               	goto	u3367
  8768  0F4F  0BB3               	decfsz	??_easterEgg+2,f
  8769  0F50  2F4B               	goto	u3367
  8770                           
  8771                           ;auxiliar.c: 199: cmdLCD(0x01);_delay((unsigned long)((200)*(20000000/4000.0)));
  8772  0F51  3001               	movlw	1
  8773  0F52  160A  118A  23E3  120A  158A  	fcall	_cmdLCD
  8774  0F57  3006               	movlw	6
  8775  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  8776  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  8777  0F5A  00B3               	movwf	??_easterEgg+2
  8778  0F5B  3013               	movlw	19
  8779  0F5C  00B2               	movwf	??_easterEgg+1
  8780  0F5D  30AD               	movlw	173
  8781  0F5E  00B1               	movwf	??_easterEgg
  8782  0F5F                     u3377:	
  8783  0F5F  0BB1               	decfsz	??_easterEgg,f
  8784  0F60  2F5F               	goto	u3377
  8785  0F61  0BB2               	decfsz	??_easterEgg+1,f
  8786  0F62  2F5F               	goto	u3377
  8787  0F63  0BB3               	decfsz	??_easterEgg+2,f
  8788  0F64  2F5F               	goto	u3377
  8789                           
  8790                           ;auxiliar.c: 200: writeLCD(0,0,"XD *-*ARRI*-* XD");
  8791  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  8792  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  8793  0F67  01AC               	clrf	writeLCD@y
  8794  0F68  3020               	movlw	low (STR_79| (0+32768))
  8795  0F69  00AD               	movwf	writeLCD@ptr
  8796  0F6A  3089               	movlw	high (STR_79| (0+32768))
  8797  0F6B  00AE               	movwf	writeLCD@ptr+1
  8798  0F6C  3000               	movlw	0
  8799  0F6D  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8800                           
  8801                           ;auxiliar.c: 201: writeLCD(0,1,"!*-* EGUAAA *-*!");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8802  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  8803  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  8804  0F74  01AC               	clrf	writeLCD@y
  8805  0F75  0AAC               	incf	writeLCD@y,f
  8806  0F76  30DC               	movlw	low (STR_80| (0+32768))
  8807  0F77  00AD               	movwf	writeLCD@ptr
  8808  0F78  3088               	movlw	high (STR_80| (0+32768))
  8809  0F79  00AE               	movwf	writeLCD@ptr+1
  8810  0F7A  3000               	movlw	0
  8811  0F7B  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8812  0F80  301A               	movlw	26
  8813  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  8814  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  8815  0F83  00B3               	movwf	??_easterEgg+2
  8816  0F84  305E               	movlw	94
  8817  0F85  00B2               	movwf	??_easterEgg+1
  8818  0F86  306D               	movlw	109
  8819  0F87  00B1               	movwf	??_easterEgg
  8820  0F88                     u3387:	
  8821  0F88  0BB1               	decfsz	??_easterEgg,f
  8822  0F89  2F88               	goto	u3387
  8823  0F8A  0BB2               	decfsz	??_easterEgg+1,f
  8824  0F8B  2F88               	goto	u3387
  8825  0F8C  0BB3               	decfsz	??_easterEgg+2,f
  8826  0F8D  2F88               	goto	u3387
  8827  0F8E  2F8F               	nop2
  8828                           
  8829                           ;auxiliar.c: 202: writeLCD(0,0,"50    ARRI    13");
  8830  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  8831  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  8832  0F91  01AC               	clrf	writeLCD@y
  8833  0F92  30FE               	movlw	low (STR_81| (0+32768))
  8834  0F93  00AD               	movwf	writeLCD@ptr
  8835  0F94  3088               	movlw	high (STR_81| (0+32768))
  8836  0F95  00AE               	movwf	writeLCD@ptr+1
  8837  0F96  3000               	movlw	0
  8838  0F97  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8839                           
  8840                           ;auxiliar.c: 203: writeLCD(0,1,"13   EGUAAA   50");_delay((unsigned long)((700)*(2000000
      +                          0/4000.0)));
  8841  0F9C  1283               	bcf	3,5	;RP0=0, select bank0
  8842  0F9D  1303               	bcf	3,6	;RP1=0, select bank0
  8843  0F9E  01AC               	clrf	writeLCD@y
  8844  0F9F  0AAC               	incf	writeLCD@y,f
  8845  0FA0  30ED               	movlw	low (STR_82| (0+32768))
  8846  0FA1  00AD               	movwf	writeLCD@ptr
  8847  0FA2  3088               	movlw	high (STR_82| (0+32768))
  8848  0FA3  00AE               	movwf	writeLCD@ptr+1
  8849  0FA4  3000               	movlw	0
  8850  0FA5  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8851  0FAA  3012               	movlw	18
  8852  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  8853  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  8854  0FAD  00B3               	movwf	??_easterEgg+2
  8855  0FAE  30C2               	movlw	194
  8856  0FAF  00B2               	movwf	??_easterEgg+1
  8857  0FB0  3065               	movlw	101
  8858  0FB1  00B1               	movwf	??_easterEgg
  8859  0FB2                     u3397:	
  8860  0FB2  0BB1               	decfsz	??_easterEgg,f
  8861  0FB3  2FB2               	goto	u3397
  8862  0FB4  0BB2               	decfsz	??_easterEgg+1,f
  8863  0FB5  2FB2               	goto	u3397
  8864  0FB6  0BB3               	decfsz	??_easterEgg+2,f
  8865  0FB7  2FB2               	goto	u3397
  8866  0FB8  2FB9               	nop2
  8867                           
  8868                           ;auxiliar.c: 204: writeLCD(0,0,":3 *-*ARRI*-* XD");
  8869  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  8870  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  8871  0FBB  01AC               	clrf	writeLCD@y
  8872  0FBC  300F               	movlw	low (STR_83| (0+32768))
  8873  0FBD  00AD               	movwf	writeLCD@ptr
  8874  0FBE  3089               	movlw	high (STR_83| (0+32768))
  8875  0FBF  00AE               	movwf	writeLCD@ptr+1
  8876  0FC0  3000               	movlw	0
  8877  0FC1  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8878                           
  8879                           ;auxiliar.c: 205: writeLCD(0,1,"!*-* EGUAAA *-*!");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8880  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  8881  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  8882  0FC8  01AC               	clrf	writeLCD@y
  8883  0FC9  0AAC               	incf	writeLCD@y,f
  8884  0FCA  30DC               	movlw	low (STR_80| (0+32768))
  8885  0FCB  00AD               	movwf	writeLCD@ptr
  8886  0FCC  3088               	movlw	high (STR_80| (0+32768))
  8887  0FCD  00AE               	movwf	writeLCD@ptr+1
  8888  0FCE  3000               	movlw	0
  8889  0FCF  160A  118A  223B  120A  158A  	fcall	_writeLCD
  8890  0FD4  301A               	movlw	26
  8891  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  8892  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  8893  0FD7  00B3               	movwf	??_easterEgg+2
  8894  0FD8  305E               	movlw	94
  8895  0FD9  00B2               	movwf	??_easterEgg+1
  8896  0FDA  306D               	movlw	109
  8897  0FDB  00B1               	movwf	??_easterEgg
  8898  0FDC                     u3407:	
  8899  0FDC  0BB1               	decfsz	??_easterEgg,f
  8900  0FDD  2FDC               	goto	u3407
  8901  0FDE  0BB2               	decfsz	??_easterEgg+1,f
  8902  0FDF  2FDC               	goto	u3407
  8903  0FE0  0BB3               	decfsz	??_easterEgg+2,f
  8904  0FE1  2FDC               	goto	u3407
  8905  0FE2  2FE3               	nop2
  8906                           
  8907                           ;auxiliar.c: 206: cmdLCD(0x01);_delay((unsigned long)((200)*(20000000/4000.0)));
  8908  0FE3  3001               	movlw	1
  8909  0FE4  160A  118A  23E3  120A  158A  	fcall	_cmdLCD
  8910  0FE9  3006               	movlw	6
  8911  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  8912  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  8913  0FEC  00B3               	movwf	??_easterEgg+2
  8914  0FED  3013               	movlw	19
  8915  0FEE  00B2               	movwf	??_easterEgg+1
  8916  0FEF  30AD               	movlw	173
  8917  0FF0  00B1               	movwf	??_easterEgg
  8918  0FF1                     u3417:	
  8919  0FF1  0BB1               	decfsz	??_easterEgg,f
  8920  0FF2  2FF1               	goto	u3417
  8921  0FF3  0BB2               	decfsz	??_easterEgg+1,f
  8922  0FF4  2FF1               	goto	u3417
  8923  0FF5  0BB3               	decfsz	??_easterEgg+2,f
  8924  0FF6  2FF1               	goto	u3417
  8925                           
  8926                           ;auxiliar.c: 208: bordaSubidaB2();
  8927  0FF7  160A  118A  200D  120A  158A  	fcall	_bordaSubidaB2
  8928                           
  8929                           ;auxiliar.c: 209: bordaSubidaB3();
  8930  0FFC  160A  118A  2027   	fcall	_bordaSubidaB3
  8931  0FFF  0008               	return
  8932  1000                     __end_of_easterEgg:	
  8933                           
  8934                           	psect	text37
  8935  123B                     __ptext37:	
  8936 ;; *************** function _writeLCD *****************
  8937 ;; Defined at:
  8938 ;;		line 64 in file "lcd.c"
  8939 ;; Parameters:    Size  Location     Type
  8940 ;;  x               1    wreg     unsigned char 
  8941 ;;  y               1   12[BANK0 ] unsigned char 
  8942 ;;  ptr             2   13[BANK0 ] PTR const unsigned char 
  8943 ;;		 -> STR_135(11), STR_134(11), STR_133(11), STR_132(11), 
  8944 ;;		 -> STR_131(11), STR_130(11), STR_129(11), STR_128(11), 
  8945 ;;		 -> STR_127(17), STR_126(17), STR_125(17), STR_124(17), 
  8946 ;;		 -> STR_123(17), STR_122(17), STR_121(14), STR_120(14), 
  8947 ;;		 -> STR_119(17), STR_118(17), STR_117(17), STR_116(17), 
  8948 ;;		 -> STR_115(9), STR_114(11), STR_113(13), STR_112(11), 
  8949 ;;		 -> STR_111(17), STR_110(17), STR_84(17), STR_83(17), 
  8950 ;;		 -> STR_82(17), STR_81(17), STR_80(17), STR_79(17), 
  8951 ;;		 -> STR_78(17), STR_77(17), STR_76(17), STR_75(17), 
  8952 ;;		 -> STR_74(17), STR_73(17), STR_72(17), STR_71(17), 
  8953 ;;		 -> STR_70(17), STR_69(17), STR_68(17), STR_67(17), 
  8954 ;;		 -> STR_66(17), STR_65(4), STR_64(4), STR_63(4), 
  8955 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8956 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8957 ;;		 -> STR_54(8), STR_53(1), STR_52(4), STR_51(7), 
  8958 ;;		 -> STR_50(4), STR_49(4), STR_48(8), STR_47(8), 
  8959 ;;		 -> STR_46(8), STR_45(4), STR_44(2), STR_43(2), 
  8960 ;;		 -> STR_42(2), STR_41(2), STR_40(2), STR_39(2), 
  8961 ;;		 -> STR_38(2), STR_37(2), STR_36(2), STR_35(2), 
  8962 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
  8963 ;;		 -> STR_30(2), STR_29(2), STR_28(2), STR_27(2), 
  8964 ;;		 -> STR_26(2), STR_25(2), STR_24(2), STR_23(2), 
  8965 ;;		 -> STR_22(2), STR_21(2), STR_20(2), STR_19(2), 
  8966 ;;		 -> STR_18(2), STR_17(2), STR_16(2), STR_15(2), 
  8967 ;;		 -> STR_14(2), STR_13(2), STR_12(17), STR_11(17), 
  8968 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(17), 
  8969 ;;		 -> STR_6(17), STR_5(2), STR_4(2), STR_3(2), 
  8970 ;;		 -> STR_2(2), STR_1(17), 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  x               1   16[BANK0 ] unsigned char 
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  1    wreg      void 
  8975 ;; Registers used:
  8976 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8982 ;;      Params:         0       3       0       0       0
  8983 ;;      Locals:         0       1       0       0       0
  8984 ;;      Temps:          0       1       0       0       0
  8985 ;;      Totals:         0       5       0       0       0
  8986 ;;Total ram usage:        5 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    6
  8989 ;; This function calls:
  8990 ;;		_gotoxy
  8991 ;;		_putLCD
  8992 ;; This function is called by:
  8993 ;;		_logo
  8994 ;;		_textConfig
  8995 ;;		_textCMpar
  8996 ;;		_textCMdat
  8997 ;;		_textSelection1
  8998 ;;		_textSelection2
  8999 ;;		_textSelection3
  9000 ;;		_textSelection4
  9001 ;;		_textSelection5
  9002 ;;		_textSelection6
  9003 ;;		_textSelection7
  9004 ;;		_textSelection8
  9005 ;;		_textSelectionEST
  9006 ;;		_textSelectionCLP
  9007 ;;		_textLoading
  9008 ;;		_easterEgg
  9009 ;;		_main
  9010 ;;		_textSelectionPAR
  9011 ;;		_textSelectionDES
  9012 ;; This function uses a non-reentrant model
  9013 ;;
  9014                           
  9015                           
  9016                           ;psect for function _writeLCD
  9017  123B                     _writeLCD:	
  9018                           
  9019                           ;incstack = 0
  9020                           ; Regs used in _writeLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9021                           ;writeLCD@x stored from wreg
  9022  123B  1283               	bcf	3,5	;RP0=0, select bank0
  9023  123C  1303               	bcf	3,6	;RP1=0, select bank0
  9024  123D  00B0               	movwf	writeLCD@x
  9025                           
  9026                           ;lcd.c: 66: gotoxy(x,y);
  9027  123E  082C               	movf	writeLCD@y,w
  9028  123F  00AF               	movwf	??_writeLCD
  9029  1240  082F               	movf	??_writeLCD,w
  9030  1241  00A8               	movwf	gotoxy@y
  9031  1242  0830               	movf	writeLCD@x,w
  9032  1243  160A  158A  279C  160A  118A  	fcall	_gotoxy
  9033  1248                     l2745:	
  9034                           ;lcd.c: 67: while( *ptr )
  9035                           
  9036  1248  1283               	bcf	3,5	;RP0=0, select bank0
  9037  1249  1303               	bcf	3,6	;RP1=0, select bank0
  9038  124A  082E               	movf	writeLCD@ptr+1,w
  9039  124B  00FF               	movwf	127
  9040  124C  082D               	movf	writeLCD@ptr,w
  9041  124D  0084               	movwf	4
  9042  124E  160A  158A  2000  160A  118A  	fcall	stringtab
  9043  1253  3A00               	xorlw	0
  9044  1254  1903               	btfsc	3,2
  9045  1255  0008               	return
  9046                           
  9047                           ;lcd.c: 68: putLCD(*ptr++);
  9048  1256  1283               	bcf	3,5	;RP0=0, select bank0
  9049  1257  1303               	bcf	3,6	;RP1=0, select bank0
  9050  1258  082E               	movf	writeLCD@ptr+1,w
  9051  1259  00FF               	movwf	127
  9052  125A  082D               	movf	writeLCD@ptr,w
  9053  125B  0084               	movwf	4
  9054  125C  160A  158A  2000  160A  118A  	fcall	stringtab
  9055  1261  160A  118A  220B  160A  118A  	fcall	_putLCD
  9056  1266  3001               	movlw	1
  9057  1267  1283               	bcf	3,5	;RP0=0, select bank0
  9058  1268  1303               	bcf	3,6	;RP1=0, select bank0
  9059  1269  07AD               	addwf	writeLCD@ptr,f
  9060  126A  1803               	skipnc
  9061  126B  0AAE               	incf	writeLCD@ptr+1,f
  9062  126C  2A48               	goto	l2745
  9063  126D                     __end_of_writeLCD:	
  9064                           
  9065                           	psect	text38
  9066  120B                     __ptext38:	
  9067 ;; *************** function _putLCD *****************
  9068 ;; Defined at:
  9069 ;;		line 39 in file "lcd.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;  c               1    wreg     unsigned char 
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;  c               1    5[BANK0 ] unsigned char 
  9074 ;;  nibble          1    6[BANK0 ] volatile struct .
  9075 ;; Return value:  Size  Location     Type
  9076 ;;                  1    wreg      void 
  9077 ;; Registers used:
  9078 ;;		wreg, status,2, status,0
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9084 ;;      Params:         0       0       0       0       0
  9085 ;;      Locals:         0       2       0       0       0
  9086 ;;      Temps:          0       1       0       0       0
  9087 ;;      Totals:         0       3       0       0       0
  9088 ;;Total ram usage:        3 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:    4
  9091 ;; This function calls:
  9092 ;;		Nothing
  9093 ;; This function is called by:
  9094 ;;		_writeLCD
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           
  9099                           ;psect for function _putLCD
  9100  120B                     _putLCD:	
  9101                           
  9102                           ;incstack = 0
  9103                           ; Regs used in _putLCD: [wreg+status,2+status,0]
  9104                           ;putLCD@c stored from wreg
  9105  120B  1283               	bcf	3,5	;RP0=0, select bank0
  9106  120C  1303               	bcf	3,6	;RP1=0, select bank0
  9107  120D  00A5               	movwf	putLCD@c
  9108                           
  9109                           ;lcd.c: 41: volatile REGnibble_t nibble;
  9110                           ;lcd.c: 42: nibble.HILO = c;
  9111  120E  0825               	movf	putLCD@c,w
  9112  120F  00A4               	movwf	??_putLCD
  9113  1210  0824               	movf	??_putLCD,w
  9114  1211  00A6               	movwf	putLCD@nibble	;volatile
  9115                           
  9116                           ;lcd.c: 44: LCD.RS = 1;
  9117  1212  1608               	bsf	8,4	;volatile
  9118                           
  9119                           ;lcd.c: 45: LCD.BUS = nibble.HI;
  9120  1213  0E26               	swapf	putLCD@nibble,w	;volatile
  9121  1214  390F               	andlw	15
  9122  1215  00A4               	movwf	??_putLCD
  9123  1216  0808               	movf	8,w	;volatile
  9124  1217  0624               	xorwf	??_putLCD,w
  9125  1218  39F0               	andlw	-16
  9126  1219  0624               	xorwf	??_putLCD,w
  9127  121A  0088               	movwf	8	;volatile
  9128                           
  9129                           ;lcd.c: 46: LCD.EN = 0;
  9130  121B  1288               	bcf	8,5	;volatile
  9131                           
  9132                           ;lcd.c: 47: _delay((unsigned long)((40)*(20000000/4000000.0)));
  9133  121C  3041               	movlw	65
  9134  121D  1283               	bcf	3,5	;RP0=0, select bank0
  9135  121E  1303               	bcf	3,6	;RP1=0, select bank0
  9136  121F  00A4               	movwf	??_putLCD
  9137  1220                     u3427:	
  9138  1220  0BA4               	decfsz	??_putLCD,f
  9139  1221  2A20               	goto	u3427
  9140  1222  2A23               	nop2
  9141                           
  9142                           ;lcd.c: 48: LCD.EN = 1;
  9143  1223  1283               	bcf	3,5	;RP0=0, select bank0
  9144  1224  1303               	bcf	3,6	;RP1=0, select bank0
  9145  1225  1688               	bsf	8,5	;volatile
  9146                           
  9147                           ;lcd.c: 51: LCD.RS = 1;
  9148  1226  1608               	bsf	8,4	;volatile
  9149                           
  9150                           ;lcd.c: 52: LCD.BUS = nibble.LO;
  9151  1227  0826               	movf	putLCD@nibble,w	;volatile
  9152  1228  390F               	andlw	15
  9153  1229  00A4               	movwf	??_putLCD
  9154  122A  0808               	movf	8,w	;volatile
  9155  122B  0624               	xorwf	??_putLCD,w
  9156  122C  39F0               	andlw	-16
  9157  122D  0624               	xorwf	??_putLCD,w
  9158  122E  0088               	movwf	8	;volatile
  9159                           
  9160                           ;lcd.c: 53: LCD.EN = 0;
  9161  122F  1288               	bcf	8,5	;volatile
  9162                           
  9163                           ;lcd.c: 54: _delay((unsigned long)((40)*(20000000/4000000.0)));
  9164  1230  3041               	movlw	65
  9165  1231  1283               	bcf	3,5	;RP0=0, select bank0
  9166  1232  1303               	bcf	3,6	;RP1=0, select bank0
  9167  1233  00A4               	movwf	??_putLCD
  9168  1234                     u3437:	
  9169  1234  0BA4               	decfsz	??_putLCD,f
  9170  1235  2A34               	goto	u3437
  9171  1236  2A37               	nop2
  9172                           
  9173                           ;lcd.c: 55: LCD.EN = 1;
  9174  1237  1283               	bcf	3,5	;RP0=0, select bank0
  9175  1238  1303               	bcf	3,6	;RP1=0, select bank0
  9176  1239  1688               	bsf	8,5	;volatile
  9177  123A  0008               	return
  9178  123B                     __end_of_putLCD:	
  9179                           
  9180                           	psect	text39
  9181  1F9C                     __ptext39:	
  9182 ;; *************** function _gotoxy *****************
  9183 ;; Defined at:
  9184 ;;		line 59 in file "lcd.c"
  9185 ;; Parameters:    Size  Location     Type
  9186 ;;  x               1    wreg     unsigned char 
  9187 ;;  y               1    8[BANK0 ] unsigned char 
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;  x               1   11[BANK0 ] unsigned char 
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  1    wreg      void 
  9192 ;; Registers used:
  9193 ;;		wreg, status,2, status,0, pclath, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9199 ;;      Params:         0       1       0       0       0
  9200 ;;      Locals:         0       1       0       0       0
  9201 ;;      Temps:          0       2       0       0       0
  9202 ;;      Totals:         0       4       0       0       0
  9203 ;;Total ram usage:        4 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    5
  9206 ;; This function calls:
  9207 ;;		___bmul
  9208 ;;		_cmdLCD
  9209 ;; This function is called by:
  9210 ;;		_writeLCD
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           
  9215                           ;psect for function _gotoxy
  9216  1F9C                     _gotoxy:	
  9217                           
  9218                           ;incstack = 0
  9219                           ; Regs used in _gotoxy: [wreg+status,2+status,0+pclath+cstack]
  9220                           ;gotoxy@x stored from wreg
  9221  1F9C  1283               	bcf	3,5	;RP0=0, select bank0
  9222  1F9D  1303               	bcf	3,6	;RP1=0, select bank0
  9223  1F9E  00AB               	movwf	gotoxy@x
  9224                           
  9225                           ;lcd.c: 61: cmdLCD (( 0x80 | (0xC0 * y ) + ( x & 0x3f )));
  9226  1F9F  303F               	movlw	63
  9227  1FA0  052B               	andwf	gotoxy@x,w
  9228  1FA1  00A9               	movwf	??_gotoxy
  9229  1FA2  30C0               	movlw	192
  9230  1FA3  00AA               	movwf	??_gotoxy+1
  9231  1FA4  082A               	movf	??_gotoxy+1,w
  9232  1FA5  00A4               	movwf	___bmul@multiplicand
  9233  1FA6  0828               	movf	gotoxy@y,w
  9234  1FA7  160A  158A  2773  160A  158A  	fcall	___bmul
  9235  1FAC  1283               	bcf	3,5	;RP0=0, select bank0
  9236  1FAD  1303               	bcf	3,6	;RP1=0, select bank0
  9237  1FAE  0729               	addwf	??_gotoxy,w
  9238  1FAF  3880               	iorlw	128
  9239  1FB0  160A  118A  23E3   	fcall	_cmdLCD
  9240  1FB3  0008               	return
  9241  1FB4                     __end_of_gotoxy:	
  9242                           
  9243                           	psect	text40
  9244  13E3                     __ptext40:	
  9245 ;; *************** function _cmdLCD *****************
  9246 ;; Defined at:
  9247 ;;		line 7 in file "lcd.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  cmd             1    wreg     unsigned char 
  9250 ;; Auto vars:     Size  Location     Type
  9251 ;;  cmd             1    6[BANK0 ] unsigned char 
  9252 ;;  nibble          1    7[BANK0 ] volatile struct .
  9253 ;; Return value:  Size  Location     Type
  9254 ;;                  1    wreg      void 
  9255 ;; Registers used:
  9256 ;;		wreg, status,2, status,0
  9257 ;; Tracked objects:
  9258 ;;		On entry : 0/0
  9259 ;;		On exit  : 0/0
  9260 ;;		Unchanged: 0/0
  9261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9262 ;;      Params:         0       0       0       0       0
  9263 ;;      Locals:         0       2       0       0       0
  9264 ;;      Temps:          0       2       0       0       0
  9265 ;;      Totals:         0       4       0       0       0
  9266 ;;Total ram usage:        4 bytes
  9267 ;; Hardware stack levels used:    1
  9268 ;; Hardware stack levels required when called:    4
  9269 ;; This function calls:
  9270 ;;		Nothing
  9271 ;; This function is called by:
  9272 ;;		_logo
  9273 ;;		_textConfig
  9274 ;;		_textCMpar
  9275 ;;		_textCMdat
  9276 ;;		_easterEgg
  9277 ;;		_gotoxy
  9278 ;;		_initLCD
  9279 ;;		_main
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           
  9284                           ;psect for function _cmdLCD
  9285  13E3                     _cmdLCD:	
  9286                           
  9287                           ;incstack = 0
  9288                           ; Regs used in _cmdLCD: [wreg+status,2+status,0]
  9289                           ;cmdLCD@cmd stored from wreg
  9290  13E3  1283               	bcf	3,5	;RP0=0, select bank0
  9291  13E4  1303               	bcf	3,6	;RP1=0, select bank0
  9292  13E5  00A6               	movwf	cmdLCD@cmd
  9293                           
  9294                           ;lcd.c: 9: volatile REGnibble_t nibble;
  9295                           ;lcd.c: 11: nibble.HILO = cmd;
  9296  13E6  0826               	movf	cmdLCD@cmd,w
  9297  13E7  00A4               	movwf	??_cmdLCD
  9298  13E8  0824               	movf	??_cmdLCD,w
  9299  13E9  00A7               	movwf	cmdLCD@nibble	;volatile
  9300                           
  9301                           ;lcd.c: 12: LCD.RS = 0;
  9302  13EA  1208               	bcf	8,4	;volatile
  9303                           
  9304                           ;lcd.c: 13: LCD.BUS = nibble.HI;
  9305  13EB  0E27               	swapf	cmdLCD@nibble,w	;volatile
  9306  13EC  390F               	andlw	15
  9307  13ED  00A4               	movwf	??_cmdLCD
  9308  13EE  0808               	movf	8,w	;volatile
  9309  13EF  0624               	xorwf	??_cmdLCD,w
  9310  13F0  39F0               	andlw	-16
  9311  13F1  0624               	xorwf	??_cmdLCD,w
  9312  13F2  0088               	movwf	8	;volatile
  9313                           
  9314                           ;lcd.c: 14: LCD.EN = 0;
  9315  13F3  1288               	bcf	8,5	;volatile
  9316                           
  9317                           ;lcd.c: 16: if ( cmd == 0x01 || cmd == 0x02 )
  9318  13F4  0326               	decf	cmdLCD@cmd,w
  9319  13F5  1903               	btfsc	3,2
  9320  13F6  2BFB               	goto	l2555
  9321  13F7  3002               	movlw	2
  9322  13F8  0626               	xorwf	cmdLCD@cmd,w
  9323  13F9  1D03               	btfss	3,2
  9324  13FA  2C07               	goto	l2557
  9325  13FB                     l2555:	
  9326                           
  9327                           ;lcd.c: 17: _delay((unsigned long)((5)*(20000000/4000.0)));
  9328  13FB  3021               	movlw	33
  9329  13FC  1283               	bcf	3,5	;RP0=0, select bank0
  9330  13FD  1303               	bcf	3,6	;RP1=0, select bank0
  9331  13FE  00A5               	movwf	??_cmdLCD+1
  9332  13FF  3075               	movlw	117
  9333  1400  00A4               	movwf	??_cmdLCD
  9334  1401                     u3447:	
  9335  1401  0BA4               	decfsz	??_cmdLCD,f
  9336  1402  2C01               	goto	u3447
  9337  1403  0BA5               	decfsz	??_cmdLCD+1,f
  9338  1404  2C01               	goto	u3447
  9339  1405  2C06               	nop2
  9340  1406  2C0E               	goto	l2559
  9341  1407                     l2557:	
  9342                           
  9343                           ;lcd.c: 18: else
  9344                           ;lcd.c: 19: _delay((unsigned long)((40)*(20000000/4000000.0)));
  9345  1407  3041               	movlw	65
  9346  1408  1283               	bcf	3,5	;RP0=0, select bank0
  9347  1409  1303               	bcf	3,6	;RP1=0, select bank0
  9348  140A  00A4               	movwf	??_cmdLCD
  9349  140B                     u3457:	
  9350  140B  0BA4               	decfsz	??_cmdLCD,f
  9351  140C  2C0B               	goto	u3457
  9352  140D  2C0E               	nop2
  9353  140E                     l2559:	
  9354                           
  9355                           ;lcd.c: 21: LCD.EN = 1;
  9356  140E  1283               	bcf	3,5	;RP0=0, select bank0
  9357  140F  1303               	bcf	3,6	;RP1=0, select bank0
  9358  1410  1688               	bsf	8,5	;volatile
  9359                           
  9360                           ;lcd.c: 24: if ( cmd != (0x20) )
  9361  1411  3020               	movlw	32
  9362  1412  0626               	xorwf	cmdLCD@cmd,w
  9363  1413  1903               	btfsc	3,2
  9364  1414  0008               	return
  9365                           
  9366                           ;lcd.c: 25: {
  9367                           ;lcd.c: 26: LCD.RS = 0;
  9368  1415  1208               	bcf	8,4	;volatile
  9369                           
  9370                           ;lcd.c: 27: LCD.BUS = nibble.LO;
  9371  1416  0827               	movf	cmdLCD@nibble,w	;volatile
  9372  1417  390F               	andlw	15
  9373  1418  00A4               	movwf	??_cmdLCD
  9374  1419  0808               	movf	8,w	;volatile
  9375  141A  0624               	xorwf	??_cmdLCD,w
  9376  141B  39F0               	andlw	-16
  9377  141C  0624               	xorwf	??_cmdLCD,w
  9378  141D  0088               	movwf	8	;volatile
  9379                           
  9380                           ;lcd.c: 28: LCD.EN = 0;
  9381  141E  1288               	bcf	8,5	;volatile
  9382                           
  9383                           ;lcd.c: 30: if ( cmd == 0x01 || cmd == 0x02 )
  9384  141F  0326               	decf	cmdLCD@cmd,w
  9385  1420  1903               	btfsc	3,2
  9386  1421  2C26               	goto	l2571
  9387  1422  3002               	movlw	2
  9388  1423  0626               	xorwf	cmdLCD@cmd,w
  9389  1424  1D03               	btfss	3,2
  9390  1425  2C32               	goto	l2573
  9391  1426                     l2571:	
  9392                           
  9393                           ;lcd.c: 31: _delay((unsigned long)((5)*(20000000/4000.0)));
  9394  1426  3021               	movlw	33
  9395  1427  1283               	bcf	3,5	;RP0=0, select bank0
  9396  1428  1303               	bcf	3,6	;RP1=0, select bank0
  9397  1429  00A5               	movwf	??_cmdLCD+1
  9398  142A  3075               	movlw	117
  9399  142B  00A4               	movwf	??_cmdLCD
  9400  142C                     u3467:	
  9401  142C  0BA4               	decfsz	??_cmdLCD,f
  9402  142D  2C2C               	goto	u3467
  9403  142E  0BA5               	decfsz	??_cmdLCD+1,f
  9404  142F  2C2C               	goto	u3467
  9405  1430  2C31               	nop2
  9406  1431  2C39               	goto	l2575
  9407  1432                     l2573:	
  9408                           
  9409                           ;lcd.c: 32: else
  9410                           ;lcd.c: 33: _delay((unsigned long)((40)*(20000000/4000000.0)));
  9411  1432  3041               	movlw	65
  9412  1433  1283               	bcf	3,5	;RP0=0, select bank0
  9413  1434  1303               	bcf	3,6	;RP1=0, select bank0
  9414  1435  00A4               	movwf	??_cmdLCD
  9415  1436                     u3477:	
  9416  1436  0BA4               	decfsz	??_cmdLCD,f
  9417  1437  2C36               	goto	u3477
  9418  1438  2C39               	nop2
  9419  1439                     l2575:	
  9420                           
  9421                           ;lcd.c: 35: LCD.EN = 1;
  9422  1439  1283               	bcf	3,5	;RP0=0, select bank0
  9423  143A  1303               	bcf	3,6	;RP1=0, select bank0
  9424  143B  1688               	bsf	8,5	;volatile
  9425  143C  0008               	return
  9426  143D                     __end_of_cmdLCD:	
  9427                           
  9428                           	psect	text41
  9429  1F73                     __ptext41:	
  9430 ;; *************** function ___bmul *****************
  9431 ;; Defined at:
  9432 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  9433 ;; Parameters:    Size  Location     Type
  9434 ;;  multiplier      1    wreg     unsigned char 
  9435 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;  multiplier      1    7[BANK0 ] unsigned char 
  9438 ;;  product         1    6[BANK0 ] unsigned char 
  9439 ;; Return value:  Size  Location     Type
  9440 ;;                  1    wreg      unsigned char 
  9441 ;; Registers used:
  9442 ;;		wreg, status,2, status,0
  9443 ;; Tracked objects:
  9444 ;;		On entry : 0/0
  9445 ;;		On exit  : 0/0
  9446 ;;		Unchanged: 0/0
  9447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9448 ;;      Params:         0       1       0       0       0
  9449 ;;      Locals:         0       2       0       0       0
  9450 ;;      Temps:          0       1       0       0       0
  9451 ;;      Totals:         0       4       0       0       0
  9452 ;;Total ram usage:        4 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; Hardware stack levels required when called:    4
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		_gotoxy
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           
  9463                           ;psect for function ___bmul
  9464  1F73                     ___bmul:	
  9465                           
  9466                           ;incstack = 0
  9467                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9468                           ;___bmul@multiplier stored from wreg
  9469  1F73  1283               	bcf	3,5	;RP0=0, select bank0
  9470  1F74  1303               	bcf	3,6	;RP1=0, select bank0
  9471  1F75  00A7               	movwf	___bmul@multiplier
  9472  1F76  01A6               	clrf	___bmul@product
  9473  1F77                     l2579:	
  9474  1F77  1C27               	btfss	___bmul@multiplier,0
  9475  1F78  2F7D               	goto	l2583
  9476  1F79  0824               	movf	___bmul@multiplicand,w
  9477  1F7A  00A5               	movwf	??___bmul
  9478  1F7B  0825               	movf	??___bmul,w
  9479  1F7C  07A6               	addwf	___bmul@product,f
  9480  1F7D                     l2583:	
  9481  1F7D  1003               	clrc
  9482  1F7E  0DA4               	rlf	___bmul@multiplicand,f
  9483  1F7F  1003               	clrc
  9484  1F80  0CA7               	rrf	___bmul@multiplier,f
  9485  1F81  0827               	movf	___bmul@multiplier,w
  9486  1F82  1D03               	btfss	3,2
  9487  1F83  2F77               	goto	l2579
  9488  1F84  0826               	movf	___bmul@product,w
  9489  1F85  0008               	return
  9490  1F86                     __end_of___bmul:	
  9491                           
  9492                           	psect	text42
  9493  1027                     __ptext42:	
  9494 ;; *************** function _bordaSubidaB3 *****************
  9495 ;; Defined at:
  9496 ;;		line 68 in file "bds.c"
  9497 ;; Parameters:    Size  Location     Type
  9498 ;;		None
  9499 ;; Auto vars:     Size  Location     Type
  9500 ;;  estadoAtualB    1    6[BANK0 ] unsigned char 
  9501 ;;  resp2           1    5[BANK0 ] unsigned char 
  9502 ;; Return value:  Size  Location     Type
  9503 ;;                  1    wreg      unsigned char 
  9504 ;; Registers used:
  9505 ;;		wreg, status,2, status,0, pclath, cstack
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/0
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9511 ;;      Params:         0       0       0       0       0
  9512 ;;      Locals:         0       2       0       0       0
  9513 ;;      Temps:          0       1       0       0       0
  9514 ;;      Totals:         0       3       0       0       0
  9515 ;;Total ram usage:        3 bytes
  9516 ;; Hardware stack levels used:    1
  9517 ;; Hardware stack levels required when called:    5
  9518 ;; This function calls:
  9519 ;;		_B3
  9520 ;; This function is called by:
  9521 ;;		_easterEgg
  9522 ;;		_main
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           
  9527                           ;psect for function _bordaSubidaB3
  9528  1027                     _bordaSubidaB3:	
  9529                           
  9530                           ;bds.c: 70: char estadoAtualB3;
  9531                           ;bds.c: 71: char resp2;
  9532                           ;bds.c: 73: estadoAtualB3 = B3();
  9533                           
  9534                           ;incstack = 0
  9535                           ; Regs used in _bordaSubidaB3: [wreg+status,2+status,0+pclath+cstack]
  9536  1027  160A  158A  272D  160A  118A  	fcall	_B3
  9537  102C  1283               	bcf	3,5	;RP0=0, select bank0
  9538  102D  1303               	bcf	3,6	;RP1=0, select bank0
  9539  102E  00A4               	movwf	??_bordaSubidaB3
  9540  102F  0824               	movf	??_bordaSubidaB3,w
  9541  1030  00A6               	movwf	bordaSubidaB3@estadoAtualB3
  9542                           
  9543                           ;bds.c: 75: if( (estadoAtualB3 == 0) && (estadoAnteriorB3 == 1) )
  9544  1031  0826               	movf	bordaSubidaB3@estadoAtualB3,w
  9545  1032  1D03               	btfss	3,2
  9546  1033  283A               	goto	l2779
  9547  1034  034E               	decf	_estadoAnteriorB3,w
  9548  1035  1D03               	btfss	3,2
  9549  1036  283A               	goto	l2779
  9550                           
  9551                           ;bds.c: 76: resp2 = 1;
  9552  1037  01A5               	clrf	bordaSubidaB3@resp2
  9553  1038  0AA5               	incf	bordaSubidaB3@resp2,f
  9554  1039  283B               	goto	l2781
  9555  103A                     l2779:	
  9556                           
  9557                           ;bds.c: 77: else
  9558                           ;bds.c: 78: resp2 = 0;
  9559  103A  01A5               	clrf	bordaSubidaB3@resp2
  9560  103B                     l2781:	
  9561                           
  9562                           ;bds.c: 79: estadoAnteriorB3 = estadoAtualB3;
  9563  103B  0826               	movf	bordaSubidaB3@estadoAtualB3,w
  9564  103C  00A4               	movwf	??_bordaSubidaB3
  9565  103D  0824               	movf	??_bordaSubidaB3,w
  9566  103E  00CE               	movwf	_estadoAnteriorB3
  9567                           
  9568                           ;bds.c: 80: return ( resp2 );
  9569  103F  0825               	movf	bordaSubidaB3@resp2,w
  9570  1040  0008               	return
  9571  1041                     __end_of_bordaSubidaB3:	
  9572                           
  9573                           	psect	text43
  9574  1F2D                     __ptext43:	
  9575 ;; *************** function _B3 *****************
  9576 ;; Defined at:
  9577 ;;		line 25 in file "bds.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;		None
  9580 ;; Auto vars:     Size  Location     Type
  9581 ;;		None
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  1    wreg      unsigned char 
  9584 ;; Registers used:
  9585 ;;		wreg, status,2, status,0
  9586 ;; Tracked objects:
  9587 ;;		On entry : 0/0
  9588 ;;		On exit  : 0/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9591 ;;      Params:         0       0       0       0       0
  9592 ;;      Locals:         0       0       0       0       0
  9593 ;;      Temps:          0       0       0       0       0
  9594 ;;      Totals:         0       0       0       0       0
  9595 ;;Total ram usage:        0 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; Hardware stack levels required when called:    4
  9598 ;; This function calls:
  9599 ;;		Nothing
  9600 ;; This function is called by:
  9601 ;;		_bordaSubidaB3
  9602 ;;		_main
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           
  9607                           ;psect for function _B3
  9608  1F2D                     _B3:	
  9609                           
  9610                           ;bds.c: 27: return ( PORTCbits.RC0 );
  9611                           
  9612                           ;incstack = 0
  9613                           ; Regs used in _B3: [wreg+status,2+status,0]
  9614  1F2D  1283               	bcf	3,5	;RP0=0, select bank0
  9615  1F2E  1303               	bcf	3,6	;RP1=0, select bank0
  9616  1F2F  0807               	movf	7,w	;volatile
  9617  1F30  3901               	andlw	1
  9618  1F31  0008               	return
  9619  1F32                     __end_of_B3:	
  9620                           
  9621                           	psect	text44
  9622  100D                     __ptext44:	
  9623 ;; *************** function _bordaSubidaB2 *****************
  9624 ;; Defined at:
  9625 ;;		line 51 in file "bds.c"
  9626 ;; Parameters:    Size  Location     Type
  9627 ;;		None
  9628 ;; Auto vars:     Size  Location     Type
  9629 ;;  estadoAtualB    1    7[BANK0 ] unsigned char 
  9630 ;;  resp1           1    6[BANK0 ] unsigned char 
  9631 ;; Return value:  Size  Location     Type
  9632 ;;                  1    wreg      unsigned char 
  9633 ;; Registers used:
  9634 ;;		wreg, status,2, status,0, pclath, cstack
  9635 ;; Tracked objects:
  9636 ;;		On entry : 0/0
  9637 ;;		On exit  : 0/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9640 ;;      Params:         0       0       0       0       0
  9641 ;;      Locals:         0       2       0       0       0
  9642 ;;      Temps:          0       1       0       0       0
  9643 ;;      Totals:         0       3       0       0       0
  9644 ;;Total ram usage:        3 bytes
  9645 ;; Hardware stack levels used:    1
  9646 ;; Hardware stack levels required when called:    5
  9647 ;; This function calls:
  9648 ;;		_B2
  9649 ;; This function is called by:
  9650 ;;		_easterEgg
  9651 ;;		_main
  9652 ;; This function uses a non-reentrant model
  9653 ;;
  9654                           
  9655                           
  9656                           ;psect for function _bordaSubidaB2
  9657  100D                     _bordaSubidaB2:	
  9658                           
  9659                           ;bds.c: 53: char estadoAtualB2;
  9660                           ;bds.c: 54: char resp1;
  9661                           ;bds.c: 56: estadoAtualB2 = B2();
  9662                           
  9663                           ;incstack = 0
  9664                           ; Regs used in _bordaSubidaB2: [wreg+status,2+status,0+pclath+cstack]
  9665  100D  160A  158A  2738  160A  118A  	fcall	_B2
  9666  1012  1283               	bcf	3,5	;RP0=0, select bank0
  9667  1013  1303               	bcf	3,6	;RP1=0, select bank0
  9668  1014  00A5               	movwf	??_bordaSubidaB2
  9669  1015  0825               	movf	??_bordaSubidaB2,w
  9670  1016  00A7               	movwf	bordaSubidaB2@estadoAtualB2
  9671                           
  9672                           ;bds.c: 58: if( (estadoAtualB2 == 0) && (estadoAnteriorB2 == 1) )
  9673  1017  0827               	movf	bordaSubidaB2@estadoAtualB2,w
  9674  1018  1D03               	btfss	3,2
  9675  1019  2820               	goto	l2763
  9676  101A  034F               	decf	_estadoAnteriorB2,w
  9677  101B  1D03               	btfss	3,2
  9678  101C  2820               	goto	l2763
  9679                           
  9680                           ;bds.c: 59: resp1 = 1;
  9681  101D  01A6               	clrf	bordaSubidaB2@resp1
  9682  101E  0AA6               	incf	bordaSubidaB2@resp1,f
  9683  101F  2821               	goto	l2765
  9684  1020                     l2763:	
  9685                           
  9686                           ;bds.c: 60: else
  9687                           ;bds.c: 61: resp1 = 0;
  9688  1020  01A6               	clrf	bordaSubidaB2@resp1
  9689  1021                     l2765:	
  9690                           
  9691                           ;bds.c: 62: estadoAnteriorB2 = estadoAtualB2;
  9692  1021  0827               	movf	bordaSubidaB2@estadoAtualB2,w
  9693  1022  00A5               	movwf	??_bordaSubidaB2
  9694  1023  0825               	movf	??_bordaSubidaB2,w
  9695  1024  00CF               	movwf	_estadoAnteriorB2
  9696                           
  9697                           ;bds.c: 63: return ( resp1 );
  9698  1025  0826               	movf	bordaSubidaB2@resp1,w
  9699  1026  0008               	return
  9700  1027                     __end_of_bordaSubidaB2:	
  9701                           
  9702                           	psect	text45
  9703  1F38                     __ptext45:	
  9704 ;; *************** function _B2 *****************
  9705 ;; Defined at:
  9706 ;;		line 21 in file "bds.c"
  9707 ;; Parameters:    Size  Location     Type
  9708 ;;		None
  9709 ;; Auto vars:     Size  Location     Type
  9710 ;;		None
  9711 ;; Return value:  Size  Location     Type
  9712 ;;                  1    wreg      unsigned char 
  9713 ;; Registers used:
  9714 ;;		wreg, status,2, status,0
  9715 ;; Tracked objects:
  9716 ;;		On entry : 0/0
  9717 ;;		On exit  : 0/0
  9718 ;;		Unchanged: 0/0
  9719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9720 ;;      Params:         0       0       0       0       0
  9721 ;;      Locals:         0       0       0       0       0
  9722 ;;      Temps:          0       1       0       0       0
  9723 ;;      Totals:         0       1       0       0       0
  9724 ;;Total ram usage:        1 bytes
  9725 ;; Hardware stack levels used:    1
  9726 ;; Hardware stack levels required when called:    4
  9727 ;; This function calls:
  9728 ;;		Nothing
  9729 ;; This function is called by:
  9730 ;;		_bordaSubidaB2
  9731 ;;		_main
  9732 ;; This function uses a non-reentrant model
  9733 ;;
  9734                           
  9735                           
  9736                           ;psect for function _B2
  9737  1F38                     _B2:	
  9738                           
  9739                           ;bds.c: 23: return ( PORTCbits.RC2 );
  9740                           
  9741                           ;incstack = 0
  9742                           ; Regs used in _B2: [wreg+status,2+status,0]
  9743  1F38  1283               	bcf	3,5	;RP0=0, select bank0
  9744  1F39  1303               	bcf	3,6	;RP1=0, select bank0
  9745  1F3A  0C07               	rrf	7,w	;volatile
  9746  1F3B  00A4               	movwf	??_B2
  9747  1F3C  0C24               	rrf	??_B2,w
  9748  1F3D  3901               	andlw	1
  9749  1F3E  0008               	return
  9750  1F3F                     __end_of_B2:	
  9751                           
  9752                           	psect	text46
  9753  1161                     __ptext46:	
  9754 ;; *************** function _desconectar *****************
  9755 ;; Defined at:
  9756 ;;		line 133 in file "bluetooth.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;		None
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;		None
  9761 ;; Return value:  Size  Location     Type
  9762 ;;                  1    wreg      void 
  9763 ;; Registers used:
  9764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9765 ;; Tracked objects:
  9766 ;;		On entry : 0/0
  9767 ;;		On exit  : 0/0
  9768 ;;		Unchanged: 0/0
  9769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9770 ;;      Params:         0       0       0       0       0
  9771 ;;      Locals:         0       0       0       0       0
  9772 ;;      Temps:          0       3       0       0       0
  9773 ;;      Totals:         0       3       0       0       0
  9774 ;;Total ram usage:        3 bytes
  9775 ;; Hardware stack levels used:    1
  9776 ;; Hardware stack levels required when called:    6
  9777 ;; This function calls:
  9778 ;;		_initEUSART
  9779 ;;		_writeString
  9780 ;; This function is called by:
  9781 ;;		_main
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           
  9786                           ;psect for function _desconectar
  9787  1161                     _desconectar:	
  9788                           
  9789                           ;bluetooth.c: 135: initEUSART(9600);
  9790                           
  9791                           ;incstack = 0
  9792                           ; Regs used in _desconectar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9793  1161  3000               	movlw	0
  9794  1162  1283               	bcf	3,5	;RP0=0, select bank0
  9795  1163  1303               	bcf	3,6	;RP1=0, select bank0
  9796  1164  00B5               	movwf	initEUSART@baudRate+3
  9797  1165  3000               	movlw	0
  9798  1166  00B4               	movwf	initEUSART@baudRate+2
  9799  1167  3025               	movlw	37
  9800  1168  00B3               	movwf	initEUSART@baudRate+1
  9801  1169  3080               	movlw	128
  9802  116A  00B2               	movwf	initEUSART@baudRate
  9803  116B  160A  118A  243D  160A  118A  	fcall	_initEUSART
  9804                           
  9805                           ;bluetooth.c: 136: writeString("AT+DISC\r\n");
  9806  1170  30B6               	movlw	low (STR_109| (0+32768))
  9807  1171  1283               	bcf	3,5	;RP0=0, select bank0
  9808  1172  1303               	bcf	3,6	;RP1=0, select bank0
  9809  1173  00A5               	movwf	writeString@str
  9810  1174  3089               	movlw	high (STR_109| (0+32768))
  9811  1175  00A6               	movwf	writeString@str+1
  9812  1176  160A  118A  2138  160A  118A  	fcall	_writeString
  9813                           
  9814                           ;bluetooth.c: 137: _delay((unsigned long)((100)*(20000000/4000.0)));
  9815  117B  3003               	movlw	3
  9816  117C  1283               	bcf	3,5	;RP0=0, select bank0
  9817  117D  1303               	bcf	3,6	;RP1=0, select bank0
  9818  117E  00BE               	movwf	??_desconectar+2
  9819  117F  308A               	movlw	138
  9820  1180  00BD               	movwf	??_desconectar+1
  9821  1181  3055               	movlw	85
  9822  1182  00BC               	movwf	??_desconectar
  9823  1183                     u3487:	
  9824  1183  0BBC               	decfsz	??_desconectar,f
  9825  1184  2983               	goto	u3487
  9826  1185  0BBD               	decfsz	??_desconectar+1,f
  9827  1186  2983               	goto	u3487
  9828  1187  0BBE               	decfsz	??_desconectar+2,f
  9829  1188  2983               	goto	u3487
  9830  1189  0008               	return
  9831  118A                     __end_of_desconectar:	
  9832                           
  9833                           	psect	text47
  9834  1138                     __ptext47:	
  9835 ;; *************** function _writeString *****************
  9836 ;; Defined at:
  9837 ;;		line 136 in file "eusart.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;  str             2    5[BANK0 ] PTR const unsigned char 
  9840 ;;		 -> STR_109(10), STR_108(25), STR_107(25), STR_106(28), 
  9841 ;;		 -> STR_105(25), STR_104(25), STR_103(28), STR_102(25), 
  9842 ;;		 -> STR_101(25), STR_100(28), STR_99(17), STR_98(20), 
  9843 ;;		 -> STR_97(10), STR_96(16), STR_95(13), STR_94(12), 
  9844 ;;		 -> STR_93(11), STR_92(19), STR_91(17), STR_90(9), 
  9845 ;;		 -> STR_89(10), STR_88(16), STR_87(13), STR_86(12), 
  9846 ;;		 -> STR_85(19), 
  9847 ;; Auto vars:     Size  Location     Type
  9848 ;;		None
  9849 ;; Return value:  Size  Location     Type
  9850 ;;                  1    wreg      void 
  9851 ;; Registers used:
  9852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9853 ;; Tracked objects:
  9854 ;;		On entry : 0/0
  9855 ;;		On exit  : 0/0
  9856 ;;		Unchanged: 0/0
  9857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9858 ;;      Params:         0       2       0       0       0
  9859 ;;      Locals:         0       0       0       0       0
  9860 ;;      Temps:          0       0       0       0       0
  9861 ;;      Totals:         0       2       0       0       0
  9862 ;;Total ram usage:        2 bytes
  9863 ;; Hardware stack levels used:    1
  9864 ;; Hardware stack levels required when called:    5
  9865 ;; This function calls:
  9866 ;;		_writeEUSART
  9867 ;; This function is called by:
  9868 ;;		_master1
  9869 ;;		_slave1
  9870 ;;		_modulo2
  9871 ;;		_desconectar
  9872 ;;		_modulo1
  9873 ;;		_modulo3
  9874 ;; This function uses a non-reentrant model
  9875 ;;
  9876                           
  9877                           
  9878                           ;psect for function _writeString
  9879  1138                     _writeString:	
  9880  1138                     l2827:	
  9881                           ;eusart.c: 138: while( *str )
  9882                           
  9883                           ;incstack = 0
  9884                           ; Regs used in _writeString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9885                           
  9886  1138  1283               	bcf	3,5	;RP0=0, select bank0
  9887  1139  1303               	bcf	3,6	;RP1=0, select bank0
  9888  113A  0826               	movf	writeString@str+1,w
  9889  113B  00FF               	movwf	127
  9890  113C  0825               	movf	writeString@str,w
  9891  113D  0084               	movwf	4
  9892  113E  160A  158A  2000  160A  118A  	fcall	stringtab
  9893  1143  3A00               	xorlw	0
  9894  1144  1903               	btfsc	3,2
  9895  1145  0008               	return
  9896  1146                     l573:	
  9897                           ;eusart.c: 141: ;
  9898                           
  9899                           ;eusart.c: 139: {
  9900                           ;eusart.c: 140: while( !TXSTAbits.TRMT )
  9901                           
  9902  1146  1683               	bsf	3,5	;RP0=1, select bank1
  9903  1147  1303               	bcf	3,6	;RP1=0, select bank1
  9904  1148  1C98               	btfss	24,1	;volatile
  9905  1149  2946               	goto	l573
  9906                           
  9907                           ;eusart.c: 142: writeEUSART( *str );
  9908  114A  1283               	bcf	3,5	;RP0=0, select bank0
  9909  114B  1303               	bcf	3,6	;RP1=0, select bank0
  9910  114C  0826               	movf	writeString@str+1,w
  9911  114D  00FF               	movwf	127
  9912  114E  0825               	movf	writeString@str,w
  9913  114F  0084               	movwf	4
  9914  1150  160A  158A  2000  160A  118A  	fcall	stringtab
  9915  1155  160A  158A  2732  160A  118A  	fcall	_writeEUSART
  9916                           
  9917                           ;eusart.c: 143: ++str;
  9918  115A  3001               	movlw	1
  9919  115B  1283               	bcf	3,5	;RP0=0, select bank0
  9920  115C  1303               	bcf	3,6	;RP1=0, select bank0
  9921  115D  07A5               	addwf	writeString@str,f
  9922  115E  1803               	skipnc
  9923  115F  0AA6               	incf	writeString@str+1,f
  9924  1160  2938               	goto	l2827
  9925  1161                     __end_of_writeString:	
  9926                           
  9927                           	psect	text48
  9928  1F32                     __ptext48:	
  9929 ;; *************** function _writeEUSART *****************
  9930 ;; Defined at:
  9931 ;;		line 113 in file "eusart.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;  d               1    wreg     unsigned char 
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;  d               1    4[BANK0 ] unsigned char 
  9936 ;; Return value:  Size  Location     Type
  9937 ;;                  1    wreg      void 
  9938 ;; Registers used:
  9939 ;;		wreg
  9940 ;; Tracked objects:
  9941 ;;		On entry : 0/0
  9942 ;;		On exit  : 0/0
  9943 ;;		Unchanged: 0/0
  9944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9945 ;;      Params:         0       0       0       0       0
  9946 ;;      Locals:         0       1       0       0       0
  9947 ;;      Temps:          0       0       0       0       0
  9948 ;;      Totals:         0       1       0       0       0
  9949 ;;Total ram usage:        1 bytes
  9950 ;; Hardware stack levels used:    1
  9951 ;; Hardware stack levels required when called:    4
  9952 ;; This function calls:
  9953 ;;		Nothing
  9954 ;; This function is called by:
  9955 ;;		_transmite
  9956 ;;		_writeString
  9957 ;; This function uses a non-reentrant model
  9958 ;;
  9959                           
  9960                           
  9961                           ;psect for function _writeEUSART
  9962  1F32                     _writeEUSART:	
  9963                           
  9964                           ;incstack = 0
  9965                           ; Regs used in _writeEUSART: [wreg]
  9966                           ;writeEUSART@d stored from wreg
  9967  1F32  1283               	bcf	3,5	;RP0=0, select bank0
  9968  1F33  1303               	bcf	3,6	;RP1=0, select bank0
  9969  1F34  00A4               	movwf	writeEUSART@d
  9970                           
  9971                           ;eusart.c: 115: TXREG = d;
  9972  1F35  0824               	movf	writeEUSART@d,w
  9973  1F36  0099               	movwf	25	;volatile
  9974  1F37  0008               	return
  9975  1F38                     __end_of_writeEUSART:	
  9976                           
  9977                           	psect	text49
  9978  143D                     __ptext49:	
  9979 ;; *************** function _initEUSART *****************
  9980 ;; Defined at:
  9981 ;;		line 155 in file "eusart.c"
  9982 ;; Parameters:    Size  Location     Type
  9983 ;;  baudRate        4   18[BANK0 ] unsigned long 
  9984 ;; Auto vars:     Size  Location     Type
  9985 ;;		None
  9986 ;; Return value:  Size  Location     Type
  9987 ;;                  1    wreg      void 
  9988 ;; Registers used:
  9989 ;;		wreg, status,2, status,0, pclath, cstack
  9990 ;; Tracked objects:
  9991 ;;		On entry : 0/0
  9992 ;;		On exit  : 0/0
  9993 ;;		Unchanged: 0/0
  9994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9995 ;;      Params:         0       4       0       0       0
  9996 ;;      Locals:         0       0       0       0       0
  9997 ;;      Temps:          0       6       0       0       0
  9998 ;;      Totals:         0      10       0       0       0
  9999 ;;Total ram usage:       10 bytes
 10000 ;; Hardware stack levels used:    1
 10001 ;; Hardware stack levels required when called:    5
 10002 ;; This function calls:
 10003 ;;		___lldiv
 10004 ;; This function is called by:
 10005 ;;		_master1
 10006 ;;		_slave1
 10007 ;;		_modulo2
 10008 ;;		_desconectar
 10009 ;;		_main
 10010 ;;		_modulo1
 10011 ;;		_modulo3
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           
 10016                           ;psect for function _initEUSART
 10017  143D                     _initEUSART:	
 10018                           
 10019                           ;eusart.c: 159: SPBRbits.u16 = (unsigned int)( (20000000 / (baudRate<<2)) - 1);
 10020                           
 10021                           ;incstack = 0
 10022                           ; Regs used in _initEUSART: [wreg+status,2+status,0+pclath+cstack]
 10023  143D  1283               	bcf	3,5	;RP0=0, select bank0
 10024  143E  1303               	bcf	3,6	;RP1=0, select bank0
 10025  143F  0832               	movf	initEUSART@baudRate,w
 10026  1440  00B6               	movwf	??_initEUSART
 10027  1441  0833               	movf	initEUSART@baudRate+1,w
 10028  1442  00B7               	movwf	??_initEUSART+1
 10029  1443  0834               	movf	initEUSART@baudRate+2,w
 10030  1444  00B8               	movwf	??_initEUSART+2
 10031  1445  0835               	movf	initEUSART@baudRate+3,w
 10032  1446  00B9               	movwf	??_initEUSART+3
 10033  1447  3002               	movlw	2
 10034  1448                     u1815:	
 10035  1448  1003               	clrc
 10036  1449  0DB6               	rlf	??_initEUSART,f
 10037  144A  0DB7               	rlf	??_initEUSART+1,f
 10038  144B  0DB8               	rlf	??_initEUSART+2,f
 10039  144C  0DB9               	rlf	??_initEUSART+3,f
 10040  144D  3EFF               	addlw	-1
 10041  144E  1D03               	skipz
 10042  144F  2C48               	goto	u1815
 10043  1450  0839               	movf	??_initEUSART+3,w
 10044  1451  00A7               	movwf	___lldiv@divisor+3
 10045  1452  0838               	movf	??_initEUSART+2,w
 10046  1453  00A6               	movwf	___lldiv@divisor+2
 10047  1454  0837               	movf	??_initEUSART+1,w
 10048  1455  00A5               	movwf	___lldiv@divisor+1
 10049  1456  0836               	movf	??_initEUSART,w
 10050  1457  00A4               	movwf	___lldiv@divisor
 10051  1458  3001               	movlw	1
 10052  1459  00AB               	movwf	___lldiv@dividend+3
 10053  145A  3031               	movlw	49
 10054  145B  00AA               	movwf	___lldiv@dividend+2
 10055  145C  302D               	movlw	45
 10056  145D  00A9               	movwf	___lldiv@dividend+1
 10057  145E  3000               	movlw	0
 10058  145F  00A8               	movwf	___lldiv@dividend
 10059  1460  160A  118A  254E  160A  118A  	fcall	___lldiv
 10060  1465  1283               	bcf	3,5	;RP0=0, select bank0
 10061  1466  1303               	bcf	3,6	;RP1=0, select bank0
 10062  1467  0824               	movf	?___lldiv,w
 10063  1468  3EFF               	addlw	255
 10064  1469  00BA               	movwf	??_initEUSART+4
 10065  146A  0825               	movf	?___lldiv+1,w
 10066  146B  1803               	skipnc
 10067  146C  3E01               	addlw	1
 10068  146D  3EFF               	addlw	255
 10069  146E  00BB               	movwf	??_initEUSART+5
 10070  146F  083A               	movf	??_initEUSART+4,w
 10071  1470  1683               	bsf	3,5	;RP0=1, select bank1
 10072  1471  1303               	bcf	3,6	;RP1=0, select bank1
 10073  1472  0099               	movwf	25	;volatile
 10074  1473  1283               	bcf	3,5	;RP0=0, select bank0
 10075  1474  1303               	bcf	3,6	;RP1=0, select bank0
 10076  1475  083B               	movf	??_initEUSART+5,w
 10077  1476  1683               	bsf	3,5	;RP0=1, select bank1
 10078  1477  1303               	bcf	3,6	;RP1=0, select bank1
 10079  1478  009A               	movwf	26	;volatile
 10080                           
 10081                           ;eusart.c: 161: TXSTAbits.SYNC = 0;
 10082  1479  1218               	bcf	24,4	;volatile
 10083                           
 10084                           ;eusart.c: 162: BAUDCTLbits.BRG16 = 1;
 10085  147A  1683               	bsf	3,5	;RP0=1, select bank3
 10086  147B  1703               	bsf	3,6	;RP1=1, select bank3
 10087  147C  1587               	bsf	7,3	;volatile
 10088                           
 10089                           ;eusart.c: 163: TXSTAbits.BRGH = 1;
 10090  147D  1683               	bsf	3,5	;RP0=1, select bank1
 10091  147E  1303               	bcf	3,6	;RP1=0, select bank1
 10092  147F  1518               	bsf	24,2	;volatile
 10093                           
 10094                           ;eusart.c: 165: RCSTAbits.SPEN = 1;
 10095  1480  1283               	bcf	3,5	;RP0=0, select bank0
 10096  1481  1303               	bcf	3,6	;RP1=0, select bank0
 10097  1482  1798               	bsf	24,7	;volatile
 10098                           
 10099                           ;eusart.c: 166: TXSTAbits.TXEN = 1;
 10100  1483  1683               	bsf	3,5	;RP0=1, select bank1
 10101  1484  1303               	bcf	3,6	;RP1=0, select bank1
 10102  1485  1698               	bsf	24,5	;volatile
 10103                           
 10104                           ;eusart.c: 167: RCSTAbits.CREN = 1;
 10105  1486  1283               	bcf	3,5	;RP0=0, select bank0
 10106  1487  1303               	bcf	3,6	;RP1=0, select bank0
 10107  1488  1618               	bsf	24,4	;volatile
 10108                           
 10109                           ;eusart.c: 169: TXSTAbits.TX9 = 0;
 10110  1489  1683               	bsf	3,5	;RP0=1, select bank1
 10111  148A  1303               	bcf	3,6	;RP1=0, select bank1
 10112  148B  1318               	bcf	24,6	;volatile
 10113                           
 10114                           ;eusart.c: 170: TXSTAbits.TX9D = 0;
 10115  148C  1018               	bcf	24,0	;volatile
 10116                           
 10117                           ;eusart.c: 171: RCSTAbits.RX9 = 0;
 10118  148D  1283               	bcf	3,5	;RP0=0, select bank0
 10119  148E  1303               	bcf	3,6	;RP1=0, select bank0
 10120  148F  1318               	bcf	24,6	;volatile
 10121                           
 10122                           ;eusart.c: 172: RCSTAbits.RX9D = 0;
 10123  1490  1018               	bcf	24,0	;volatile
 10124                           
 10125                           ;eusart.c: 174: SSPSTATbits.P = 1;
 10126  1491  1683               	bsf	3,5	;RP0=1, select bank1
 10127  1492  1303               	bcf	3,6	;RP1=0, select bank1
 10128  1493  1614               	bsf	20,4	;volatile
 10129                           
 10130                           ;eusart.c: 176: PIE1bits.RCIE = 1;
 10131  1494  168C               	bsf	12,5	;volatile
 10132                           
 10133                           ;eusart.c: 177: INTCONbits.PEIE = 1;
 10134  1495  170B               	bsf	11,6	;volatile
 10135                           
 10136                           ;eusart.c: 178: INTCONbits.GIE = 1;
 10137  1496  178B               	bsf	11,7	;volatile
 10138  1497  0008               	return
 10139  1498                     __end_of_initEUSART:	
 10140                           
 10141                           	psect	text50
 10142  154E                     __ptext50:	
 10143 ;; *************** function ___lldiv *****************
 10144 ;; Defined at:
 10145 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;  divisor         4    4[BANK0 ] unsigned long 
 10148 ;;  dividend        4    8[BANK0 ] unsigned long 
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;  quotient        4   13[BANK0 ] unsigned long 
 10151 ;;  counter         1   17[BANK0 ] unsigned char 
 10152 ;; Return value:  Size  Location     Type
 10153 ;;                  4    4[BANK0 ] unsigned long 
 10154 ;; Registers used:
 10155 ;;		wreg, status,2, status,0
 10156 ;; Tracked objects:
 10157 ;;		On entry : 0/0
 10158 ;;		On exit  : 0/0
 10159 ;;		Unchanged: 0/0
 10160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10161 ;;      Params:         0       8       0       0       0
 10162 ;;      Locals:         0       5       0       0       0
 10163 ;;      Temps:          0       1       0       0       0
 10164 ;;      Totals:         0      14       0       0       0
 10165 ;;Total ram usage:       14 bytes
 10166 ;; Hardware stack levels used:    1
 10167 ;; Hardware stack levels required when called:    4
 10168 ;; This function calls:
 10169 ;;		Nothing
 10170 ;; This function is called by:
 10171 ;;		_initEUSART
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           
 10176                           ;psect for function ___lldiv
 10177  154E                     ___lldiv:	
 10178                           
 10179                           ;incstack = 0
 10180                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10181  154E  3000               	movlw	0
 10182  154F  1283               	bcf	3,5	;RP0=0, select bank0
 10183  1550  1303               	bcf	3,6	;RP1=0, select bank0
 10184  1551  00B0               	movwf	___lldiv@quotient+3
 10185  1552  3000               	movlw	0
 10186  1553  00AF               	movwf	___lldiv@quotient+2
 10187  1554  3000               	movlw	0
 10188  1555  00AE               	movwf	___lldiv@quotient+1
 10189  1556  3000               	movlw	0
 10190  1557  00AD               	movwf	___lldiv@quotient
 10191  1558  0827               	movf	___lldiv@divisor+3,w
 10192  1559  0426               	iorwf	___lldiv@divisor+2,w
 10193  155A  0425               	iorwf	___lldiv@divisor+1,w
 10194  155B  0424               	iorwf	___lldiv@divisor,w
 10195  155C  1903               	skipnz
 10196  155D  2DA5               	goto	l2643
 10197  155E  01B1               	clrf	___lldiv@counter
 10198  155F  0AB1               	incf	___lldiv@counter,f
 10199  1560                     l2629:	
 10200  1560  1BA7               	btfsc	___lldiv@divisor+3,7
 10201  1561  2D70               	goto	l2631
 10202  1562  3001               	movlw	1
 10203  1563  00AC               	movwf	??___lldiv
 10204  1564                     u1555:	
 10205  1564  1003               	clrc
 10206  1565  0DA4               	rlf	___lldiv@divisor,f
 10207  1566  0DA5               	rlf	___lldiv@divisor+1,f
 10208  1567  0DA6               	rlf	___lldiv@divisor+2,f
 10209  1568  0DA7               	rlf	___lldiv@divisor+3,f
 10210  1569  0BAC               	decfsz	??___lldiv,f
 10211  156A  2D64               	goto	u1555
 10212  156B  3001               	movlw	1
 10213  156C  00AC               	movwf	??___lldiv
 10214  156D  082C               	movf	??___lldiv,w
 10215  156E  07B1               	addwf	___lldiv@counter,f
 10216  156F  2D60               	goto	l2629
 10217  1570                     l2631:	
 10218  1570  3001               	movlw	1
 10219  1571  00AC               	movwf	??___lldiv
 10220  1572                     u1575:	
 10221  1572  1003               	clrc
 10222  1573  0DAD               	rlf	___lldiv@quotient,f
 10223  1574  0DAE               	rlf	___lldiv@quotient+1,f
 10224  1575  0DAF               	rlf	___lldiv@quotient+2,f
 10225  1576  0DB0               	rlf	___lldiv@quotient+3,f
 10226  1577  0BAC               	decfsz	??___lldiv,f
 10227  1578  2D72               	goto	u1575
 10228  1579  0827               	movf	___lldiv@divisor+3,w
 10229  157A  022B               	subwf	___lldiv@dividend+3,w
 10230  157B  1D03               	skipz
 10231  157C  2D87               	goto	u1585
 10232  157D  0826               	movf	___lldiv@divisor+2,w
 10233  157E  022A               	subwf	___lldiv@dividend+2,w
 10234  157F  1D03               	skipz
 10235  1580  2D87               	goto	u1585
 10236  1581  0825               	movf	___lldiv@divisor+1,w
 10237  1582  0229               	subwf	___lldiv@dividend+1,w
 10238  1583  1D03               	skipz
 10239  1584  2D87               	goto	u1585
 10240  1585  0824               	movf	___lldiv@divisor,w
 10241  1586  0228               	subwf	___lldiv@dividend,w
 10242  1587                     u1585:	
 10243  1587  1C03               	skipc
 10244  1588  2D98               	goto	l2639
 10245  1589  0824               	movf	___lldiv@divisor,w
 10246  158A  02A8               	subwf	___lldiv@dividend,f
 10247  158B  0825               	movf	___lldiv@divisor+1,w
 10248  158C  1C03               	skipc
 10249  158D  0F25               	incfsz	___lldiv@divisor+1,w
 10250  158E  02A9               	subwf	___lldiv@dividend+1,f
 10251  158F  0826               	movf	___lldiv@divisor+2,w
 10252  1590  1C03               	skipc
 10253  1591  0F26               	incfsz	___lldiv@divisor+2,w
 10254  1592  02AA               	subwf	___lldiv@dividend+2,f
 10255  1593  0827               	movf	___lldiv@divisor+3,w
 10256  1594  1C03               	skipc
 10257  1595  0F27               	incfsz	___lldiv@divisor+3,w
 10258  1596  02AB               	subwf	___lldiv@dividend+3,f
 10259  1597  142D               	bsf	___lldiv@quotient,0
 10260  1598                     l2639:	
 10261  1598  3001               	movlw	1
 10262  1599                     u1595:	
 10263  1599  1003               	clrc
 10264  159A  0CA7               	rrf	___lldiv@divisor+3,f
 10265  159B  0CA6               	rrf	___lldiv@divisor+2,f
 10266  159C  0CA5               	rrf	___lldiv@divisor+1,f
 10267  159D  0CA4               	rrf	___lldiv@divisor,f
 10268  159E  3EFF               	addlw	-1
 10269  159F  1D03               	skipz
 10270  15A0  2D99               	goto	u1595
 10271  15A1  3001               	movlw	1
 10272  15A2  02B1               	subwf	___lldiv@counter,f
 10273  15A3  1D03               	btfss	3,2
 10274  15A4  2D70               	goto	l2631
 10275  15A5                     l2643:	
 10276  15A5  0830               	movf	___lldiv@quotient+3,w
 10277  15A6  00A7               	movwf	?___lldiv+3
 10278  15A7  082F               	movf	___lldiv@quotient+2,w
 10279  15A8  00A6               	movwf	?___lldiv+2
 10280  15A9  082E               	movf	___lldiv@quotient+1,w
 10281  15AA  00A5               	movwf	?___lldiv+1
 10282  15AB  082D               	movf	___lldiv@quotient,w
 10283  15AC  00A4               	movwf	?___lldiv
 10284  15AD  0008               	return
 10285  15AE                     __end_of___lldiv:	
 10286                           
 10287                           	psect	text51
 10288  1FE6                     __ptext51:	
 10289 ;; *************** function _bordaSubidaB1 *****************
 10290 ;; Defined at:
 10291 ;;		line 34 in file "bds.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;		None
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;  estadoAtualB    1    6[BANK0 ] unsigned char 
 10296 ;;  resp            1    5[BANK0 ] unsigned char 
 10297 ;; Return value:  Size  Location     Type
 10298 ;;                  1    wreg      unsigned char 
 10299 ;; Registers used:
 10300 ;;		wreg, status,2, status,0, pclath, cstack
 10301 ;; Tracked objects:
 10302 ;;		On entry : 0/0
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10306 ;;      Params:         0       0       0       0       0
 10307 ;;      Locals:         0       2       0       0       0
 10308 ;;      Temps:          0       1       0       0       0
 10309 ;;      Totals:         0       3       0       0       0
 10310 ;;Total ram usage:        3 bytes
 10311 ;; Hardware stack levels used:    1
 10312 ;; Hardware stack levels required when called:    5
 10313 ;; This function calls:
 10314 ;;		_B1
 10315 ;; This function is called by:
 10316 ;;		_main
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           
 10321                           ;psect for function _bordaSubidaB1
 10322  1FE6                     _bordaSubidaB1:	
 10323                           
 10324                           ;bds.c: 36: char estadoAtualB1;
 10325                           ;bds.c: 37: char resp;
 10326                           ;bds.c: 39: estadoAtualB1 = B1();
 10327                           
 10328                           ;incstack = 0
 10329                           ; Regs used in _bordaSubidaB1: [wreg+status,2+status,0+pclath+cstack]
 10330  1FE6  160A  158A  2728  160A  158A  	fcall	_B1
 10331  1FEB  1283               	bcf	3,5	;RP0=0, select bank0
 10332  1FEC  1303               	bcf	3,6	;RP1=0, select bank0
 10333  1FED  00A4               	movwf	??_bordaSubidaB1
 10334  1FEE  0824               	movf	??_bordaSubidaB1,w
 10335  1FEF  00A6               	movwf	bordaSubidaB1@estadoAtualB1
 10336                           
 10337                           ;bds.c: 41: if( (estadoAtualB1 == 0) && (estadoAnteriorB1 == 1) )
 10338  1FF0  0826               	movf	bordaSubidaB1@estadoAtualB1,w
 10339  1FF1  1D03               	btfss	3,2
 10340  1FF2  2FF9               	goto	l3191
 10341  1FF3  0350               	decf	_estadoAnteriorB1,w
 10342  1FF4  1D03               	btfss	3,2
 10343  1FF5  2FF9               	goto	l3191
 10344                           
 10345                           ;bds.c: 42: resp = 1;
 10346  1FF6  01A5               	clrf	bordaSubidaB1@resp
 10347  1FF7  0AA5               	incf	bordaSubidaB1@resp,f
 10348  1FF8  2FFA               	goto	l3193
 10349  1FF9                     l3191:	
 10350                           
 10351                           ;bds.c: 43: else
 10352                           ;bds.c: 44: resp = 0;
 10353  1FF9  01A5               	clrf	bordaSubidaB1@resp
 10354  1FFA                     l3193:	
 10355                           
 10356                           ;bds.c: 45: estadoAnteriorB1 = estadoAtualB1;
 10357  1FFA  0826               	movf	bordaSubidaB1@estadoAtualB1,w
 10358  1FFB  00A4               	movwf	??_bordaSubidaB1
 10359  1FFC  0824               	movf	??_bordaSubidaB1,w
 10360  1FFD  00D0               	movwf	_estadoAnteriorB1
 10361                           
 10362                           ;bds.c: 46: return ( resp );
 10363  1FFE  0825               	movf	bordaSubidaB1@resp,w
 10364  1FFF  0008               	return
 10365  2000                     __end_of_bordaSubidaB1:	
 10366                           
 10367                           	psect	text52
 10368  1F28                     __ptext52:	
 10369 ;; *************** function _B1 *****************
 10370 ;; Defined at:
 10371 ;;		line 17 in file "bds.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;		None
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;		None
 10376 ;; Return value:  Size  Location     Type
 10377 ;;                  1    wreg      unsigned char 
 10378 ;; Registers used:
 10379 ;;		wreg, status,2, status,0
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10385 ;;      Params:         0       0       0       0       0
 10386 ;;      Locals:         0       0       0       0       0
 10387 ;;      Temps:          0       0       0       0       0
 10388 ;;      Totals:         0       0       0       0       0
 10389 ;;Total ram usage:        0 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    4
 10392 ;; This function calls:
 10393 ;;		Nothing
 10394 ;; This function is called by:
 10395 ;;		_bordaSubidaB1
 10396 ;;		_main
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           
 10401                           ;psect for function _B1
 10402  1F28                     _B1:	
 10403                           
 10404                           ;bds.c: 19: return ( PORTCbits.RC1 );
 10405                           
 10406                           ;incstack = 0
 10407                           ; Regs used in _B1: [wreg+status,2+status,0]
 10408  1F28  1283               	bcf	3,5	;RP0=0, select bank0
 10409  1F29  1303               	bcf	3,6	;RP1=0, select bank0
 10410  1F2A  0C07               	rrf	7,w	;volatile
 10411  1F2B  3901               	andlw	1
 10412  1F2C  0008               	return
 10413  1F2D                     __end_of_B1:	
 10414                           
 10415                           	psect	text53
 10416  0A16                     __ptext53:	
 10417 ;; *************** function _asciiToHex *****************
 10418 ;; Defined at:
 10419 ;;		line 98 in file "Serial.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;  a1              1    wreg     unsigned char 
 10422 ;;  a2              1    4[BANK0 ] unsigned char 
 10423 ;; Auto vars:     Size  Location     Type
 10424 ;;  a1              1    6[BANK0 ] unsigned char 
 10425 ;;  dez             1    8[BANK0 ] unsigned char 
 10426 ;;  uni             1    7[BANK0 ] unsigned char 
 10427 ;; Return value:  Size  Location     Type
 10428 ;;                  1    wreg      unsigned char 
 10429 ;; Registers used:
 10430 ;;		wreg, status,2, status,0
 10431 ;; Tracked objects:
 10432 ;;		On entry : 0/0
 10433 ;;		On exit  : 0/0
 10434 ;;		Unchanged: 0/0
 10435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10436 ;;      Params:         0       1       0       0       0
 10437 ;;      Locals:         0       3       0       0       0
 10438 ;;      Temps:          0       1       0       0       0
 10439 ;;      Totals:         0       5       0       0       0
 10440 ;;Total ram usage:        5 bytes
 10441 ;; Hardware stack levels used:    1
 10442 ;; Hardware stack levels required when called:    4
 10443 ;; This function calls:
 10444 ;;		Nothing
 10445 ;; This function is called by:
 10446 ;;		_main
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           
 10451                           ;psect for function _asciiToHex
 10452  0A16                     _asciiToHex:	
 10453                           
 10454                           ;incstack = 0
 10455                           ; Regs used in _asciiToHex: [wreg+status,2+status,0]
 10456                           ;asciiToHex@a1 stored from wreg
 10457  0A16  1283               	bcf	3,5	;RP0=0, select bank0
 10458  0A17  1303               	bcf	3,6	;RP1=0, select bank0
 10459  0A18  00A6               	movwf	asciiToHex@a1
 10460                           
 10461                           ;Serial.c: 100: char dez;
 10462                           ;Serial.c: 101: char uni;
 10463                           ;Serial.c: 103: dez = a1;
 10464  0A19  0826               	movf	asciiToHex@a1,w
 10465  0A1A  00A5               	movwf	??_asciiToHex
 10466  0A1B  0825               	movf	??_asciiToHex,w
 10467  0A1C  00A8               	movwf	asciiToHex@dez
 10468                           
 10469                           ;Serial.c: 104: uni = a2;
 10470  0A1D  0824               	movf	asciiToHex@a2,w
 10471  0A1E  00A5               	movwf	??_asciiToHex
 10472  0A1F  0825               	movf	??_asciiToHex,w
 10473  0A20  00A7               	movwf	asciiToHex@uni
 10474                           
 10475                           ;Serial.c: 106: if(dez > 0x40)
 10476  0A21  3041               	movlw	65
 10477  0A22  0228               	subwf	asciiToHex@dez,w
 10478  0A23  1C03               	skipc
 10479  0A24  2A27               	goto	l2943
 10480                           
 10481                           ;Serial.c: 107: dez -= 0x37;
 10482  0A25  3037               	movlw	55
 10483  0A26  2A28               	goto	L55
 10484  0A27                     l2943:	
 10485                           
 10486                           ;Serial.c: 108: else
 10487                           ;Serial.c: 109: dez -= 0x30;
 10488  0A27  3030               	movlw	48
 10489  0A28                     L55:	
 10490  0A28  02A8               	subwf	asciiToHex@dez,f
 10491                           
 10492                           ;Serial.c: 111: if(uni > 0x40)
 10493  0A29  3041               	movlw	65
 10494  0A2A  0227               	subwf	asciiToHex@uni,w
 10495  0A2B  1C03               	skipc
 10496  0A2C  2A2F               	goto	l2949
 10497                           
 10498                           ;Serial.c: 112: uni -= 0x37;
 10499  0A2D  3037               	movlw	55
 10500  0A2E  2A30               	goto	L56
 10501  0A2F                     l2949:	
 10502                           
 10503                           ;Serial.c: 113: else
 10504                           ;Serial.c: 114: uni -= 0x30;
 10505  0A2F  3030               	movlw	48
 10506  0A30                     L56:	
 10507  0A30  02A7               	subwf	asciiToHex@uni,f
 10508                           
 10509                           ;Serial.c: 116: dez<<=4;
 10510  0A31  0EA8               	swapf	asciiToHex@dez,f
 10511  0A32  30F0               	movlw	240
 10512  0A33  05A8               	andwf	asciiToHex@dez,f
 10513                           
 10514                           ;Serial.c: 118: rhex = dez | uni;
 10515  0A34  0828               	movf	asciiToHex@dez,w
 10516  0A35  0427               	iorwf	asciiToHex@uni,w
 10517  0A36  00A5               	movwf	??_asciiToHex
 10518  0A37  0825               	movf	??_asciiToHex,w
 10519  0A38  00D5               	movwf	_rhex
 10520                           
 10521                           ;Serial.c: 120: return (rhex);
 10522  0A39  0855               	movf	_rhex,w
 10523  0A3A  0008               	return
 10524  0A3B                     __end_of_asciiToHex:	
 10525                           
 10526                           	psect	text54
 10527  1113                     __ptext54:	
 10528 ;; *************** function _geral *****************
 10529 ;; Defined at:
 10530 ;;		line 12 in file "main.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;		None
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;		None
 10535 ;; Return value:  Size  Location     Type
 10536 ;;                  1    wreg      void 
 10537 ;; Registers used:
 10538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10539 ;; Tracked objects:
 10540 ;;		On entry : 0/0
 10541 ;;		On exit  : 0/0
 10542 ;;		Unchanged: 0/0
 10543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10544 ;;      Params:         0       0       0       0       0
 10545 ;;      Locals:         0       0       0       0       0
 10546 ;;      Temps:          0       4       0       0       0
 10547 ;;      Totals:         0       4       0       0       0
 10548 ;;Total ram usage:        4 bytes
 10549 ;; Hardware stack levels used:    1
 10550 ;; Hardware stack levels required when called:    3
 10551 ;; This function calls:
 10552 ;;		_interrupt_EUSART_RX
 10553 ;;		_intt0_1ms
 10554 ;; This function is called by:
 10555 ;;		Interrupt level 1
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           
 10560                           ;psect for function _geral
 10561  1113                     _geral:	
 10562                           
 10563                           ;main.c: 14: INTCONbits.GIE = 0;
 10564  1113  138B               	bcf	11,7	;volatile
 10565                           
 10566                           ;main.c: 16: if( PIE1bits.RCIE && PIR1bits.RCIF )
 10567  1114  1683               	bsf	3,5	;RP0=1, select bank1
 10568  1115  1303               	bcf	3,6	;RP1=0, select bank1
 10569  1116  1E8C               	btfss	12,5	;volatile
 10570  1117  2921               	goto	i1l3437
 10571  1118  1283               	bcf	3,5	;RP0=0, select bank0
 10572  1119  1303               	bcf	3,6	;RP1=0, select bank0
 10573  111A  1E8C               	btfss	12,5	;volatile
 10574  111B  2921               	goto	i1l3437
 10575                           
 10576                           ;main.c: 17: {
 10577                           ;main.c: 18: interrupt_EUSART_RX();
 10578  111C  160A  158A  2760  160A  118A  	fcall	_interrupt_EUSART_RX
 10579  1121                     i1l3437:	
 10580                           
 10581                           ;main.c: 19: }
 10582                           ;main.c: 21: if( INTCONbits.T0IE && INTCONbits.T0IF )
 10583  1121  1A8B               	btfsc	11,5	;volatile
 10584  1122  1D0B               	btfss	11,2	;volatile
 10585  1123  292A               	goto	i1l3445
 10586                           
 10587                           ;main.c: 22: {
 10588                           ;main.c: 23: INTCONbits.T0IF = 0;
 10589  1124  110B               	bcf	11,2	;volatile
 10590                           
 10591                           ;main.c: 24: intt0_1ms();
 10592  1125  160A  118A  2041  160A  118A  	fcall	_intt0_1ms
 10593  112A                     i1l3445:	
 10594                           
 10595                           ;main.c: 25: }
 10596                           ;main.c: 27: INTCONbits.GIE = 1;
 10597  112A  178B               	bsf	11,7	;volatile
 10598  112B  1283               	bcf	3,5	;RP0=0, select bank0
 10599  112C  1303               	bcf	3,6	;RP1=0, select bank0
 10600  112D  0823               	movf	??_geral+3,w
 10601  112E  00FF               	movwf	127
 10602  112F  0822               	movf	??_geral+2,w
 10603  1130  008A               	movwf	10
 10604  1131  0821               	movf	??_geral+1,w
 10605  1132  0084               	movwf	4
 10606  1133  0E20               	swapf	??_geral^0,w
 10607  1134  0083               	movwf	3
 10608  1135  0EFE               	swapf	126,f
 10609  1136  0E7E               	swapf	126,w
 10610  1137  0009               	retfie
 10611  1138                     __end_of_geral:	
 10612                           
 10613                           	psect	intentry
 10614  0004                     __pintentry:	
 10615                           ;incstack = 0
 10616                           ; Regs used in _geral: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10617                           
 10618  0004                     interrupt_function:	
 10619  007E                     saved_w	set	btemp
 10620  0004  00FE               	movwf	btemp
 10621  0005  0E03               	swapf	3,w
 10622  0006  1283               	bcf	3,5	;RP0=0, select bank0
 10623  0007  1303               	bcf	3,6	;RP1=0, select bank0
 10624  0008  00A0               	movwf	??_geral
 10625  0009  0804               	movf	4,w
 10626  000A  00A1               	movwf	??_geral+1
 10627  000B  080A               	movf	10,w
 10628  000C  00A2               	movwf	??_geral+2
 10629  000D  087F               	movf	btemp+1,w
 10630  000E  00A3               	movwf	??_geral+3
 10631  000F  160A  118A  2913   	ljmp	_geral
 10632                           
 10633                           	psect	text55
 10634  1041                     __ptext55:	
 10635 ;; *************** function _intt0_1ms *****************
 10636 ;; Defined at:
 10637 ;;		line 9 in file "timer0.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;		None
 10642 ;; Return value:  Size  Location     Type
 10643 ;;                  1    wreg      void 
 10644 ;; Registers used:
 10645 ;;		wreg, status,2
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10651 ;;      Params:         0       0       0       0       0
 10652 ;;      Locals:         0       0       0       0       0
 10653 ;;      Temps:          1       0       0       0       0
 10654 ;;      Totals:         1       0       0       0       0
 10655 ;;Total ram usage:        1 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; This function calls:
 10658 ;;		Nothing
 10659 ;; This function is called by:
 10660 ;;		_geral
 10661 ;; This function uses a non-reentrant model
 10662 ;;
 10663                           
 10664                           
 10665                           ;psect for function _intt0_1ms
 10666  1041                     _intt0_1ms:	
 10667                           
 10668                           ;timer0.c: 11: TMR0 = 100;
 10669                           
 10670                           ;incstack = 0
 10671                           ; Regs used in _intt0_1ms: [wreg+status,2]
 10672  1041  3064               	movlw	100
 10673  1042  1283               	bcf	3,5	;RP0=0, select bank0
 10674  1043  1303               	bcf	3,6	;RP1=0, select bank0
 10675  1044  0081               	movwf	1	;volatile
 10676                           
 10677                           ;timer0.c: 13: if( ++t0cont >= t0final )
 10678  1045  3001               	movlw	1
 10679  1046  07C9               	addwf	_t0cont,f
 10680  1047  1803               	skipnc
 10681  1048  0ACA               	incf	_t0cont+1,f
 10682  1049  3000               	movlw	0
 10683  104A  07CA               	addwf	_t0cont+1,f
 10684  104B  084A               	movf	_t0cont+1,w
 10685  104C  3A80               	xorlw	128
 10686  104D  00F0               	movwf	??_intt0_1ms
 10687  104E  084C               	movf	_t0final+1,w
 10688  104F  3A80               	xorlw	128
 10689  1050  0270               	subwf	??_intt0_1ms,w
 10690  1051  1D03               	skipz
 10691  1052  2855               	goto	u220_25
 10692  1053  084B               	movf	_t0final,w
 10693  1054  0249               	subwf	_t0cont,w
 10694  1055                     u220_25:	
 10695  1055  1C03               	skipc
 10696  1056  0008               	return
 10697                           
 10698                           ;timer0.c: 14: {
 10699                           ;timer0.c: 15: t0cont = 0;
 10700  1057  1283               	bcf	3,5	;RP0=0, select bank0
 10701  1058  1303               	bcf	3,6	;RP1=0, select bank0
 10702  1059  01C9               	clrf	_t0cont
 10703  105A  01CA               	clrf	_t0cont+1
 10704  105B  0008               	return
 10705  105C                     __end_of_intt0_1ms:	
 10706                           
 10707                           	psect	text56
 10708  1F60                     __ptext56:	
 10709 ;; *************** function _interrupt_EUSART_RX *****************
 10710 ;; Defined at:
 10711 ;;		line 183 in file "eusart.c"
 10712 ;; Parameters:    Size  Location     Type
 10713 ;;		None
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;		None
 10716 ;; Return value:  Size  Location     Type
 10717 ;;                  1    wreg      void 
 10718 ;; Registers used:
 10719 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10720 ;; Tracked objects:
 10721 ;;		On entry : 0/0
 10722 ;;		On exit  : 0/0
 10723 ;;		Unchanged: 0/0
 10724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10725 ;;      Params:         0       0       0       0       0
 10726 ;;      Locals:         0       0       0       0       0
 10727 ;;      Temps:          0       0       0       0       0
 10728 ;;      Totals:         0       0       0       0       0
 10729 ;;Total ram usage:        0 bytes
 10730 ;; Hardware stack levels used:    1
 10731 ;; Hardware stack levels required when called:    2
 10732 ;; This function calls:
 10733 ;;		_putFIFO
 10734 ;; This function is called by:
 10735 ;;		_geral
 10736 ;; This function uses a non-reentrant model
 10737 ;;
 10738                           
 10739                           
 10740                           ;psect for function _interrupt_EUSART_RX
 10741  1F60                     _interrupt_EUSART_RX:	
 10742                           
 10743                           ;eusart.c: 185: if( RCSTAbits.FERR )
 10744                           
 10745                           ;incstack = 0
 10746                           ; Regs used in _interrupt_EUSART_RX: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10747  1F60  1283               	bcf	3,5	;RP0=0, select bank0
 10748  1F61  1303               	bcf	3,6	;RP1=0, select bank0
 10749  1F62  1D18               	btfss	24,2	;volatile
 10750  1F63  2F66               	goto	i1l583
 10751                           
 10752                           ;eusart.c: 186: {
 10753                           ;eusart.c: 187: RCSTAbits.SPEN = 0;
 10754  1F64  1398               	bcf	24,7	;volatile
 10755                           
 10756                           ;eusart.c: 188: }
 10757  1F65  2F6E               	goto	i1l3303
 10758  1F66                     i1l583:	
 10759                           
 10760                           ;eusart.c: 189: else if( RCSTAbits.OERR )
 10761  1F66  1C98               	btfss	24,1	;volatile
 10762  1F67  2F6A               	goto	i1l3301
 10763                           
 10764                           ;eusart.c: 190: {
 10765                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 10766  1F68  1218               	bcf	24,4	;volatile
 10767                           
 10768                           ;eusart.c: 192: }
 10769  1F69  2F6E               	goto	i1l3303
 10770  1F6A                     i1l3301:	
 10771                           
 10772                           ;eusart.c: 193: else
 10773                           ;eusart.c: 194: putFIFO( RCREG );
 10774  1F6A  081A               	movf	26,w	;volatile
 10775  1F6B  160A  118A  2093   	fcall	_putFIFO
 10776  1F6E                     i1l3303:	
 10777                           
 10778                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
 10779  1F6E  1283               	bcf	3,5	;RP0=0, select bank0
 10780  1F6F  1303               	bcf	3,6	;RP1=0, select bank0
 10781  1F70  1798               	bsf	24,7	;volatile
 10782                           
 10783                           ;eusart.c: 197: RCSTAbits.CREN = 1;
 10784  1F71  1618               	bsf	24,4	;volatile
 10785  1F72  0008               	return
 10786  1F73                     __end_of_interrupt_EUSART_RX:	
 10787                           
 10788                           	psect	text57
 10789  1093                     __ptext57:	
 10790 ;; *************** function _putFIFO *****************
 10791 ;; Defined at:
 10792 ;;		line 17 in file "fifo.c"
 10793 ;; Parameters:    Size  Location     Type
 10794 ;;  c               1    wreg     unsigned char 
 10795 ;; Auto vars:     Size  Location     Type
 10796 ;;  c               1   11[COMMON] unsigned char 
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  1    wreg      void 
 10799 ;; Registers used:
 10800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10801 ;; Tracked objects:
 10802 ;;		On entry : 0/0
 10803 ;;		On exit  : 0/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10806 ;;      Params:         0       0       0       0       0
 10807 ;;      Locals:         1       0       0       0       0
 10808 ;;      Temps:          4       0       0       0       0
 10809 ;;      Totals:         5       0       0       0       0
 10810 ;;Total ram usage:        5 bytes
 10811 ;; Hardware stack levels used:    1
 10812 ;; Hardware stack levels required when called:    1
 10813 ;; This function calls:
 10814 ;;		i1___awmod
 10815 ;; This function is called by:
 10816 ;;		_interrupt_EUSART_RX
 10817 ;; This function uses a non-reentrant model
 10818 ;;
 10819                           
 10820                           
 10821                           ;psect for function _putFIFO
 10822  1093                     _putFIFO:	
 10823                           
 10824                           ;incstack = 0
 10825                           ; Regs used in _putFIFO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10826                           ;putFIFO@c stored from wreg
 10827  1093  00FB               	movwf	putFIFO@c
 10828                           
 10829                           ;fifo.c: 19: fifo[ fifoHead ] = c;
 10830  1094  087B               	movf	putFIFO@c,w
 10831  1095  00F7               	movwf	??_putFIFO
 10832  1096  087C               	movf	_fifoHead,w
 10833  1097  3EA0               	addlw	(low (_fifo| 0))& (0+255)
 10834  1098  0084               	movwf	4
 10835  1099  0877               	movf	??_putFIFO,w
 10836  109A  1383               	bcf	3,7	;select IRP bank1
 10837  109B  0080               	movwf	0
 10838                           
 10839                           ;fifo.c: 20: fifoHead = ++fifoHead % 30;
 10840  109C  301E               	movlw	30
 10841  109D  00F0               	movwf	i1___awmod@divisor
 10842  109E  3000               	movlw	0
 10843  109F  00F1               	movwf	i1___awmod@divisor+1
 10844  10A0  3001               	movlw	1
 10845  10A1  00F7               	movwf	??_putFIFO
 10846  10A2  0877               	movf	??_putFIFO,w
 10847  10A3  07FC               	addwf	_fifoHead,f
 10848  10A4  087C               	movf	_fifoHead,w
 10849  10A5  00F8               	movwf	??_putFIFO+1
 10850  10A6  01F9               	clrf	??_putFIFO+2
 10851  10A7  0878               	movf	??_putFIFO+1,w
 10852  10A8  00F2               	movwf	i1___awmod@dividend
 10853  10A9  0879               	movf	??_putFIFO+2,w
 10854  10AA  00F3               	movwf	i1___awmod@dividend+1
 10855  10AB  160A  118A  22A1   	fcall	i1___awmod
 10856  10AE  0870               	movf	?i1___awmod,w
 10857  10AF  00FA               	movwf	??_putFIFO+3
 10858  10B0  087A               	movf	??_putFIFO+3,w
 10859  10B1  00FC               	movwf	_fifoHead
 10860  10B2  0008               	return
 10861  10B3                     __end_of_putFIFO:	
 10862                           
 10863                           	psect	text58
 10864  12A1                     __ptext58:	
 10865 ;; *************** function i1___awmod *****************
 10866 ;; Defined at:
 10867 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;  divisor         2    0[COMMON] int 
 10870 ;;  dividend        2    2[COMMON] int 
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;  __awmod         1    6[COMMON] unsigned char 
 10873 ;;  __awmod         1    5[COMMON] unsigned char 
 10874 ;; Return value:  Size  Location     Type
 10875 ;;                  2    0[COMMON] int 
 10876 ;; Registers used:
 10877 ;;		wreg, status,2, status,0
 10878 ;; Tracked objects:
 10879 ;;		On entry : 0/0
 10880 ;;		On exit  : 0/0
 10881 ;;		Unchanged: 0/0
 10882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10883 ;;      Params:         4       0       0       0       0
 10884 ;;      Locals:         2       0       0       0       0
 10885 ;;      Temps:          1       0       0       0       0
 10886 ;;      Totals:         7       0       0       0       0
 10887 ;;Total ram usage:        7 bytes
 10888 ;; Hardware stack levels used:    1
 10889 ;; This function calls:
 10890 ;;		Nothing
 10891 ;; This function is called by:
 10892 ;;		_putFIFO
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           
 10897                           ;psect for function i1___awmod
 10898  12A1                     i1___awmod:	
 10899                           
 10900                           ;incstack = 0
 10901                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 10902  12A1  01F6               	clrf	i1___awmod@sign
 10903  12A2  1FF3               	btfss	i1___awmod@dividend+1,7
 10904  12A3  2AAB               	goto	i1l2655
 10905  12A4  09F2               	comf	i1___awmod@dividend,f
 10906  12A5  09F3               	comf	i1___awmod@dividend+1,f
 10907  12A6  0AF2               	incf	i1___awmod@dividend,f
 10908  12A7  1903               	skipnz
 10909  12A8  0AF3               	incf	i1___awmod@dividend+1,f
 10910  12A9  01F6               	clrf	i1___awmod@sign
 10911  12AA  0AF6               	incf	i1___awmod@sign,f
 10912  12AB                     i1l2655:	
 10913  12AB  1FF1               	btfss	i1___awmod@divisor+1,7
 10914  12AC  2AB2               	goto	i1l2659
 10915  12AD  09F0               	comf	i1___awmod@divisor,f
 10916  12AE  09F1               	comf	i1___awmod@divisor+1,f
 10917  12AF  0AF0               	incf	i1___awmod@divisor,f
 10918  12B0  1903               	skipnz
 10919  12B1  0AF1               	incf	i1___awmod@divisor+1,f
 10920  12B2                     i1l2659:	
 10921  12B2  0870               	movf	i1___awmod@divisor,w
 10922  12B3  0471               	iorwf	i1___awmod@divisor+1,w
 10923  12B4  1903               	btfsc	3,2
 10924  12B5  2ADF               	goto	i1l2677
 10925  12B6  01F5               	clrf	i1___awmod@counter
 10926  12B7  0AF5               	incf	i1___awmod@counter,f
 10927  12B8                     i1l2667:	
 10928  12B8  1BF1               	btfsc	i1___awmod@divisor+1,7
 10929  12B9  2AC6               	goto	i1l2669
 10930  12BA  3001               	movlw	1
 10931  12BB                     u164_25:	
 10932  12BB  1003               	clrc
 10933  12BC  0DF0               	rlf	i1___awmod@divisor,f
 10934  12BD  0DF1               	rlf	i1___awmod@divisor+1,f
 10935  12BE  3EFF               	addlw	-1
 10936  12BF  1D03               	skipz
 10937  12C0  2ABB               	goto	u164_25
 10938  12C1  3001               	movlw	1
 10939  12C2  00F4               	movwf	??i1___awmod
 10940  12C3  0874               	movf	??i1___awmod,w
 10941  12C4  07F5               	addwf	i1___awmod@counter,f
 10942  12C5  2AB8               	goto	i1l2667
 10943  12C6                     i1l2669:	
 10944  12C6  0871               	movf	i1___awmod@divisor+1,w
 10945  12C7  0273               	subwf	i1___awmod@dividend+1,w
 10946  12C8  1D03               	skipz
 10947  12C9  2ACC               	goto	u166_25
 10948  12CA  0870               	movf	i1___awmod@divisor,w
 10949  12CB  0272               	subwf	i1___awmod@dividend,w
 10950  12CC                     u166_25:	
 10951  12CC  1C03               	skipc
 10952  12CD  2AD4               	goto	i1l2673
 10953  12CE  0870               	movf	i1___awmod@divisor,w
 10954  12CF  02F2               	subwf	i1___awmod@dividend,f
 10955  12D0  0871               	movf	i1___awmod@divisor+1,w
 10956  12D1  1C03               	skipc
 10957  12D2  03F3               	decf	i1___awmod@dividend+1,f
 10958  12D3  02F3               	subwf	i1___awmod@dividend+1,f
 10959  12D4                     i1l2673:	
 10960  12D4  3001               	movlw	1
 10961  12D5                     u167_25:	
 10962  12D5  1003               	clrc
 10963  12D6  0CF1               	rrf	i1___awmod@divisor+1,f
 10964  12D7  0CF0               	rrf	i1___awmod@divisor,f
 10965  12D8  3EFF               	addlw	-1
 10966  12D9  1D03               	skipz
 10967  12DA  2AD5               	goto	u167_25
 10968  12DB  3001               	movlw	1
 10969  12DC  02F5               	subwf	i1___awmod@counter,f
 10970  12DD  1D03               	btfss	3,2
 10971  12DE  2AC6               	goto	i1l2669
 10972  12DF                     i1l2677:	
 10973  12DF  0876               	movf	i1___awmod@sign,w
 10974  12E0  1903               	btfsc	3,2
 10975  12E1  2AE7               	goto	i1l2681
 10976  12E2  09F2               	comf	i1___awmod@dividend,f
 10977  12E3  09F3               	comf	i1___awmod@dividend+1,f
 10978  12E4  0AF2               	incf	i1___awmod@dividend,f
 10979  12E5  1903               	skipnz
 10980  12E6  0AF3               	incf	i1___awmod@dividend+1,f
 10981  12E7                     i1l2681:	
 10982  12E7  0873               	movf	i1___awmod@dividend+1,w
 10983  12E8  00F1               	movwf	?i1___awmod+1
 10984  12E9  0872               	movf	i1___awmod@dividend,w
 10985  12EA  00F0               	movwf	?i1___awmod
 10986  12EB  0008               	return
 10987  12EC                     __end_ofi1___awmod:	
 10988  007E                     btemp	set	126	;btemp
 10989  007E                     wtemp0	set	126


Data Sizes:
    Strings     1043
    Constant    0
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     41      54
    BANK1            80      0      30
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    writeString@str	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_109(CODE[10]), STR_108(CODE[25]), STR_107(CODE[25]), STR_106(CODE[28]), 
		 -> STR_105(CODE[25]), STR_104(CODE[25]), STR_103(CODE[28]), STR_102(CODE[25]), 
		 -> STR_101(CODE[25]), STR_100(CODE[28]), STR_99(CODE[17]), STR_98(CODE[20]), 
		 -> STR_97(CODE[10]), STR_96(CODE[16]), STR_95(CODE[13]), STR_94(CODE[12]), 
		 -> STR_93(CODE[11]), STR_92(CODE[19]), STR_91(CODE[17]), STR_90(CODE[9]), 
		 -> STR_89(CODE[10]), STR_88(CODE[16]), STR_87(CODE[13]), STR_86(CODE[12]), 
		 -> STR_85(CODE[19]), 

    writeLCD@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_135(CODE[11]), STR_134(CODE[11]), STR_133(CODE[11]), STR_132(CODE[11]), 
		 -> STR_131(CODE[11]), STR_130(CODE[11]), STR_129(CODE[11]), STR_128(CODE[11]), 
		 -> STR_127(CODE[17]), STR_126(CODE[17]), STR_125(CODE[17]), STR_124(CODE[17]), 
		 -> STR_123(CODE[17]), STR_122(CODE[17]), STR_121(CODE[14]), STR_120(CODE[14]), 
		 -> STR_119(CODE[17]), STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[17]), 
		 -> STR_115(CODE[9]), STR_114(CODE[11]), STR_113(CODE[13]), STR_112(CODE[11]), 
		 -> STR_111(CODE[17]), STR_110(CODE[17]), STR_84(CODE[17]), STR_83(CODE[17]), 
		 -> STR_82(CODE[17]), STR_81(CODE[17]), STR_80(CODE[17]), STR_79(CODE[17]), 
		 -> STR_78(CODE[17]), STR_77(CODE[17]), STR_76(CODE[17]), STR_75(CODE[17]), 
		 -> STR_74(CODE[17]), STR_73(CODE[17]), STR_72(CODE[17]), STR_71(CODE[17]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[17]), STR_67(CODE[17]), 
		 -> STR_66(CODE[17]), STR_65(CODE[4]), STR_64(CODE[4]), STR_63(CODE[4]), 
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[8]), STR_53(CODE[1]), STR_52(CODE[4]), STR_51(CODE[7]), 
		 -> STR_50(CODE[4]), STR_49(CODE[4]), STR_48(CODE[8]), STR_47(CODE[8]), 
		 -> STR_46(CODE[8]), STR_45(CODE[4]), STR_44(CODE[2]), STR_43(CODE[2]), 
		 -> STR_42(CODE[2]), STR_41(CODE[2]), STR_40(CODE[2]), STR_39(CODE[2]), 
		 -> STR_38(CODE[2]), STR_37(CODE[2]), STR_36(CODE[2]), STR_35(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), STR_28(CODE[2]), STR_27(CODE[2]), 
		 -> STR_26(CODE[2]), STR_25(CODE[2]), STR_24(CODE[2]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), STR_20(CODE[2]), STR_19(CODE[2]), 
		 -> STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[2]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _geral in COMMON

    _interrupt_EUSART_RX->_putFIFO
    _putFIFO->i1___awmod

Critical Paths under _main in BANK0

    _main->_desconectar
    _main->_master1
    _main->_modulo2
    _main->_slave1
    _transmite->_hexToAscii
    _textSelectionEST->_writeLCD
    _textSelectionCLP->_writeLCD
    _textSelection8->_writeLCD
    _textSelection7->_writeLCD
    _textSelection6->_writeLCD
    _textSelection5->_writeLCD
    _textSelection4->_writeLCD
    _textSelection3->_writeLCD
    _textSelection2->_writeLCD
    _textSelection1->_writeLCD
    ___awdiv->_statusT0limite
    _textLoading->_writeLCD
    _textConfig->_writeLCD
    _textCMpar->_writeLCD
    _textCMdat->_writeLCD
    _statusFIFO->___awmod
    _slave1->_initEUSART
    _modulo2->_initEUSART
    _master1->_initEUSART
    _logo->_writeLCD
    _initTimer0->_setT0limite
    _initSerial->_serialOut
    _initLCD->_cmdLCD
    _getFIFO->___awmod
    _easterEgg->_writeLCD
    _writeLCD->_gotoxy
    _gotoxy->___bmul
    _gotoxy->_cmdLCD
    _bordaSubidaB2->_B2
    _desconectar->_initEUSART
    _writeString->_writeEUSART
    _initEUSART->___lldiv

Critical Paths under _geral in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _geral in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _geral in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _geral in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  282072
                                             31 BANK0     10    10      0
                                 _B1
                                 _B2
                                 _B3
                         _asciiToHex
                      _bordaSubidaB1
                      _bordaSubidaB2
                      _bordaSubidaB3
                             _cmdLCD
                        _desconectar
                          _easterEgg
                      _errorRxEUSART
                            _getFIFO
                             _initBT
                         _initEUSART
                            _initLCD
                         _initSerial
                         _initTimer0
                               _logo
                            _master1
                            _modulo2
                 _resetErrorRxEUSART
                          _serialOut
                             _slave1
                         _statusFIFO
                          _textCMdat
                          _textCMpar
                         _textConfig
                        _textLoading
                     _textSelection1
                     _textSelection2
                     _textSelection3
                     _textSelection4
                     _textSelection5
                     _textSelection6
                     _textSelection7
                     _textSelection8
                   _textSelectionCLP
                   _textSelectionEST
                          _transmite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _transmite                                            2     2      0     231
                                              8 BANK0      2     2      0
                         _hexToAscii
                           _serialIn
                        _writeEUSART
 ---------------------------------------------------------------------------------
 (2) _serialIn                                             3     3      0      70
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _hexToAscii                                           4     4      0     139
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _textSelectionEST                                     3     3      0   16513
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelectionCLP                                     3     3      0   16513
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection8                                       3     3      0   16513
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection7                                       3     3      0   16513
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection6                                       3     3      0   16513
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection5                                       3     3      0   16513
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection4                                       3     3      0   16513
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection3                                       3     3      0   16513
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection2                                       3     3      0   16513
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection1                                       3     3      0   16513
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (2) _statusT0limite                                       2     0      2       0
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _statusT0                                             2     0      2       0
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1836
                                              6 BANK0      9     5      4
                     _statusT0limite (ARG)
 ---------------------------------------------------------------------------------
 (1) _textLoading                                          3     3      0   14677
                                             17 BANK0      3     3      0
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textConfig                                           0     0      0   14854
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textCMpar                                            0     0      0   14854
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textCMdat                                            0     0      0   14854
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _statusFIFO                                           2     2      0     628
                                             11 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _slave1                                               3     3      0    2427
                                             28 BANK0      3     3      0
                         _initEUSART
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _resetErrorRxEUSART                                   4     4      0       0
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _modulo2                                              3     3      0    2427
                                             28 BANK0      3     3      0
                         _initEUSART
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _master1                                              3     3      0    2427
                                             28 BANK0      3     3      0
                         _initEUSART
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _logo                                                 3     3      0   14854
                                             17 BANK0      3     3      0
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _initTimer0                                           0     0      0      86
                        _setT0limite
 ---------------------------------------------------------------------------------
 (2) _setT0limite                                          2     0      2      86
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           1     1      0      68
                                              7 BANK0      1     1      0
                          _serialOut
 ---------------------------------------------------------------------------------
 (1) _serialOut                                            3     3      0      68
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              3     3      0     177
                                              8 BANK0      3     3      0
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (1) _initBT                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getFIFO                                              5     5      0     652
                                             11 BANK0      5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     628
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _errorRxEUSART                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _easterEgg                                            3     3      0   14992
                                             17 BANK0      3     3      0
                      _bordaSubidaB2
                      _bordaSubidaB3
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             5     2      3   14677
                                             12 BANK0      5     2      3
                             _gotoxy
                             _putLCD
 ---------------------------------------------------------------------------------
 (2) _putLCD                                               3     3      0      67
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _gotoxy                                               4     3      1     441
                                              8 BANK0      4     3      1
                             ___bmul
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (3) _cmdLCD                                               4     4      0     177
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     156
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _bordaSubidaB3                                        3     3      0      69
                                              4 BANK0      3     3      0
                                 _B3
 ---------------------------------------------------------------------------------
 (3) _B3                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _bordaSubidaB2                                        3     3      0      69
                                              5 BANK0      3     3      0
                                 _B2
 ---------------------------------------------------------------------------------
 (3) _B2                                                   1     1      0       0
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _desconectar                                          3     3      0    2427
                                             28 BANK0      3     3      0
                         _initEUSART
                        _writeString
 ---------------------------------------------------------------------------------
 (2) _writeString                                          2     0      2    1667
                                              5 BANK0      2     0      2
                        _writeEUSART
 ---------------------------------------------------------------------------------
 (2) _writeEUSART                                          1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _initEUSART                                          10     6      4     760
                                             18 BANK0     10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              4 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _bordaSubidaB1                                        3     3      0      69
                                              4 BANK0      3     3      0
                                 _B1
 ---------------------------------------------------------------------------------
 (2) _B1                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _asciiToHex                                           5     4      1     203
                                              4 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _geral                                                4     4      0     370
                                              0 BANK0      4     4      0
                _interrupt_EUSART_RX
                          _intt0_1ms
 ---------------------------------------------------------------------------------
 (6) _intt0_1ms                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _interrupt_EUSART_RX                                  0     0      0     370
                            _putFIFO
 ---------------------------------------------------------------------------------
 (7) _putFIFO                                              5     5      0     370
                                              7 COMMON     5     5      0
                          i1___awmod
 ---------------------------------------------------------------------------------
 (8) i1___awmod                                            7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _B1
   _B2
   _B3
   _asciiToHex
   _bordaSubidaB1
     _B1
   _bordaSubidaB2
     _B2
   _bordaSubidaB3
     _B3
   _cmdLCD
   _desconectar
     _initEUSART
       ___lldiv
     _writeString
       _writeEUSART
   _easterEgg
     _bordaSubidaB2
       _B2
     _bordaSubidaB3
       _B3
     _cmdLCD
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _errorRxEUSART
   _getFIFO
     ___awmod
   _initBT
   _initEUSART
     ___lldiv
   _initLCD
     _cmdLCD
   _initSerial
     _serialOut
   _initTimer0
     _setT0limite
   _logo
     _cmdLCD
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _master1
     _initEUSART
       ___lldiv
     _writeString
       _writeEUSART
   _modulo2
     _initEUSART
       ___lldiv
     _writeString
       _writeEUSART
   _resetErrorRxEUSART
   _serialOut
   _slave1
     _initEUSART
       ___lldiv
     _writeString
       _writeEUSART
   _statusFIFO
     ___awmod
   _textCMdat
     _cmdLCD
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textCMpar
     _cmdLCD
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textConfig
     _cmdLCD
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textLoading
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection1
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection2
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection3
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection4
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection5
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection6
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection7
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection8
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelectionCLP
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelectionEST
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _transmite
     _hexToAscii
     _serialIn
     _writeEUSART
   _writeLCD
     _gotoxy
       ___bmul
       _cmdLCD
     _putLCD

 _geral (ROOT)
   _interrupt_EUSART_RX
     _putFIFO
       i1___awmod
   _intt0_1ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      61       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     29      36       5       67.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      1E       7       37.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      61      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Nov 06 20:21:47 2019

             ?_textSelection1 0070               ?_textSelection2 0070               ?_textSelection3 0070  
             ?_textSelection4 0070               ?_textSelection5 0070               ?_textSelection6 0070  
             ?_textSelection7 0070               ?_textSelection8 0070                             pc 0002  
              ___bmul@product 0026                   __CFG_CP$OFF 0000                   _SSPSTATbits 0094  
                          _B1 1F28                            _B2 1F38                            _B3 1F2D  
                          l30 1FC6                            l32 1FCB                  ___awdiv@sign 002C  
                          fsr 0004                           ?_B1 0070                           ?_B2 0070  
                         ?_B3 0070             ?_textSelectionCLP 0070             ?_textSelectionEST 0070  
                         l553 1007                           l573 1146                           _LCD 0008  
                __CFG_CPD$OFF 0000       __size_of_statusT0limite 0007                           fsr0 0004  
                         indf 0000                  ___awmod@sign 002A            ??_textSelectionCLP 0031  
          ??_textSelectionEST 0031                  __CFG_IESO$ON 0000                  __CFG_FOSC$HS 0000  
                        ??_B1 0024                          ??_B2 0024                          ??_B3 0024  
             ??_bordaSubidaB1 0024               ??_bordaSubidaB2 0025               ??_bordaSubidaB3 0024  
                __CFG_LVP$OFF 0000                          l3007 1604                          l3015 1667  
                        l3023 16CA                          l3031 172D                          l4001 05B9  
                        l3039 1790                          l3047 17F3                          l3055 0A91  
                        l3063 0AF4                          l3071 13D6                          l3191 1FF9  
                        l2631 1570                          l3079 1381                          l3511 00D6  
                        l3503 00BA                          l3193 1FFA                          l3345 11C9  
                        l2713 1FD6                          l2643 15A5                          l2571 1426  
                        l2555 13FB                          l2715 1FE4                          l3611 0243  
                        l3515 00E4                          l3507 00C8                          l2629 1560  
                        l2573 1432                          l2557 1407                          l2901 1313  
                        l3365 11B1                          l2733 11FE                          l2709 1FE0  
                        l3701 039B                          l3541 0138                          l3533 012E  
                        l2639 1598                          l2583 1F7D                          l2575 1439  
                        l2559 140E                          l3383 100B                          l2727 11F4  
                        l3615 0257                          l3607 022F                          l3623 0287  
                        l3551 0156                          l3527 011D                          l3519 00FA  
                        l3471 0060                          l3463 0053                          l2745 1248  
                        l2913 1334                          l2905 1321                          l3633 02BB  
                        l3625 0296                          l2827 1138                          l2763 1020  
                        l2579 1F77                          l2843 14FF                          l3715 03B5  
                        l3571 019A                          l3547 0148                          l3491 0094  
                        l3483 007C                          l3475 0067                          l3467 0059  
                        l2765 1021                          l2781 103B                          l2909 132C  
                        l2693 1FC7                          l2861 1520                          l3805 048A  
                        l3733 03DE                          l3709 03A5                          l3661 0318  
                        l3645 02EC                          l3629 02B5                          l3557 016A  
                        l2943 0A27                          l2871 1541                          l3831 04CE  
                        l3823 04B5                          l3751 0409                          l3727 03CD  
                        l3719 03C3                          l3671 0328                          l3663 031E  
                        l3655 02FC                          l3647 02F2                          l3639 02D0  
                        l3591 01EA                          l3583 01C7                          l3559 0173  
                        l3495 00A2                          l3487 008A                          l3479 006E  
                        l2697 1FBC                          l2849 150A                          l3817 04A2  
                        l3809 0498                          l3745 03F6                          l3737 03EC  
                        l3913 0557                          l2779 103A                          l2891 12FF  
                        l2875 1549                          l2867 1536                          l2859 1512  
                        l3907 054E                          l3827 04C0                          l3763 0421  
                        l3755 0417                          l3691 037C                          l3595 0200  
                        l3499 00B0                          l2949 0A2F                          l3781 044C  
                        l3773 0442                          l3837 04E2                          l2887 12F8  
                        l3839 04FD                          l3791 046D                          l3679 034F  
                        l3849 0516                          l3769 0434                          l3697 038F  
                        l2899 1305                          l3891 052F                          l3883 052F  
                        l3875 052F                          l3867 052F                          l3859 052F  
                        l3787 045F                          l3799 0477                          l3899 052F  
                        l3997 0564                          l3999 058D                          STR_1 0931  
                        STR_2 0A0B                          STR_3 0A0F                          STR_4 0A11  
                        STR_5 0A0D                          STR_6 0854                          STR_7 08A9  
                        STR_8 0865                          STR_9 0898                          u2005 1322  
                        u2105 1781                          u2115 17E4                          u2125 0A82  
                        u3007 0DA7                          u2135 0AE5                          u3017 0DC3  
                        u2065 15F5                          u2145 13C7                          u3107 11C0  
                        u3027 0DDF                          u2075 1658                          u2155 1372  
                        u3117 11D4                          u3037 0DFB                          u2085 16BB  
                        u3207 0BBD                          u3127 14BA                          u3047 0C79  
                        u2095 171E                          u3217 0BD8                          u3137 14D3  
                        u3057 0C92                          u1555 1564                          u3307 0E8F  
                        u3227 0BF3                          u3147 14EC                          u3067 0CAB  
                        u3317 0EB8                          u3237 0C0E                          u3157 0B2E  
                        u3077 0CC4                          u1575 1572                          u1815 1448  
                        u3407 0FDC                          u3327 0EE3                          u3247 0C29  
                        u3167 0B47                          u3087 0CDD                          u1585 1587  
                        u3417 0FF1                          u3337 0EFF                          u3257 0C45  
                        u3177 0B60                          u3097 0CF6                          u1905 152D  
                        u1595 1599                          u3427 1220                          u3347 0F13  
                        u3267 127E                          u3187 0B79                          u1915 1537  
                        u3437 1234                          u3357 0F2E                          u3277 0E1E  
                        u3197 0B92                          u3447 1401                          u3367 0F4B  
                        u3287 0E3B                          u3457 140B                          u3377 0F5F  
                        u3297 0E64                          u3467 142C                          u3387 0F88  
                        u1875 1515                          u3477 1436                          u3397 0FB2  
                        u3487 1183                          u1975 1308                          u1895 1521  
                        u2937 0374                          u1995 1319                          u2947 05CF  
                        u2957 0D1B                          u2967 0D37                          u2977 0D53  
                        u2987 0D6F                          u2997 0D8B                          _TMR0 0001  
                __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000                          _fifo 00A0  
                        _comp 0052                          _main 0029                          _logo 0BA2  
                        _rhex 0055                          _tdez 0053                          btemp 007E  
                        _tuni 0054                 __CFG_BOREN$ON 0000                          start 0012  
           ___bmul@multiplier 0027                 __CFG_MCLRE$ON 0000                writeString@str 0025  
                 _writeEUSART 1F32                 hexToAscii@dez 0027                 hexToAscii@uni 0026  
                       ?_main 0070                         ?_logo 0070               __end_of___awdiv 154E  
                       STR_10 0865                         STR_11 08CB                         STR_12 0865  
                       STR_20 0A01                         STR_21 0A01                         STR_13 07A8  
                       STR_30 0A07                         STR_22 0A03                         STR_14 0A01  
                       STR_31 07FD                         STR_23 07FD                         STR_15 07FD  
                       STR_24 090D                         STR_32 0A05                         STR_40 0A09  
                       STR_16 09FF                         STR_17 09FF                         STR_25 090D  
                       STR_33 0A05                         STR_41 0A09                 __CFG_WDTE$OFF 0000  
                       STR_42 09FF                         STR_18 090D                         STR_50 07D9  
                       STR_34 0A09                         STR_26 0A05                         STR_43 07FD  
                       STR_35 07FD                         STR_27 07FD                         STR_19 07FD  
                       STR_51 09E4                         STR_60 09EB                         STR_28 0A03  
                       STR_36 0A07                         STR_44 07A8               __end_of___awmod 1339  
                       STR_61 09EF                         STR_29 0A03                         STR_37 0A07  
                       STR_45 07D9                         STR_46 07F7                         STR_70 07EE  
                       STR_62 09F7                         STR_38 07A8                         STR_39 07FD  
                       STR_63 09EB                         STR_47 09DC                         STR_71 0843  
                       STR_72 07EE                         STR_48 09DC                         STR_64 09F3  
                       STR_80 08DC                         STR_49 07FB                         STR_65 09FB  
                       STR_57 09EB                         STR_81 08FE                         STR_73 0821  
                       STR_74 07EE                         STR_58 09EF                         STR_90 09D3  
                       STR_82 08ED                         STR_66 0876                         STR_59 09F7  
                       STR_83 090F                         STR_67 08BA                         STR_75 0887  
                       STR_91 07DD                         STR_92 06FE                         STR_76 07EE  
                       STR_84 08DC                         STR_68 07EE                         STR_93 09AB  
                       STR_69 0832                         STR_77 07FF                         STR_85 06FE  
                       STR_86 0994                         STR_94 0988                         STR_78 0810  
                       STR_95 097B                         STR_87 097B                         STR_79 0920  
                       STR_96 0942                         STR_88 0942                         STR_97 09C0  
                       STR_89 09C0                         STR_98 06EA                         STR_99 07DD  
                       _ANSEL 0188               __end_of___lldiv 15AE               ___awdiv@divisor 0026  
                       i1l583 1F66               ___awdiv@counter 002B                         _RCREG 001A  
                       _PORTB 0006               __end_of_getFIFO 11B3                         _TRISB 0086  
                       _TRISD 0088                         _TXREG 0019                   _writeString 1138  
               __CFG_PWRTE$ON 0000                i1___awmod@sign 0076               __end_of_initLCD 12A1  
                       _geral 1113               __end_of_master1 0BA2                         main@a 0046  
 __size_of_resetErrorRxEUSART 002B                         main@i 0045                         main@t 0044  
             __end_of_modulo2 14F3               __end_of_putFIFO 10B3                         pclath 000A  
                ?_setT0limite 0024                         status 0003                         wtemp0 007E  
          __size_ofi1___awmod 004B               __initialization 0015                  __end_of_main 05BF  
                __end_of_logo 0C4C    bordaSubidaB3@estadoAtualB3 0026                hexToAscii@dado 0025  
                      ??_main 003F                        ??_logo 0031          __size_of_desconectar 0029  
                      ?_geral 0070                        STR_100 0600                        STR_101 066D  
                      STR_110 07BB                        STR_102 0654                        STR_111 07CC  
                      STR_103 0638                        STR_112 09A0                        STR_120 0960  
                      STR_104 06D1                        STR_113 096E                        STR_121 0952  
                      STR_105 06B8                        STR_130 09A0                        STR_114 09A0  
                      STR_122 07AA                        STR_106 061C                        STR_131 09A0  
                      STR_115 09CA                        STR_123 0766                        STR_107 069F  
                      STR_132 09A0                        STR_116 0788                        STR_124 0777  
                      STR_108 0686                        STR_133 09A0                        STR_109 09B6  
                      STR_125 0755                        STR_117 0722                        STR_134 09A0  
                      STR_126 0799                        STR_118 0711                        STR_135 09A0  
                      STR_127 0744                        STR_119 0733                        STR_128 09A0  
                      STR_129 09A0              ___awdiv@dividend 0028                        _ANSELH 0189  
                      i1l3301 1F6A                        i1l3303 1F6E                        i1l3445 112A  
                      i1l3437 1121                        i1l2655 12AB                        i1l2681 12E7  
                      i1l2673 12D4                        i1l2667 12B8                        i1l2659 12B2  
                      i1l2669 12C6                        i1l2677 12DF                        u220_25 1055  
                      u164_25 12BB                        u166_25 12CC                        u167_25 12D5  
      __size_of_errorRxEUSART 000C                        _t0cont 0049                        ___bmul 1F73  
                      _cmdLCD 13E3                     ??___awdiv 002A                     ??___awmod 0028  
                   ??___lldiv 002C                        _initBT 1F55                     ??_getFIFO 002B  
                      _gotoxy 1F9C              ___awdiv@quotient 002D               ___awmod@divisor 0024  
                      _putLCD 120B                        _slave1 0C4C                        _serial 0051  
             ___awmod@counter 0029                        main@a1 0042                        main@a2 0043  
                   ??_initLCD 0028             __end_ofi1___awmod 12EC                _statusT0limite 05F9  
                   ??_master1 003C              __end_of_serialIn 1FE6                     ??_modulo2 003C  
                      saved_w 007E                     ??_putFIFO 0077              __end_of_statusT0 1F4D  
            __end_of_writeLCD 126D                  ?_textLoading 0070       __end_of__initialization 0025  
            ??_textSelection1 0031              ??_textSelection2 0031              ??_textSelection3 0031  
            ??_textSelection4 0031              ??_textSelection5 0031              ??_textSelection6 0031  
            ??_textSelection7 0031              ??_textSelection8 0031           ___bmul@multiplicand 0024  
              __pcstackCOMMON 0070                 __end_of_geral 1138                    __end_of_B1 1F2D  
                  __end_of_B2 1F3F                    __end_of_B3 1F32        __end_of_statusT0limite 0600  
          __size_of_easterEgg 01FD  __size_of_interrupt_EUSART_RX 0013                _OPTION_REGbits 0081  
               _errorRxEUSART 1001                       ??_geral 0020                    __pbssBANK0 0049  
                  __pbssBANK1 00A0     __size_of_textSelectionCLP 0055     __size_of_textSelectionEST 0055  
          __size_of_intt0_1ms 001B          __size_of_setT0limite 0007                    __pmaintext 0029  
                     ?___bmul 0024                  cmdLCD@nibble 0027                  ?_writeEUSART 0070  
                     ?_cmdLCD 0070                    _asciiToHex 0A16                    __pintentry 0004  
                     _CCP1CON 0017                       ?_initBT 0070                       ?_gotoxy 0028  
                     ?_putLCD 0070                       ?_slave1 0070               ?_statusT0limite 0024  
          __size_of_serialOut 0019            __size_of_textCMdat 0020            __size_of_textCMpar 0020  
              ?_errorRxEUSART 0070                  ?_writeString 0025                    _hexToAscii 11DE  
          __size_of_transmite 003A                    __stringtab 1800         __end_of_bordaSubidaB1 2000  
       __end_of_bordaSubidaB2 1027         __end_of_bordaSubidaB3 1041                    _initEUSART 143D  
           __end_of_easterEgg 1000                    getFIFO@aux 002F                     ?_serialIn 0070  
                     _t0final 004B               __size_of___bmul 0013                    _initSerial 1F86  
                  _initTimer0 105C                       ___awdiv 14F3               __size_of_cmdLCD 005A  
                     ___awmod 12EC                       ___lldiv 154E                     ?_statusT0 0024  
                     _getFIFO 118A               __size_of_initBT 000B               __size_of_gotoxy 0018  
                   ?_writeLCD 002C               __size_of_putLCD 0030               __size_of_slave1 00BA  
                     __ptext0 0000                       __ptext1 05BF                       __ptext2 1FCD  
                     __ptext3 11DE                       __ptext4 138E                       __ptext5 1339  
                     __ptext6 0A9E                       __ptext7 0A3B                       __ptext8 179D  
                     __ptext9 173A             __end_of_intt0_1ms 105C                  writeEUSART@d 0024  
                     _initLCD 126D                       _master1 0B01              ___awmod@dividend 0026  
                     _modulo2 1498                       _putFIFO 1093    __end_of_resetErrorRxEUSART 11DE  
                     main@aux 0047                       clrloop0 1F4E          end_of_initialization 0025  
           __end_of_serialOut 1FCD          __size_of_textLoading 00FD                       gotoxy@x 002B  
                     gotoxy@y 0028             __end_of_textCMdat 10D3             __end_of_textCMpar 10F3  
                     putLCD@c 0025               ___lldiv@divisor 0024               ___lldiv@counter 0031  
           bordaSubidaB1@resp 0025                    ??_serialIn 0024                     _RCSTAbits 0018  
                 ?_asciiToHex 0024                  __pstringtext 0600             __end_of_transmite 05F9  
                  ??_statusT0 0026                    ??_writeLCD 002F               ??_errorRxEUSART 0024  
                   _PORTBbits 0006                     _PORTCbits 0007                    _textConfig 10F3  
               ??_desconectar 003C                   ?_hexToAscii 0070                     _TRISAbits 0085  
                   _TRISCbits 0087                     i1___awmod 12A1                    _statusFIFO 1077  
            _textSelectionCLP 1339              _textSelectionEST 138E                   ?_initEUSART 0032  
                   _TXSTAbits 0098           _interrupt_EUSART_RX 1F60                  setT0limite@c 0024  
                 ?_initSerial 0070                   ?_initTimer0 0070                __end_of___bmul 1F86  
              __end_of_cmdLCD 143D          __size_of_writeEUSART 0006                   _BAUDCTLbits 0187  
              __end_of_initBT 1F60                __end_of_gotoxy 1FB4                __end_of_putLCD 123B  
              __end_of_slave1 0D06          ?_interrupt_EUSART_RX 0070           start_initialization 0015  
                  ?i1___awmod 0070          __size_of_writeString 0029           __end_of_desconectar 118A  
         __size_of_asciiToHex 0025           __size_of_hexToAscii 002D    bordaSubidaB1@estadoAtualB1 0026  
            ??_statusT0limite 0026                      ??___bmul 0025                      ??_cmdLCD 0024  
                    ??_initBT 0024            i1___awmod@dividend 0072                      ??_gotoxy 0029  
                    ??_putLCD 0024                      ??_slave1 003C                   ?_textConfig 0070  
       ??_interrupt_EUSART_RX 007C           __size_of_initEUSART 005B                   __pbssCOMMON 007C  
                   ___latbits 0002                 __pcstackBANK0 0020           __size_of_initSerial 0016  
         __size_of_initTimer0 001B                   ?_statusFIFO 0070                 ??_setT0limite 0026  
                   cmdLCD@cmd 0026                     _easterEgg 0E03                      ?___awdiv 0026  
                    ?___awmod 0024                      ?___lldiv 0024             __size_of_serialIn 0019  
                    ?_getFIFO 0070       __size_of_textSelection1 0063       __size_of_textSelection2 0063  
     __size_of_textSelection3 0063       __size_of_textSelection4 0063       __size_of_textSelection5 0063  
     __size_of_textSelection6 0063       __size_of_textSelection7 0063       __size_of_textSelection8 0063  
                   __pstrings 1800             __size_of_statusT0 0007                   _desconectar 1161  
                    ?_initLCD 0070                      ?_master1 0070             __size_of_writeLCD 0032  
                    ?_modulo2 0070                      ?_putFIFO 0070                     _intt0_1ms 1041  
                 ??i1___awmod 0074                __size_of_geral 0025                   writeLCD@ptr 002D  
                 __size_of_B1 0005                   __size_of_B2 0007                   __size_of_B3 0005  
               asciiToHex@dez 0028                 asciiToHex@uni 0027                    serialOut@d 0025  
                  serialOut@i 0026             interrupt_function 0004                     clear_ram0 1F4D  
         __size_of_textConfig 0020                      _PIE1bits 008C            _resetErrorRxEUSART 11B3  
                    _PIR1bits 000C           __end_of_setT0limite 1F46                     _serialOut 1FB4  
                   _textCMdat 10B3                     _textCMpar 10D3                  ??_asciiToHex 0025  
                  ?_easterEgg 0070           ?_resetErrorRxEUSART 0070                      _SPBRbits 0099  
         __size_of_statusFIFO 001C        __size_of_bordaSubidaB1 001A        __size_of_bordaSubidaB2 001A  
      __size_of_bordaSubidaB3 001A      __end_of_textSelectionCLP 138E      __end_of_textSelectionEST 13E3  
                 __stringbase 1812            initEUSART@baudRate 0032                     _transmite 05BF  
                putLCD@nibble 0026                  ??_hexToAscii 0024                    ?_intt0_1ms 0070  
        ??_resetErrorRxEUSART 0024                 ??_textLoading 0031            __end_of_asciiToHex 0A3B  
                ??_initEUSART 0036                    ?_serialOut 0070              _estadoAnteriorB1 0050  
            _estadoAnteriorB2 004F              _estadoAnteriorB3 004E            __end_of_hexToAscii 120B  
                  ?_textCMdat 0070                  ??_initSerial 0027                  ??_initTimer0 0026  
                  ?_textCMpar 0070             i1___awmod@divisor 0070             i1___awmod@counter 0075  
            __size_of___awdiv 005B              __size_of___awmod 004D              __size_of___lldiv 0060  
            __size_of_getFIFO 0029            __end_of__stringtab 1812                    ?_transmite 0070  
       __end_of_errorRxEUSART 100D              __size_of_initLCD 0034            __end_of_initEUSART 1498  
            __size_of_master1 00A1              __size_of_modulo2 005B                      _fifoHead 007C  
            __size_of_putFIFO 0020                      _fifoTail 004D                      __ptext10 16D7  
                    __ptext11 1674                      __ptext20 10B3                      __ptext12 1611  
                    __ptext21 1077                      __ptext13 15AE                      __ptext30 1FB4  
                    __ptext22 0C4C                      __ptext14 05F9                      __ptext31 126D  
                    __ptext23 11B3                      __ptext15 1F46                      __ptext40 13E3  
                    __ptext32 1F55                      __ptext24 1498                      __ptext16 14F3  
                    __ptext41 1F73                      __ptext33 118A                      __ptext25 0B01  
                    __ptext17 0D06                      __ptext50 154E                      __ptext42 1027  
                    __ptext34 12EC                      __ptext26 0BA2                      __ptext18 10F3  
                    __ptext51 1FE6                      __ptext43 1F2D                      __ptext35 1001  
                    __ptext27 105C                      __ptext19 10D3                      __ptext52 1F28  
                    __ptext44 100D                      __ptext36 0E03                      __ptext28 1F3F  
                    __ptext53 0A16                      __ptext45 1F38                      __ptext37 123B  
                    __ptext29 1F86                      __ptext54 1113                      __ptext46 1161  
                    __ptext38 120B                      __ptext55 1041                      __ptext47 1138  
                    __ptext39 1F9C                      __ptext56 1F60                      __ptext48 1F32  
                    __ptext57 1093                      __ptext49 143D                      __ptext58 12A1  
           __CFG_BOR4V$BOR40V 0000                  serialIn@dado 0025            __end_of_initSerial 1F9C  
          __end_of_initTimer0 1077                 _bordaSubidaB1 1FE6                 _bordaSubidaB2 100D  
               _bordaSubidaB3 1027                   _setT0limite 1F3F                 __size_of_main 0596  
               __size_of_logo 00AA                     serialIn@i 0026                  asciiToHex@a1 0026  
                asciiToHex@a2 0024           __end_of_textLoading 0E03                      _serialIn 1FCD  
               ??_writeEUSART 0024                   ??_easterEgg 0031    bordaSubidaB2@estadoAtualB2 0027  
                    _statusT0 1F46                _textSelection1 15AE                _textSelection2 1611  
              _textSelection3 1674                _textSelection4 16D7                _textSelection5 173A  
              _textSelection6 179D                _textSelection7 0A3B                _textSelection8 0A9E  
                    _writeLCD 123B                  ??_textConfig 0031                 ??_writeString 0027  
                  _INTCONbits 000B                   ??_intt0_1ms 0070                  ??_statusFIFO 002B  
              ?_bordaSubidaB1 0070                ?_bordaSubidaB2 0070                ?_bordaSubidaB3 0070  
                    intlevel1 0000              ___lldiv@dividend 0028                      putFIFO@c 007B  
                   writeLCD@x 0030                     writeLCD@y 002C            bordaSubidaB2@resp1 0026  
          __end_of_textConfig 1113            bordaSubidaB3@resp2 0025                     stringcode 180A  
                 ??_serialOut 0024                   ??_textCMdat 0031        __end_of_textSelection1 1611  
      __end_of_textSelection2 1674        __end_of_textSelection3 16D7        __end_of_textSelection4 173A  
      __end_of_textSelection5 179D        __end_of_textSelection6 1800        __end_of_textSelection7 0A9E  
      __end_of_textSelection8 0B01                   ??_textCMpar 0031   __end_of_interrupt_EUSART_RX 1F73  
          __end_of_statusFIFO 1093           __end_of_writeEUSART 1F38                   ??_transmite 0028  
                ?_desconectar 0070              ___lldiv@quotient 002D                      stringtab 1800  
         __end_of_writeString 1161                   _textLoading 0D06  
