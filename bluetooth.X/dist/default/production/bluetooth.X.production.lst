

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Oct 23 16:19:39 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,delta=2
    72                           	dabs	1,0x7E,2
    73  0000                     
    74                           ; Version 1.41
    75                           ; Generated 25/01/2017 GMT
    76                           ; 
    77                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC16F887 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  008F                     	;# 
   153  0090                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0093                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0095                     	;# 
   161  0096                     	;# 
   162  0097                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  0105                     	;# 
   172  0107                     	;# 
   173  0108                     	;# 
   174  0109                     	;# 
   175  010C                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  0185                     	;# 
   181  0187                     	;# 
   182  0188                     	;# 
   183  0189                     	;# 
   184  018C                     	;# 
   185  018D                     	;# 
   186  0000                     	;# 
   187  0001                     	;# 
   188  0002                     	;# 
   189  0003                     	;# 
   190  0004                     	;# 
   191  0005                     	;# 
   192  0006                     	;# 
   193  0007                     	;# 
   194  0008                     	;# 
   195  0009                     	;# 
   196  000A                     	;# 
   197  000B                     	;# 
   198  000C                     	;# 
   199  000D                     	;# 
   200  000E                     	;# 
   201  000E                     	;# 
   202  000F                     	;# 
   203  0010                     	;# 
   204  0011                     	;# 
   205  0012                     	;# 
   206  0013                     	;# 
   207  0014                     	;# 
   208  0015                     	;# 
   209  0015                     	;# 
   210  0016                     	;# 
   211  0017                     	;# 
   212  0018                     	;# 
   213  0019                     	;# 
   214  001A                     	;# 
   215  001B                     	;# 
   216  001B                     	;# 
   217  001C                     	;# 
   218  001D                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  0081                     	;# 
   222  0085                     	;# 
   223  0086                     	;# 
   224  0087                     	;# 
   225  0088                     	;# 
   226  0089                     	;# 
   227  008C                     	;# 
   228  008D                     	;# 
   229  008E                     	;# 
   230  008F                     	;# 
   231  0090                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0093                     	;# 
   236  0093                     	;# 
   237  0094                     	;# 
   238  0095                     	;# 
   239  0096                     	;# 
   240  0097                     	;# 
   241  0098                     	;# 
   242  0099                     	;# 
   243  009A                     	;# 
   244  009B                     	;# 
   245  009C                     	;# 
   246  009D                     	;# 
   247  009E                     	;# 
   248  009F                     	;# 
   249  0105                     	;# 
   250  0107                     	;# 
   251  0108                     	;# 
   252  0109                     	;# 
   253  010C                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  010F                     	;# 
   258  0185                     	;# 
   259  0187                     	;# 
   260  0188                     	;# 
   261  0189                     	;# 
   262  018C                     	;# 
   263  018D                     	;# 
   264  0000                     	;# 
   265  0001                     	;# 
   266  0002                     	;# 
   267  0003                     	;# 
   268  0004                     	;# 
   269  0005                     	;# 
   270  0006                     	;# 
   271  0007                     	;# 
   272  0008                     	;# 
   273  0009                     	;# 
   274  000A                     	;# 
   275  000B                     	;# 
   276  000C                     	;# 
   277  000D                     	;# 
   278  000E                     	;# 
   279  000E                     	;# 
   280  000F                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0013                     	;# 
   285  0014                     	;# 
   286  0015                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0017                     	;# 
   290  0018                     	;# 
   291  0019                     	;# 
   292  001A                     	;# 
   293  001B                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  001D                     	;# 
   297  001E                     	;# 
   298  001F                     	;# 
   299  0081                     	;# 
   300  0085                     	;# 
   301  0086                     	;# 
   302  0087                     	;# 
   303  0088                     	;# 
   304  0089                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  008F                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0093                     	;# 
   313  0093                     	;# 
   314  0093                     	;# 
   315  0094                     	;# 
   316  0095                     	;# 
   317  0096                     	;# 
   318  0097                     	;# 
   319  0098                     	;# 
   320  0099                     	;# 
   321  009A                     	;# 
   322  009B                     	;# 
   323  009C                     	;# 
   324  009D                     	;# 
   325  009E                     	;# 
   326  009F                     	;# 
   327  0105                     	;# 
   328  0107                     	;# 
   329  0108                     	;# 
   330  0109                     	;# 
   331  010C                     	;# 
   332  010C                     	;# 
   333  010D                     	;# 
   334  010E                     	;# 
   335  010F                     	;# 
   336  0185                     	;# 
   337  0187                     	;# 
   338  0188                     	;# 
   339  0189                     	;# 
   340  018C                     	;# 
   341  018D                     	;# 
   342  0000                     	;# 
   343  0001                     	;# 
   344  0002                     	;# 
   345  0003                     	;# 
   346  0004                     	;# 
   347  0005                     	;# 
   348  0006                     	;# 
   349  0007                     	;# 
   350  0008                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  001D                     	;# 
   375  001E                     	;# 
   376  001F                     	;# 
   377  0081                     	;# 
   378  0085                     	;# 
   379  0086                     	;# 
   380  0087                     	;# 
   381  0088                     	;# 
   382  0089                     	;# 
   383  008C                     	;# 
   384  008D                     	;# 
   385  008E                     	;# 
   386  008F                     	;# 
   387  0090                     	;# 
   388  0091                     	;# 
   389  0092                     	;# 
   390  0093                     	;# 
   391  0093                     	;# 
   392  0093                     	;# 
   393  0094                     	;# 
   394  0095                     	;# 
   395  0096                     	;# 
   396  0097                     	;# 
   397  0098                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009C                     	;# 
   402  009D                     	;# 
   403  009E                     	;# 
   404  009F                     	;# 
   405  0105                     	;# 
   406  0107                     	;# 
   407  0108                     	;# 
   408  0109                     	;# 
   409  010C                     	;# 
   410  010C                     	;# 
   411  010D                     	;# 
   412  010E                     	;# 
   413  010F                     	;# 
   414  0185                     	;# 
   415  0187                     	;# 
   416  0188                     	;# 
   417  0189                     	;# 
   418  018C                     	;# 
   419  018D                     	;# 
   420  0000                     	;# 
   421  0001                     	;# 
   422  0002                     	;# 
   423  0003                     	;# 
   424  0004                     	;# 
   425  0005                     	;# 
   426  0006                     	;# 
   427  0007                     	;# 
   428  0008                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  000E                     	;# 
   435  000E                     	;# 
   436  000F                     	;# 
   437  0010                     	;# 
   438  0011                     	;# 
   439  0012                     	;# 
   440  0013                     	;# 
   441  0014                     	;# 
   442  0015                     	;# 
   443  0015                     	;# 
   444  0016                     	;# 
   445  0017                     	;# 
   446  0018                     	;# 
   447  0019                     	;# 
   448  001A                     	;# 
   449  001B                     	;# 
   450  001B                     	;# 
   451  001C                     	;# 
   452  001D                     	;# 
   453  001E                     	;# 
   454  001F                     	;# 
   455  0081                     	;# 
   456  0085                     	;# 
   457  0086                     	;# 
   458  0087                     	;# 
   459  0088                     	;# 
   460  0089                     	;# 
   461  008C                     	;# 
   462  008D                     	;# 
   463  008E                     	;# 
   464  008F                     	;# 
   465  0090                     	;# 
   466  0091                     	;# 
   467  0092                     	;# 
   468  0093                     	;# 
   469  0093                     	;# 
   470  0093                     	;# 
   471  0094                     	;# 
   472  0095                     	;# 
   473  0096                     	;# 
   474  0097                     	;# 
   475  0098                     	;# 
   476  0099                     	;# 
   477  009A                     	;# 
   478  009B                     	;# 
   479  009C                     	;# 
   480  009D                     	;# 
   481  009E                     	;# 
   482  009F                     	;# 
   483  0105                     	;# 
   484  0107                     	;# 
   485  0108                     	;# 
   486  0109                     	;# 
   487  010C                     	;# 
   488  010C                     	;# 
   489  010D                     	;# 
   490  010E                     	;# 
   491  010F                     	;# 
   492  0185                     	;# 
   493  0187                     	;# 
   494  0188                     	;# 
   495  0189                     	;# 
   496  018C                     	;# 
   497  018D                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  000E                     	;# 
   514  000F                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0013                     	;# 
   519  0014                     	;# 
   520  0015                     	;# 
   521  0015                     	;# 
   522  0016                     	;# 
   523  0017                     	;# 
   524  0018                     	;# 
   525  0019                     	;# 
   526  001A                     	;# 
   527  001B                     	;# 
   528  001B                     	;# 
   529  001C                     	;# 
   530  001D                     	;# 
   531  001E                     	;# 
   532  001F                     	;# 
   533  0081                     	;# 
   534  0085                     	;# 
   535  0086                     	;# 
   536  0087                     	;# 
   537  0088                     	;# 
   538  0089                     	;# 
   539  008C                     	;# 
   540  008D                     	;# 
   541  008E                     	;# 
   542  008F                     	;# 
   543  0090                     	;# 
   544  0091                     	;# 
   545  0092                     	;# 
   546  0093                     	;# 
   547  0093                     	;# 
   548  0093                     	;# 
   549  0094                     	;# 
   550  0095                     	;# 
   551  0096                     	;# 
   552  0097                     	;# 
   553  0098                     	;# 
   554  0099                     	;# 
   555  009A                     	;# 
   556  009B                     	;# 
   557  009C                     	;# 
   558  009D                     	;# 
   559  009E                     	;# 
   560  009F                     	;# 
   561  0105                     	;# 
   562  0107                     	;# 
   563  0108                     	;# 
   564  0109                     	;# 
   565  010C                     	;# 
   566  010C                     	;# 
   567  010D                     	;# 
   568  010E                     	;# 
   569  010F                     	;# 
   570  0185                     	;# 
   571  0187                     	;# 
   572  0188                     	;# 
   573  0189                     	;# 
   574  018C                     	;# 
   575  018D                     	;# 
   576  0000                     	;# 
   577  0001                     	;# 
   578  0002                     	;# 
   579  0003                     	;# 
   580  0004                     	;# 
   581  0005                     	;# 
   582  0006                     	;# 
   583  0007                     	;# 
   584  0008                     	;# 
   585  0009                     	;# 
   586  000A                     	;# 
   587  000B                     	;# 
   588  000C                     	;# 
   589  000D                     	;# 
   590  000E                     	;# 
   591  000E                     	;# 
   592  000F                     	;# 
   593  0010                     	;# 
   594  0011                     	;# 
   595  0012                     	;# 
   596  0013                     	;# 
   597  0014                     	;# 
   598  0015                     	;# 
   599  0015                     	;# 
   600  0016                     	;# 
   601  0017                     	;# 
   602  0018                     	;# 
   603  0019                     	;# 
   604  001A                     	;# 
   605  001B                     	;# 
   606  001B                     	;# 
   607  001C                     	;# 
   608  001D                     	;# 
   609  001E                     	;# 
   610  001F                     	;# 
   611  0081                     	;# 
   612  0085                     	;# 
   613  0086                     	;# 
   614  0087                     	;# 
   615  0088                     	;# 
   616  0089                     	;# 
   617  008C                     	;# 
   618  008D                     	;# 
   619  008E                     	;# 
   620  008F                     	;# 
   621  0090                     	;# 
   622  0091                     	;# 
   623  0092                     	;# 
   624  0093                     	;# 
   625  0093                     	;# 
   626  0093                     	;# 
   627  0094                     	;# 
   628  0095                     	;# 
   629  0096                     	;# 
   630  0097                     	;# 
   631  0098                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009C                     	;# 
   636  009D                     	;# 
   637  009E                     	;# 
   638  009F                     	;# 
   639  0105                     	;# 
   640  0107                     	;# 
   641  0108                     	;# 
   642  0109                     	;# 
   643  010C                     	;# 
   644  010C                     	;# 
   645  010D                     	;# 
   646  010E                     	;# 
   647  010F                     	;# 
   648  0185                     	;# 
   649  0187                     	;# 
   650  0188                     	;# 
   651  0189                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  0000                     	;# 
   655  0001                     	;# 
   656  0002                     	;# 
   657  0003                     	;# 
   658  0004                     	;# 
   659  0005                     	;# 
   660  0006                     	;# 
   661  0007                     	;# 
   662  0008                     	;# 
   663  0009                     	;# 
   664  000A                     	;# 
   665  000B                     	;# 
   666  000C                     	;# 
   667  000D                     	;# 
   668  000E                     	;# 
   669  000E                     	;# 
   670  000F                     	;# 
   671  0010                     	;# 
   672  0011                     	;# 
   673  0012                     	;# 
   674  0013                     	;# 
   675  0014                     	;# 
   676  0015                     	;# 
   677  0015                     	;# 
   678  0016                     	;# 
   679  0017                     	;# 
   680  0018                     	;# 
   681  0019                     	;# 
   682  001A                     	;# 
   683  001B                     	;# 
   684  001B                     	;# 
   685  001C                     	;# 
   686  001D                     	;# 
   687  001E                     	;# 
   688  001F                     	;# 
   689  0081                     	;# 
   690  0085                     	;# 
   691  0086                     	;# 
   692  0087                     	;# 
   693  0088                     	;# 
   694  0089                     	;# 
   695  008C                     	;# 
   696  008D                     	;# 
   697  008E                     	;# 
   698  008F                     	;# 
   699  0090                     	;# 
   700  0091                     	;# 
   701  0092                     	;# 
   702  0093                     	;# 
   703  0093                     	;# 
   704  0093                     	;# 
   705  0094                     	;# 
   706  0095                     	;# 
   707  0096                     	;# 
   708  0097                     	;# 
   709  0098                     	;# 
   710  0099                     	;# 
   711  009A                     	;# 
   712  009B                     	;# 
   713  009C                     	;# 
   714  009D                     	;# 
   715  009E                     	;# 
   716  009F                     	;# 
   717  0105                     	;# 
   718  0107                     	;# 
   719  0108                     	;# 
   720  0109                     	;# 
   721  010C                     	;# 
   722  010C                     	;# 
   723  010D                     	;# 
   724  010E                     	;# 
   725  010F                     	;# 
   726  0185                     	;# 
   727  0187                     	;# 
   728  0188                     	;# 
   729  0189                     	;# 
   730  018C                     	;# 
   731  018D                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  000E                     	;# 
   748  000F                     	;# 
   749  0010                     	;# 
   750  0011                     	;# 
   751  0012                     	;# 
   752  0013                     	;# 
   753  0014                     	;# 
   754  0015                     	;# 
   755  0015                     	;# 
   756  0016                     	;# 
   757  0017                     	;# 
   758  0018                     	;# 
   759  0019                     	;# 
   760  001A                     	;# 
   761  001B                     	;# 
   762  001B                     	;# 
   763  001C                     	;# 
   764  001D                     	;# 
   765  001E                     	;# 
   766  001F                     	;# 
   767  0081                     	;# 
   768  0085                     	;# 
   769  0086                     	;# 
   770  0087                     	;# 
   771  0088                     	;# 
   772  0089                     	;# 
   773  008C                     	;# 
   774  008D                     	;# 
   775  008E                     	;# 
   776  008F                     	;# 
   777  0090                     	;# 
   778  0091                     	;# 
   779  0092                     	;# 
   780  0093                     	;# 
   781  0093                     	;# 
   782  0093                     	;# 
   783  0094                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0098                     	;# 
   788  0099                     	;# 
   789  009A                     	;# 
   790  009B                     	;# 
   791  009C                     	;# 
   792  009D                     	;# 
   793  009E                     	;# 
   794  009F                     	;# 
   795  0105                     	;# 
   796  0107                     	;# 
   797  0108                     	;# 
   798  0109                     	;# 
   799  010C                     	;# 
   800  010C                     	;# 
   801  010D                     	;# 
   802  010E                     	;# 
   803  010F                     	;# 
   804  0185                     	;# 
   805  0187                     	;# 
   806  0188                     	;# 
   807  0189                     	;# 
   808  018C                     	;# 
   809  018D                     	;# 
   810  001A                     _RCREG	set	26
   811  0019                     _TXREG	set	25
   812  0018                     _RCSTAbits	set	24
   813  0001                     _TMR0	set	1
   814  000C                     _PIR1bits	set	12
   815  000B                     _INTCONbits	set	11
   816                           
   817                           	psect	text0
   818  0000                     __ptext0:	
   819  0008                     _LCD	set	8
   820  0007                     _PORTCbits	set	7
   821  0006                     _PORTBbits	set	6
   822  0017                     _CCP1CON	set	23
   823  0006                     _PORTB	set	6
   824  0099                     _SPBRbits	set	153
   825  0094                     _SSPSTATbits	set	148
   826  0098                     _TXSTAbits	set	152
   827  0081                     _OPTION_REGbits	set	129
   828  0085                     _TRISAbits	set	133
   829  008C                     _PIE1bits	set	140
   830  0088                     _TRISD	set	136
   831  0087                     _TRISCbits	set	135
   832  0086                     _TRISB	set	134
   833  0187                     _BAUDCTLbits	set	391
   834  0188                     _ANSEL	set	392
   835  0189                     _ANSELH	set	393
   836                           
   837                           	psect	strings
   838  1000                     __pstrings:	
   839  1000                     stringtab:	
   840  1000                     __stringtab:	
   841                           
   842                           ;	String table - string pointers are 2 bytes each
   843  1000  1BFF               	btfsc	btemp+1,7
   844  1001  280A               	ljmp	stringcode
   845  1002  1383               	bcf	3,7
   846  1003  187F               	btfsc	btemp+1,0
   847  1004  1783               	bsf	3,7
   848  1005  0800               	movf	0,w
   849  1006  0A84               	incf	4,f
   850  1007  1903               	skipnz
   851  1008  0AFF               	incf	btemp+1,f
   852  1009  0008               	return
   853  100A                     stringcode:	
   854  100A  087F               	movf	btemp+1,w
   855  100B  397F               	andlw	127
   856  100C  008A               	movwf	10
   857  100D  0804               	movf	4,w
   858  100E  0A84               	incf	4,f
   859  100F  1903               	skipnz
   860  1010  0AFF               	incf	btemp+1,f
   861  1011  0082               	movwf	2
   862  1012                     __stringbase:	
   863  1012                     __end_of__stringtab:	
   864                           
   865                           	psect	stringtext
   866  0600                     __pstringtext:	
   867  0600                     STR_98:	
   868  0600  3441               	retlw	65	;'A'
   869  0601  3454               	retlw	84	;'T'
   870  0602  342B               	retlw	43	;'+'
   871  0603  3450               	retlw	80	;'P'
   872  0604  3441               	retlw	65	;'A'
   873  0605  3449               	retlw	73	;'I'
   874  0606  3452               	retlw	82	;'R'
   875  0607  343D               	retlw	61	;'='
   876  0608  3433               	retlw	51	;'3'
   877  0609  3444               	retlw	68	;'D'
   878  060A  3442               	retlw	66	;'B'
   879  060B  3441               	retlw	65	;'A'
   880  060C  342C               	retlw	44	;','
   881  060D  3438               	retlw	56	;'8'
   882  060E  3438               	retlw	56	;'8'
   883  060F  342C               	retlw	44	;','
   884  0610  3436               	retlw	54	;'6'
   885  0611  3438               	retlw	56	;'8'
   886  0612  3437               	retlw	55	;'7'
   887  0613  3441               	retlw	65	;'A'
   888  0614  3437               	retlw	55	;'7'
   889  0615  3434               	retlw	52	;'4'
   890  0616  342C               	retlw	44	;','
   891  0617  3432               	retlw	50	;'2'
   892  0618  3430               	retlw	48	;'0'
   893  0619  340D               	retlw	13
   894  061A  340A               	retlw	10
   895  061B  3400               	retlw	0
   896  061C                     STR_104:	
   897  061C  3441               	retlw	65	;'A'
   898  061D  3454               	retlw	84	;'T'
   899  061E  342B               	retlw	43	;'+'
   900  061F  3450               	retlw	80	;'P'
   901  0620  3441               	retlw	65	;'A'
   902  0621  3449               	retlw	73	;'I'
   903  0622  3452               	retlw	82	;'R'
   904  0623  343D               	retlw	61	;'='
   905  0624  3439               	retlw	57	;'9'
   906  0625  3438               	retlw	56	;'8'
   907  0626  3444               	retlw	68	;'D'
   908  0627  3433               	retlw	51	;'3'
   909  0628  342C               	retlw	44	;','
   910  0629  3442               	retlw	66	;'B'
   911  062A  3431               	retlw	49	;'1'
   912  062B  342C               	retlw	44	;','
   913  062C  3446               	retlw	70	;'F'
   914  062D  3444               	retlw	68	;'D'
   915  062E  3434               	retlw	52	;'4'
   916  062F  3433               	retlw	51	;'3'
   917  0630  3445               	retlw	69	;'E'
   918  0631  3439               	retlw	57	;'9'
   919  0632  342C               	retlw	44	;','
   920  0633  3432               	retlw	50	;'2'
   921  0634  3430               	retlw	48	;'0'
   922  0635  340D               	retlw	13
   923  0636  340A               	retlw	10
   924  0637  3400               	retlw	0
   925  0638                     STR_101:	
   926  0638  3441               	retlw	65	;'A'
   927  0639  3454               	retlw	84	;'T'
   928  063A  342B               	retlw	43	;'+'
   929  063B  3450               	retlw	80	;'P'
   930  063C  3441               	retlw	65	;'A'
   931  063D  3449               	retlw	73	;'I'
   932  063E  3452               	retlw	82	;'R'
   933  063F  343D               	retlw	61	;'='
   934  0640  3430               	retlw	48	;'0'
   935  0641  3430               	retlw	48	;'0'
   936  0642  3431               	retlw	49	;'1'
   937  0643  3433               	retlw	51	;'3'
   938  0644  342C               	retlw	44	;','
   939  0645  3445               	retlw	69	;'E'
   940  0646  3446               	retlw	70	;'F'
   941  0647  342C               	retlw	44	;','
   942  0648  3430               	retlw	48	;'0'
   943  0649  3430               	retlw	48	;'0'
   944  064A  3431               	retlw	49	;'1'
   945  064B  3434               	retlw	52	;'4'
   946  064C  3442               	retlw	66	;'B'
   947  064D  3442               	retlw	66	;'B'
   948  064E  342C               	retlw	44	;','
   949  064F  3432               	retlw	50	;'2'
   950  0650  3430               	retlw	48	;'0'
   951  0651  340D               	retlw	13
   952  0652  340A               	retlw	10
   953  0653  3400               	retlw	0
   954  0654                     STR_100:	
   955  0654  3441               	retlw	65	;'A'
   956  0655  3454               	retlw	84	;'T'
   957  0656  342B               	retlw	43	;'+'
   958  0657  3442               	retlw	66	;'B'
   959  0658  3449               	retlw	73	;'I'
   960  0659  344E               	retlw	78	;'N'
   961  065A  3444               	retlw	68	;'D'
   962  065B  343D               	retlw	61	;'='
   963  065C  3433               	retlw	51	;'3'
   964  065D  3444               	retlw	68	;'D'
   965  065E  3442               	retlw	66	;'B'
   966  065F  3441               	retlw	65	;'A'
   967  0660  342C               	retlw	44	;','
   968  0661  3438               	retlw	56	;'8'
   969  0662  3438               	retlw	56	;'8'
   970  0663  342C               	retlw	44	;','
   971  0664  3436               	retlw	54	;'6'
   972  0665  3438               	retlw	56	;'8'
   973  0666  3437               	retlw	55	;'7'
   974  0667  3441               	retlw	65	;'A'
   975  0668  3437               	retlw	55	;'7'
   976  0669  3434               	retlw	52	;'4'
   977  066A  340D               	retlw	13
   978  066B  340A               	retlw	10
   979  066C  3400               	retlw	0
   980  066D                     STR_99:	
   981  066D  3441               	retlw	65	;'A'
   982  066E  3454               	retlw	84	;'T'
   983  066F  342B               	retlw	43	;'+'
   984  0670  344C               	retlw	76	;'L'
   985  0671  3449               	retlw	73	;'I'
   986  0672  344E               	retlw	78	;'N'
   987  0673  344B               	retlw	75	;'K'
   988  0674  343D               	retlw	61	;'='
   989  0675  3433               	retlw	51	;'3'
   990  0676  3444               	retlw	68	;'D'
   991  0677  3442               	retlw	66	;'B'
   992  0678  3441               	retlw	65	;'A'
   993  0679  342C               	retlw	44	;','
   994  067A  3438               	retlw	56	;'8'
   995  067B  3438               	retlw	56	;'8'
   996  067C  342C               	retlw	44	;','
   997  067D  3436               	retlw	54	;'6'
   998  067E  3438               	retlw	56	;'8'
   999  067F  3437               	retlw	55	;'7'
  1000  0680  3441               	retlw	65	;'A'
  1001  0681  3437               	retlw	55	;'7'
  1002  0682  3434               	retlw	52	;'4'
  1003  0683  340D               	retlw	13
  1004  0684  340A               	retlw	10
  1005  0685  3400               	retlw	0
  1006  0686                     STR_106:	
  1007  0686  3441               	retlw	65	;'A'
  1008  0687  3454               	retlw	84	;'T'
  1009  0688  342B               	retlw	43	;'+'
  1010  0689  3442               	retlw	66	;'B'
  1011  068A  3449               	retlw	73	;'I'
  1012  068B  344E               	retlw	78	;'N'
  1013  068C  3444               	retlw	68	;'D'
  1014  068D  343D               	retlw	61	;'='
  1015  068E  3439               	retlw	57	;'9'
  1016  068F  3438               	retlw	56	;'8'
  1017  0690  3444               	retlw	68	;'D'
  1018  0691  3433               	retlw	51	;'3'
  1019  0692  342C               	retlw	44	;','
  1020  0693  3442               	retlw	66	;'B'
  1021  0694  3431               	retlw	49	;'1'
  1022  0695  342C               	retlw	44	;','
  1023  0696  3446               	retlw	70	;'F'
  1024  0697  3444               	retlw	68	;'D'
  1025  0698  3434               	retlw	52	;'4'
  1026  0699  3433               	retlw	51	;'3'
  1027  069A  3445               	retlw	69	;'E'
  1028  069B  3439               	retlw	57	;'9'
  1029  069C  340D               	retlw	13
  1030  069D  340A               	retlw	10
  1031  069E  3400               	retlw	0
  1032  069F                     STR_105:	
  1033  069F  3441               	retlw	65	;'A'
  1034  06A0  3454               	retlw	84	;'T'
  1035  06A1  342B               	retlw	43	;'+'
  1036  06A2  344C               	retlw	76	;'L'
  1037  06A3  3449               	retlw	73	;'I'
  1038  06A4  344E               	retlw	78	;'N'
  1039  06A5  344B               	retlw	75	;'K'
  1040  06A6  343D               	retlw	61	;'='
  1041  06A7  3439               	retlw	57	;'9'
  1042  06A8  3438               	retlw	56	;'8'
  1043  06A9  3444               	retlw	68	;'D'
  1044  06AA  3433               	retlw	51	;'3'
  1045  06AB  342C               	retlw	44	;','
  1046  06AC  3442               	retlw	66	;'B'
  1047  06AD  3431               	retlw	49	;'1'
  1048  06AE  342C               	retlw	44	;','
  1049  06AF  3446               	retlw	70	;'F'
  1050  06B0  3444               	retlw	68	;'D'
  1051  06B1  3434               	retlw	52	;'4'
  1052  06B2  3433               	retlw	51	;'3'
  1053  06B3  3445               	retlw	69	;'E'
  1054  06B4  3439               	retlw	57	;'9'
  1055  06B5  340D               	retlw	13
  1056  06B6  340A               	retlw	10
  1057  06B7  3400               	retlw	0
  1058  06B8                     STR_103:	
  1059  06B8  3441               	retlw	65	;'A'
  1060  06B9  3454               	retlw	84	;'T'
  1061  06BA  342B               	retlw	43	;'+'
  1062  06BB  3442               	retlw	66	;'B'
  1063  06BC  3449               	retlw	73	;'I'
  1064  06BD  344E               	retlw	78	;'N'
  1065  06BE  3444               	retlw	68	;'D'
  1066  06BF  343D               	retlw	61	;'='
  1067  06C0  3430               	retlw	48	;'0'
  1068  06C1  3430               	retlw	48	;'0'
  1069  06C2  3431               	retlw	49	;'1'
  1070  06C3  3433               	retlw	51	;'3'
  1071  06C4  342C               	retlw	44	;','
  1072  06C5  3445               	retlw	69	;'E'
  1073  06C6  3446               	retlw	70	;'F'
  1074  06C7  342C               	retlw	44	;','
  1075  06C8  3430               	retlw	48	;'0'
  1076  06C9  3430               	retlw	48	;'0'
  1077  06CA  3431               	retlw	49	;'1'
  1078  06CB  3434               	retlw	52	;'4'
  1079  06CC  3442               	retlw	66	;'B'
  1080  06CD  3442               	retlw	66	;'B'
  1081  06CE  340D               	retlw	13
  1082  06CF  340A               	retlw	10
  1083  06D0  3400               	retlw	0
  1084  06D1                     STR_102:	
  1085  06D1  3441               	retlw	65	;'A'
  1086  06D2  3454               	retlw	84	;'T'
  1087  06D3  342B               	retlw	43	;'+'
  1088  06D4  344C               	retlw	76	;'L'
  1089  06D5  3449               	retlw	73	;'I'
  1090  06D6  344E               	retlw	78	;'N'
  1091  06D7  344B               	retlw	75	;'K'
  1092  06D8  343D               	retlw	61	;'='
  1093  06D9  3430               	retlw	48	;'0'
  1094  06DA  3430               	retlw	48	;'0'
  1095  06DB  3431               	retlw	49	;'1'
  1096  06DC  3433               	retlw	51	;'3'
  1097  06DD  342C               	retlw	44	;','
  1098  06DE  3445               	retlw	69	;'E'
  1099  06DF  3446               	retlw	70	;'F'
  1100  06E0  342C               	retlw	44	;','
  1101  06E1  3430               	retlw	48	;'0'
  1102  06E2  3430               	retlw	48	;'0'
  1103  06E3  3431               	retlw	49	;'1'
  1104  06E4  3434               	retlw	52	;'4'
  1105  06E5  3442               	retlw	66	;'B'
  1106  06E6  3442               	retlw	66	;'B'
  1107  06E7  340D               	retlw	13
  1108  06E8  340A               	retlw	10
  1109  06E9  3400               	retlw	0
  1110  06EA                     STR_96:	
  1111  06EA  3441               	retlw	65	;'A'
  1112  06EB  3454               	retlw	84	;'T'
  1113  06EC  342B               	retlw	43	;'+'
  1114  06ED  344E               	retlw	78	;'N'
  1115  06EE  3441               	retlw	65	;'A'
  1116  06EF  344D               	retlw	77	;'M'
  1117  06F0  3445               	retlw	69	;'E'
  1118  06F1  343D               	retlw	61	;'='
  1119  06F2  3422               	retlw	34	;'"'
  1120  06F3  3445               	retlw	69	;'E'
  1121  06F4  3473               	retlw	115	;'s'
  1122  06F5  3463               	retlw	99	;'c'
  1123  06F6  3472               	retlw	114	;'r'
  1124  06F7  3461               	retlw	97	;'a'
  1125  06F8  3476               	retlw	118	;'v'
  1126  06F9  346F               	retlw	111	;'o'
  1127  06FA  3422               	retlw	34	;'"'
  1128  06FB  340D               	retlw	13
  1129  06FC  340A               	retlw	10
  1130  06FD  3400               	retlw	0
  1131  06FE                     STR_83:	
  1132  06FE  3441               	retlw	65	;'A'
  1133  06FF  3454               	retlw	84	;'T'
  1134  0700  342B               	retlw	43	;'+'
  1135  0701  3455               	retlw	85	;'U'
  1136  0702  3441               	retlw	65	;'A'
  1137  0703  3452               	retlw	82	;'R'
  1138  0704  3454               	retlw	84	;'T'
  1139  0705  343D               	retlw	61	;'='
  1140  0706  3439               	retlw	57	;'9'
  1141  0707  3436               	retlw	54	;'6'
  1142  0708  3430               	retlw	48	;'0'
  1143  0709  3430               	retlw	48	;'0'
  1144  070A  342C               	retlw	44	;','
  1145  070B  3430               	retlw	48	;'0'
  1146  070C  342C               	retlw	44	;','
  1147  070D  3430               	retlw	48	;'0'
  1148  070E  340D               	retlw	13
  1149  070F  340A               	retlw	10
  1150  0710  3400               	retlw	0
  1151  0711                     STR_71:	
  1152  0711  3447               	retlw	71	;'G'
  1153  0712  3441               	retlw	65	;'A'
  1154  0713  3442               	retlw	66	;'B'
  1155  0714  3452               	retlw	82	;'R'
  1156  0715  3449               	retlw	73	;'I'
  1157  0716  3445               	retlw	69	;'E'
  1158  0717  344C               	retlw	76	;'L'
  1159  0718  3420               	retlw	32	;' '
  1160  0719  3447               	retlw	71	;'G'
  1161  071A  3445               	retlw	69	;'E'
  1162  071B  344E               	retlw	78	;'N'
  1163  071C  3455               	retlw	85	;'U'
  1164  071D  3420               	retlw	32	;' '
  1165  071E  3420               	retlw	32	;' '
  1166  071F  3420               	retlw	32	;' '
  1167  0720  3420               	retlw	32	;' '
  1168  0721  3420               	retlw	32	;' '
  1169  0722  3400               	retlw	0
  1170  0723                     STR_115:	
  1171  0723  3420               	retlw	32	;' '
  1172  0724  3420               	retlw	32	;' '
  1173  0725  3420               	retlw	32	;' '
  1174  0726  3420               	retlw	32	;' '
  1175  0727  3454               	retlw	84	;'T'
  1176  0728  3452               	retlw	82	;'R'
  1177  0729  344F               	retlw	79	;'O'
  1178  072A  3443               	retlw	67	;'C'
  1179  072B  3441               	retlw	65	;'A'
  1180  072C  344E               	retlw	78	;'N'
  1181  072D  3444               	retlw	68	;'D'
  1182  072E  344F               	retlw	79	;'O'
  1183  072F  3420               	retlw	32	;' '
  1184  0730  3420               	retlw	32	;' '
  1185  0731  3420               	retlw	32	;' '
  1186  0732  3420               	retlw	32	;' '
  1187  0733  3400               	retlw	0
  1188  0734                     STR_114:	
  1189  0734  3420               	retlw	32	;' '
  1190  0735  3420               	retlw	32	;' '
  1191  0736  3420               	retlw	32	;' '
  1192  0737  3420               	retlw	32	;' '
  1193  0738  3444               	retlw	68	;'D'
  1194  0739  3445               	retlw	69	;'E'
  1195  073A  3420               	retlw	32	;' '
  1196  073B  3444               	retlw	68	;'D'
  1197  073C  3441               	retlw	65	;'A'
  1198  073D  3444               	retlw	68	;'D'
  1199  073E  344F               	retlw	79	;'O'
  1200  073F  3453               	retlw	83	;'S'
  1201  0740  3420               	retlw	32	;' '
  1202  0741  3420               	retlw	32	;' '
  1203  0742  3420               	retlw	32	;' '
  1204  0743  3420               	retlw	32	;' '
  1205  0744  3400               	retlw	0
  1206  0745                     STR_116:	
  1207  0745  3420               	retlw	32	;' '
  1208  0746  3420               	retlw	32	;' '
  1209  0747  3420               	retlw	32	;' '
  1210  0748  3449               	retlw	73	;'I'
  1211  0749  344E               	retlw	78	;'N'
  1212  074A  3446               	retlw	70	;'F'
  1213  074B  344F               	retlw	79	;'O'
  1214  074C  3452               	retlw	82	;'R'
  1215  074D  344D               	retlw	77	;'M'
  1216  074E  3441               	retlw	65	;'A'
  1217  074F  3443               	retlw	67	;'C'
  1218  0750  3441               	retlw	65	;'A'
  1219  0751  344F               	retlw	79	;'O'
  1220  0752  3420               	retlw	32	;' '
  1221  0753  3420               	retlw	32	;' '
  1222  0754  3420               	retlw	32	;' '
  1223  0755  3400               	retlw	0
  1224  0756                     STR_124:	
  1225  0756  3444               	retlw	68	;'D'
  1226  0757  3445               	retlw	69	;'E'
  1227  0758  3453               	retlw	83	;'S'
  1228  0759  3443               	retlw	67	;'C'
  1229  075A  344F               	retlw	79	;'O'
  1230  075B  344E               	retlw	78	;'N'
  1231  075C  3445               	retlw	69	;'E'
  1232  075D  3443               	retlw	67	;'C'
  1233  075E  3454               	retlw	84	;'T'
  1234  075F  3441               	retlw	65	;'A'
  1235  0760  344E               	retlw	78	;'N'
  1236  0761  3444               	retlw	68	;'D'
  1237  0762  344F               	retlw	79	;'O'
  1238  0763  3420               	retlw	32	;' '
  1239  0764  3420               	retlw	32	;' '
  1240  0765  3420               	retlw	32	;' '
  1241  0766  3400               	retlw	0
  1242  0767                     STR_122:	
  1243  0767  3420               	retlw	32	;' '
  1244  0768  3450               	retlw	80	;'P'
  1245  0769  3441               	retlw	65	;'A'
  1246  076A  3452               	retlw	82	;'R'
  1247  076B  3445               	retlw	69	;'E'
  1248  076C  3441               	retlw	65	;'A'
  1249  076D  3452               	retlw	82	;'R'
  1250  076E  3420               	retlw	32	;' '
  1251  076F  3443               	retlw	67	;'C'
  1252  0770  344F               	retlw	79	;'O'
  1253  0771  344D               	retlw	77	;'M'
  1254  0772  3420               	retlw	32	;' '
  1255  0773  3449               	retlw	73	;'I'
  1256  0774  3450               	retlw	80	;'P'
  1257  0775  3420               	retlw	32	;' '
  1258  0776  3420               	retlw	32	;' '
  1259  0777  3400               	retlw	0
  1260  0778                     STR_120:	
  1261  0778  3450               	retlw	80	;'P'
  1262  0779  3441               	retlw	65	;'A'
  1263  077A  3452               	retlw	82	;'R'
  1264  077B  3445               	retlw	69	;'E'
  1265  077C  3441               	retlw	65	;'A'
  1266  077D  3452               	retlw	82	;'R'
  1267  077E  3420               	retlw	32	;' '
  1268  077F  3420               	retlw	32	;' '
  1269  0780  3420               	retlw	32	;' '
  1270  0781  3420               	retlw	32	;' '
  1271  0782  3420               	retlw	32	;' '
  1272  0783  3420               	retlw	32	;' '
  1273  0784  3442               	retlw	66	;'B'
  1274  0785  3454               	retlw	84	;'T'
  1275  0786  3420               	retlw	32	;' '
  1276  0787  3420               	retlw	32	;' '
  1277  0788  3400               	retlw	0
  1278  0789                     STR_121:	
  1279  0789  3444               	retlw	68	;'D'
  1280  078A  3445               	retlw	69	;'E'
  1281  078B  3453               	retlw	83	;'S'
  1282  078C  3443               	retlw	67	;'C'
  1283  078D  344F               	retlw	79	;'O'
  1284  078E  344E               	retlw	78	;'N'
  1285  078F  3445               	retlw	69	;'E'
  1286  0790  3443               	retlw	67	;'C'
  1287  0791  3454               	retlw	84	;'T'
  1288  0792  3441               	retlw	65	;'A'
  1289  0793  3452               	retlw	82	;'R'
  1290  0794  3420               	retlw	32	;' '
  1291  0795  3442               	retlw	66	;'B'
  1292  0796  3454               	retlw	84	;'T'
  1293  0797  3420               	retlw	32	;' '
  1294  0798  3420               	retlw	32	;' '
  1295  0799  3400               	retlw	0
  1296  079A                     STR_113:	
  1297  079A  3420               	retlw	32	;' '
  1298  079B  3443               	retlw	67	;'C'
  1299  079C  344F               	retlw	79	;'O'
  1300  079D  344E               	retlw	78	;'N'
  1301  079E  3446               	retlw	70	;'F'
  1302  079F  3449               	retlw	73	;'I'
  1303  07A0  3452               	retlw	82	;'R'
  1304  07A1  344D               	retlw	77	;'M'
  1305  07A2  3441               	retlw	65	;'A'
  1306  07A3  3420               	retlw	32	;' '
  1307  07A4  3454               	retlw	84	;'T'
  1308  07A5  3452               	retlw	82	;'R'
  1309  07A6  344F               	retlw	79	;'O'
  1310  07A7  3443               	retlw	67	;'C'
  1311  07A8  3441               	retlw	65	;'A'
  1312  07A9  3420               	retlw	32	;' '
  1313  07AA  3400               	retlw	0
  1314  07AB                     STR_123:	
  1315  07AB  3431               	retlw	49	;'1'
  1316  07AC  3420               	retlw	32	;' '
  1317  07AD  3432               	retlw	50	;'2'
  1318  07AE  3420               	retlw	32	;' '
  1319  07AF  3433               	retlw	51	;'3'
  1320  07B0  3420               	retlw	32	;' '
  1321  07B1  3434               	retlw	52	;'4'
  1322  07B2  3420               	retlw	32	;' '
  1323  07B3  3420               	retlw	32	;' '
  1324  07B4  3435               	retlw	53	;'5'
  1325  07B5  3420               	retlw	32	;' '
  1326  07B6  3436               	retlw	54	;'6'
  1327  07B7  3420               	retlw	32	;' '
  1328  07B8  3437               	retlw	55	;'7'
  1329  07B9  3420               	retlw	32	;' '
  1330  07BA  3438               	retlw	56	;'8'
  1331  07BB  3400               	retlw	0
  1332  07BC                     STR_119:	
  1333  07BC  3442               	retlw	66	;'B'
  1334  07BD  344C               	retlw	76	;'L'
  1335  07BE  3455               	retlw	85	;'U'
  1336  07BF  3445               	retlw	69	;'E'
  1337  07C0  3454               	retlw	84	;'T'
  1338  07C1  344F               	retlw	79	;'O'
  1339  07C2  344F               	retlw	79	;'O'
  1340  07C3  3454               	retlw	84	;'T'
  1341  07C4  3448               	retlw	72	;'H'
  1342  07C5  3420               	retlw	32	;' '
  1343  07C6  343C               	retlw	60	;'<'
  1344  07C7  342D               	retlw	45	;'-'
  1345  07C8  342D               	retlw	45	;'-'
  1346  07C9  342D               	retlw	45	;'-'
  1347  07CA  342D               	retlw	45	;'-'
  1348  07CB  343E               	retlw	62	;'>'
  1349  07CC  3400               	retlw	0
  1350  07CD                     STR_107:	
  1351  07CD  344D               	retlw	77	;'M'
  1352  07CE  344F               	retlw	79	;'O'
  1353  07CF  3444               	retlw	68	;'D'
  1354  07D0  3455               	retlw	85	;'U'
  1355  07D1  344C               	retlw	76	;'L'
  1356  07D2  344F               	retlw	79	;'O'
  1357  07D3  3420               	retlw	32	;' '
  1358  07D4  3420               	retlw	32	;' '
  1359  07D5  3444               	retlw	68	;'D'
  1360  07D6  3445               	retlw	69	;'E'
  1361  07D7  3453               	retlw	83	;'S'
  1362  07D8  3445               	retlw	69	;'E'
  1363  07D9  344A               	retlw	74	;'J'
  1364  07DA  3441               	retlw	65	;'A'
  1365  07DB  3444               	retlw	68	;'D'
  1366  07DC  344F               	retlw	79	;'O'
  1367  07DD  3400               	retlw	0
  1368  07DE                     STR_108:	
  1369  07DE  3445               	retlw	69	;'E'
  1370  07DF  3453               	retlw	83	;'S'
  1371  07E0  3454               	retlw	84	;'T'
  1372  07E1  3445               	retlw	69	;'E'
  1373  07E2  3449               	retlw	73	;'I'
  1374  07E3  3452               	retlw	82	;'R'
  1375  07E4  3441               	retlw	65	;'A'
  1376  07E5  3420               	retlw	32	;' '
  1377  07E6  3420               	retlw	32	;' '
  1378  07E7  3420               	retlw	32	;' '
  1379  07E8  3420               	retlw	32	;' '
  1380  07E9  3420               	retlw	32	;' '
  1381  07EA  3420               	retlw	32	;' '
  1382  07EB  3443               	retlw	67	;'C'
  1383  07EC  344C               	retlw	76	;'L'
  1384  07ED  3450               	retlw	80	;'P'
  1385  07EE  3400               	retlw	0
  1386  07EF                     STR_89:	
  1387  07EF  3441               	retlw	65	;'A'
  1388  07F0  3454               	retlw	84	;'T'
  1389  07F1  342B               	retlw	43	;'+'
  1390  07F2  3450               	retlw	80	;'P'
  1391  07F3  3453               	retlw	83	;'S'
  1392  07F4  3457               	retlw	87	;'W'
  1393  07F5  3444               	retlw	68	;'D'
  1394  07F6  343D               	retlw	61	;'='
  1395  07F7  3422               	retlw	34	;'"'
  1396  07F8  3430               	retlw	48	;'0'
  1397  07F9  3439               	retlw	57	;'9'
  1398  07FA  3431               	retlw	49	;'1'
  1399  07FB  3430               	retlw	48	;'0'
  1400  07FC  3422               	retlw	34	;'"'
  1401  07FD  340D               	retlw	13
  1402  07FE  340A               	retlw	10
  1403  07FF  3400               	retlw	0
  1404  0800                     STR_68:	
  1405  0800  3420               	retlw	32	;' '
  1406  0801  3420               	retlw	32	;' '
  1407  0802  3420               	retlw	32	;' '
  1408  0803  3420               	retlw	32	;' '
  1409  0804  3420               	retlw	32	;' '
  1410  0805  3420               	retlw	32	;' '
  1411  0806  3420               	retlw	32	;' '
  1412  0807  3420               	retlw	32	;' '
  1413  0808  3420               	retlw	32	;' '
  1414  0809  3420               	retlw	32	;' '
  1415  080A  3420               	retlw	32	;' '
  1416  080B  3420               	retlw	32	;' '
  1417  080C  3420               	retlw	32	;' '
  1418  080D  3420               	retlw	32	;' '
  1419  080E  3420               	retlw	32	;' '
  1420  080F  3420               	retlw	32	;' '
  1421  0810  3400               	retlw	0
  1422  0811                     STR_75:	
  1423  0811  3420               	retlw	32	;' '
  1424  0812  3420               	retlw	32	;' '
  1425  0813  3420               	retlw	32	;' '
  1426  0814  3420               	retlw	32	;' '
  1427  0815  3420               	retlw	32	;' '
  1428  0816  3420               	retlw	32	;' '
  1429  0817  3441               	retlw	65	;'A'
  1430  0818  3452               	retlw	82	;'R'
  1431  0819  3452               	retlw	82	;'R'
  1432  081A  3449               	retlw	73	;'I'
  1433  081B  3420               	retlw	32	;' '
  1434  081C  3420               	retlw	32	;' '
  1435  081D  3420               	retlw	32	;' '
  1436  081E  3420               	retlw	32	;' '
  1437  081F  3420               	retlw	32	;' '
  1438  0820  3420               	retlw	32	;' '
  1439  0821  3400               	retlw	0
  1440  0822                     STR_76:	
  1441  0822  3420               	retlw	32	;' '
  1442  0823  3420               	retlw	32	;' '
  1443  0824  3420               	retlw	32	;' '
  1444  0825  3420               	retlw	32	;' '
  1445  0826  3420               	retlw	32	;' '
  1446  0827  3445               	retlw	69	;'E'
  1447  0828  3447               	retlw	71	;'G'
  1448  0829  3455               	retlw	85	;'U'
  1449  082A  3441               	retlw	65	;'A'
  1450  082B  3441               	retlw	65	;'A'
  1451  082C  3441               	retlw	65	;'A'
  1452  082D  3420               	retlw	32	;' '
  1453  082E  3420               	retlw	32	;' '
  1454  082F  3420               	retlw	32	;' '
  1455  0830  3420               	retlw	32	;' '
  1456  0831  3420               	retlw	32	;' '
  1457  0832  3400               	retlw	0
  1458  0833                     STR_69:	
  1459  0833  3447               	retlw	71	;'G'
  1460  0834  3455               	retlw	85	;'U'
  1461  0835  3449               	retlw	73	;'I'
  1462  0836  342E               	retlw	46	;'.'
  1463  0837  3420               	retlw	32	;' '
  1464  0838  3452               	retlw	82	;'R'
  1465  0839  3449               	retlw	73	;'I'
  1466  083A  3442               	retlw	66	;'B'
  1467  083B  3445               	retlw	69	;'E'
  1468  083C  3449               	retlw	73	;'I'
  1469  083D  3452               	retlw	82	;'R'
  1470  083E  344F               	retlw	79	;'O'
  1471  083F  3420               	retlw	32	;' '
  1472  0840  3420               	retlw	32	;' '
  1473  0841  3420               	retlw	32	;' '
  1474  0842  3420               	retlw	32	;' '
  1475  0843  3400               	retlw	0
  1476  0844                     STR_6:	
  1477  0844  3420               	retlw	32	;' '
  1478  0845  3420               	retlw	32	;' '
  1479  0846  3420               	retlw	32	;' '
  1480  0847  3420               	retlw	32	;' '
  1481  0848  3454               	retlw	84	;'T'
  1482  0849  3465               	retlw	101	;'e'
  1483  084A  3463               	retlw	99	;'c'
  1484  084B  346E               	retlw	110	;'n'
  1485  084C  346F               	retlw	111	;'o'
  1486  084D  346C               	retlw	108	;'l'
  1487  084E  346F               	retlw	111	;'o'
  1488  084F  3467               	retlw	103	;'g'
  1489  0850  3420               	retlw	32	;' '
  1490  0851  3420               	retlw	32	;' '
  1491  0852  3420               	retlw	32	;' '
  1492  0853  3420               	retlw	32	;' '
  1493  0854  3400               	retlw	0
  1494  0855                     STR_8:	
  1495  0855  3420               	retlw	32	;' '
  1496  0856  3420               	retlw	32	;' '
  1497  0857  3420               	retlw	32	;' '
  1498  0858  342D               	retlw	45	;'-'
  1499  0859  342D               	retlw	45	;'-'
  1500  085A  342D               	retlw	45	;'-'
  1501  085B  342D               	retlw	45	;'-'
  1502  085C  342D               	retlw	45	;'-'
  1503  085D  342D               	retlw	45	;'-'
  1504  085E  342D               	retlw	45	;'-'
  1505  085F  342D               	retlw	45	;'-'
  1506  0860  342D               	retlw	45	;'-'
  1507  0861  342D               	retlw	45	;'-'
  1508  0862  3420               	retlw	32	;' '
  1509  0863  3420               	retlw	32	;' '
  1510  0864  3420               	retlw	32	;' '
  1511  0865  3400               	retlw	0
  1512  0866                     STR_66:	
  1513  0866  3457               	retlw	87	;'W'
  1514  0867  3441               	retlw	65	;'A'
  1515  0868  344C               	retlw	76	;'L'
  1516  0869  344C               	retlw	76	;'L'
  1517  086A  3441               	retlw	65	;'A'
  1518  086B  3443               	retlw	67	;'C'
  1519  086C  3445               	retlw	69	;'E'
  1520  086D  3420               	retlw	32	;' '
  1521  086E  3450               	retlw	80	;'P'
  1522  086F  3449               	retlw	73	;'I'
  1523  0870  3452               	retlw	82	;'R'
  1524  0871  3445               	retlw	69	;'E'
  1525  0872  3453               	retlw	83	;'S'
  1526  0873  3420               	retlw	32	;' '
  1527  0874  3420               	retlw	32	;' '
  1528  0875  3420               	retlw	32	;' '
  1529  0876  3400               	retlw	0
  1530  0877                     STR_73:	
  1531  0877  344C               	retlw	76	;'L'
  1532  0878  3449               	retlw	73	;'I'
  1533  0879  344E               	retlw	78	;'N'
  1534  087A  3443               	retlw	67	;'C'
  1535  087B  344F               	retlw	79	;'O'
  1536  087C  344E               	retlw	78	;'N'
  1537  087D  3420               	retlw	32	;' '
  1538  087E  344E               	retlw	78	;'N'
  1539  087F  344F               	retlw	79	;'O'
  1540  0880  3456               	retlw	86	;'V'
  1541  0881  3441               	retlw	65	;'A'
  1542  0882  3449               	retlw	73	;'I'
  1543  0883  3453               	retlw	83	;'S'
  1544  0884  3420               	retlw	32	;' '
  1545  0885  3420               	retlw	32	;' '
  1546  0886  3420               	retlw	32	;' '
  1547  0887  3400               	retlw	0
  1548  0888                     STR_9:	
  1549  0888  3420               	retlw	32	;' '
  1550  0889  3420               	retlw	32	;' '
  1551  088A  3420               	retlw	32	;' '
  1552  088B  3450               	retlw	80	;'P'
  1553  088C  3461               	retlw	97	;'a'
  1554  088D  3472               	retlw	114	;'r'
  1555  088E  3465               	retlw	101	;'e'
  1556  088F  3461               	retlw	97	;'a'
  1557  0890  346D               	retlw	109	;'m'
  1558  0891  3465               	retlw	101	;'e'
  1559  0892  346E               	retlw	110	;'n'
  1560  0893  3474               	retlw	116	;'t'
  1561  0894  346F               	retlw	111	;'o'
  1562  0895  3420               	retlw	32	;' '
  1563  0896  3420               	retlw	32	;' '
  1564  0897  3420               	retlw	32	;' '
  1565  0898  3400               	retlw	0
  1566  0899                     STR_7:	
  1567  0899  3420               	retlw	32	;' '
  1568  089A  3420               	retlw	32	;' '
  1569  089B  3420               	retlw	32	;' '
  1570  089C  3443               	retlw	67	;'C'
  1571  089D  346F               	retlw	111	;'o'
  1572  089E  346E               	retlw	110	;'n'
  1573  089F  3466               	retlw	102	;'f'
  1574  08A0  3469               	retlw	105	;'i'
  1575  08A1  3467               	retlw	103	;'g'
  1576  08A2  3475               	retlw	117	;'u'
  1577  08A3  3472               	retlw	114	;'r'
  1578  08A4  3461               	retlw	97	;'a'
  1579  08A5  3472               	retlw	114	;'r'
  1580  08A6  3420               	retlw	32	;' '
  1581  08A7  3420               	retlw	32	;' '
  1582  08A8  3420               	retlw	32	;' '
  1583  08A9  3400               	retlw	0
  1584  08AA                     STR_67:	
  1585  08AA  344D               	retlw	77	;'M'
  1586  08AB  3441               	retlw	65	;'A'
  1587  08AC  3454               	retlw	84	;'T'
  1588  08AD  3445               	retlw	69	;'E'
  1589  08AE  3455               	retlw	85	;'U'
  1590  08AF  3453               	retlw	83	;'S'
  1591  08B0  3420               	retlw	32	;' '
  1592  08B1  3450               	retlw	80	;'P'
  1593  08B2  3449               	retlw	73	;'I'
  1594  08B3  344E               	retlw	78	;'N'
  1595  08B4  3448               	retlw	72	;'H'
  1596  08B5  3445               	retlw	69	;'E'
  1597  08B6  3449               	retlw	73	;'I'
  1598  08B7  3452               	retlw	82	;'R'
  1599  08B8  344F               	retlw	79	;'O'
  1600  08B9  3420               	retlw	32	;' '
  1601  08BA  3400               	retlw	0
  1602  08BB                     STR_11:	
  1603  08BB  3420               	retlw	32	;' '
  1604  08BC  3445               	retlw	69	;'E'
  1605  08BD  346E               	retlw	110	;'n'
  1606  08BE  3476               	retlw	118	;'v'
  1607  08BF  3469               	retlw	105	;'i'
  1608  08C0  346F               	retlw	111	;'o'
  1609  08C1  3420               	retlw	32	;' '
  1610  08C2  3464               	retlw	100	;'d'
  1611  08C3  3465               	retlw	101	;'e'
  1612  08C4  3420               	retlw	32	;' '
  1613  08C5  3444               	retlw	68	;'D'
  1614  08C6  3461               	retlw	97	;'a'
  1615  08C7  3464               	retlw	100	;'d'
  1616  08C8  346F               	retlw	111	;'o'
  1617  08C9  3473               	retlw	115	;'s'
  1618  08CA  3420               	retlw	32	;' '
  1619  08CB  3400               	retlw	0
  1620  08CC                     STR_78:	
  1621  08CC  3421               	retlw	33	;'!'
  1622  08CD  342A               	retlw	42	;'*'
  1623  08CE  342D               	retlw	45	;'-'
  1624  08CF  342A               	retlw	42	;'*'
  1625  08D0  3420               	retlw	32	;' '
  1626  08D1  3445               	retlw	69	;'E'
  1627  08D2  3447               	retlw	71	;'G'
  1628  08D3  3455               	retlw	85	;'U'
  1629  08D4  3441               	retlw	65	;'A'
  1630  08D5  3441               	retlw	65	;'A'
  1631  08D6  3441               	retlw	65	;'A'
  1632  08D7  3420               	retlw	32	;' '
  1633  08D8  342A               	retlw	42	;'*'
  1634  08D9  342D               	retlw	45	;'-'
  1635  08DA  342A               	retlw	42	;'*'
  1636  08DB  3421               	retlw	33	;'!'
  1637  08DC  3400               	retlw	0
  1638  08DD                     STR_80:	
  1639  08DD  3431               	retlw	49	;'1'
  1640  08DE  3433               	retlw	51	;'3'
  1641  08DF  3420               	retlw	32	;' '
  1642  08E0  3420               	retlw	32	;' '
  1643  08E1  3420               	retlw	32	;' '
  1644  08E2  3445               	retlw	69	;'E'
  1645  08E3  3447               	retlw	71	;'G'
  1646  08E4  3455               	retlw	85	;'U'
  1647  08E5  3441               	retlw	65	;'A'
  1648  08E6  3441               	retlw	65	;'A'
  1649  08E7  3441               	retlw	65	;'A'
  1650  08E8  3420               	retlw	32	;' '
  1651  08E9  3420               	retlw	32	;' '
  1652  08EA  3420               	retlw	32	;' '
  1653  08EB  3435               	retlw	53	;'5'
  1654  08EC  3430               	retlw	48	;'0'
  1655  08ED  3400               	retlw	0
  1656  08EE                     STR_79:	
  1657  08EE  3435               	retlw	53	;'5'
  1658  08EF  3430               	retlw	48	;'0'
  1659  08F0  3420               	retlw	32	;' '
  1660  08F1  3420               	retlw	32	;' '
  1661  08F2  3420               	retlw	32	;' '
  1662  08F3  3420               	retlw	32	;' '
  1663  08F4  3441               	retlw	65	;'A'
  1664  08F5  3452               	retlw	82	;'R'
  1665  08F6  3452               	retlw	82	;'R'
  1666  08F7  3449               	retlw	73	;'I'
  1667  08F8  3420               	retlw	32	;' '
  1668  08F9  3420               	retlw	32	;' '
  1669  08FA  3420               	retlw	32	;' '
  1670  08FB  3420               	retlw	32	;' '
  1671  08FC  3431               	retlw	49	;'1'
  1672  08FD  3433               	retlw	51	;'3'
  1673  08FE  3400               	retlw	0
  1674  08FF                     STR_81:	
  1675  08FF  343A               	retlw	58	;':'
  1676  0900  3433               	retlw	51	;'3'
  1677  0901  3420               	retlw	32	;' '
  1678  0902  342A               	retlw	42	;'*'
  1679  0903  342D               	retlw	45	;'-'
  1680  0904  342A               	retlw	42	;'*'
  1681  0905  3441               	retlw	65	;'A'
  1682  0906  3452               	retlw	82	;'R'
  1683  0907  3452               	retlw	82	;'R'
  1684  0908  3449               	retlw	73	;'I'
  1685  0909  342A               	retlw	42	;'*'
  1686  090A  342D               	retlw	45	;'-'
  1687  090B  342A               	retlw	42	;'*'
  1688  090C  3420               	retlw	32	;' '
  1689  090D  3458               	retlw	88	;'X'
  1690  090E  3444               	retlw	68	;'D'
  1691  090F  3400               	retlw	0
  1692  0910                     STR_77:	
  1693  0910  3458               	retlw	88	;'X'
  1694  0911  3444               	retlw	68	;'D'
  1695  0912  3420               	retlw	32	;' '
  1696  0913  342A               	retlw	42	;'*'
  1697  0914  342D               	retlw	45	;'-'
  1698  0915  342A               	retlw	42	;'*'
  1699  0916  3441               	retlw	65	;'A'
  1700  0917  3452               	retlw	82	;'R'
  1701  0918  3452               	retlw	82	;'R'
  1702  0919  3449               	retlw	73	;'I'
  1703  091A  342A               	retlw	42	;'*'
  1704  091B  342D               	retlw	45	;'-'
  1705  091C  342A               	retlw	42	;'*'
  1706  091D  3420               	retlw	32	;' '
  1707  091E  3458               	retlw	88	;'X'
  1708  091F  3444               	retlw	68	;'D'
  1709  0920  3400               	retlw	0
  1710  0921                     STR_1:	
  1711  0921  345F               	retlw	95	;'_'
  1712  0922  345F               	retlw	95	;'_'
  1713  0923  3420               	retlw	32	;' '
  1714  0924  3420               	retlw	32	;' '
  1715  0925  3420               	retlw	32	;' '
  1716  0926  3420               	retlw	32	;' '
  1717  0927  3420               	retlw	32	;' '
  1718  0928  3420               	retlw	32	;' '
  1719  0929  3420               	retlw	32	;' '
  1720  092A  3420               	retlw	32	;' '
  1721  092B  3420               	retlw	32	;' '
  1722  092C  3420               	retlw	32	;' '
  1723  092D  3420               	retlw	32	;' '
  1724  092E  3420               	retlw	32	;' '
  1725  092F  345F               	retlw	95	;'_'
  1726  0930  345F               	retlw	95	;'_'
  1727  0931  3400               	retlw	0
  1728  0932                     STR_86:	
  1729  0932  3441               	retlw	65	;'A'
  1730  0933  3454               	retlw	84	;'T'
  1731  0934  342B               	retlw	43	;'+'
  1732  0935  3449               	retlw	73	;'I'
  1733  0936  344E               	retlw	78	;'N'
  1734  0937  3451               	retlw	81	;'Q'
  1735  0938  344D               	retlw	77	;'M'
  1736  0939  343D               	retlw	61	;'='
  1737  093A  3430               	retlw	48	;'0'
  1738  093B  342C               	retlw	44	;','
  1739  093C  3435               	retlw	53	;'5'
  1740  093D  342C               	retlw	44	;','
  1741  093E  3435               	retlw	53	;'5'
  1742  093F  340D               	retlw	13
  1743  0940  340A               	retlw	10
  1744  0941  3400               	retlw	0
  1745  0942                     STR_118:	
  1746  0942  3446               	retlw	70	;'F'
  1747  0943  3472               	retlw	114	;'r'
  1748  0944  3461               	retlw	97	;'a'
  1749  0945  346D               	retlw	109	;'m'
  1750  0946  3469               	retlw	105	;'i'
  1751  0947  346E               	retlw	110	;'n'
  1752  0948  3467               	retlw	103	;'g'
  1753  0949  3420               	retlw	32	;' '
  1754  094A  3445               	retlw	69	;'E'
  1755  094B  3472               	retlw	114	;'r'
  1756  094C  3472               	retlw	114	;'r'
  1757  094D  346F               	retlw	111	;'o'
  1758  094E  3472               	retlw	114	;'r'
  1759  094F  3400               	retlw	0
  1760  0950                     STR_117:	
  1761  0950  344F               	retlw	79	;'O'
  1762  0951  3476               	retlw	118	;'v'
  1763  0952  3465               	retlw	101	;'e'
  1764  0953  3472               	retlw	114	;'r'
  1765  0954  3472               	retlw	114	;'r'
  1766  0955  3475               	retlw	117	;'u'
  1767  0956  346E               	retlw	110	;'n'
  1768  0957  3420               	retlw	32	;' '
  1769  0958  3445               	retlw	69	;'E'
  1770  0959  3472               	retlw	114	;'r'
  1771  095A  3472               	retlw	114	;'r'
  1772  095B  346F               	retlw	111	;'o'
  1773  095C  3472               	retlw	114	;'r'
  1774  095D  3400               	retlw	0
  1775  095E                     STR_110:	
  1776  095E  3420               	retlw	32	;' '
  1777  095F  3450               	retlw	80	;'P'
  1778  0960  342F               	retlw	47	;'/'
  1779  0961  3420               	retlw	32	;' '
  1780  0962  3445               	retlw	69	;'E'
  1781  0963  3473               	retlw	115	;'s'
  1782  0964  3474               	retlw	116	;'t'
  1783  0965  3465               	retlw	101	;'e'
  1784  0966  3469               	retlw	105	;'i'
  1785  0967  3472               	retlw	114	;'r'
  1786  0968  3461               	retlw	97	;'a'
  1787  0969  3420               	retlw	32	;' '
  1788  096A  3400               	retlw	0
  1789  096B                     STR_85:	
  1790  096B  3441               	retlw	65	;'A'
  1791  096C  3454               	retlw	84	;'T'
  1792  096D  342B               	retlw	43	;'+'
  1793  096E  3443               	retlw	67	;'C'
  1794  096F  344D               	retlw	77	;'M'
  1795  0970  344F               	retlw	79	;'O'
  1796  0971  3444               	retlw	68	;'D'
  1797  0972  3445               	retlw	69	;'E'
  1798  0973  343D               	retlw	61	;'='
  1799  0974  3431               	retlw	49	;'1'
  1800  0975  340D               	retlw	13
  1801  0976  340A               	retlw	10
  1802  0977  3400               	retlw	0
  1803  0978                     STR_92:	
  1804  0978  3441               	retlw	65	;'A'
  1805  0979  3454               	retlw	84	;'T'
  1806  097A  342B               	retlw	43	;'+'
  1807  097B  3452               	retlw	82	;'R'
  1808  097C  344F               	retlw	79	;'O'
  1809  097D  344C               	retlw	76	;'L'
  1810  097E  3445               	retlw	69	;'E'
  1811  097F  343D               	retlw	61	;'='
  1812  0980  3430               	retlw	48	;'0'
  1813  0981  340D               	retlw	13
  1814  0982  340A               	retlw	10
  1815  0983  3400               	retlw	0
  1816  0984                     STR_84:	
  1817  0984  3441               	retlw	65	;'A'
  1818  0985  3454               	retlw	84	;'T'
  1819  0986  342B               	retlw	43	;'+'
  1820  0987  3452               	retlw	82	;'R'
  1821  0988  344F               	retlw	79	;'O'
  1822  0989  344C               	retlw	76	;'L'
  1823  098A  3445               	retlw	69	;'E'
  1824  098B  343D               	retlw	61	;'='
  1825  098C  3431               	retlw	49	;'1'
  1826  098D  340D               	retlw	13
  1827  098E  340A               	retlw	10
  1828  098F  3400               	retlw	0
  1829  0990                     STR_109:	
  1830  0990  3420               	retlw	32	;' '
  1831  0991  3445               	retlw	69	;'E'
  1832  0992  346E               	retlw	110	;'n'
  1833  0993  3476               	retlw	118	;'v'
  1834  0994  3469               	retlw	105	;'i'
  1835  0995  3461               	retlw	97	;'a'
  1836  0996  346E               	retlw	110	;'n'
  1837  0997  3464               	retlw	100	;'d'
  1838  0998  346F               	retlw	111	;'o'
  1839  0999  3420               	retlw	32	;' '
  1840  099A  3400               	retlw	0
  1841  099B                     STR_91:	
  1842  099B  3441               	retlw	65	;'A'
  1843  099C  3454               	retlw	84	;'T'
  1844  099D  342B               	retlw	43	;'+'
  1845  099E  3452               	retlw	82	;'R'
  1846  099F  344D               	retlw	77	;'M'
  1847  09A0  3441               	retlw	65	;'A'
  1848  09A1  3441               	retlw	65	;'A'
  1849  09A2  3444               	retlw	68	;'D'
  1850  09A3  340D               	retlw	13
  1851  09A4  340A               	retlw	10
  1852  09A5  3400               	retlw	0
  1853  09A6                     STR_87:	
  1854  09A6  3441               	retlw	65	;'A'
  1855  09A7  3454               	retlw	84	;'T'
  1856  09A8  342B               	retlw	43	;'+'
  1857  09A9  3449               	retlw	73	;'I'
  1858  09AA  344E               	retlw	78	;'N'
  1859  09AB  3449               	retlw	73	;'I'
  1860  09AC  3454               	retlw	84	;'T'
  1861  09AD  340D               	retlw	13
  1862  09AE  340A               	retlw	10
  1863  09AF  3400               	retlw	0
  1864  09B0                     STR_112:	
  1865  09B0  3420               	retlw	32	;' '
  1866  09B1  3450               	retlw	80	;'P'
  1867  09B2  342F               	retlw	47	;'/'
  1868  09B3  3420               	retlw	32	;' '
  1869  09B4  3443               	retlw	67	;'C'
  1870  09B5  344C               	retlw	76	;'L'
  1871  09B6  3450               	retlw	80	;'P'
  1872  09B7  3420               	retlw	32	;' '
  1873  09B8  3400               	retlw	0
  1874  09B9                     STR_88:	
  1875  09B9  3441               	retlw	65	;'A'
  1876  09BA  3454               	retlw	84	;'T'
  1877  09BB  342B               	retlw	43	;'+'
  1878  09BC  3449               	retlw	73	;'I'
  1879  09BD  344E               	retlw	78	;'N'
  1880  09BE  3451               	retlw	81	;'Q'
  1881  09BF  340D               	retlw	13
  1882  09C0  340A               	retlw	10
  1883  09C1  3400               	retlw	0
  1884  09C2                     STR_47:	
  1885  09C2  3445               	retlw	69	;'E'
  1886  09C3  3453               	retlw	83	;'S'
  1887  09C4  3454               	retlw	84	;'T'
  1888  09C5  3445               	retlw	69	;'E'
  1889  09C6  3449               	retlw	73	;'I'
  1890  09C7  3452               	retlw	82	;'R'
  1891  09C8  3441               	retlw	65	;'A'
  1892  09C9  3400               	retlw	0
  1893  09CA                     STR_51:	
  1894  09CA  3450               	retlw	80	;'P'
  1895  09CB  3441               	retlw	65	;'A'
  1896  09CC  3452               	retlw	82	;'R'
  1897  09CD  3445               	retlw	69	;'E'
  1898  09CE  3441               	retlw	65	;'A'
  1899  09CF  3452               	retlw	82	;'R'
  1900  09D0  3400               	retlw	0
  1901  09D1                     STR_57:	
  1902  09D1  342E               	retlw	46	;'.'
  1903  09D2  3420               	retlw	32	;' '
  1904  09D3  3420               	retlw	32	;' '
  1905  09D4  3400               	retlw	0
  1906  09D5                     STR_58:	
  1907  09D5  3420               	retlw	32	;' '
  1908  09D6  342E               	retlw	46	;'.'
  1909  09D7  3420               	retlw	32	;' '
  1910  09D8  3400               	retlw	0
  1911  09D9                     STR_64:	
  1912  09D9  342E               	retlw	46	;'.'
  1913  09DA  342E               	retlw	46	;'.'
  1914  09DB  3420               	retlw	32	;' '
  1915  09DC  3400               	retlw	0
  1916  09DD                     STR_59:	
  1917  09DD  3420               	retlw	32	;' '
  1918  09DE  3420               	retlw	32	;' '
  1919  09DF  342E               	retlw	46	;'.'
  1920  09E0  3400               	retlw	0
  1921  09E1                     STR_65:	
  1922  09E1  342E               	retlw	46	;'.'
  1923  09E2  342E               	retlw	46	;'.'
  1924  09E3  342E               	retlw	46	;'.'
  1925  09E4  3400               	retlw	0
  1926  09E5                     STR_16:	
  1927  09E5  3431               	retlw	49	;'1'
  1928  09E6  3400               	retlw	0
  1929  09E7                     STR_14:	
  1930  09E7  3432               	retlw	50	;'2'
  1931  09E8  3400               	retlw	0
  1932  09E9                     STR_22:	
  1933  09E9  3434               	retlw	52	;'4'
  1934  09EA  3400               	retlw	0
  1935  09EB                     STR_26:	
  1936  09EB  3435               	retlw	53	;'5'
  1937  09EC  3400               	retlw	0
  1938  09ED                     STR_30:	
  1939  09ED  3436               	retlw	54	;'6'
  1940  09EE  3400               	retlw	0
  1941  09EF                     STR_34:	
  1942  09EF  3437               	retlw	55	;'7'
  1943  09F0  3400               	retlw	0
  1944  09F1                     STR_2:	
  1945  09F1  3442               	retlw	66	;'B'
  1946  09F2  3400               	retlw	0
  1947  09F3                     STR_5:	
  1948  09F3  3465               	retlw	101	;'e'
  1949  09F4  3400               	retlw	0
  1950  09F5                     STR_3:	
  1951  09F5  346C               	retlw	108	;'l'
  1952  09F6  3400               	retlw	0
  1953  09F7                     STR_4:	
  1954  09F7  3475               	retlw	117	;'u'
  1955  09F8  3400               	retlw	0
  1956  07FF                     
  1957                           ; #config settings
  1958  0000                     
  1959                           	psect	cinit
  1960  0015                     start_initialization:	
  1961  0015                     __initialization:	
  1962                           
  1963                           ; Clear objects allocated to COMMON
  1964  0015  01FC               	clrf	__pbssCOMMON& (0+127)
  1965                           
  1966                           ; Clear objects allocated to BANK0
  1967  0016  1383               	bcf	3,7	;select IRP bank0
  1968  0017  3049               	movlw	low __pbssBANK0
  1969  0018  0084               	movwf	4
  1970  0019  3056               	movlw	low (__pbssBANK0+13)
  1971  001A  120A  118A  25F8  120A  118A  	fcall	clear_ram0
  1972                           
  1973                           ; Clear objects allocated to BANK1
  1974  001F  30A0               	movlw	low __pbssBANK1
  1975  0020  0084               	movwf	4
  1976  0021  30BE               	movlw	low (__pbssBANK1+30)
  1977  0022  120A  118A  25F8   	fcall	clear_ram0
  1978  0025                     end_of_initialization:	
  1979                           ;End of C runtime variable initialization code
  1980                           
  1981  0025                     __end_of__initialization:	
  1982  0025  0183               	clrf	3
  1983  0026  120A  118A  2829   	ljmp	_main	;jump to C main() function
  1984                           
  1985                           	psect	bssCOMMON
  1986  007C                     __pbssCOMMON:	
  1987  007C                     _fifoHead:	
  1988  007C                     	ds	1
  1989                           
  1990                           	psect	bssBANK0
  1991  0049                     __pbssBANK0:	
  1992  0049                     _t0cont:	
  1993  0049                     	ds	2
  1994  004B                     _t0final:	
  1995  004B                     	ds	2
  1996  004D                     _fifoTail:	
  1997  004D                     	ds	1
  1998  004E                     _estadoAnteriorB3:	
  1999  004E                     	ds	1
  2000  004F                     _estadoAnteriorB2:	
  2001  004F                     	ds	1
  2002  0050                     _estadoAnteriorB1:	
  2003  0050                     	ds	1
  2004  0051                     _serial:	
  2005  0051                     	ds	1
  2006  0052                     _comp:	
  2007  0052                     	ds	1
  2008  0053                     _tdez:	
  2009  0053                     	ds	1
  2010  0054                     _tuni:	
  2011  0054                     	ds	1
  2012  0055                     _rhex:	
  2013  0055                     	ds	1
  2014                           
  2015                           	psect	bssBANK1
  2016  00A0                     __pbssBANK1:	
  2017  00A0                     _fifo:	
  2018  00A0                     	ds	30
  2019                           
  2020                           	psect	clrtext
  2021  05F8                     clear_ram0:	
  2022                           ;	Called with FSR containing the base address, and
  2023                           ;	W with the last address+1
  2024                           
  2025  05F8  0064               	clrwdt	;clear the watchdog before getting into this loop
  2026  05F9                     clrloop0:	
  2027  05F9  0180               	clrf	0	;clear RAM location pointed to by FSR
  2028  05FA  0A84               	incf	4,f	;increment pointer
  2029  05FB  0604               	xorwf	4,w	;XOR with final address
  2030  05FC  1903               	btfsc	3,2	;have we reached the end yet?
  2031  05FD  3400               	retlw	0	;all done for this memory range, return
  2032  05FE  0604               	xorwf	4,w	;XOR again to restore value
  2033  05FF  2DF9               	goto	clrloop0	;do the next byte
  2034                           
  2035                           	psect	cstackCOMMON
  2036  0070                     __pcstackCOMMON:	
  2037  0070                     ?_serialOut:	
  2038  0070                     ?_writeEUSART:	
  2039                           ; 1 bytes @ 0x0
  2040                           
  2041  0070                     ?_cmdLCD:	
  2042                           ; 1 bytes @ 0x0
  2043                           
  2044  0070                     ?_bordaSubidaB2:	
  2045                           ; 1 bytes @ 0x0
  2046                           
  2047  0070                     ?_bordaSubidaB3:	
  2048                           ; 1 bytes @ 0x0
  2049                           
  2050  0070                     ?_interrupt_EUSART_RX:	
  2051                           ; 1 bytes @ 0x0
  2052                           
  2053  0070                     ?_intt0_1ms:	
  2054                           ; 1 bytes @ 0x0
  2055                           
  2056  0070                     ??_intt0_1ms:	
  2057                           ; 1 bytes @ 0x0
  2058                           
  2059  0070                     ?_initTimer0:	
  2060                           ; 1 bytes @ 0x0
  2061                           
  2062  0070                     ?_resetErrorRxEUSART:	
  2063                           ; 1 bytes @ 0x0
  2064                           
  2065  0070                     ?_statusFIFO:	
  2066                           ; 1 bytes @ 0x0
  2067                           
  2068  0070                     ?_getFIFO:	
  2069                           ; 1 bytes @ 0x0
  2070                           
  2071  0070                     ?_errorRxEUSART:	
  2072                           ; 1 bytes @ 0x0
  2073                           
  2074  0070                     ?_putFIFO:	
  2075                           ; 1 bytes @ 0x0
  2076                           
  2077  0070                     ?_initSerial:	
  2078                           ; 1 bytes @ 0x0
  2079                           
  2080  0070                     ?_serialIn:	
  2081                           ; 1 bytes @ 0x0
  2082                           
  2083  0070                     ?_hexToAscii:	
  2084                           ; 1 bytes @ 0x0
  2085                           
  2086  0070                     ?_transmite:	
  2087                           ; 1 bytes @ 0x0
  2088                           
  2089  0070                     ?_logo:	
  2090                           ; 1 bytes @ 0x0
  2091                           
  2092  0070                     ?_textConfig:	
  2093                           ; 1 bytes @ 0x0
  2094                           
  2095  0070                     ?_textCMpar:	
  2096                           ; 1 bytes @ 0x0
  2097                           
  2098  0070                     ?_textCMdat:	
  2099                           ; 1 bytes @ 0x0
  2100                           
  2101  0070                     ?_textSelection1:	
  2102                           ; 1 bytes @ 0x0
  2103                           
  2104  0070                     ?_textSelection2:	
  2105                           ; 1 bytes @ 0x0
  2106                           
  2107  0070                     ?_textSelection3:	
  2108                           ; 1 bytes @ 0x0
  2109                           
  2110  0070                     ?_textSelection4:	
  2111                           ; 1 bytes @ 0x0
  2112                           
  2113  0070                     ?_textSelection5:	
  2114                           ; 1 bytes @ 0x0
  2115                           
  2116  0070                     ?_textSelection6:	
  2117                           ; 1 bytes @ 0x0
  2118                           
  2119  0070                     ?_textSelection7:	
  2120                           ; 1 bytes @ 0x0
  2121                           
  2122  0070                     ?_textSelection8:	
  2123                           ; 1 bytes @ 0x0
  2124                           
  2125  0070                     ?_textSelectionEST:	
  2126                           ; 1 bytes @ 0x0
  2127                           
  2128  0070                     ?_textSelectionCLP:	
  2129                           ; 1 bytes @ 0x0
  2130                           
  2131  0070                     ?_textLoading:	
  2132                           ; 1 bytes @ 0x0
  2133                           
  2134  0070                     ?_easterEgg:	
  2135                           ; 1 bytes @ 0x0
  2136                           
  2137  0070                     ?_initBT:	
  2138                           ; 1 bytes @ 0x0
  2139                           
  2140  0070                     ?_B1:	
  2141                           ; 1 bytes @ 0x0
  2142                           
  2143  0070                     ?_B2:	
  2144                           ; 1 bytes @ 0x0
  2145                           
  2146  0070                     ?_B3:	
  2147                           ; 1 bytes @ 0x0
  2148                           
  2149  0070                     ?_bordaSubidaB1:	
  2150                           ; 1 bytes @ 0x0
  2151                           
  2152  0070                     ?_master1:	
  2153                           ; 1 bytes @ 0x0
  2154                           
  2155  0070                     ?_slave1:	
  2156                           ; 1 bytes @ 0x0
  2157                           
  2158  0070                     ?_putLCD:	
  2159                           ; 1 bytes @ 0x0
  2160                           
  2161  0070                     ?_initLCD:	
  2162                           ; 1 bytes @ 0x0
  2163                           
  2164  0070                     ?_geral:	
  2165                           ; 1 bytes @ 0x0
  2166                           
  2167  0070                     ?_main:	
  2168                           ; 1 bytes @ 0x0
  2169                           
  2170  0070                     ?i1___awmod:	
  2171                           ; 1 bytes @ 0x0
  2172                           
  2173  0070                     i1___awmod@divisor:	
  2174                           ; 2 bytes @ 0x0
  2175                           
  2176                           
  2177                           ; 2 bytes @ 0x0
  2178  0070                     	ds	2
  2179  0072                     i1___awmod@dividend:	
  2180                           
  2181                           ; 2 bytes @ 0x2
  2182  0072                     	ds	2
  2183  0074                     ??i1___awmod:	
  2184                           
  2185                           ; 1 bytes @ 0x4
  2186  0074                     	ds	1
  2187  0075                     i1___awmod@counter:	
  2188                           
  2189                           ; 1 bytes @ 0x5
  2190  0075                     	ds	1
  2191  0076                     i1___awmod@sign:	
  2192                           
  2193                           ; 1 bytes @ 0x6
  2194  0076                     	ds	1
  2195  0077                     ??_putFIFO:	
  2196                           
  2197                           ; 1 bytes @ 0x7
  2198  0077                     	ds	4
  2199  007B                     putFIFO@c:	
  2200                           
  2201                           ; 1 bytes @ 0xB
  2202  007B                     	ds	1
  2203  007C                     ??_interrupt_EUSART_RX:	
  2204                           
  2205                           	psect	cstackBANK0
  2206  0020                     __pcstackBANK0:	
  2207                           ; 1 bytes @ 0xC
  2208                           
  2209  0020                     ??_geral:	
  2210                           
  2211                           ; 1 bytes @ 0x0
  2212  0020                     	ds	4
  2213  0024                     ??_serialOut:	
  2214  0024                     ??_writeEUSART:	
  2215                           ; 1 bytes @ 0x4
  2216                           
  2217  0024                     ??_cmdLCD:	
  2218                           ; 1 bytes @ 0x4
  2219                           
  2220  0024                     ??_bordaSubidaB3:	
  2221                           ; 1 bytes @ 0x4
  2222                           
  2223  0024                     ??_resetErrorRxEUSART:	
  2224                           ; 1 bytes @ 0x4
  2225                           
  2226  0024                     ??_errorRxEUSART:	
  2227                           ; 1 bytes @ 0x4
  2228                           
  2229  0024                     ??_serialIn:	
  2230                           ; 1 bytes @ 0x4
  2231                           
  2232  0024                     ??_hexToAscii:	
  2233                           ; 1 bytes @ 0x4
  2234                           
  2235  0024                     ?_asciiToHex:	
  2236                           ; 1 bytes @ 0x4
  2237                           
  2238  0024                     ??_initBT:	
  2239                           ; 1 bytes @ 0x4
  2240                           
  2241  0024                     ??_B1:	
  2242                           ; 1 bytes @ 0x4
  2243                           
  2244  0024                     ??_B2:	
  2245                           ; 1 bytes @ 0x4
  2246                           
  2247  0024                     ??_B3:	
  2248                           ; 1 bytes @ 0x4
  2249                           
  2250  0024                     ??_bordaSubidaB1:	
  2251                           ; 1 bytes @ 0x4
  2252                           
  2253  0024                     ??_putLCD:	
  2254                           ; 1 bytes @ 0x4
  2255                           
  2256  0024                     ?_setT0limite:	
  2257                           ; 1 bytes @ 0x4
  2258                           
  2259  0024                     ?___bmul:	
  2260                           ; 1 bytes @ 0x4
  2261                           
  2262  0024                     ?_statusT0:	
  2263                           ; 1 bytes @ 0x4
  2264                           
  2265  0024                     ?_statusT0limite:	
  2266                           ; 2 bytes @ 0x4
  2267                           
  2268  0024                     ?___awmod:	
  2269                           ; 2 bytes @ 0x4
  2270                           
  2271  0024                     ?___lldiv:	
  2272                           ; 2 bytes @ 0x4
  2273                           
  2274  0024                     asciiToHex@a2:	
  2275                           ; 4 bytes @ 0x4
  2276                           
  2277  0024                     writeEUSART@d:	
  2278                           ; 1 bytes @ 0x4
  2279                           
  2280  0024                     ___bmul@multiplicand:	
  2281                           ; 1 bytes @ 0x4
  2282                           
  2283  0024                     setT0limite@c:	
  2284                           ; 1 bytes @ 0x4
  2285                           
  2286  0024                     ___awmod@divisor:	
  2287                           ; 2 bytes @ 0x4
  2288                           
  2289  0024                     ___lldiv@divisor:	
  2290                           ; 2 bytes @ 0x4
  2291                           
  2292                           
  2293                           ; 4 bytes @ 0x4
  2294  0024                     	ds	1
  2295  0025                     ??_bordaSubidaB2:	
  2296  0025                     ?_writeString:	
  2297                           ; 1 bytes @ 0x5
  2298                           
  2299  0025                     ??_asciiToHex:	
  2300                           ; 1 bytes @ 0x5
  2301                           
  2302  0025                     ??___bmul:	
  2303                           ; 1 bytes @ 0x5
  2304                           
  2305  0025                     serialOut@d:	
  2306                           ; 1 bytes @ 0x5
  2307                           
  2308  0025                     serialIn@dado:	
  2309                           ; 1 bytes @ 0x5
  2310                           
  2311  0025                     hexToAscii@dado:	
  2312                           ; 1 bytes @ 0x5
  2313                           
  2314  0025                     bordaSubidaB1@resp:	
  2315                           ; 1 bytes @ 0x5
  2316                           
  2317  0025                     bordaSubidaB3@resp2:	
  2318                           ; 1 bytes @ 0x5
  2319                           
  2320  0025                     putLCD@c:	
  2321                           ; 1 bytes @ 0x5
  2322                           
  2323  0025                     writeString@str:	
  2324                           ; 1 bytes @ 0x5
  2325                           
  2326                           
  2327                           ; 2 bytes @ 0x5
  2328  0025                     	ds	1
  2329  0026                     ??_statusT0:	
  2330  0026                     ??_statusT0limite:	
  2331                           ; 1 bytes @ 0x6
  2332                           
  2333  0026                     ??_initTimer0:	
  2334                           ; 1 bytes @ 0x6
  2335                           
  2336  0026                     ??_setT0limite:	
  2337                           ; 1 bytes @ 0x6
  2338                           
  2339  0026                     ?___awdiv:	
  2340                           ; 1 bytes @ 0x6
  2341                           
  2342  0026                     serialOut@i:	
  2343                           ; 2 bytes @ 0x6
  2344                           
  2345  0026                     serialIn@i:	
  2346                           ; 1 bytes @ 0x6
  2347                           
  2348  0026                     hexToAscii@uni:	
  2349                           ; 1 bytes @ 0x6
  2350                           
  2351  0026                     asciiToHex@a1:	
  2352                           ; 1 bytes @ 0x6
  2353                           
  2354  0026                     bordaSubidaB1@estadoAtualB1:	
  2355                           ; 1 bytes @ 0x6
  2356                           
  2357  0026                     bordaSubidaB2@resp1:	
  2358                           ; 1 bytes @ 0x6
  2359                           
  2360  0026                     bordaSubidaB3@estadoAtualB3:	
  2361                           ; 1 bytes @ 0x6
  2362                           
  2363  0026                     cmdLCD@cmd:	
  2364                           ; 1 bytes @ 0x6
  2365                           
  2366  0026                     putLCD@nibble:	
  2367                           ; 1 bytes @ 0x6
  2368                           
  2369  0026                     ___bmul@product:	
  2370                           ; 1 bytes @ 0x6
  2371                           
  2372  0026                     ___awdiv@divisor:	
  2373                           ; 1 bytes @ 0x6
  2374                           
  2375  0026                     ___awmod@dividend:	
  2376                           ; 2 bytes @ 0x6
  2377                           
  2378                           
  2379                           ; 2 bytes @ 0x6
  2380  0026                     	ds	1
  2381  0027                     ??_writeString:	
  2382  0027                     ??_initSerial:	
  2383                           ; 1 bytes @ 0x7
  2384                           
  2385  0027                     hexToAscii@dez:	
  2386                           ; 1 bytes @ 0x7
  2387                           
  2388  0027                     asciiToHex@uni:	
  2389                           ; 1 bytes @ 0x7
  2390                           
  2391  0027                     bordaSubidaB2@estadoAtualB2:	
  2392                           ; 1 bytes @ 0x7
  2393                           
  2394  0027                     cmdLCD@nibble:	
  2395                           ; 1 bytes @ 0x7
  2396                           
  2397  0027                     ___bmul@multiplier:	
  2398                           ; 1 bytes @ 0x7
  2399                           
  2400                           
  2401                           ; 1 bytes @ 0x7
  2402  0027                     	ds	1
  2403  0028                     ??_transmite:	
  2404  0028                     ?_gotoxy:	
  2405                           ; 1 bytes @ 0x8
  2406                           
  2407  0028                     ??_initLCD:	
  2408                           ; 1 bytes @ 0x8
  2409                           
  2410  0028                     ??___awmod:	
  2411                           ; 1 bytes @ 0x8
  2412                           
  2413  0028                     asciiToHex@dez:	
  2414                           ; 1 bytes @ 0x8
  2415                           
  2416  0028                     gotoxy@y:	
  2417                           ; 1 bytes @ 0x8
  2418                           
  2419  0028                     ___awdiv@dividend:	
  2420                           ; 1 bytes @ 0x8
  2421                           
  2422  0028                     ___lldiv@dividend:	
  2423                           ; 2 bytes @ 0x8
  2424                           
  2425                           
  2426                           ; 4 bytes @ 0x8
  2427  0028                     	ds	1
  2428  0029                     ??_gotoxy:	
  2429  0029                     ___awmod@counter:	
  2430                           ; 1 bytes @ 0x9
  2431                           
  2432                           
  2433                           ; 1 bytes @ 0x9
  2434  0029                     	ds	1
  2435  002A                     ??___awdiv:	
  2436  002A                     ___awmod@sign:	
  2437                           ; 1 bytes @ 0xA
  2438                           
  2439                           
  2440                           ; 1 bytes @ 0xA
  2441  002A                     	ds	1
  2442  002B                     ??_statusFIFO:	
  2443  002B                     ??_getFIFO:	
  2444                           ; 1 bytes @ 0xB
  2445                           
  2446  002B                     gotoxy@x:	
  2447                           ; 1 bytes @ 0xB
  2448                           
  2449  002B                     ___awdiv@counter:	
  2450                           ; 1 bytes @ 0xB
  2451                           
  2452                           
  2453                           ; 1 bytes @ 0xB
  2454  002B                     	ds	1
  2455  002C                     ?_writeLCD:	
  2456  002C                     ??___lldiv:	
  2457                           ; 1 bytes @ 0xC
  2458                           
  2459  002C                     writeLCD@y:	
  2460                           ; 1 bytes @ 0xC
  2461                           
  2462  002C                     ___awdiv@sign:	
  2463                           ; 1 bytes @ 0xC
  2464                           
  2465                           
  2466                           ; 1 bytes @ 0xC
  2467  002C                     	ds	1
  2468  002D                     writeLCD@ptr:	
  2469  002D                     ___awdiv@quotient:	
  2470                           ; 2 bytes @ 0xD
  2471                           
  2472  002D                     ___lldiv@quotient:	
  2473                           ; 2 bytes @ 0xD
  2474                           
  2475                           
  2476                           ; 4 bytes @ 0xD
  2477  002D                     	ds	2
  2478  002F                     ??_writeLCD:	
  2479  002F                     getFIFO@aux:	
  2480                           ; 1 bytes @ 0xF
  2481                           
  2482                           
  2483                           ; 1 bytes @ 0xF
  2484  002F                     	ds	1
  2485  0030                     writeLCD@x:	
  2486                           
  2487                           ; 1 bytes @ 0x10
  2488  0030                     	ds	1
  2489  0031                     ??_logo:	
  2490  0031                     ??_textConfig:	
  2491                           ; 1 bytes @ 0x11
  2492                           
  2493  0031                     ??_textCMpar:	
  2494                           ; 1 bytes @ 0x11
  2495                           
  2496  0031                     ??_textCMdat:	
  2497                           ; 1 bytes @ 0x11
  2498                           
  2499  0031                     ??_textSelection1:	
  2500                           ; 1 bytes @ 0x11
  2501                           
  2502  0031                     ??_textSelection2:	
  2503                           ; 1 bytes @ 0x11
  2504                           
  2505  0031                     ??_textSelection3:	
  2506                           ; 1 bytes @ 0x11
  2507                           
  2508  0031                     ??_textSelection4:	
  2509                           ; 1 bytes @ 0x11
  2510                           
  2511  0031                     ??_textSelection5:	
  2512                           ; 1 bytes @ 0x11
  2513                           
  2514  0031                     ??_textSelection6:	
  2515                           ; 1 bytes @ 0x11
  2516                           
  2517  0031                     ??_textSelection7:	
  2518                           ; 1 bytes @ 0x11
  2519                           
  2520  0031                     ??_textSelection8:	
  2521                           ; 1 bytes @ 0x11
  2522                           
  2523  0031                     ??_textSelectionEST:	
  2524                           ; 1 bytes @ 0x11
  2525                           
  2526  0031                     ??_textSelectionCLP:	
  2527                           ; 1 bytes @ 0x11
  2528                           
  2529  0031                     ??_textLoading:	
  2530                           ; 1 bytes @ 0x11
  2531                           
  2532  0031                     ??_easterEgg:	
  2533                           ; 1 bytes @ 0x11
  2534                           
  2535  0031                     ___lldiv@counter:	
  2536                           ; 1 bytes @ 0x11
  2537                           
  2538                           
  2539                           ; 1 bytes @ 0x11
  2540  0031                     	ds	1
  2541  0032                     ?_initEUSART:	
  2542  0032                     initEUSART@baudRate:	
  2543                           ; 1 bytes @ 0x12
  2544                           
  2545                           
  2546                           ; 4 bytes @ 0x12
  2547  0032                     	ds	4
  2548  0036                     ??_initEUSART:	
  2549                           
  2550                           ; 1 bytes @ 0x16
  2551  0036                     	ds	6
  2552  003C                     ??_master1:	
  2553  003C                     ??_slave1:	
  2554                           ; 1 bytes @ 0x1C
  2555                           
  2556                           
  2557                           ; 1 bytes @ 0x1C
  2558  003C                     	ds	3
  2559  003F                     ??_main:	
  2560                           
  2561                           ; 1 bytes @ 0x1F
  2562  003F                     	ds	3
  2563  0042                     main@t:	
  2564                           
  2565                           ; 1 bytes @ 0x22
  2566  0042                     	ds	1
  2567  0043                     main@a1:	
  2568                           
  2569                           ; 1 bytes @ 0x23
  2570  0043                     	ds	1
  2571  0044                     main@a2:	
  2572                           
  2573                           ; 1 bytes @ 0x24
  2574  0044                     	ds	1
  2575  0045                     main@i:	
  2576                           
  2577                           ; 1 bytes @ 0x25
  2578  0045                     	ds	1
  2579  0046                     main@a:	
  2580                           
  2581                           ; 1 bytes @ 0x26
  2582  0046                     	ds	1
  2583  0047                     main@aux:	
  2584                           
  2585                           ; 2 bytes @ 0x27
  2586  0047                     	ds	2
  2587                           
  2588                           	psect	maintext
  2589  0029                     __pmaintext:	
  2590 ;;
  2591 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2592 ;;
  2593 ;; *************** function _main *****************
  2594 ;; Defined at:
  2595 ;;		line 30 in file "main.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;		None
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  a2              1   36[BANK0 ] unsigned char 
  2600 ;;  a1              1   35[BANK0 ] unsigned char 
  2601 ;;  t               1   34[BANK0 ] unsigned char 
  2602 ;;  aux             2   39[BANK0 ] unsigned int 
  2603 ;;  a               1   38[BANK0 ] unsigned char 
  2604 ;;  i               1   37[BANK0 ] unsigned char 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : B00/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2614 ;;      Params:         0       0       0       0       0
  2615 ;;      Locals:         0       7       0       0       0
  2616 ;;      Temps:          0       3       0       0       0
  2617 ;;      Totals:         0      10       0       0       0
  2618 ;;Total ram usage:       10 bytes
  2619 ;; Hardware stack levels required when called:    8
  2620 ;; This function calls:
  2621 ;;		_B1
  2622 ;;		_B2
  2623 ;;		_B3
  2624 ;;		_asciiToHex
  2625 ;;		_bordaSubidaB1
  2626 ;;		_bordaSubidaB2
  2627 ;;		_bordaSubidaB3
  2628 ;;		_cmdLCD
  2629 ;;		_easterEgg
  2630 ;;		_errorRxEUSART
  2631 ;;		_getFIFO
  2632 ;;		_initBT
  2633 ;;		_initEUSART
  2634 ;;		_initLCD
  2635 ;;		_initSerial
  2636 ;;		_initTimer0
  2637 ;;		_logo
  2638 ;;		_master1
  2639 ;;		_resetErrorRxEUSART
  2640 ;;		_serialOut
  2641 ;;		_slave1
  2642 ;;		_statusFIFO
  2643 ;;		_textCMdat
  2644 ;;		_textCMpar
  2645 ;;		_textConfig
  2646 ;;		_textLoading
  2647 ;;		_textSelection1
  2648 ;;		_textSelection2
  2649 ;;		_textSelection3
  2650 ;;		_textSelection4
  2651 ;;		_textSelection5
  2652 ;;		_textSelection6
  2653 ;;		_textSelection7
  2654 ;;		_textSelection8
  2655 ;;		_textSelectionCLP
  2656 ;;		_textSelectionEST
  2657 ;;		_transmite
  2658 ;;		_writeLCD
  2659 ;; This function is called by:
  2660 ;;		Startup code after reset
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           
  2665                           ;psect for function _main
  2666  0029                     _main:	
  2667                           
  2668                           ;main.c: 32: initBT();
  2669                           
  2670                           ;incstack = 0
  2671                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2672  0029  160A  118A  2095  120A  118A  	fcall	_initBT
  2673                           
  2674                           ;main.c: 33: initLCD();
  2675  002E  120A  158A  220C  120A  118A  	fcall	_initLCD
  2676                           
  2677                           ;main.c: 34: initTimer0();
  2678  0033  160A  118A  2188  120A  118A  	fcall	_initTimer0
  2679                           
  2680                           ;main.c: 35: initEUSART(9600);
  2681  0038  3000               	movlw	0
  2682  0039  1283               	bcf	3,5	;RP0=0, select bank0
  2683  003A  1303               	bcf	3,6	;RP1=0, select bank0
  2684  003B  00B5               	movwf	initEUSART@baudRate+3
  2685  003C  3000               	movlw	0
  2686  003D  00B4               	movwf	initEUSART@baudRate+2
  2687  003E  3025               	movlw	37
  2688  003F  00B3               	movwf	initEUSART@baudRate+1
  2689  0040  3080               	movlw	128
  2690  0041  00B2               	movwf	initEUSART@baudRate
  2691  0042  160A  118A  255E  120A  118A  	fcall	_initEUSART
  2692                           
  2693                           ;main.c: 36: initSerial();
  2694  0047  160A  118A  20BF  120A  118A  	fcall	_initSerial
  2695                           
  2696                           ;main.c: 39: unsigned int aux = 210;
  2697  004C  30D2               	movlw	210
  2698  004D  1283               	bcf	3,5	;RP0=0, select bank0
  2699  004E  1303               	bcf	3,6	;RP1=0, select bank0
  2700  004F  00C7               	movwf	main@aux
  2701  0050  3000               	movlw	0
  2702  0051  00C8               	movwf	main@aux+1
  2703                           
  2704                           ;main.c: 40: unsigned char a = 0;
  2705  0052  01C6               	clrf	main@a
  2706                           
  2707                           ;main.c: 41: unsigned char i = 0;
  2708  0053  01C5               	clrf	main@i
  2709                           
  2710                           ;main.c: 44: {
  2711                           ;main.c: 45: switch (aux)
  2712                           
  2713                           ;main.c: 43: while(1)
  2714  0054  2CEF               	goto	l3849
  2715  0055                     l3415:	
  2716                           ;main.c: 46: {
  2717                           ;main.c: 47: case 0 :
  2718                           
  2719                           
  2720                           ;main.c: 48: logo();
  2721  0055  120A  158A  23CC  120A  118A  	fcall	_logo
  2722  005A  29C7               	goto	L48
  2723  005B                     l3419:	
  2724                           ;main.c: 52: case 1:
  2725                           
  2726                           ;main.c: 50: break;
  2727                           
  2728                           ;main.c: 49: aux = 1;
  2729                           
  2730                           
  2731                           ;main.c: 53: textConfig();
  2732  005B  160A  118A  221F  120A  118A  	fcall	_textConfig
  2733                           
  2734                           ;main.c: 54: aux = 10;
  2735  0060  300A               	movlw	10
  2736  0061  2CE0               	goto	L45
  2737  0062                     l3423:	
  2738                           ;main.c: 57: case 2:
  2739                           
  2740                           ;main.c: 55: break;
  2741                           
  2742                           
  2743                           ;main.c: 58: textCMdat();
  2744  0062  160A  118A  21DF  120A  118A  	fcall	_textCMdat
  2745                           
  2746                           ;main.c: 59: aux = 20;
  2747  0067  3014               	movlw	20
  2748  0068  2CE0               	goto	L45
  2749  0069                     l3427:	
  2750                           ;main.c: 62: case 3:
  2751                           
  2752                           ;main.c: 60: break;
  2753                           
  2754                           
  2755                           ;main.c: 63: textCMpar();
  2756  0069  160A  118A  21FF  120A  118A  	fcall	_textCMpar
  2757                           
  2758                           ;main.c: 64: aux = 30;
  2759  006E  301E               	movlw	30
  2760  006F  2CE0               	goto	L45
  2761  0070                     l3431:	
  2762                           ;main.c: 69: case 10:
  2763                           
  2764                           ;main.c: 65: break;
  2765                           
  2766                           
  2767                           ;main.c: 70: if(bordaSubidaB1()) aux = 2;
  2768  0070  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  2769  0075  3A00               	xorlw	0
  2770  0076  1903               	skipnz
  2771  0077  287E               	goto	l3435
  2772  0078  3002               	movlw	2
  2773  0079  1283               	bcf	3,5	;RP0=0, select bank0
  2774  007A  1303               	bcf	3,6	;RP1=0, select bank0
  2775  007B  00C7               	movwf	main@aux
  2776  007C  3000               	movlw	0
  2777  007D  00C8               	movwf	main@aux+1
  2778  007E                     l3435:	
  2779                           
  2780                           ;main.c: 71: if(bordaSubidaB2()) aux = 3;
  2781  007E  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  2782  0083  3A00               	xorlw	0
  2783  0084  1903               	skipnz
  2784  0085  288C               	goto	l3439
  2785  0086  3003               	movlw	3
  2786  0087  1283               	bcf	3,5	;RP0=0, select bank0
  2787  0088  1303               	bcf	3,6	;RP1=0, select bank0
  2788  0089  00C7               	movwf	main@aux
  2789  008A  3000               	movlw	0
  2790  008B  00C8               	movwf	main@aux+1
  2791  008C                     l3439:	
  2792                           
  2793                           ;main.c: 72: if(bordaSubidaB3()) aux = 100;
  2794  008C  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  2795  0091  3A00               	xorlw	0
  2796  0092  1903               	skipnz
  2797  0093  2CEF               	goto	l3849
  2798  0094  3064               	movlw	100
  2799  0095  2CE0               	goto	L45
  2800  0096                     l3443:	
  2801                           ;main.c: 75: case 20:
  2802                           
  2803                           ;main.c: 73: break;
  2804                           
  2805                           
  2806                           ;main.c: 76: if(bordaSubidaB1()) aux = 3;
  2807  0096  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  2808  009B  3A00               	xorlw	0
  2809  009C  1903               	skipnz
  2810  009D  28A4               	goto	l3447
  2811  009E  3003               	movlw	3
  2812  009F  1283               	bcf	3,5	;RP0=0, select bank0
  2813  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  2814  00A1  00C7               	movwf	main@aux
  2815  00A2  3000               	movlw	0
  2816  00A3  00C8               	movwf	main@aux+1
  2817  00A4                     l3447:	
  2818                           
  2819                           ;main.c: 77: if(bordaSubidaB2()) aux = 1;
  2820  00A4  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  2821  00A9  3A00               	xorlw	0
  2822  00AA  1903               	skipnz
  2823  00AB  28B2               	goto	l3451
  2824  00AC  3001               	movlw	1
  2825  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  2826  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  2827  00AF  00C7               	movwf	main@aux
  2828  00B0  3000               	movlw	0
  2829  00B1  00C8               	movwf	main@aux+1
  2830  00B2                     l3451:	
  2831                           
  2832                           ;main.c: 78: if(bordaSubidaB3()) aux = 200;
  2833  00B2  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  2834  00B7  3A00               	xorlw	0
  2835  00B8  1903               	skipnz
  2836  00B9  2CEF               	goto	l3849
  2837  00BA  30C8               	movlw	200
  2838  00BB  2CE0               	goto	L45
  2839  00BC                     l3455:	
  2840                           ;main.c: 81: case 30:
  2841                           
  2842                           ;main.c: 79: break;
  2843                           
  2844                           
  2845                           ;main.c: 82: if(bordaSubidaB1()) aux = 1;
  2846  00BC  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  2847  00C1  3A00               	xorlw	0
  2848  00C2  1903               	skipnz
  2849  00C3  28CA               	goto	l3459
  2850  00C4  3001               	movlw	1
  2851  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  2852  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  2853  00C7  00C7               	movwf	main@aux
  2854  00C8  3000               	movlw	0
  2855  00C9  00C8               	movwf	main@aux+1
  2856  00CA                     l3459:	
  2857                           
  2858                           ;main.c: 83: if(bordaSubidaB2()) aux = 2;
  2859  00CA  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  2860  00CF  3A00               	xorlw	0
  2861  00D0  1903               	skipnz
  2862  00D1  28D8               	goto	l3463
  2863  00D2  3002               	movlw	2
  2864  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  2865  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  2866  00D5  00C7               	movwf	main@aux
  2867  00D6  3000               	movlw	0
  2868  00D7  00C8               	movwf	main@aux+1
  2869  00D8                     l3463:	
  2870                           
  2871                           ;main.c: 84: if(bordaSubidaB3()) aux = 300;
  2872  00D8  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  2873  00DD  3A00               	xorlw	0
  2874  00DE  1903               	skipnz
  2875  00DF  28E6               	goto	l3467
  2876  00E0  302C               	movlw	44
  2877  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  2878  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  2879  00E3  00C7               	movwf	main@aux
  2880  00E4  3001               	movlw	1
  2881  00E5  00C8               	movwf	main@aux+1
  2882  00E6                     l3467:	
  2883                           
  2884                           ;main.c: 85: if(B2() & B3()) aux = 666;
  2885  00E6  160A  118A  206E  120A  118A  	fcall	_B3
  2886  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  2887  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  2888  00ED  00BF               	movwf	??_main
  2889  00EE  160A  118A  2079  120A  118A  	fcall	_B2
  2890  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  2891  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  2892  00F5  053F               	andwf	??_main,w
  2893  00F6  1903               	btfsc	3,2
  2894  00F7  2CEF               	goto	l3849
  2895  00F8  309A               	movlw	154
  2896  00F9  00C7               	movwf	main@aux
  2897  00FA  3002               	movlw	2
  2898  00FB  2CE4               	goto	L34
  2899  00FC                     l3471:	
  2900                           ;main.c: 90: case 100:
  2901                           
  2902                           ;main.c: 86: break;
  2903                           
  2904                           
  2905                           ;main.c: 91: cmdLCD(0x01);
  2906  00FC  3001               	movlw	1
  2907  00FD  160A  118A  2504  120A  118A  	fcall	_cmdLCD
  2908                           
  2909                           ;main.c: 92: writeLCD(0,0,"MODULO  DESEJADO");
  2910  0102  1283               	bcf	3,5	;RP0=0, select bank0
  2911  0103  1303               	bcf	3,6	;RP1=0, select bank0
  2912  0104  01AC               	clrf	writeLCD@y
  2913  0105  30CD               	movlw	low (STR_107| (0+32768))
  2914  0106  00AD               	movwf	writeLCD@ptr
  2915  0107  3087               	movlw	high (STR_107| (0+32768))
  2916  0108  00AE               	movwf	writeLCD@ptr+1
  2917  0109  3000               	movlw	0
  2918  010A  160A  118A  2390  120A  118A  	fcall	_writeLCD
  2919                           
  2920                           ;main.c: 93: writeLCD(0,1,"ESTEIRA      CLP");
  2921  010F  1283               	bcf	3,5	;RP0=0, select bank0
  2922  0110  1303               	bcf	3,6	;RP1=0, select bank0
  2923  0111  01AC               	clrf	writeLCD@y
  2924  0112  0AAC               	incf	writeLCD@y,f
  2925  0113  30DE               	movlw	low (STR_108| (0+32768))
  2926  0114  00AD               	movwf	writeLCD@ptr
  2927  0115  3087               	movlw	high (STR_108| (0+32768))
  2928  0116  00AE               	movwf	writeLCD@ptr+1
  2929  0117  3000               	movlw	0
  2930  0118  160A  118A  2390  120A  118A  	fcall	_writeLCD
  2931                           
  2932                           ;main.c: 94: aux = 110;
  2933  011D  306E               	movlw	110
  2934  011E  2CE0               	goto	L45
  2935  011F                     l3479:	
  2936                           ;main.c: 99: {
  2937                           ;main.c: 100: case 0:
  2938                           
  2939                           ;main.c: 98: switch(i)
  2940                           
  2941                           ;main.c: 97: case 110:
  2942                           
  2943                           ;main.c: 95: break;
  2944                           
  2945                           
  2946                           ;main.c: 101: textSelectionEST();
  2947  011F  160A  118A  24AF  120A  118A  	fcall	_textSelectionEST
  2948                           
  2949                           ;main.c: 102: if(bordaSubidaB2()) i = 1;
  2950  0124  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  2951  0129  3A00               	xorlw	0
  2952  012A  1903               	skipnz
  2953  012B  2930               	goto	l3485
  2954  012C  1283               	bcf	3,5	;RP0=0, select bank0
  2955  012D  1303               	bcf	3,6	;RP1=0, select bank0
  2956  012E  01C5               	clrf	main@i
  2957  012F  0AC5               	incf	main@i,f
  2958  0130                     l3485:	
  2959                           
  2960                           ;main.c: 103: if(bordaSubidaB3()) aux = 111;
  2961  0130  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  2962  0135  3A00               	xorlw	0
  2963  0136  1903               	skipnz
  2964  0137  2958               	goto	l3503
  2965  0138  306F               	movlw	111
  2966  0139  2953               	goto	L49
  2967  013A                     l3493:	
  2968                           ;main.c: 107: case 1:
  2969                           
  2970                           ;main.c: 105: break;
  2971                           
  2972                           ;main.c: 104: if(B1() & B2()) aux = 10;
  2973                           
  2974                           
  2975                           ;main.c: 108: textSelectionCLP();
  2976  013A  160A  118A  245A  120A  118A  	fcall	_textSelectionCLP
  2977                           
  2978                           ;main.c: 109: if(bordaSubidaB1()) i=0;
  2979  013F  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  2980  0144  3A00               	xorlw	0
  2981  0145  1903               	skipnz
  2982  0146  294A               	goto	l3499
  2983  0147  1283               	bcf	3,5	;RP0=0, select bank0
  2984  0148  1303               	bcf	3,6	;RP1=0, select bank0
  2985  0149  01C5               	clrf	main@i
  2986  014A                     l3499:	
  2987                           
  2988                           ;main.c: 110: if(bordaSubidaB3()) aux = 112;
  2989  014A  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  2990  014F  3A00               	xorlw	0
  2991  0150  1903               	skipnz
  2992  0151  2958               	goto	l3503
  2993  0152  3070               	movlw	112
  2994  0153                     L49:	
  2995  0153  1283               	bcf	3,5	;RP0=0, select bank0
  2996  0154  1303               	bcf	3,6	;RP1=0, select bank0
  2997  0155  00C7               	movwf	main@aux
  2998  0156  3000               	movlw	0
  2999  0157  00C8               	movwf	main@aux+1
  3000  0158                     l3503:	
  3001                           
  3002                           ;main.c: 111: if(B1() & B2()) aux = 10;
  3003  0158  160A  118A  2079  120A  118A  	fcall	_B2
  3004  015D  1283               	bcf	3,5	;RP0=0, select bank0
  3005  015E  1303               	bcf	3,6	;RP1=0, select bank0
  3006  015F  00BF               	movwf	??_main
  3007  0160  160A  118A  2069  120A  118A  	fcall	_B1
  3008  0165  1283               	bcf	3,5	;RP0=0, select bank0
  3009  0166  1303               	bcf	3,6	;RP1=0, select bank0
  3010  0167  053F               	andwf	??_main,w
  3011  0168  1903               	btfsc	3,2
  3012  0169  2CEF               	goto	l3849
  3013  016A  300A               	movlw	10
  3014  016B  2CE2               	goto	L36
  3015  016C                     l3509:	
  3016                           ;main.c: 114: }
  3017                           
  3018                           ;main.c: 112: break;
  3019                           
  3020  016C  0845               	movf	main@i,w
  3021                           
  3022                           ; Switch size 1, requested type "space"
  3023                           ; Number of cases is 2, Range of values is 0 to 1
  3024                           ; switch strategies available:
  3025                           ; Name         Instructions Cycles
  3026                           ; simple_byte            7     4 (average)
  3027                           ; direct_byte           14     8 (fixed)
  3028                           ; jumptable            260     6 (fixed)
  3029                           ;	Chosen strategy is simple_byte
  3030  016D  3A00               	xorlw	0	; case 0
  3031  016E  1903               	skipnz
  3032  016F  291F               	goto	l3479
  3033  0170  3A01               	xorlw	1	; case 1
  3034  0171  1903               	skipnz
  3035  0172  293A               	goto	l3493
  3036  0173  2CEF               	goto	l3849
  3037                           
  3038                           ;main.c: 115: break;
  3039  0174  2CEF               	goto	l3849
  3040  0175                     l3511:	
  3041                           ;main.c: 117: case 111:
  3042                           
  3043                           
  3044                           ;main.c: 118: cmdLCD(0x01);
  3045  0175  3001               	movlw	1
  3046  0176  160A  118A  2504  120A  118A  	fcall	_cmdLCD
  3047                           
  3048                           ;main.c: 119: writeLCD(0,0," Enviando ");
  3049  017B  1283               	bcf	3,5	;RP0=0, select bank0
  3050  017C  1303               	bcf	3,6	;RP1=0, select bank0
  3051  017D  01AC               	clrf	writeLCD@y
  3052  017E  3090               	movlw	low (STR_109| (0+32768))
  3053  017F  00AD               	movwf	writeLCD@ptr
  3054  0180  3089               	movlw	high (STR_109| (0+32768))
  3055  0181  00AE               	movwf	writeLCD@ptr+1
  3056  0182  3000               	movlw	0
  3057  0183  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3058                           
  3059                           ;main.c: 120: writeLCD(0,1," P/ Esteira ");
  3060  0188  1283               	bcf	3,5	;RP0=0, select bank0
  3061  0189  1303               	bcf	3,6	;RP1=0, select bank0
  3062  018A  01AC               	clrf	writeLCD@y
  3063  018B  0AAC               	incf	writeLCD@y,f
  3064  018C  305E               	movlw	low (STR_110| (0+32768))
  3065  018D  00AD               	movwf	writeLCD@ptr
  3066  018E  3089               	movlw	high (STR_110| (0+32768))
  3067  018F  00AE               	movwf	writeLCD@ptr+1
  3068  0190  3000               	movlw	0
  3069  0191  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3070                           
  3071                           ;main.c: 121: slave1();
  3072  0196  120A  158A  2476  120A  118A  	fcall	_slave1
  3073  019B  29C2               	goto	L50
  3074  019C                     l3523:	
  3075                           ;main.c: 126: case 112:
  3076                           
  3077                           ;main.c: 124: break;
  3078                           
  3079                           ;main.c: 123: aux = 1;
  3080                           
  3081                           ;main.c: 122: textLoading();
  3082                           
  3083                           
  3084                           ;main.c: 127: cmdLCD(0x01);
  3085  019C  3001               	movlw	1
  3086  019D  160A  118A  2504  120A  118A  	fcall	_cmdLCD
  3087                           
  3088                           ;main.c: 128: writeLCD(0,0," Enviando ");
  3089  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  3090  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  3091  01A4  01AC               	clrf	writeLCD@y
  3092  01A5  3090               	movlw	low (STR_109| (0+32768))
  3093  01A6  00AD               	movwf	writeLCD@ptr
  3094  01A7  3089               	movlw	high (STR_109| (0+32768))
  3095  01A8  00AE               	movwf	writeLCD@ptr+1
  3096  01A9  3000               	movlw	0
  3097  01AA  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3098                           
  3099                           ;main.c: 129: writeLCD(0,1," P/ CLP ");
  3100  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  3101  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  3102  01B1  01AC               	clrf	writeLCD@y
  3103  01B2  0AAC               	incf	writeLCD@y,f
  3104  01B3  30B0               	movlw	low (STR_112| (0+32768))
  3105  01B4  00AD               	movwf	writeLCD@ptr
  3106  01B5  3089               	movlw	high (STR_112| (0+32768))
  3107  01B6  00AE               	movwf	writeLCD@ptr+1
  3108  01B7  3000               	movlw	0
  3109  01B8  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3110                           
  3111                           ;main.c: 130: master1();
  3112  01BD  120A  118A  2557  120A  118A  	fcall	_master1
  3113  01C2                     L50:	
  3114                           
  3115                           ;main.c: 131: textLoading();
  3116  01C2  120A  158A  2530  120A  118A  	fcall	_textLoading
  3117  01C7                     L48:	
  3118                           
  3119                           ;main.c: 132: aux = 1;
  3120  01C7  3001               	movlw	1
  3121  01C8  2CE0               	goto	L45
  3122  01C9                     l3535:	
  3123                           ;main.c: 139: case 200:
  3124                           
  3125                           ;main.c: 133: break;
  3126                           
  3127                           
  3128                           ;main.c: 140: cmdLCD(0x01);
  3129  01C9  3001               	movlw	1
  3130  01CA  160A  118A  2504  120A  118A  	fcall	_cmdLCD
  3131                           
  3132                           ;main.c: 141: writeLCD(0,0," CONFIRMA TROCA ");
  3133  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  3134  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  3135  01D1  01AC               	clrf	writeLCD@y
  3136  01D2  309A               	movlw	low (STR_113| (0+32768))
  3137  01D3  00AD               	movwf	writeLCD@ptr
  3138  01D4  3087               	movlw	high (STR_113| (0+32768))
  3139  01D5  00AE               	movwf	writeLCD@ptr+1
  3140  01D6  3000               	movlw	0
  3141  01D7  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3142                           
  3143                           ;main.c: 142: writeLCD(0,1,"    DE DADOS    ");
  3144  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  3145  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  3146  01DE  01AC               	clrf	writeLCD@y
  3147  01DF  0AAC               	incf	writeLCD@y,f
  3148  01E0  3034               	movlw	low (STR_114| (0+32768))
  3149  01E1  00AD               	movwf	writeLCD@ptr
  3150  01E2  3087               	movlw	high (STR_114| (0+32768))
  3151  01E3  00AE               	movwf	writeLCD@ptr+1
  3152  01E4  3000               	movlw	0
  3153  01E5  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3154                           
  3155                           ;main.c: 143: aux = 210;
  3156  01EA  30D2               	movlw	210
  3157  01EB  2CE0               	goto	L45
  3158  01EC                     l3543:	
  3159                           ;main.c: 146: case 210:
  3160                           
  3161                           ;main.c: 144: break;
  3162                           
  3163                           
  3164                           ;main.c: 149: {
  3165                           ;main.c: 150: cmdLCD(0x01);
  3166  01EC  3001               	movlw	1
  3167  01ED  160A  118A  2504  120A  118A  	fcall	_cmdLCD
  3168                           
  3169                           ;main.c: 151: writeLCD(0,0,"    TROCANDO    ");
  3170  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  3171  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  3172  01F4  01AC               	clrf	writeLCD@y
  3173  01F5  3023               	movlw	low (STR_115| (0+32768))
  3174  01F6  00AD               	movwf	writeLCD@ptr
  3175  01F7  3087               	movlw	high (STR_115| (0+32768))
  3176  01F8  00AE               	movwf	writeLCD@ptr+1
  3177  01F9  3000               	movlw	0
  3178  01FA  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3179                           
  3180                           ;main.c: 152: writeLCD(0,1,"   INFORMACAO   ");
  3181  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  3182  0200  1303               	bcf	3,6	;RP1=0, select bank0
  3183  0201  01AC               	clrf	writeLCD@y
  3184  0202  0AAC               	incf	writeLCD@y,f
  3185  0203  3045               	movlw	low (STR_116| (0+32768))
  3186  0204  00AD               	movwf	writeLCD@ptr
  3187  0205  3087               	movlw	high (STR_116| (0+32768))
  3188  0206  00AE               	movwf	writeLCD@ptr+1
  3189  0207  3000               	movlw	0
  3190  0208  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3191                           
  3192                           ;main.c: 154: char t = 1;
  3193  020D  1283               	bcf	3,5	;RP0=0, select bank0
  3194  020E  1303               	bcf	3,6	;RP1=0, select bank0
  3195  020F  01C2               	clrf	main@t
  3196  0210  0AC2               	incf	main@t,f
  3197                           
  3198                           ;main.c: 156: PORTBbits.RB4 = 0;
  3199  0211  1206               	bcf	6,4	;volatile
  3200                           
  3201                           ;main.c: 158: while(t)
  3202  0212  2A77               	goto	l3573
  3203  0213                     l3553:	
  3204                           ;main.c: 161: {
  3205                           ;main.c: 162: case 2: writeLCD(0,1, "Overrun Error");
  3206                           
  3207                           ;main.c: 159: {
  3208                           ;main.c: 160: switch( errorRxEUSART() )
  3209                           
  3210  0213  1283               	bcf	3,5	;RP0=0, select bank0
  3211  0214  1303               	bcf	3,6	;RP1=0, select bank0
  3212  0215  01AC               	clrf	writeLCD@y
  3213  0216  0AAC               	incf	writeLCD@y,f
  3214  0217  3050               	movlw	low (STR_117| (0+32768))
  3215  0218  00AD               	movwf	writeLCD@ptr
  3216  0219  3089               	movlw	high (STR_117| (0+32768))
  3217  021A  00AE               	movwf	writeLCD@ptr+1
  3218  021B  3000               	movlw	0
  3219  021C  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3220                           
  3221                           ;main.c: 163: resetErrorRxEUSART();
  3222  0221  160A  118A  22DB  120A  118A  	fcall	_resetErrorRxEUSART
  3223                           
  3224                           ;main.c: 164: break;
  3225  0226  2A6A               	goto	l3571
  3226  0227                     l3557:	
  3227                           ;main.c: 165: case 1: writeLCD(0,1, "Framing Error");
  3228                           
  3229  0227  1283               	bcf	3,5	;RP0=0, select bank0
  3230  0228  1303               	bcf	3,6	;RP1=0, select bank0
  3231  0229  01AC               	clrf	writeLCD@y
  3232  022A  0AAC               	incf	writeLCD@y,f
  3233  022B  3042               	movlw	low (STR_118| (0+32768))
  3234  022C  00AD               	movwf	writeLCD@ptr
  3235  022D  3089               	movlw	high (STR_118| (0+32768))
  3236  022E  00AE               	movwf	writeLCD@ptr+1
  3237  022F  3000               	movlw	0
  3238  0230  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3239                           
  3240                           ;main.c: 166: resetErrorRxEUSART();
  3241  0235  160A  118A  22DB  120A  118A  	fcall	_resetErrorRxEUSART
  3242                           
  3243                           ;main.c: 167: break;
  3244  023A  2A6A               	goto	l3571
  3245  023B                     l3561:	
  3246                           ;main.c: 169: case 0:
  3247                           
  3248                           ;main.c: 168: default:
  3249                           
  3250                           
  3251                           ;main.c: 171: if( statusFIFO() >= 2 )
  3252  023B  160A  118A  21A3  120A  118A  	fcall	_statusFIFO
  3253  0240  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0241  1303               	bcf	3,6	;RP1=0, select bank0
  3255  0242  00BF               	movwf	??_main
  3256  0243  3002               	movlw	2
  3257  0244  023F               	subwf	??_main,w
  3258  0245  1C03               	skipc
  3259  0246  2A6A               	goto	l3571
  3260                           
  3261                           ;main.c: 172: {
  3262                           ;main.c: 173: unsigned char a1 = getFIFO();
  3263  0247  160A  118A  2289  120A  118A  	fcall	_getFIFO
  3264  024C  1283               	bcf	3,5	;RP0=0, select bank0
  3265  024D  1303               	bcf	3,6	;RP1=0, select bank0
  3266  024E  00BF               	movwf	??_main
  3267  024F  083F               	movf	??_main,w
  3268  0250  00C3               	movwf	main@a1
  3269                           
  3270                           ;main.c: 174: unsigned char a2 = getFIFO();
  3271  0251  160A  118A  2289  120A  118A  	fcall	_getFIFO
  3272  0256  1283               	bcf	3,5	;RP0=0, select bank0
  3273  0257  1303               	bcf	3,6	;RP1=0, select bank0
  3274  0258  00BF               	movwf	??_main
  3275  0259  083F               	movf	??_main,w
  3276  025A  00C4               	movwf	main@a2
  3277                           
  3278                           ;main.c: 175: serialOut( asciiToHex( a1, a2 ) );
  3279  025B  0844               	movf	main@a2,w
  3280  025C  00BF               	movwf	??_main
  3281  025D  083F               	movf	??_main,w
  3282  025E  00A4               	movwf	asciiToHex@a2
  3283  025F  0843               	movf	main@a1,w
  3284  0260  160A  118A  2264  120A  118A  	fcall	_asciiToHex
  3285  0265  160A  118A  20ED  120A  118A  	fcall	_serialOut
  3286  026A                     l3571:	
  3287                           ;main.c: 179: }
  3288                           
  3289                           ;main.c: 177: }
  3290                           ;main.c: 178: break;
  3291                           
  3292                           
  3293                           ;main.c: 181: serialOut(rhex);
  3294  026A  1283               	bcf	3,5	;RP0=0, select bank0
  3295  026B  1303               	bcf	3,6	;RP1=0, select bank0
  3296  026C  0855               	movf	_rhex,w
  3297  026D  160A  118A  20ED  120A  118A  	fcall	_serialOut
  3298                           
  3299                           ;main.c: 182: transmite();
  3300  0272  160A  118A  2333  120A  118A  	fcall	_transmite
  3301  0277                     l3573:	
  3302  0277  1283               	bcf	3,5	;RP0=0, select bank0
  3303  0278  1303               	bcf	3,6	;RP1=0, select bank0
  3304  0279  0842               	movf	main@t,w
  3305  027A  1903               	btfsc	3,2
  3306  027B  2A8C               	goto	l403
  3307  027C  160A  118A  20A0  120A  118A  	fcall	_errorRxEUSART
  3308                           
  3309                           ; Switch size 1, requested type "space"
  3310                           ; Number of cases is 3, Range of values is 0 to 2
  3311                           ; switch strategies available:
  3312                           ; Name         Instructions Cycles
  3313                           ; simple_byte           10     6 (average)
  3314                           ; direct_byte           17     8 (fixed)
  3315                           ; jumptable            260     6 (fixed)
  3316                           ;	Chosen strategy is simple_byte
  3317  0281  3A00               	xorlw	0	; case 0
  3318  0282  1903               	skipnz
  3319  0283  2A3B               	goto	l3561
  3320  0284  3A01               	xorlw	1	; case 1
  3321  0285  1903               	skipnz
  3322  0286  2A27               	goto	l3557
  3323  0287  3A03               	xorlw	3	; case 2
  3324  0288  1903               	skipnz
  3325  0289  2A13               	goto	l3553
  3326  028A  2A3B               	goto	l3561
  3327  028B  2A6A               	goto	l3571
  3328  028C                     l403:	
  3329                           
  3330                           ;main.c: 185: }
  3331                           ;main.c: 186: PORTBbits.RB4 = 1;
  3332  028C  1606               	bsf	6,4	;volatile
  3333                           
  3334                           ;main.c: 187: aux = 2;
  3335  028D  3002               	movlw	2
  3336  028E  2CE2               	goto	L36
  3337  028F                     l3577:	
  3338                           ;main.c: 193: case 300:
  3339                           
  3340                           ;main.c: 188: }
  3341                           ;main.c: 189: break;
  3342                           
  3343                           
  3344                           ;main.c: 194: cmdLCD(0x01);
  3345  028F  3001               	movlw	1
  3346  0290  160A  118A  2504  120A  118A  	fcall	_cmdLCD
  3347                           
  3348                           ;main.c: 195: writeLCD(0,0,"BLUETOOTH <---->");
  3349  0295  1283               	bcf	3,5	;RP0=0, select bank0
  3350  0296  1303               	bcf	3,6	;RP1=0, select bank0
  3351  0297  01AC               	clrf	writeLCD@y
  3352  0298  30BC               	movlw	low (STR_119| (0+32768))
  3353  0299  00AD               	movwf	writeLCD@ptr
  3354  029A  3087               	movlw	high (STR_119| (0+32768))
  3355  029B  00AE               	movwf	writeLCD@ptr+1
  3356  029C  3000               	movlw	0
  3357  029D  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3358                           
  3359                           ;main.c: 196: aux = 301;
  3360  02A2  302D               	movlw	45
  3361  02A3  2B1E               	goto	L37
  3362  02A4                     l3583:	
  3363                           ;main.c: 199: case 301:
  3364                           
  3365                           ;main.c: 197: break;
  3366                           
  3367                           
  3368                           ;main.c: 200: writeLCD(0,1,"PAREAR      BT  ");
  3369  02A4  01AC               	clrf	writeLCD@y
  3370  02A5  0AAC               	incf	writeLCD@y,f
  3371  02A6  3078               	movlw	low (STR_120| (0+32768))
  3372  02A7  00AD               	movwf	writeLCD@ptr
  3373  02A8  3087               	movlw	high (STR_120| (0+32768))
  3374  02A9  00AE               	movwf	writeLCD@ptr+1
  3375  02AA  3000               	movlw	0
  3376  02AB  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3377                           
  3378                           ;main.c: 201: if(bordaSubidaB1() || bordaSubidaB2()) aux = 302;
  3379  02B0  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  3380  02B5  3A00               	xorlw	0
  3381  02B6  1D03               	skipz
  3382  02B7  2AC0               	goto	l3589
  3383  02B8  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  3384  02BD  3A00               	xorlw	0
  3385  02BE  1903               	skipnz
  3386  02BF  2AC6               	goto	l3591
  3387  02C0                     l3589:	
  3388  02C0  302E               	movlw	46
  3389  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  3390  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  3391  02C3  00C7               	movwf	main@aux
  3392  02C4  3001               	movlw	1
  3393  02C5  00C8               	movwf	main@aux+1
  3394  02C6                     l3591:	
  3395                           
  3396                           ;main.c: 202: if(bordaSubidaB3()) aux = 305;
  3397  02C6  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  3398  02CB  3A00               	xorlw	0
  3399  02CC  1903               	skipnz
  3400  02CD  2C98               	goto	l3771
  3401  02CE  3031               	movlw	49
  3402  02CF  2C93               	goto	L51
  3403  02D0                     l3599:	
  3404                           ;main.c: 206: case 302:
  3405                           
  3406                           ;main.c: 204: break;
  3407                           
  3408                           ;main.c: 203: if(B1() & B2()) aux = 30;
  3409                           
  3410                           
  3411                           ;main.c: 207: writeLCD(0,1,"DESCONECTAR BT  ");
  3412  02D0  01AC               	clrf	writeLCD@y
  3413  02D1  0AAC               	incf	writeLCD@y,f
  3414  02D2  3089               	movlw	low (STR_121| (0+32768))
  3415  02D3  00AD               	movwf	writeLCD@ptr
  3416  02D4  3087               	movlw	high (STR_121| (0+32768))
  3417  02D5  00AE               	movwf	writeLCD@ptr+1
  3418  02D6  3000               	movlw	0
  3419  02D7  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3420                           
  3421                           ;main.c: 208: if(bordaSubidaB1() || bordaSubidaB2()) aux = 301;
  3422  02DC  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  3423  02E1  3A00               	xorlw	0
  3424  02E2  1D03               	skipz
  3425  02E3  2AEC               	goto	l3605
  3426  02E4  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  3427  02E9  3A00               	xorlw	0
  3428  02EA  1903               	skipnz
  3429  02EB  2AF2               	goto	l3607
  3430  02EC                     l3605:	
  3431  02EC  302D               	movlw	45
  3432  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  3433  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  3434  02EF  00C7               	movwf	main@aux
  3435  02F0  3001               	movlw	1
  3436  02F1  00C8               	movwf	main@aux+1
  3437  02F2                     l3607:	
  3438                           
  3439                           ;main.c: 209: if(bordaSubidaB3()) aux = 306;
  3440  02F2  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  3441  02F7  3A00               	xorlw	0
  3442  02F8  1903               	skipnz
  3443  02F9  2C98               	goto	l3771
  3444  02FA  3032               	movlw	50
  3445  02FB  2C93               	goto	L51
  3446  02FC                     l3615:	
  3447                           ;main.c: 214: case 305:
  3448                           
  3449                           ;main.c: 211: break;
  3450                           
  3451                           ;main.c: 210: if(B1() & B2()) aux = 30;
  3452                           
  3453                           
  3454                           ;main.c: 215: cmdLCD(0x01);
  3455  02FC  3001               	movlw	1
  3456  02FD  160A  118A  2504  120A  118A  	fcall	_cmdLCD
  3457                           
  3458                           ;main.c: 216: writeLCD(0,0," PAREAR COM IP  ");
  3459  0302  1283               	bcf	3,5	;RP0=0, select bank0
  3460  0303  1303               	bcf	3,6	;RP1=0, select bank0
  3461  0304  01AC               	clrf	writeLCD@y
  3462  0305  3067               	movlw	low (STR_122| (0+32768))
  3463  0306  00AD               	movwf	writeLCD@ptr
  3464  0307  3087               	movlw	high (STR_122| (0+32768))
  3465  0308  00AE               	movwf	writeLCD@ptr+1
  3466  0309  3000               	movlw	0
  3467  030A  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3468                           
  3469                           ;main.c: 217: writeLCD(0,1,"1 2 3 4  5 6 7 8");
  3470  030F  1283               	bcf	3,5	;RP0=0, select bank0
  3471  0310  1303               	bcf	3,6	;RP1=0, select bank0
  3472  0311  01AC               	clrf	writeLCD@y
  3473  0312  0AAC               	incf	writeLCD@y,f
  3474  0313  30AB               	movlw	low (STR_123| (0+32768))
  3475  0314  00AD               	movwf	writeLCD@ptr
  3476  0315  3087               	movlw	high (STR_123| (0+32768))
  3477  0316  00AE               	movwf	writeLCD@ptr+1
  3478  0317  3000               	movlw	0
  3479  0318  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3480                           
  3481                           ;main.c: 218: aux = 310;
  3482  031D  3036               	movlw	54
  3483  031E                     L37:	
  3484  031E  1283               	bcf	3,5	;RP0=0, select bank0
  3485  031F  1303               	bcf	3,6	;RP1=0, select bank0
  3486  0320  00C7               	movwf	main@aux
  3487  0321  3001               	movlw	1
  3488  0322  2CE4               	goto	L34
  3489  0323                     l3623:	
  3490                           ;main.c: 221: case 306:
  3491                           
  3492                           ;main.c: 219: break;
  3493                           
  3494                           
  3495                           ;main.c: 222: cmdLCD(0x01);
  3496  0323  3001               	movlw	1
  3497  0324  160A  118A  2504  120A  118A  	fcall	_cmdLCD
  3498                           
  3499                           ;main.c: 223: writeLCD(0,0,"DESCONECTANDO   ");
  3500  0329  1283               	bcf	3,5	;RP0=0, select bank0
  3501  032A  1303               	bcf	3,6	;RP1=0, select bank0
  3502  032B  01AC               	clrf	writeLCD@y
  3503  032C  3056               	movlw	low (STR_124| (0+32768))
  3504  032D  00AD               	movwf	writeLCD@ptr
  3505  032E  3087               	movlw	high (STR_124| (0+32768))
  3506  032F  00AE               	movwf	writeLCD@ptr+1
  3507  0330  3000               	movlw	0
  3508  0331  160A  118A  2390  120A  118A  	fcall	_writeLCD
  3509                           
  3510                           ;main.c: 225: _delay((unsigned long)((500)*(20000000/4000.0)));
  3511  0336  300D               	movlw	13
  3512  0337  1283               	bcf	3,5	;RP0=0, select bank0
  3513  0338  1303               	bcf	3,6	;RP1=0, select bank0
  3514  0339  00C1               	movwf	??_main+2
  3515  033A  30AF               	movlw	175
  3516  033B  00C0               	movwf	??_main+1
  3517  033C  30B5               	movlw	181
  3518  033D  00BF               	movwf	??_main
  3519  033E                     u2877:	
  3520  033E  0BBF               	decfsz	??_main,f
  3521  033F  2B3E               	goto	u2877
  3522  0340  0BC0               	decfsz	??_main+1,f
  3523  0341  2B3E               	goto	u2877
  3524  0342  0BC1               	decfsz	??_main+2,f
  3525  0343  2B3E               	goto	u2877
  3526  0344  2B45               	nop2
  3527  0345  2CDF               	goto	L35
  3528  0346                     l3631:	
  3529                           ;main.c: 232: {
  3530                           ;main.c: 233: case 0:
  3531                           
  3532                           ;main.c: 231: switch(a)
  3533                           
  3534                           ;main.c: 230: case 310:
  3535                           
  3536                           ;main.c: 227: break;
  3537                           
  3538                           ;main.c: 226: aux = 3;
  3539                           
  3540                           
  3541                           ;main.c: 234: textSelection1();
  3542  0346  160A  118A  2674  120A  118A  	fcall	_textSelection1
  3543                           
  3544                           ;main.c: 235: if(bordaSubidaB1()) a=7;
  3545  034B  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  3546  0350  3A00               	xorlw	0
  3547  0351  1903               	skipnz
  3548  0352  2B59               	goto	l3637
  3549  0353  3007               	movlw	7
  3550  0354  1283               	bcf	3,5	;RP0=0, select bank0
  3551  0355  1303               	bcf	3,6	;RP1=0, select bank0
  3552  0356  00BF               	movwf	??_main
  3553  0357  083F               	movf	??_main,w
  3554  0358  00C6               	movwf	main@a
  3555  0359                     l3637:	
  3556                           
  3557                           ;main.c: 236: if(bordaSubidaB2()) a=1;
  3558  0359  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  3559  035E  3A00               	xorlw	0
  3560  035F  1903               	skipnz
  3561  0360  2B65               	goto	l3641
  3562  0361  1283               	bcf	3,5	;RP0=0, select bank0
  3563  0362  1303               	bcf	3,6	;RP1=0, select bank0
  3564  0363  01C6               	clrf	main@a
  3565  0364  0AC6               	incf	main@a,f
  3566  0365                     l3641:	
  3567                           
  3568                           ;main.c: 237: if(bordaSubidaB3()) aux = 311;
  3569  0365  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  3570  036A  3A00               	xorlw	0
  3571  036B  1903               	skipnz
  3572  036C  2C98               	goto	l3771
  3573  036D  3037               	movlw	55
  3574  036E  2C93               	goto	L51
  3575  036F                     l3649:	
  3576                           ;main.c: 241: case 1:
  3577                           
  3578                           ;main.c: 239: break;
  3579                           
  3580                           ;main.c: 238: if(B1() & B2()) aux = 30;
  3581                           
  3582                           
  3583                           ;main.c: 242: textSelection2();
  3584  036F  160A  118A  26D7  120A  118A  	fcall	_textSelection2
  3585                           
  3586                           ;main.c: 243: if(bordaSubidaB1()) a=0;
  3587  0374  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  3588  0379  3A00               	xorlw	0
  3589  037A  1903               	skipnz
  3590  037B  2B7F               	goto	l3655
  3591  037C  1283               	bcf	3,5	;RP0=0, select bank0
  3592  037D  1303               	bcf	3,6	;RP1=0, select bank0
  3593  037E  01C6               	clrf	main@a
  3594  037F                     l3655:	
  3595                           
  3596                           ;main.c: 244: if(bordaSubidaB2()) a=2;
  3597  037F  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  3598  0384  3A00               	xorlw	0
  3599  0385  1903               	skipnz
  3600  0386  2B8D               	goto	l3659
  3601  0387  3002               	movlw	2
  3602  0388  1283               	bcf	3,5	;RP0=0, select bank0
  3603  0389  1303               	bcf	3,6	;RP1=0, select bank0
  3604  038A  00BF               	movwf	??_main
  3605  038B  083F               	movf	??_main,w
  3606  038C  00C6               	movwf	main@a
  3607  038D                     l3659:	
  3608                           
  3609                           ;main.c: 245: if(bordaSubidaB3()) aux = 312;
  3610  038D  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  3611  0392  3A00               	xorlw	0
  3612  0393  1903               	skipnz
  3613  0394  2C98               	goto	l3771
  3614  0395  3038               	movlw	56
  3615  0396  2C93               	goto	L51
  3616  0397                     l3667:	
  3617                           ;main.c: 249: case 2:
  3618                           
  3619                           ;main.c: 247: break;
  3620                           
  3621                           ;main.c: 246: if(B1() & B2()) aux = 30;
  3622                           
  3623                           
  3624                           ;main.c: 250: textSelection3();
  3625  0397  160A  118A  273A  120A  118A  	fcall	_textSelection3
  3626                           
  3627                           ;main.c: 251: if(bordaSubidaB1()) a=1;
  3628  039C  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  3629  03A1  3A00               	xorlw	0
  3630  03A2  1903               	skipnz
  3631  03A3  2BA8               	goto	l3673
  3632  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  3633  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  3634  03A6  01C6               	clrf	main@a
  3635  03A7  0AC6               	incf	main@a,f
  3636  03A8                     l3673:	
  3637                           
  3638                           ;main.c: 252: if(bordaSubidaB2()) a=3;
  3639  03A8  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  3640  03AD  3A00               	xorlw	0
  3641  03AE  1903               	skipnz
  3642  03AF  2BB6               	goto	l3677
  3643  03B0  3003               	movlw	3
  3644  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  3645  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  3646  03B3  00BF               	movwf	??_main
  3647  03B4  083F               	movf	??_main,w
  3648  03B5  00C6               	movwf	main@a
  3649  03B6                     l3677:	
  3650                           
  3651                           ;main.c: 253: if(bordaSubidaB3()) aux = 313;
  3652  03B6  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  3653  03BB  3A00               	xorlw	0
  3654  03BC  1903               	skipnz
  3655  03BD  2C98               	goto	l3771
  3656  03BE  3039               	movlw	57
  3657  03BF  2C93               	goto	L51
  3658  03C0                     l3685:	
  3659                           ;main.c: 257: case 3:
  3660                           
  3661                           ;main.c: 255: break;
  3662                           
  3663                           ;main.c: 254: if(B1() & B2()) aux = 30;
  3664                           
  3665                           
  3666                           ;main.c: 258: textSelection4();
  3667  03C0  160A  118A  279D  120A  118A  	fcall	_textSelection4
  3668                           
  3669                           ;main.c: 259: if(bordaSubidaB1()) a=2;
  3670  03C5  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  3671  03CA  3A00               	xorlw	0
  3672  03CB  1903               	skipnz
  3673  03CC  2BD3               	goto	l3691
  3674  03CD  3002               	movlw	2
  3675  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  3676  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  3677  03D0  00BF               	movwf	??_main
  3678  03D1  083F               	movf	??_main,w
  3679  03D2  00C6               	movwf	main@a
  3680  03D3                     l3691:	
  3681                           
  3682                           ;main.c: 260: if(bordaSubidaB2()) a=4;
  3683  03D3  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  3684  03D8  3A00               	xorlw	0
  3685  03D9  1903               	skipnz
  3686  03DA  2BE1               	goto	l3695
  3687  03DB  3004               	movlw	4
  3688  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  3689  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  3690  03DE  00BF               	movwf	??_main
  3691  03DF  083F               	movf	??_main,w
  3692  03E0  00C6               	movwf	main@a
  3693  03E1                     l3695:	
  3694                           
  3695                           ;main.c: 261: if(bordaSubidaB3()) aux = 314;
  3696  03E1  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  3697  03E6  3A00               	xorlw	0
  3698  03E7  1903               	skipnz
  3699  03E8  2C98               	goto	l3771
  3700  03E9  303A               	movlw	58
  3701  03EA  2C93               	goto	L51
  3702  03EB                     l3703:	
  3703                           ;main.c: 265: case 4:
  3704                           
  3705                           ;main.c: 263: break;
  3706                           
  3707                           ;main.c: 262: if(B1() & B2()) aux = 30;
  3708                           
  3709                           
  3710                           ;main.c: 266: textSelection5();
  3711  03EB  120A  158A  2240  120A  118A  	fcall	_textSelection5
  3712                           
  3713                           ;main.c: 267: if(bordaSubidaB1()) a=3;
  3714  03F0  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  3715  03F5  3A00               	xorlw	0
  3716  03F6  1903               	skipnz
  3717  03F7  2BFE               	goto	l3709
  3718  03F8  3003               	movlw	3
  3719  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  3720  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  3721  03FB  00BF               	movwf	??_main
  3722  03FC  083F               	movf	??_main,w
  3723  03FD  00C6               	movwf	main@a
  3724  03FE                     l3709:	
  3725                           
  3726                           ;main.c: 268: if(bordaSubidaB2()) a=5;
  3727  03FE  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  3728  0403  3A00               	xorlw	0
  3729  0404  1903               	skipnz
  3730  0405  2C0C               	goto	l3713
  3731  0406  3005               	movlw	5
  3732  0407  1283               	bcf	3,5	;RP0=0, select bank0
  3733  0408  1303               	bcf	3,6	;RP1=0, select bank0
  3734  0409  00BF               	movwf	??_main
  3735  040A  083F               	movf	??_main,w
  3736  040B  00C6               	movwf	main@a
  3737  040C                     l3713:	
  3738                           
  3739                           ;main.c: 269: if(bordaSubidaB3()) aux = 315;
  3740  040C  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  3741  0411  3A00               	xorlw	0
  3742  0412  1903               	skipnz
  3743  0413  2C98               	goto	l3771
  3744  0414  303B               	movlw	59
  3745  0415  2C93               	goto	L51
  3746  0416                     l3721:	
  3747                           ;main.c: 273: case 5:
  3748                           
  3749                           ;main.c: 271: break;
  3750                           
  3751                           ;main.c: 270: if(B1() & B2()) aux = 30;
  3752                           
  3753                           
  3754                           ;main.c: 274: textSelection6();
  3755  0416  120A  158A  22A3  120A  118A  	fcall	_textSelection6
  3756                           
  3757                           ;main.c: 275: if(bordaSubidaB1()) a=4;
  3758  041B  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  3759  0420  3A00               	xorlw	0
  3760  0421  1903               	skipnz
  3761  0422  2C29               	goto	l3727
  3762  0423  3004               	movlw	4
  3763  0424  1283               	bcf	3,5	;RP0=0, select bank0
  3764  0425  1303               	bcf	3,6	;RP1=0, select bank0
  3765  0426  00BF               	movwf	??_main
  3766  0427  083F               	movf	??_main,w
  3767  0428  00C6               	movwf	main@a
  3768  0429                     l3727:	
  3769                           
  3770                           ;main.c: 276: if(bordaSubidaB2()) a=6;
  3771  0429  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  3772  042E  3A00               	xorlw	0
  3773  042F  1903               	skipnz
  3774  0430  2C37               	goto	l3731
  3775  0431  3006               	movlw	6
  3776  0432  1283               	bcf	3,5	;RP0=0, select bank0
  3777  0433  1303               	bcf	3,6	;RP1=0, select bank0
  3778  0434  00BF               	movwf	??_main
  3779  0435  083F               	movf	??_main,w
  3780  0436  00C6               	movwf	main@a
  3781  0437                     l3731:	
  3782                           
  3783                           ;main.c: 277: if(bordaSubidaB3()) aux = 316;
  3784  0437  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  3785  043C  3A00               	xorlw	0
  3786  043D  1903               	skipnz
  3787  043E  2C98               	goto	l3771
  3788  043F  303C               	movlw	60
  3789  0440  2C93               	goto	L51
  3790  0441                     l3739:	
  3791                           ;main.c: 281: case 6:
  3792                           
  3793                           ;main.c: 279: break;
  3794                           
  3795                           ;main.c: 278: if(B1() & B2()) aux = 30;
  3796                           
  3797                           
  3798                           ;main.c: 282: textSelection7();
  3799  0441  120A  158A  2306  120A  118A  	fcall	_textSelection7
  3800                           
  3801                           ;main.c: 283: if(bordaSubidaB1()) a=5;
  3802  0446  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  3803  044B  3A00               	xorlw	0
  3804  044C  1903               	skipnz
  3805  044D  2C54               	goto	l3745
  3806  044E  3005               	movlw	5
  3807  044F  1283               	bcf	3,5	;RP0=0, select bank0
  3808  0450  1303               	bcf	3,6	;RP1=0, select bank0
  3809  0451  00BF               	movwf	??_main
  3810  0452  083F               	movf	??_main,w
  3811  0453  00C6               	movwf	main@a
  3812  0454                     l3745:	
  3813                           
  3814                           ;main.c: 284: if(bordaSubidaB2()) a=7;
  3815  0454  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  3816  0459  3A00               	xorlw	0
  3817  045A  1903               	skipnz
  3818  045B  2C62               	goto	l3749
  3819  045C  3007               	movlw	7
  3820  045D  1283               	bcf	3,5	;RP0=0, select bank0
  3821  045E  1303               	bcf	3,6	;RP1=0, select bank0
  3822  045F  00BF               	movwf	??_main
  3823  0460  083F               	movf	??_main,w
  3824  0461  00C6               	movwf	main@a
  3825  0462                     l3749:	
  3826                           
  3827                           ;main.c: 285: if(bordaSubidaB3()) aux = 317;
  3828  0462  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  3829  0467  3A00               	xorlw	0
  3830  0468  1903               	skipnz
  3831  0469  2C98               	goto	l3771
  3832  046A  303D               	movlw	61
  3833  046B  2C93               	goto	L51
  3834  046C                     l3757:	
  3835                           ;main.c: 289: case 7:
  3836                           
  3837                           ;main.c: 287: break;
  3838                           
  3839                           ;main.c: 286: if(B1() & B2()) aux = 30;
  3840                           
  3841                           
  3842                           ;main.c: 290: textSelection8();
  3843  046C  120A  158A  2369  120A  118A  	fcall	_textSelection8
  3844                           
  3845                           ;main.c: 291: if(bordaSubidaB1()) a=6;
  3846  0471  160A  118A  211F  120A  118A  	fcall	_bordaSubidaB1
  3847  0476  3A00               	xorlw	0
  3848  0477  1903               	skipnz
  3849  0478  2C7F               	goto	l3763
  3850  0479  3006               	movlw	6
  3851  047A  1283               	bcf	3,5	;RP0=0, select bank0
  3852  047B  1303               	bcf	3,6	;RP1=0, select bank0
  3853  047C  00BF               	movwf	??_main
  3854  047D  083F               	movf	??_main,w
  3855  047E  00C6               	movwf	main@a
  3856  047F                     l3763:	
  3857                           
  3858                           ;main.c: 292: if(bordaSubidaB2()) a=0;
  3859  047F  160A  118A  2139  120A  118A  	fcall	_bordaSubidaB2
  3860  0484  3A00               	xorlw	0
  3861  0485  1903               	skipnz
  3862  0486  2C8A               	goto	l3767
  3863  0487  1283               	bcf	3,5	;RP0=0, select bank0
  3864  0488  1303               	bcf	3,6	;RP1=0, select bank0
  3865  0489  01C6               	clrf	main@a
  3866  048A                     l3767:	
  3867                           
  3868                           ;main.c: 293: if(bordaSubidaB3()) aux = 318;
  3869  048A  160A  118A  2153  120A  118A  	fcall	_bordaSubidaB3
  3870  048F  3A00               	xorlw	0
  3871  0490  1903               	skipnz
  3872  0491  2C98               	goto	l3771
  3873  0492  303E               	movlw	62
  3874  0493                     L51:	
  3875  0493  1283               	bcf	3,5	;RP0=0, select bank0
  3876  0494  1303               	bcf	3,6	;RP1=0, select bank0
  3877  0495  00C7               	movwf	main@aux
  3878  0496  3001               	movlw	1
  3879  0497  00C8               	movwf	main@aux+1
  3880  0498                     l3771:	
  3881                           
  3882                           ;main.c: 294: if(B1() & B2()) aux = 30;
  3883  0498  160A  118A  2079  120A  118A  	fcall	_B2
  3884  049D  1283               	bcf	3,5	;RP0=0, select bank0
  3885  049E  1303               	bcf	3,6	;RP1=0, select bank0
  3886  049F  00BF               	movwf	??_main
  3887  04A0  160A  118A  2069  120A  118A  	fcall	_B1
  3888  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  3889  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  3890  04A7  053F               	andwf	??_main,w
  3891  04A8  1903               	btfsc	3,2
  3892  04A9  2CEF               	goto	l3849
  3893  04AA  301E               	movlw	30
  3894  04AB  2CE2               	goto	L36
  3895  04AC                     l3777:	
  3896                           ;main.c: 296: }
  3897                           
  3898                           ;main.c: 295: break;
  3899                           
  3900  04AC  0846               	movf	main@a,w
  3901                           
  3902                           ; Switch size 1, requested type "space"
  3903                           ; Number of cases is 8, Range of values is 0 to 7
  3904                           ; switch strategies available:
  3905                           ; Name         Instructions Cycles
  3906                           ; simple_byte           25    13 (average)
  3907                           ; direct_byte           32     8 (fixed)
  3908                           ; jumptable            260     6 (fixed)
  3909                           ;	Chosen strategy is simple_byte
  3910  04AD  3A00               	xorlw	0	; case 0
  3911  04AE  1903               	skipnz
  3912  04AF  2B46               	goto	l3631
  3913  04B0  3A01               	xorlw	1	; case 1
  3914  04B1  1903               	skipnz
  3915  04B2  2B6F               	goto	l3649
  3916  04B3  3A03               	xorlw	3	; case 2
  3917  04B4  1903               	skipnz
  3918  04B5  2B97               	goto	l3667
  3919  04B6  3A01               	xorlw	1	; case 3
  3920  04B7  1903               	skipnz
  3921  04B8  2BC0               	goto	l3685
  3922  04B9  3A07               	xorlw	7	; case 4
  3923  04BA  1903               	skipnz
  3924  04BB  2BEB               	goto	l3703
  3925  04BC  3A01               	xorlw	1	; case 5
  3926  04BD  1903               	skipnz
  3927  04BE  2C16               	goto	l3721
  3928  04BF  3A03               	xorlw	3	; case 6
  3929  04C0  1903               	skipnz
  3930  04C1  2C41               	goto	l3739
  3931  04C2  3A01               	xorlw	1	; case 7
  3932  04C3  1903               	skipnz
  3933  04C4  2C6C               	goto	l3757
  3934  04C5  2CEF               	goto	l3849
  3935                           
  3936                           ;main.c: 297: break;
  3937  04C6  2CEF               	goto	l3849
  3938  04C7                     l3779:	
  3939                           ;main.c: 299: case 311:
  3940                           
  3941  04C7                     l3787:	
  3942                           ;main.c: 307: case 312:
  3943                           
  3944                           ;main.c: 305: break;
  3945                           
  3946                           ;main.c: 304: aux = 3;
  3947                           
  3948                           ;main.c: 303: textLoading();
  3949                           
  3950                           ;main.c: 301: writeLCD(0,0," Enviando ");
  3951                           
  3952                           ;main.c: 300: cmdLCD(0x01);
  3953                           
  3954  04C7                     l3795:	
  3955                           ;main.c: 315: case 313:
  3956                           
  3957                           ;main.c: 313: break;
  3958                           
  3959                           ;main.c: 312: aux = 3;
  3960                           
  3961                           ;main.c: 311: textLoading();
  3962                           
  3963                           ;main.c: 309: writeLCD(0,0," Enviando ");
  3964                           
  3965                           ;main.c: 308: cmdLCD(0x01);
  3966                           
  3967  04C7                     l3803:	
  3968                           ;main.c: 323: case 314:
  3969                           
  3970                           ;main.c: 321: break;
  3971                           
  3972                           ;main.c: 320: aux = 3;
  3973                           
  3974                           ;main.c: 319: textLoading();
  3975                           
  3976                           ;main.c: 317: writeLCD(0,0," Enviando ");
  3977                           
  3978                           ;main.c: 316: cmdLCD(0x01);
  3979                           
  3980  04C7                     l3811:	
  3981                           ;main.c: 331: case 315:
  3982                           
  3983                           ;main.c: 329: break;
  3984                           
  3985                           ;main.c: 328: aux = 3;
  3986                           
  3987                           ;main.c: 327: textLoading();
  3988                           
  3989                           ;main.c: 325: writeLCD(0,0," Enviando ");
  3990                           
  3991                           ;main.c: 324: cmdLCD(0x01);
  3992                           
  3993  04C7                     l3819:	
  3994                           ;main.c: 339: case 316:
  3995                           
  3996                           ;main.c: 337: break;
  3997                           
  3998                           ;main.c: 336: aux = 3;
  3999                           
  4000                           ;main.c: 335: textLoading();
  4001                           
  4002                           ;main.c: 333: writeLCD(0,0," Enviando ");
  4003                           
  4004                           ;main.c: 332: cmdLCD(0x01);
  4005                           
  4006  04C7                     l3827:	
  4007                           ;main.c: 347: case 317:
  4008                           
  4009                           ;main.c: 345: break;
  4010                           
  4011                           ;main.c: 344: aux = 3;
  4012                           
  4013                           ;main.c: 343: textLoading();
  4014                           
  4015                           ;main.c: 341: writeLCD(0,0," Enviando ");
  4016                           
  4017                           ;main.c: 340: cmdLCD(0x01);
  4018                           
  4019  04C7                     l3835:	
  4020                           ;main.c: 355: case 318:
  4021                           
  4022                           ;main.c: 353: break;
  4023                           
  4024                           ;main.c: 352: aux = 3;
  4025                           
  4026                           ;main.c: 351: textLoading();
  4027                           
  4028                           ;main.c: 349: writeLCD(0,0," Enviando ");
  4029                           
  4030                           ;main.c: 348: cmdLCD(0x01);
  4031                           
  4032                           
  4033                           ;main.c: 356: cmdLCD(0x01);
  4034  04C7  3001               	movlw	1
  4035  04C8  160A  118A  2504  120A  118A  	fcall	_cmdLCD
  4036                           
  4037                           ;main.c: 357: writeLCD(0,0," Enviando ");
  4038  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  4039  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  4040  04CF  01AC               	clrf	writeLCD@y
  4041  04D0  3090               	movlw	low (STR_109| (0+32768))
  4042  04D1  00AD               	movwf	writeLCD@ptr
  4043  04D2  3089               	movlw	high (STR_109| (0+32768))
  4044  04D3  00AE               	movwf	writeLCD@ptr+1
  4045  04D4  3000               	movlw	0
  4046  04D5  160A  118A  2390  120A  118A  	fcall	_writeLCD
  4047                           
  4048                           ;main.c: 359: textLoading();
  4049  04DA  120A  158A  2530  120A  118A  	fcall	_textLoading
  4050  04DF                     L35:	
  4051                           
  4052                           ;main.c: 360: aux = 3;
  4053  04DF  3003               	movlw	3
  4054  04E0                     L45:	
  4055  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  4056  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  4057  04E2                     L36:	
  4058  04E2  00C7               	movwf	main@aux
  4059  04E3  3000               	movlw	0
  4060  04E4                     L34:	
  4061  04E4  00C8               	movwf	main@aux+1
  4062                           
  4063                           ;main.c: 361: break;
  4064  04E5  2CEF               	goto	l3849
  4065  04E6                     l3843:	
  4066                           ;main.c: 365: case 666:
  4067                           
  4068                           
  4069                           ;main.c: 366: easterEgg();
  4070  04E6  120A  158A  262D  120A  118A  	fcall	_easterEgg
  4071                           
  4072                           ;main.c: 367: aux = 0;
  4073  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  4074  04EC  1303               	bcf	3,6	;RP1=0, select bank0
  4075  04ED  01C7               	clrf	main@aux
  4076  04EE  01C8               	clrf	main@aux+1
  4077  04EF                     l3849:	
  4078                           ;main.c: 369: }
  4079                           
  4080                           ;main.c: 368: break;
  4081                           
  4082                           
  4083                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  4084                           ; Switch size 1, requested type "space"
  4085                           ; Number of cases is 3, Range of values is 0 to 2
  4086                           ; switch strategies available:
  4087                           ; Name         Instructions Cycles
  4088                           ; simple_byte           10     6 (average)
  4089                           ; direct_byte           17     8 (fixed)
  4090                           ; jumptable            260     6 (fixed)
  4091                           ;	Chosen strategy is simple_byte
  4092  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  4093  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  4094  04F1  0848               	movf	main@aux+1,w
  4095  04F2  3A00               	xorlw	0	; case 0
  4096  04F3  1903               	skipnz
  4097  04F4  2CFC               	goto	l3933
  4098  04F5  3A01               	xorlw	1	; case 1
  4099  04F6  1903               	skipnz
  4100  04F7  2D25               	goto	l3935
  4101  04F8  3A03               	xorlw	3	; case 2
  4102  04F9  1903               	skipnz
  4103  04FA  2D51               	goto	l3937
  4104  04FB  2CEF               	goto	l3849
  4105  04FC                     l3933:	
  4106                           
  4107                           ; Switch size 1, requested type "space"
  4108                           ; Number of cases is 13, Range of values is 0 to 210
  4109                           ; switch strategies available:
  4110                           ; Name         Instructions Cycles
  4111                           ; simple_byte           40    21 (average)
  4112                           ; jumptable            260     6 (fixed)
  4113                           ;	Chosen strategy is simple_byte
  4114  04FC  0847               	movf	main@aux,w
  4115  04FD  3A00               	xorlw	0	; case 0
  4116  04FE  1903               	skipnz
  4117  04FF  2855               	goto	l3415
  4118  0500  3A01               	xorlw	1	; case 1
  4119  0501  1903               	skipnz
  4120  0502  285B               	goto	l3419
  4121  0503  3A03               	xorlw	3	; case 2
  4122  0504  1903               	skipnz
  4123  0505  2862               	goto	l3423
  4124  0506  3A01               	xorlw	1	; case 3
  4125  0507  1903               	skipnz
  4126  0508  2869               	goto	l3427
  4127  0509  3A09               	xorlw	9	; case 10
  4128  050A  1903               	skipnz
  4129  050B  2870               	goto	l3431
  4130  050C  3A1E               	xorlw	30	; case 20
  4131  050D  1903               	skipnz
  4132  050E  2896               	goto	l3443
  4133  050F  3A0A               	xorlw	10	; case 30
  4134  0510  1903               	skipnz
  4135  0511  28BC               	goto	l3455
  4136  0512  3A7A               	xorlw	122	; case 100
  4137  0513  1903               	skipnz
  4138  0514  28FC               	goto	l3471
  4139  0515  3A0A               	xorlw	10	; case 110
  4140  0516  1903               	skipnz
  4141  0517  296C               	goto	l3509
  4142  0518  3A01               	xorlw	1	; case 111
  4143  0519  1903               	skipnz
  4144  051A  2975               	goto	l3511
  4145  051B  3A1F               	xorlw	31	; case 112
  4146  051C  1903               	skipnz
  4147  051D  299C               	goto	l3523
  4148  051E  3AB8               	xorlw	184	; case 200
  4149  051F  1903               	skipnz
  4150  0520  29C9               	goto	l3535
  4151  0521  3A1A               	xorlw	26	; case 210
  4152  0522  1903               	skipnz
  4153  0523  29EC               	goto	l3543
  4154  0524  2CEF               	goto	l3849
  4155  0525                     l3935:	
  4156                           
  4157                           ; Switch size 1, requested type "space"
  4158                           ; Number of cases is 14, Range of values is 44 to 62
  4159                           ; switch strategies available:
  4160                           ; Name         Instructions Cycles
  4161                           ; simple_byte           43    22 (average)
  4162                           ; direct_byte           68    11 (fixed)
  4163                           ; jumptable            263     9 (fixed)
  4164                           ;	Chosen strategy is simple_byte
  4165  0525  0847               	movf	main@aux,w
  4166  0526  3A2C               	xorlw	44	; case 44
  4167  0527  1903               	skipnz
  4168  0528  2A8F               	goto	l3577
  4169  0529  3A01               	xorlw	1	; case 45
  4170  052A  1903               	skipnz
  4171  052B  2AA4               	goto	l3583
  4172  052C  3A03               	xorlw	3	; case 46
  4173  052D  1903               	skipnz
  4174  052E  2AD0               	goto	l3599
  4175  052F  3A1F               	xorlw	31	; case 49
  4176  0530  1903               	skipnz
  4177  0531  2AFC               	goto	l3615
  4178  0532  3A03               	xorlw	3	; case 50
  4179  0533  1903               	skipnz
  4180  0534  2B23               	goto	l3623
  4181  0535  3A04               	xorlw	4	; case 54
  4182  0536  1903               	skipnz
  4183  0537  2CAC               	goto	l3777
  4184  0538  3A01               	xorlw	1	; case 55
  4185  0539  1903               	skipnz
  4186  053A  2CC7               	goto	l3779
  4187  053B  3A0F               	xorlw	15	; case 56
  4188  053C  1903               	skipnz
  4189  053D  2CC7               	goto	l3787
  4190  053E  3A01               	xorlw	1	; case 57
  4191  053F  1903               	skipnz
  4192  0540  2CC7               	goto	l3795
  4193  0541  3A03               	xorlw	3	; case 58
  4194  0542  1903               	skipnz
  4195  0543  2CC7               	goto	l3803
  4196  0544  3A01               	xorlw	1	; case 59
  4197  0545  1903               	skipnz
  4198  0546  2CC7               	goto	l3811
  4199  0547  3A07               	xorlw	7	; case 60
  4200  0548  1903               	skipnz
  4201  0549  2CC7               	goto	l3819
  4202  054A  3A01               	xorlw	1	; case 61
  4203  054B  1903               	skipnz
  4204  054C  2CC7               	goto	l3827
  4205  054D  3A03               	xorlw	3	; case 62
  4206  054E  1903               	skipnz
  4207  054F  2CC7               	goto	l3835
  4208  0550  2CEF               	goto	l3849
  4209  0551                     l3937:	
  4210                           
  4211                           ; Switch size 1, requested type "space"
  4212                           ; Number of cases is 1, Range of values is 154 to 154
  4213                           ; switch strategies available:
  4214                           ; Name         Instructions Cycles
  4215                           ; simple_byte            4     3 (average)
  4216                           ; direct_byte           14    11 (fixed)
  4217                           ; jumptable            263     9 (fixed)
  4218                           ;	Chosen strategy is simple_byte
  4219  0551  0847               	movf	main@aux,w
  4220  0552  3A9A               	xorlw	154	; case 154
  4221  0553  1903               	skipnz
  4222  0554  2CE6               	goto	l3843
  4223  0555  2CEF               	goto	l3849
  4224  0556  2CEF               	goto	l3849
  4225  0557                     __end_of_main:	
  4226                           
  4227                           	psect	text1
  4228  1333                     __ptext1:	
  4229 ;; *************** function _transmite *****************
  4230 ;; Defined at:
  4231 ;;		line 83 in file "Serial.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0, pclath, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4245 ;;      Params:         0       0       0       0       0
  4246 ;;      Locals:         0       0       0       0       0
  4247 ;;      Temps:          0       1       0       0       0
  4248 ;;      Totals:         0       1       0       0       0
  4249 ;;Total ram usage:        1 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    5
  4252 ;; This function calls:
  4253 ;;		_hexToAscii
  4254 ;;		_serialIn
  4255 ;;		_writeEUSART
  4256 ;; This function is called by:
  4257 ;;		_main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _transmite
  4263  1333                     _transmite:	
  4264                           
  4265                           ;Serial.c: 85: serial = serialIn();
  4266                           
  4267                           ;incstack = 0
  4268                           ; Regs used in _transmite: [wreg+status,2+status,0+pclath+cstack]
  4269  1333  160A  118A  2106  160A  118A  	fcall	_serialIn
  4270  1338  1283               	bcf	3,5	;RP0=0, select bank0
  4271  1339  1303               	bcf	3,6	;RP1=0, select bank0
  4272  133A  00A8               	movwf	??_transmite
  4273  133B  0828               	movf	??_transmite,w
  4274  133C  00D1               	movwf	_serial
  4275                           
  4276                           ;Serial.c: 87: if(serial != comp)
  4277  133D  0851               	movf	_serial,w
  4278  133E  0652               	xorwf	_comp,w
  4279  133F  1903               	skipnz
  4280  1340  0008               	return
  4281                           
  4282                           ;Serial.c: 88: {
  4283                           ;Serial.c: 89: hexToAscii(serialIn());
  4284  1341  160A  118A  2106  160A  118A  	fcall	_serialIn
  4285  1346  160A  118A  2306  160A  118A  	fcall	_hexToAscii
  4286                           
  4287                           ;Serial.c: 90: writeEUSART(tdez);
  4288  134B  1283               	bcf	3,5	;RP0=0, select bank0
  4289  134C  1303               	bcf	3,6	;RP1=0, select bank0
  4290  134D  0853               	movf	_tdez,w
  4291  134E  160A  118A  2073  160A  118A  	fcall	_writeEUSART
  4292                           
  4293                           ;Serial.c: 91: writeEUSART(tuni);
  4294  1353  1283               	bcf	3,5	;RP0=0, select bank0
  4295  1354  1303               	bcf	3,6	;RP1=0, select bank0
  4296  1355  0854               	movf	_tuni,w
  4297  1356  160A  118A  2073   	fcall	_writeEUSART
  4298                           
  4299                           ;Serial.c: 92: comp = serial;
  4300  1359  1283               	bcf	3,5	;RP0=0, select bank0
  4301  135A  1303               	bcf	3,6	;RP1=0, select bank0
  4302  135B  0851               	movf	_serial,w
  4303  135C  00A8               	movwf	??_transmite
  4304  135D  0828               	movf	??_transmite,w
  4305  135E  00D2               	movwf	_comp
  4306  135F  0008               	return
  4307  1360                     __end_of_transmite:	
  4308                           
  4309                           	psect	text2
  4310  1106                     __ptext2:	
  4311 ;; *************** function _serialIn *****************
  4312 ;; Defined at:
  4313 ;;		line 40 in file "Serial.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;  i               1    6[BANK0 ] unsigned char 
  4318 ;;  dado            1    5[BANK0 ] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      unsigned char 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2, status,0
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4328 ;;      Params:         0       0       0       0       0
  4329 ;;      Locals:         0       2       0       0       0
  4330 ;;      Temps:          0       1       0       0       0
  4331 ;;      Totals:         0       3       0       0       0
  4332 ;;Total ram usage:        3 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    4
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_transmite
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           
  4343                           ;psect for function _serialIn
  4344  1106                     _serialIn:	
  4345                           
  4346                           ;Serial.c: 42: unsigned char i = 0x80;
  4347                           
  4348                           ;incstack = 0
  4349                           ; Regs used in _serialIn: [wreg+status,2+status,0]
  4350  1106  3080               	movlw	128
  4351  1107  1283               	bcf	3,5	;RP0=0, select bank0
  4352  1108  1303               	bcf	3,6	;RP1=0, select bank0
  4353  1109  00A4               	movwf	??_serialIn
  4354  110A  0824               	movf	??_serialIn,w
  4355  110B  00A6               	movwf	serialIn@i
  4356                           
  4357                           ;Serial.c: 43: unsigned char dado = 0;
  4358  110C  01A5               	clrf	serialIn@dado
  4359                           
  4360                           ;Serial.c: 44: PORTBbits.RB3 = 0;
  4361  110D  1186               	bcf	6,3	;volatile
  4362                           
  4363                           ;Serial.c: 45: PORTBbits.RB3 = 1;
  4364  110E  1586               	bsf	6,3	;volatile
  4365  110F                     l2675:	
  4366                           ;Serial.c: 46: while (i)
  4367                           
  4368  110F  0826               	movf	serialIn@i,w
  4369  1110  1903               	btfsc	3,2
  4370  1111  291D               	goto	l2677
  4371                           
  4372                           ;Serial.c: 47: {
  4373                           ;Serial.c: 48: PORTBbits.RB2 = 0;
  4374  1112  1106               	bcf	6,2	;volatile
  4375                           
  4376                           ;Serial.c: 49: if(PORTBbits.RB1)
  4377  1113  1C86               	btfss	6,1	;volatile
  4378  1114  2919               	goto	l2671
  4379                           
  4380                           ;Serial.c: 50: dado |=i;
  4381  1115  0826               	movf	serialIn@i,w
  4382  1116  00A4               	movwf	??_serialIn
  4383  1117  0824               	movf	??_serialIn,w
  4384  1118  04A5               	iorwf	serialIn@dado,f
  4385  1119                     l2671:	
  4386                           
  4387                           ;Serial.c: 51: i >>=1;
  4388  1119  1003               	clrc
  4389  111A  0CA6               	rrf	serialIn@i,f
  4390                           
  4391                           ;Serial.c: 52: PORTBbits.RB2 = 1;
  4392  111B  1506               	bsf	6,2	;volatile
  4393  111C  290F               	goto	l2675
  4394  111D                     l2677:	
  4395                           
  4396                           ;Serial.c: 53: }
  4397                           ;Serial.c: 54: return(dado);
  4398  111D  0825               	movf	serialIn@dado,w
  4399  111E  0008               	return
  4400  111F                     __end_of_serialIn:	
  4401                           
  4402                           	psect	text3
  4403  1306                     __ptext3:	
  4404 ;; *************** function _hexToAscii *****************
  4405 ;; Defined at:
  4406 ;;		line 57 in file "Serial.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;  dado            1    wreg     unsigned char 
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  dado            1    5[BANK0 ] unsigned char 
  4411 ;;  dez             1    7[BANK0 ] unsigned char 
  4412 ;;  uni             1    6[BANK0 ] unsigned char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2, status,0
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4422 ;;      Params:         0       0       0       0       0
  4423 ;;      Locals:         0       3       0       0       0
  4424 ;;      Temps:          0       1       0       0       0
  4425 ;;      Totals:         0       4       0       0       0
  4426 ;;Total ram usage:        4 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    4
  4429 ;; This function calls:
  4430 ;;		Nothing
  4431 ;; This function is called by:
  4432 ;;		_transmite
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           
  4437                           ;psect for function _hexToAscii
  4438  1306                     _hexToAscii:	
  4439                           
  4440                           ;incstack = 0
  4441                           ; Regs used in _hexToAscii: [wreg+status,2+status,0]
  4442                           ;hexToAscii@dado stored from wreg
  4443  1306  1283               	bcf	3,5	;RP0=0, select bank0
  4444  1307  1303               	bcf	3,6	;RP1=0, select bank0
  4445  1308  00A5               	movwf	hexToAscii@dado
  4446                           
  4447                           ;Serial.c: 59: char dez;
  4448                           ;Serial.c: 60: char uni;
  4449                           ;Serial.c: 62: uni = dado & 0x0F;
  4450  1309  0825               	movf	hexToAscii@dado,w
  4451  130A  390F               	andlw	15
  4452  130B  00A4               	movwf	??_hexToAscii
  4453  130C  0824               	movf	??_hexToAscii,w
  4454  130D  00A6               	movwf	hexToAscii@uni
  4455                           
  4456                           ;Serial.c: 63: dez = dado & 0xF0;
  4457  130E  0825               	movf	hexToAscii@dado,w
  4458  130F  39F0               	andlw	240
  4459  1310  00A4               	movwf	??_hexToAscii
  4460  1311  0824               	movf	??_hexToAscii,w
  4461  1312  00A7               	movwf	hexToAscii@dez
  4462                           
  4463                           ;Serial.c: 64: dez >>= 4 ;
  4464  1313  0EA7               	swapf	hexToAscii@dez,f
  4465  1314  300F               	movlw	15
  4466  1315  05A7               	andwf	hexToAscii@dez,f
  4467                           
  4468                           ;Serial.c: 66: if (uni > 0x09)
  4469  1316  300A               	movlw	10
  4470  1317  0226               	subwf	hexToAscii@uni,w
  4471  1318  1C03               	skipc
  4472  1319  2B1C               	goto	l2689
  4473                           
  4474                           ;Serial.c: 67: uni += 0x37;
  4475  131A  3037               	movlw	55
  4476  131B  2B1D               	goto	L52
  4477  131C                     l2689:	
  4478                           
  4479                           ;Serial.c: 68: else
  4480                           ;Serial.c: 69: uni += 0x30;
  4481  131C  3030               	movlw	48
  4482  131D                     L52:	
  4483  131D  00A4               	movwf	??_hexToAscii
  4484  131E  0824               	movf	??_hexToAscii,w
  4485  131F  07A6               	addwf	hexToAscii@uni,f
  4486                           
  4487                           ;Serial.c: 71: if (dez > 0x09)
  4488  1320  300A               	movlw	10
  4489  1321  0227               	subwf	hexToAscii@dez,w
  4490  1322  1C03               	skipc
  4491  1323  2B26               	goto	l2695
  4492                           
  4493                           ;Serial.c: 72: dez += 0x37;
  4494  1324  3037               	movlw	55
  4495  1325  2B27               	goto	L53
  4496  1326                     l2695:	
  4497                           
  4498                           ;Serial.c: 73: else
  4499                           ;Serial.c: 74: dez += 0x30;
  4500  1326  3030               	movlw	48
  4501  1327                     L53:	
  4502  1327  00A4               	movwf	??_hexToAscii
  4503  1328  0824               	movf	??_hexToAscii,w
  4504  1329  07A7               	addwf	hexToAscii@dez,f
  4505                           
  4506                           ;Serial.c: 76: tdez = dez;
  4507  132A  0827               	movf	hexToAscii@dez,w
  4508  132B  00A4               	movwf	??_hexToAscii
  4509  132C  0824               	movf	??_hexToAscii,w
  4510  132D  00D3               	movwf	_tdez
  4511                           
  4512                           ;Serial.c: 77: tuni = uni;
  4513  132E  0826               	movf	hexToAscii@uni,w
  4514  132F  00A4               	movwf	??_hexToAscii
  4515  1330  0824               	movf	??_hexToAscii,w
  4516  1331  00D4               	movwf	_tuni
  4517  1332  0008               	return
  4518  1333                     __end_of_hexToAscii:	
  4519                           
  4520                           	psect	text4
  4521  14AF                     __ptext4:	
  4522 ;; *************** function _textSelectionEST *****************
  4523 ;; Defined at:
  4524 ;;		line 120 in file "auxiliar.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;		None
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;		None
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  1    wreg      void 
  4531 ;; Registers used:
  4532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4538 ;;      Params:         0       0       0       0       0
  4539 ;;      Locals:         0       0       0       0       0
  4540 ;;      Temps:          0       3       0       0       0
  4541 ;;      Totals:         0       3       0       0       0
  4542 ;;Total ram usage:        3 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    7
  4545 ;; This function calls:
  4546 ;;		___awdiv
  4547 ;;		_statusT0
  4548 ;;		_statusT0limite
  4549 ;;		_writeLCD
  4550 ;; This function is called by:
  4551 ;;		_main
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           
  4556                           ;psect for function _textSelectionEST
  4557  14AF                     _textSelectionEST:	
  4558                           
  4559                           ;auxiliar.c: 122: writeLCD(13,1,"CLP");
  4560                           
  4561                           ;incstack = 0
  4562                           ; Regs used in _textSelectionEST: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4563  14AF  1283               	bcf	3,5	;RP0=0, select bank0
  4564  14B0  1303               	bcf	3,6	;RP1=0, select bank0
  4565  14B1  01AC               	clrf	writeLCD@y
  4566  14B2  0AAC               	incf	writeLCD@y,f
  4567  14B3  30EB               	movlw	low ((STR_108+13)| (0+32768))
  4568  14B4  00AD               	movwf	writeLCD@ptr
  4569  14B5  3087               	movlw	high ((STR_108+13)| (0+32768))
  4570  14B6  00AE               	movwf	writeLCD@ptr+1
  4571  14B7  300D               	movlw	13
  4572  14B8  160A  118A  2390  160A  118A  	fcall	_writeLCD
  4573                           
  4574                           ;auxiliar.c: 123: if( statusT0() < ( statusT0limite()/2 ) )
  4575  14BD  160A  118A  2087  160A  118A  	fcall	_statusT0
  4576  14C2  1283               	bcf	3,5	;RP0=0, select bank0
  4577  14C3  1303               	bcf	3,6	;RP1=0, select bank0
  4578  14C4  0824               	movf	?_statusT0,w
  4579  14C5  00B1               	movwf	??_textSelectionEST
  4580  14C6  0825               	movf	?_statusT0+1,w
  4581  14C7  00B2               	movwf	??_textSelectionEST+1
  4582  14C8  3002               	movlw	2
  4583  14C9  00A6               	movwf	___awdiv@divisor
  4584  14CA  3000               	movlw	0
  4585  14CB  00A7               	movwf	___awdiv@divisor+1
  4586  14CC  160A  118A  208E  160A  118A  	fcall	_statusT0limite
  4587  14D1  1283               	bcf	3,5	;RP0=0, select bank0
  4588  14D2  1303               	bcf	3,6	;RP1=0, select bank0
  4589  14D3  0825               	movf	?_statusT0limite+1,w
  4590  14D4  00A9               	movwf	___awdiv@dividend+1
  4591  14D5  0824               	movf	?_statusT0limite,w
  4592  14D6  00A8               	movwf	___awdiv@dividend
  4593  14D7  160A  118A  25B9  160A  118A  	fcall	___awdiv
  4594  14DC  1283               	bcf	3,5	;RP0=0, select bank0
  4595  14DD  1303               	bcf	3,6	;RP1=0, select bank0
  4596  14DE  0832               	movf	??_textSelectionEST+1,w
  4597  14DF  3A80               	xorlw	128
  4598  14E0  00B3               	movwf	??_textSelectionEST+2
  4599  14E1  0827               	movf	?___awdiv+1,w
  4600  14E2  3A80               	xorlw	128
  4601  14E3  0233               	subwf	??_textSelectionEST+2,w
  4602  14E4  1D03               	skipz
  4603  14E5  2CE8               	goto	u2115
  4604  14E6  0826               	movf	?___awdiv,w
  4605  14E7  0231               	subwf	??_textSelectionEST,w
  4606  14E8                     u2115:	
  4607  14E8  1803               	skipnc
  4608  14E9  2CF7               	goto	l3031
  4609                           
  4610                           ;auxiliar.c: 124: writeLCD(0,1,"       ");
  4611  14EA  1283               	bcf	3,5	;RP0=0, select bank0
  4612  14EB  1303               	bcf	3,6	;RP1=0, select bank0
  4613  14EC  01AC               	clrf	writeLCD@y
  4614  14ED  0AAC               	incf	writeLCD@y,f
  4615  14EE  3009               	movlw	low ((STR_68+9)| (0+32768))
  4616  14EF  00AD               	movwf	writeLCD@ptr
  4617  14F0  3088               	movlw	high ((STR_68+9)| (0+32768))
  4618  14F1  00AE               	movwf	writeLCD@ptr+1
  4619  14F2  3000               	movlw	0
  4620  14F3  160A  118A  2390   	fcall	_writeLCD
  4621  14F6  0008               	return
  4622  14F7                     l3031:	
  4623                           
  4624                           ;auxiliar.c: 125: else
  4625                           ;auxiliar.c: 126: writeLCD(0,1,"ESTEIRA");
  4626  14F7  1283               	bcf	3,5	;RP0=0, select bank0
  4627  14F8  1303               	bcf	3,6	;RP1=0, select bank0
  4628  14F9  01AC               	clrf	writeLCD@y
  4629  14FA  0AAC               	incf	writeLCD@y,f
  4630  14FB  30C2               	movlw	low (STR_47| (0+32768))
  4631  14FC  00AD               	movwf	writeLCD@ptr
  4632  14FD  3089               	movlw	high (STR_47| (0+32768))
  4633  14FE  00AE               	movwf	writeLCD@ptr+1
  4634  14FF  3000               	movlw	0
  4635  1500  160A  118A  2390   	fcall	_writeLCD
  4636  1503  0008               	return
  4637  1504                     __end_of_textSelectionEST:	
  4638                           
  4639                           	psect	text5
  4640  145A                     __ptext5:	
  4641 ;; *************** function _textSelectionCLP *****************
  4642 ;; Defined at:
  4643 ;;		line 128 in file "auxiliar.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4657 ;;      Params:         0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0
  4659 ;;      Temps:          0       3       0       0       0
  4660 ;;      Totals:         0       3       0       0       0
  4661 ;;Total ram usage:        3 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    7
  4664 ;; This function calls:
  4665 ;;		___awdiv
  4666 ;;		_statusT0
  4667 ;;		_statusT0limite
  4668 ;;		_writeLCD
  4669 ;; This function is called by:
  4670 ;;		_main
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           
  4675                           ;psect for function _textSelectionCLP
  4676  145A                     _textSelectionCLP:	
  4677                           
  4678                           ;auxiliar.c: 130: writeLCD(0,1,"ESTEIRA");
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in _textSelectionCLP: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4682  145A  1283               	bcf	3,5	;RP0=0, select bank0
  4683  145B  1303               	bcf	3,6	;RP1=0, select bank0
  4684  145C  01AC               	clrf	writeLCD@y
  4685  145D  0AAC               	incf	writeLCD@y,f
  4686  145E  30C2               	movlw	low (STR_47| (0+32768))
  4687  145F  00AD               	movwf	writeLCD@ptr
  4688  1460  3089               	movlw	high (STR_47| (0+32768))
  4689  1461  00AE               	movwf	writeLCD@ptr+1
  4690  1462  3000               	movlw	0
  4691  1463  160A  118A  2390  160A  118A  	fcall	_writeLCD
  4692                           
  4693                           ;auxiliar.c: 131: if( statusT0() < ( statusT0limite()/2 ) )
  4694  1468  160A  118A  2087  160A  118A  	fcall	_statusT0
  4695  146D  1283               	bcf	3,5	;RP0=0, select bank0
  4696  146E  1303               	bcf	3,6	;RP1=0, select bank0
  4697  146F  0824               	movf	?_statusT0,w
  4698  1470  00B1               	movwf	??_textSelectionCLP
  4699  1471  0825               	movf	?_statusT0+1,w
  4700  1472  00B2               	movwf	??_textSelectionCLP+1
  4701  1473  3002               	movlw	2
  4702  1474  00A6               	movwf	___awdiv@divisor
  4703  1475  3000               	movlw	0
  4704  1476  00A7               	movwf	___awdiv@divisor+1
  4705  1477  160A  118A  208E  160A  118A  	fcall	_statusT0limite
  4706  147C  1283               	bcf	3,5	;RP0=0, select bank0
  4707  147D  1303               	bcf	3,6	;RP1=0, select bank0
  4708  147E  0825               	movf	?_statusT0limite+1,w
  4709  147F  00A9               	movwf	___awdiv@dividend+1
  4710  1480  0824               	movf	?_statusT0limite,w
  4711  1481  00A8               	movwf	___awdiv@dividend
  4712  1482  160A  118A  25B9  160A  118A  	fcall	___awdiv
  4713  1487  1283               	bcf	3,5	;RP0=0, select bank0
  4714  1488  1303               	bcf	3,6	;RP1=0, select bank0
  4715  1489  0832               	movf	??_textSelectionCLP+1,w
  4716  148A  3A80               	xorlw	128
  4717  148B  00B3               	movwf	??_textSelectionCLP+2
  4718  148C  0827               	movf	?___awdiv+1,w
  4719  148D  3A80               	xorlw	128
  4720  148E  0233               	subwf	??_textSelectionCLP+2,w
  4721  148F  1D03               	skipz
  4722  1490  2C93               	goto	u2125
  4723  1491  0826               	movf	?___awdiv,w
  4724  1492  0231               	subwf	??_textSelectionCLP,w
  4725  1493                     u2125:	
  4726  1493  1803               	skipnc
  4727  1494  2CA2               	goto	l3039
  4728                           
  4729                           ;auxiliar.c: 132: writeLCD(13,1,"   ");
  4730  1495  1283               	bcf	3,5	;RP0=0, select bank0
  4731  1496  1303               	bcf	3,6	;RP1=0, select bank0
  4732  1497  01AC               	clrf	writeLCD@y
  4733  1498  0AAC               	incf	writeLCD@y,f
  4734  1499  300D               	movlw	low ((STR_68+13)| (0+32768))
  4735  149A  00AD               	movwf	writeLCD@ptr
  4736  149B  3088               	movlw	high ((STR_68+13)| (0+32768))
  4737  149C  00AE               	movwf	writeLCD@ptr+1
  4738  149D  300D               	movlw	13
  4739  149E  160A  118A  2390   	fcall	_writeLCD
  4740  14A1  0008               	return
  4741  14A2                     l3039:	
  4742                           
  4743                           ;auxiliar.c: 133: else
  4744                           ;auxiliar.c: 134: writeLCD(13,1,"CLP");
  4745  14A2  1283               	bcf	3,5	;RP0=0, select bank0
  4746  14A3  1303               	bcf	3,6	;RP1=0, select bank0
  4747  14A4  01AC               	clrf	writeLCD@y
  4748  14A5  0AAC               	incf	writeLCD@y,f
  4749  14A6  30EB               	movlw	low ((STR_108+13)| (0+32768))
  4750  14A7  00AD               	movwf	writeLCD@ptr
  4751  14A8  3087               	movlw	high ((STR_108+13)| (0+32768))
  4752  14A9  00AE               	movwf	writeLCD@ptr+1
  4753  14AA  300D               	movlw	13
  4754  14AB  160A  118A  2390   	fcall	_writeLCD
  4755  14AE  0008               	return
  4756  14AF                     __end_of_textSelectionCLP:	
  4757                           
  4758                           	psect	text6
  4759  0B69                     __ptext6:	
  4760 ;; *************** function _textSelection8 *****************
  4761 ;; Defined at:
  4762 ;;		line 110 in file "auxiliar.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;		None
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;		None
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      void 
  4769 ;; Registers used:
  4770 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4776 ;;      Params:         0       0       0       0       0
  4777 ;;      Locals:         0       0       0       0       0
  4778 ;;      Temps:          0       3       0       0       0
  4779 ;;      Totals:         0       3       0       0       0
  4780 ;;Total ram usage:        3 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    7
  4783 ;; This function calls:
  4784 ;;		___awdiv
  4785 ;;		_statusT0
  4786 ;;		_statusT0limite
  4787 ;;		_writeLCD
  4788 ;; This function is called by:
  4789 ;;		_main
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           
  4794                           ;psect for function _textSelection8
  4795  0B69                     _textSelection8:	
  4796                           
  4797                           ;auxiliar.c: 112: writeLCD(13,1,"7");
  4798                           
  4799                           ;incstack = 0
  4800                           ; Regs used in _textSelection8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4801  0B69  1283               	bcf	3,5	;RP0=0, select bank0
  4802  0B6A  1303               	bcf	3,6	;RP1=0, select bank0
  4803  0B6B  01AC               	clrf	writeLCD@y
  4804  0B6C  0AAC               	incf	writeLCD@y,f
  4805  0B6D  30EF               	movlw	low (STR_34| (0+32768))
  4806  0B6E  00AD               	movwf	writeLCD@ptr
  4807  0B6F  3089               	movlw	high (STR_34| (0+32768))
  4808  0B70  00AE               	movwf	writeLCD@ptr+1
  4809  0B71  300D               	movlw	13
  4810  0B72  160A  118A  2390  120A  158A  	fcall	_writeLCD
  4811                           
  4812                           ;auxiliar.c: 113: writeLCD(0,1,"1");
  4813  0B77  1283               	bcf	3,5	;RP0=0, select bank0
  4814  0B78  1303               	bcf	3,6	;RP1=0, select bank0
  4815  0B79  01AC               	clrf	writeLCD@y
  4816  0B7A  0AAC               	incf	writeLCD@y,f
  4817  0B7B  30E5               	movlw	low (STR_16| (0+32768))
  4818  0B7C  00AD               	movwf	writeLCD@ptr
  4819  0B7D  3089               	movlw	high (STR_16| (0+32768))
  4820  0B7E  00AE               	movwf	writeLCD@ptr+1
  4821  0B7F  3000               	movlw	0
  4822  0B80  160A  118A  2390  120A  158A  	fcall	_writeLCD
  4823                           
  4824                           ;auxiliar.c: 114: if( statusT0() < ( statusT0limite()/2 ) )
  4825  0B85  160A  118A  2087  120A  158A  	fcall	_statusT0
  4826  0B8A  1283               	bcf	3,5	;RP0=0, select bank0
  4827  0B8B  1303               	bcf	3,6	;RP1=0, select bank0
  4828  0B8C  0824               	movf	?_statusT0,w
  4829  0B8D  00B1               	movwf	??_textSelection8
  4830  0B8E  0825               	movf	?_statusT0+1,w
  4831  0B8F  00B2               	movwf	??_textSelection8+1
  4832  0B90  3002               	movlw	2
  4833  0B91  00A6               	movwf	___awdiv@divisor
  4834  0B92  3000               	movlw	0
  4835  0B93  00A7               	movwf	___awdiv@divisor+1
  4836  0B94  160A  118A  208E  120A  158A  	fcall	_statusT0limite
  4837  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  4838  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
  4839  0B9B  0825               	movf	?_statusT0limite+1,w
  4840  0B9C  00A9               	movwf	___awdiv@dividend+1
  4841  0B9D  0824               	movf	?_statusT0limite,w
  4842  0B9E  00A8               	movwf	___awdiv@dividend
  4843  0B9F  160A  118A  25B9  120A  158A  	fcall	___awdiv
  4844  0BA4  1283               	bcf	3,5	;RP0=0, select bank0
  4845  0BA5  1303               	bcf	3,6	;RP1=0, select bank0
  4846  0BA6  0832               	movf	??_textSelection8+1,w
  4847  0BA7  3A80               	xorlw	128
  4848  0BA8  00B3               	movwf	??_textSelection8+2
  4849  0BA9  0827               	movf	?___awdiv+1,w
  4850  0BAA  3A80               	xorlw	128
  4851  0BAB  0233               	subwf	??_textSelection8+2,w
  4852  0BAC  1D03               	skipz
  4853  0BAD  2BB0               	goto	u2105
  4854  0BAE  0826               	movf	?___awdiv,w
  4855  0BAF  0231               	subwf	??_textSelection8,w
  4856  0BB0                     u2105:	
  4857  0BB0  1803               	skipnc
  4858  0BB1  2BBF               	goto	l3023
  4859                           
  4860                           ;auxiliar.c: 115: writeLCD(15,1," ");
  4861  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  4862  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0BB4  01AC               	clrf	writeLCD@y
  4864  0BB5  0AAC               	incf	writeLCD@y,f
  4865  0BB6  300F               	movlw	low ((STR_68+15)| (0+32768))
  4866  0BB7  00AD               	movwf	writeLCD@ptr
  4867  0BB8  3088               	movlw	high ((STR_68+15)| (0+32768))
  4868  0BB9  00AE               	movwf	writeLCD@ptr+1
  4869  0BBA  300F               	movlw	15
  4870  0BBB  160A  118A  2390   	fcall	_writeLCD
  4871  0BBE  0008               	return
  4872  0BBF                     l3023:	
  4873                           
  4874                           ;auxiliar.c: 116: else
  4875                           ;auxiliar.c: 117: writeLCD(15,1,"8");
  4876  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  4877  0BC0  1303               	bcf	3,6	;RP1=0, select bank0
  4878  0BC1  01AC               	clrf	writeLCD@y
  4879  0BC2  0AAC               	incf	writeLCD@y,f
  4880  0BC3  30BA               	movlw	low ((STR_123+15)| (0+32768))
  4881  0BC4  00AD               	movwf	writeLCD@ptr
  4882  0BC5  3087               	movlw	high ((STR_123+15)| (0+32768))
  4883  0BC6  00AE               	movwf	writeLCD@ptr+1
  4884  0BC7  300F               	movlw	15
  4885  0BC8  160A  118A  2390   	fcall	_writeLCD
  4886  0BCB  0008               	return
  4887  0BCC                     __end_of_textSelection8:	
  4888                           
  4889                           	psect	text7
  4890  0B06                     __ptext7:	
  4891 ;; *************** function _textSelection7 *****************
  4892 ;; Defined at:
  4893 ;;		line 100 in file "auxiliar.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      void 
  4900 ;; Registers used:
  4901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4907 ;;      Params:         0       0       0       0       0
  4908 ;;      Locals:         0       0       0       0       0
  4909 ;;      Temps:          0       3       0       0       0
  4910 ;;      Totals:         0       3       0       0       0
  4911 ;;Total ram usage:        3 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    7
  4914 ;; This function calls:
  4915 ;;		___awdiv
  4916 ;;		_statusT0
  4917 ;;		_statusT0limite
  4918 ;;		_writeLCD
  4919 ;; This function is called by:
  4920 ;;		_main
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           
  4925                           ;psect for function _textSelection7
  4926  0B06                     _textSelection7:	
  4927                           
  4928                           ;auxiliar.c: 102: writeLCD(11,1,"6");
  4929                           
  4930                           ;incstack = 0
  4931                           ; Regs used in _textSelection7: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4932  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  4933  0B07  1303               	bcf	3,6	;RP1=0, select bank0
  4934  0B08  01AC               	clrf	writeLCD@y
  4935  0B09  0AAC               	incf	writeLCD@y,f
  4936  0B0A  30ED               	movlw	low (STR_30| (0+32768))
  4937  0B0B  00AD               	movwf	writeLCD@ptr
  4938  0B0C  3089               	movlw	high (STR_30| (0+32768))
  4939  0B0D  00AE               	movwf	writeLCD@ptr+1
  4940  0B0E  300B               	movlw	11
  4941  0B0F  160A  118A  2390  120A  158A  	fcall	_writeLCD
  4942                           
  4943                           ;auxiliar.c: 103: writeLCD(15,1,"8");
  4944  0B14  1283               	bcf	3,5	;RP0=0, select bank0
  4945  0B15  1303               	bcf	3,6	;RP1=0, select bank0
  4946  0B16  01AC               	clrf	writeLCD@y
  4947  0B17  0AAC               	incf	writeLCD@y,f
  4948  0B18  30BA               	movlw	low ((STR_123+15)| (0+32768))
  4949  0B19  00AD               	movwf	writeLCD@ptr
  4950  0B1A  3087               	movlw	high ((STR_123+15)| (0+32768))
  4951  0B1B  00AE               	movwf	writeLCD@ptr+1
  4952  0B1C  300F               	movlw	15
  4953  0B1D  160A  118A  2390  120A  158A  	fcall	_writeLCD
  4954                           
  4955                           ;auxiliar.c: 104: if( statusT0() < ( statusT0limite()/2 ) )
  4956  0B22  160A  118A  2087  120A  158A  	fcall	_statusT0
  4957  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  4958  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  4959  0B29  0824               	movf	?_statusT0,w
  4960  0B2A  00B1               	movwf	??_textSelection7
  4961  0B2B  0825               	movf	?_statusT0+1,w
  4962  0B2C  00B2               	movwf	??_textSelection7+1
  4963  0B2D  3002               	movlw	2
  4964  0B2E  00A6               	movwf	___awdiv@divisor
  4965  0B2F  3000               	movlw	0
  4966  0B30  00A7               	movwf	___awdiv@divisor+1
  4967  0B31  160A  118A  208E  120A  158A  	fcall	_statusT0limite
  4968  0B36  1283               	bcf	3,5	;RP0=0, select bank0
  4969  0B37  1303               	bcf	3,6	;RP1=0, select bank0
  4970  0B38  0825               	movf	?_statusT0limite+1,w
  4971  0B39  00A9               	movwf	___awdiv@dividend+1
  4972  0B3A  0824               	movf	?_statusT0limite,w
  4973  0B3B  00A8               	movwf	___awdiv@dividend
  4974  0B3C  160A  118A  25B9  120A  158A  	fcall	___awdiv
  4975  0B41  1283               	bcf	3,5	;RP0=0, select bank0
  4976  0B42  1303               	bcf	3,6	;RP1=0, select bank0
  4977  0B43  0832               	movf	??_textSelection7+1,w
  4978  0B44  3A80               	xorlw	128
  4979  0B45  00B3               	movwf	??_textSelection7+2
  4980  0B46  0827               	movf	?___awdiv+1,w
  4981  0B47  3A80               	xorlw	128
  4982  0B48  0233               	subwf	??_textSelection7+2,w
  4983  0B49  1D03               	skipz
  4984  0B4A  2B4D               	goto	u2095
  4985  0B4B  0826               	movf	?___awdiv,w
  4986  0B4C  0231               	subwf	??_textSelection7,w
  4987  0B4D                     u2095:	
  4988  0B4D  1803               	skipnc
  4989  0B4E  2B5C               	goto	l3015
  4990                           
  4991                           ;auxiliar.c: 105: writeLCD(13,1," ");
  4992  0B4F  1283               	bcf	3,5	;RP0=0, select bank0
  4993  0B50  1303               	bcf	3,6	;RP1=0, select bank0
  4994  0B51  01AC               	clrf	writeLCD@y
  4995  0B52  0AAC               	incf	writeLCD@y,f
  4996  0B53  300F               	movlw	low ((STR_68+15)| (0+32768))
  4997  0B54  00AD               	movwf	writeLCD@ptr
  4998  0B55  3088               	movlw	high ((STR_68+15)| (0+32768))
  4999  0B56  00AE               	movwf	writeLCD@ptr+1
  5000  0B57  300D               	movlw	13
  5001  0B58  160A  118A  2390   	fcall	_writeLCD
  5002  0B5B  0008               	return
  5003  0B5C                     l3015:	
  5004                           
  5005                           ;auxiliar.c: 106: else
  5006                           ;auxiliar.c: 107: writeLCD(13,1,"7");
  5007  0B5C  1283               	bcf	3,5	;RP0=0, select bank0
  5008  0B5D  1303               	bcf	3,6	;RP1=0, select bank0
  5009  0B5E  01AC               	clrf	writeLCD@y
  5010  0B5F  0AAC               	incf	writeLCD@y,f
  5011  0B60  30EF               	movlw	low (STR_34| (0+32768))
  5012  0B61  00AD               	movwf	writeLCD@ptr
  5013  0B62  3089               	movlw	high (STR_34| (0+32768))
  5014  0B63  00AE               	movwf	writeLCD@ptr+1
  5015  0B64  300D               	movlw	13
  5016  0B65  160A  118A  2390   	fcall	_writeLCD
  5017  0B68  0008               	return
  5018  0B69                     __end_of_textSelection7:	
  5019                           
  5020                           	psect	text8
  5021  0AA3                     __ptext8:	
  5022 ;; *************** function _textSelection6 *****************
  5023 ;; Defined at:
  5024 ;;		line 90 in file "auxiliar.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;		None
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;		None
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  1    wreg      void 
  5031 ;; Registers used:
  5032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5038 ;;      Params:         0       0       0       0       0
  5039 ;;      Locals:         0       0       0       0       0
  5040 ;;      Temps:          0       3       0       0       0
  5041 ;;      Totals:         0       3       0       0       0
  5042 ;;Total ram usage:        3 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; Hardware stack levels required when called:    7
  5045 ;; This function calls:
  5046 ;;		___awdiv
  5047 ;;		_statusT0
  5048 ;;		_statusT0limite
  5049 ;;		_writeLCD
  5050 ;; This function is called by:
  5051 ;;		_main
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           
  5056                           ;psect for function _textSelection6
  5057  0AA3                     _textSelection6:	
  5058                           
  5059                           ;auxiliar.c: 92: writeLCD(9,1,"5");
  5060                           
  5061                           ;incstack = 0
  5062                           ; Regs used in _textSelection6: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5063  0AA3  1283               	bcf	3,5	;RP0=0, select bank0
  5064  0AA4  1303               	bcf	3,6	;RP1=0, select bank0
  5065  0AA5  01AC               	clrf	writeLCD@y
  5066  0AA6  0AAC               	incf	writeLCD@y,f
  5067  0AA7  30EB               	movlw	low (STR_26| (0+32768))
  5068  0AA8  00AD               	movwf	writeLCD@ptr
  5069  0AA9  3089               	movlw	high (STR_26| (0+32768))
  5070  0AAA  00AE               	movwf	writeLCD@ptr+1
  5071  0AAB  3009               	movlw	9
  5072  0AAC  160A  118A  2390  120A  158A  	fcall	_writeLCD
  5073                           
  5074                           ;auxiliar.c: 93: writeLCD(13,1,"7");
  5075  0AB1  1283               	bcf	3,5	;RP0=0, select bank0
  5076  0AB2  1303               	bcf	3,6	;RP1=0, select bank0
  5077  0AB3  01AC               	clrf	writeLCD@y
  5078  0AB4  0AAC               	incf	writeLCD@y,f
  5079  0AB5  30EF               	movlw	low (STR_34| (0+32768))
  5080  0AB6  00AD               	movwf	writeLCD@ptr
  5081  0AB7  3089               	movlw	high (STR_34| (0+32768))
  5082  0AB8  00AE               	movwf	writeLCD@ptr+1
  5083  0AB9  300D               	movlw	13
  5084  0ABA  160A  118A  2390  120A  158A  	fcall	_writeLCD
  5085                           
  5086                           ;auxiliar.c: 94: if( statusT0() < ( statusT0limite()/2 ) )
  5087  0ABF  160A  118A  2087  120A  158A  	fcall	_statusT0
  5088  0AC4  1283               	bcf	3,5	;RP0=0, select bank0
  5089  0AC5  1303               	bcf	3,6	;RP1=0, select bank0
  5090  0AC6  0824               	movf	?_statusT0,w
  5091  0AC7  00B1               	movwf	??_textSelection6
  5092  0AC8  0825               	movf	?_statusT0+1,w
  5093  0AC9  00B2               	movwf	??_textSelection6+1
  5094  0ACA  3002               	movlw	2
  5095  0ACB  00A6               	movwf	___awdiv@divisor
  5096  0ACC  3000               	movlw	0
  5097  0ACD  00A7               	movwf	___awdiv@divisor+1
  5098  0ACE  160A  118A  208E  120A  158A  	fcall	_statusT0limite
  5099  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  5100  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  5101  0AD5  0825               	movf	?_statusT0limite+1,w
  5102  0AD6  00A9               	movwf	___awdiv@dividend+1
  5103  0AD7  0824               	movf	?_statusT0limite,w
  5104  0AD8  00A8               	movwf	___awdiv@dividend
  5105  0AD9  160A  118A  25B9  120A  158A  	fcall	___awdiv
  5106  0ADE  1283               	bcf	3,5	;RP0=0, select bank0
  5107  0ADF  1303               	bcf	3,6	;RP1=0, select bank0
  5108  0AE0  0832               	movf	??_textSelection6+1,w
  5109  0AE1  3A80               	xorlw	128
  5110  0AE2  00B3               	movwf	??_textSelection6+2
  5111  0AE3  0827               	movf	?___awdiv+1,w
  5112  0AE4  3A80               	xorlw	128
  5113  0AE5  0233               	subwf	??_textSelection6+2,w
  5114  0AE6  1D03               	skipz
  5115  0AE7  2AEA               	goto	u2085
  5116  0AE8  0826               	movf	?___awdiv,w
  5117  0AE9  0231               	subwf	??_textSelection6,w
  5118  0AEA                     u2085:	
  5119  0AEA  1803               	skipnc
  5120  0AEB  2AF9               	goto	l3007
  5121                           
  5122                           ;auxiliar.c: 95: writeLCD(11,1," ");
  5123  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  5124  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  5125  0AEE  01AC               	clrf	writeLCD@y
  5126  0AEF  0AAC               	incf	writeLCD@y,f
  5127  0AF0  300F               	movlw	low ((STR_68+15)| (0+32768))
  5128  0AF1  00AD               	movwf	writeLCD@ptr
  5129  0AF2  3088               	movlw	high ((STR_68+15)| (0+32768))
  5130  0AF3  00AE               	movwf	writeLCD@ptr+1
  5131  0AF4  300B               	movlw	11
  5132  0AF5  160A  118A  2390   	fcall	_writeLCD
  5133  0AF8  0008               	return
  5134  0AF9                     l3007:	
  5135                           
  5136                           ;auxiliar.c: 96: else
  5137                           ;auxiliar.c: 97: writeLCD(11,1,"6");
  5138  0AF9  1283               	bcf	3,5	;RP0=0, select bank0
  5139  0AFA  1303               	bcf	3,6	;RP1=0, select bank0
  5140  0AFB  01AC               	clrf	writeLCD@y
  5141  0AFC  0AAC               	incf	writeLCD@y,f
  5142  0AFD  30ED               	movlw	low (STR_30| (0+32768))
  5143  0AFE  00AD               	movwf	writeLCD@ptr
  5144  0AFF  3089               	movlw	high (STR_30| (0+32768))
  5145  0B00  00AE               	movwf	writeLCD@ptr+1
  5146  0B01  300B               	movlw	11
  5147  0B02  160A  118A  2390   	fcall	_writeLCD
  5148  0B05  0008               	return
  5149  0B06                     __end_of_textSelection6:	
  5150                           
  5151                           	psect	text9
  5152  0A40                     __ptext9:	
  5153 ;; *************** function _textSelection5 *****************
  5154 ;; Defined at:
  5155 ;;		line 80 in file "auxiliar.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;		None
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;		None
  5160 ;; Return value:  Size  Location     Type
  5161 ;;                  1    wreg      void 
  5162 ;; Registers used:
  5163 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5169 ;;      Params:         0       0       0       0       0
  5170 ;;      Locals:         0       0       0       0       0
  5171 ;;      Temps:          0       3       0       0       0
  5172 ;;      Totals:         0       3       0       0       0
  5173 ;;Total ram usage:        3 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    7
  5176 ;; This function calls:
  5177 ;;		___awdiv
  5178 ;;		_statusT0
  5179 ;;		_statusT0limite
  5180 ;;		_writeLCD
  5181 ;; This function is called by:
  5182 ;;		_main
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           
  5187                           ;psect for function _textSelection5
  5188  0A40                     _textSelection5:	
  5189                           
  5190                           ;auxiliar.c: 82: writeLCD(6,1,"4");
  5191                           
  5192                           ;incstack = 0
  5193                           ; Regs used in _textSelection5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5194  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  5195  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  5196  0A42  01AC               	clrf	writeLCD@y
  5197  0A43  0AAC               	incf	writeLCD@y,f
  5198  0A44  30E9               	movlw	low (STR_22| (0+32768))
  5199  0A45  00AD               	movwf	writeLCD@ptr
  5200  0A46  3089               	movlw	high (STR_22| (0+32768))
  5201  0A47  00AE               	movwf	writeLCD@ptr+1
  5202  0A48  3006               	movlw	6
  5203  0A49  160A  118A  2390  120A  158A  	fcall	_writeLCD
  5204                           
  5205                           ;auxiliar.c: 83: writeLCD(11,1,"6");
  5206  0A4E  1283               	bcf	3,5	;RP0=0, select bank0
  5207  0A4F  1303               	bcf	3,6	;RP1=0, select bank0
  5208  0A50  01AC               	clrf	writeLCD@y
  5209  0A51  0AAC               	incf	writeLCD@y,f
  5210  0A52  30ED               	movlw	low (STR_30| (0+32768))
  5211  0A53  00AD               	movwf	writeLCD@ptr
  5212  0A54  3089               	movlw	high (STR_30| (0+32768))
  5213  0A55  00AE               	movwf	writeLCD@ptr+1
  5214  0A56  300B               	movlw	11
  5215  0A57  160A  118A  2390  120A  158A  	fcall	_writeLCD
  5216                           
  5217                           ;auxiliar.c: 84: if( statusT0() < ( statusT0limite()/2 ) )
  5218  0A5C  160A  118A  2087  120A  158A  	fcall	_statusT0
  5219  0A61  1283               	bcf	3,5	;RP0=0, select bank0
  5220  0A62  1303               	bcf	3,6	;RP1=0, select bank0
  5221  0A63  0824               	movf	?_statusT0,w
  5222  0A64  00B1               	movwf	??_textSelection5
  5223  0A65  0825               	movf	?_statusT0+1,w
  5224  0A66  00B2               	movwf	??_textSelection5+1
  5225  0A67  3002               	movlw	2
  5226  0A68  00A6               	movwf	___awdiv@divisor
  5227  0A69  3000               	movlw	0
  5228  0A6A  00A7               	movwf	___awdiv@divisor+1
  5229  0A6B  160A  118A  208E  120A  158A  	fcall	_statusT0limite
  5230  0A70  1283               	bcf	3,5	;RP0=0, select bank0
  5231  0A71  1303               	bcf	3,6	;RP1=0, select bank0
  5232  0A72  0825               	movf	?_statusT0limite+1,w
  5233  0A73  00A9               	movwf	___awdiv@dividend+1
  5234  0A74  0824               	movf	?_statusT0limite,w
  5235  0A75  00A8               	movwf	___awdiv@dividend
  5236  0A76  160A  118A  25B9  120A  158A  	fcall	___awdiv
  5237  0A7B  1283               	bcf	3,5	;RP0=0, select bank0
  5238  0A7C  1303               	bcf	3,6	;RP1=0, select bank0
  5239  0A7D  0832               	movf	??_textSelection5+1,w
  5240  0A7E  3A80               	xorlw	128
  5241  0A7F  00B3               	movwf	??_textSelection5+2
  5242  0A80  0827               	movf	?___awdiv+1,w
  5243  0A81  3A80               	xorlw	128
  5244  0A82  0233               	subwf	??_textSelection5+2,w
  5245  0A83  1D03               	skipz
  5246  0A84  2A87               	goto	u2075
  5247  0A85  0826               	movf	?___awdiv,w
  5248  0A86  0231               	subwf	??_textSelection5,w
  5249  0A87                     u2075:	
  5250  0A87  1803               	skipnc
  5251  0A88  2A96               	goto	l2999
  5252                           
  5253                           ;auxiliar.c: 85: writeLCD(9,1," ");
  5254  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  5255  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  5256  0A8B  01AC               	clrf	writeLCD@y
  5257  0A8C  0AAC               	incf	writeLCD@y,f
  5258  0A8D  300F               	movlw	low ((STR_68+15)| (0+32768))
  5259  0A8E  00AD               	movwf	writeLCD@ptr
  5260  0A8F  3088               	movlw	high ((STR_68+15)| (0+32768))
  5261  0A90  00AE               	movwf	writeLCD@ptr+1
  5262  0A91  3009               	movlw	9
  5263  0A92  160A  118A  2390   	fcall	_writeLCD
  5264  0A95  0008               	return
  5265  0A96                     l2999:	
  5266                           
  5267                           ;auxiliar.c: 86: else
  5268                           ;auxiliar.c: 87: writeLCD(9,1,"5");
  5269  0A96  1283               	bcf	3,5	;RP0=0, select bank0
  5270  0A97  1303               	bcf	3,6	;RP1=0, select bank0
  5271  0A98  01AC               	clrf	writeLCD@y
  5272  0A99  0AAC               	incf	writeLCD@y,f
  5273  0A9A  30EB               	movlw	low (STR_26| (0+32768))
  5274  0A9B  00AD               	movwf	writeLCD@ptr
  5275  0A9C  3089               	movlw	high (STR_26| (0+32768))
  5276  0A9D  00AE               	movwf	writeLCD@ptr+1
  5277  0A9E  3009               	movlw	9
  5278  0A9F  160A  118A  2390   	fcall	_writeLCD
  5279  0AA2  0008               	return
  5280  0AA3                     __end_of_textSelection5:	
  5281                           
  5282                           	psect	text10
  5283  179D                     __ptext10:	
  5284 ;; *************** function _textSelection4 *****************
  5285 ;; Defined at:
  5286 ;;		line 70 in file "auxiliar.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;		None
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;		None
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  1    wreg      void 
  5293 ;; Registers used:
  5294 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5300 ;;      Params:         0       0       0       0       0
  5301 ;;      Locals:         0       0       0       0       0
  5302 ;;      Temps:          0       3       0       0       0
  5303 ;;      Totals:         0       3       0       0       0
  5304 ;;Total ram usage:        3 bytes
  5305 ;; Hardware stack levels used:    1
  5306 ;; Hardware stack levels required when called:    7
  5307 ;; This function calls:
  5308 ;;		___awdiv
  5309 ;;		_statusT0
  5310 ;;		_statusT0limite
  5311 ;;		_writeLCD
  5312 ;; This function is called by:
  5313 ;;		_main
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           
  5318                           ;psect for function _textSelection4
  5319  179D                     _textSelection4:	
  5320                           
  5321                           ;auxiliar.c: 72: writeLCD(4,1,"3");
  5322                           
  5323                           ;incstack = 0
  5324                           ; Regs used in _textSelection4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5325  179D  1283               	bcf	3,5	;RP0=0, select bank0
  5326  179E  1303               	bcf	3,6	;RP1=0, select bank0
  5327  179F  01AC               	clrf	writeLCD@y
  5328  17A0  0AAC               	incf	writeLCD@y,f
  5329  17A1  30FD               	movlw	low ((STR_79+15)| (0+32768))
  5330  17A2  00AD               	movwf	writeLCD@ptr
  5331  17A3  3088               	movlw	high ((STR_79+15)| (0+32768))
  5332  17A4  00AE               	movwf	writeLCD@ptr+1
  5333  17A5  3004               	movlw	4
  5334  17A6  160A  118A  2390  160A  118A  	fcall	_writeLCD
  5335                           
  5336                           ;auxiliar.c: 73: writeLCD(9,1,"5");
  5337  17AB  1283               	bcf	3,5	;RP0=0, select bank0
  5338  17AC  1303               	bcf	3,6	;RP1=0, select bank0
  5339  17AD  01AC               	clrf	writeLCD@y
  5340  17AE  0AAC               	incf	writeLCD@y,f
  5341  17AF  30EB               	movlw	low (STR_26| (0+32768))
  5342  17B0  00AD               	movwf	writeLCD@ptr
  5343  17B1  3089               	movlw	high (STR_26| (0+32768))
  5344  17B2  00AE               	movwf	writeLCD@ptr+1
  5345  17B3  3009               	movlw	9
  5346  17B4  160A  118A  2390  160A  118A  	fcall	_writeLCD
  5347                           
  5348                           ;auxiliar.c: 74: if( statusT0() < ( statusT0limite()/2 ) )
  5349  17B9  160A  118A  2087  160A  118A  	fcall	_statusT0
  5350  17BE  1283               	bcf	3,5	;RP0=0, select bank0
  5351  17BF  1303               	bcf	3,6	;RP1=0, select bank0
  5352  17C0  0824               	movf	?_statusT0,w
  5353  17C1  00B1               	movwf	??_textSelection4
  5354  17C2  0825               	movf	?_statusT0+1,w
  5355  17C3  00B2               	movwf	??_textSelection4+1
  5356  17C4  3002               	movlw	2
  5357  17C5  00A6               	movwf	___awdiv@divisor
  5358  17C6  3000               	movlw	0
  5359  17C7  00A7               	movwf	___awdiv@divisor+1
  5360  17C8  160A  118A  208E  160A  118A  	fcall	_statusT0limite
  5361  17CD  1283               	bcf	3,5	;RP0=0, select bank0
  5362  17CE  1303               	bcf	3,6	;RP1=0, select bank0
  5363  17CF  0825               	movf	?_statusT0limite+1,w
  5364  17D0  00A9               	movwf	___awdiv@dividend+1
  5365  17D1  0824               	movf	?_statusT0limite,w
  5366  17D2  00A8               	movwf	___awdiv@dividend
  5367  17D3  160A  118A  25B9  160A  118A  	fcall	___awdiv
  5368  17D8  1283               	bcf	3,5	;RP0=0, select bank0
  5369  17D9  1303               	bcf	3,6	;RP1=0, select bank0
  5370  17DA  0832               	movf	??_textSelection4+1,w
  5371  17DB  3A80               	xorlw	128
  5372  17DC  00B3               	movwf	??_textSelection4+2
  5373  17DD  0827               	movf	?___awdiv+1,w
  5374  17DE  3A80               	xorlw	128
  5375  17DF  0233               	subwf	??_textSelection4+2,w
  5376  17E0  1D03               	skipz
  5377  17E1  2FE4               	goto	u2065
  5378  17E2  0826               	movf	?___awdiv,w
  5379  17E3  0231               	subwf	??_textSelection4,w
  5380  17E4                     u2065:	
  5381  17E4  1803               	skipnc
  5382  17E5  2FF3               	goto	l2991
  5383                           
  5384                           ;auxiliar.c: 75: writeLCD(6,1," ");
  5385  17E6  1283               	bcf	3,5	;RP0=0, select bank0
  5386  17E7  1303               	bcf	3,6	;RP1=0, select bank0
  5387  17E8  01AC               	clrf	writeLCD@y
  5388  17E9  0AAC               	incf	writeLCD@y,f
  5389  17EA  300F               	movlw	low ((STR_68+15)| (0+32768))
  5390  17EB  00AD               	movwf	writeLCD@ptr
  5391  17EC  3088               	movlw	high ((STR_68+15)| (0+32768))
  5392  17ED  00AE               	movwf	writeLCD@ptr+1
  5393  17EE  3006               	movlw	6
  5394  17EF  160A  118A  2390   	fcall	_writeLCD
  5395  17F2  0008               	return
  5396  17F3                     l2991:	
  5397                           
  5398                           ;auxiliar.c: 76: else
  5399                           ;auxiliar.c: 77: writeLCD(6,1,"4");
  5400  17F3  1283               	bcf	3,5	;RP0=0, select bank0
  5401  17F4  1303               	bcf	3,6	;RP1=0, select bank0
  5402  17F5  01AC               	clrf	writeLCD@y
  5403  17F6  0AAC               	incf	writeLCD@y,f
  5404  17F7  30E9               	movlw	low (STR_22| (0+32768))
  5405  17F8  00AD               	movwf	writeLCD@ptr
  5406  17F9  3089               	movlw	high (STR_22| (0+32768))
  5407  17FA  00AE               	movwf	writeLCD@ptr+1
  5408  17FB  3006               	movlw	6
  5409  17FC  160A  118A  2390   	fcall	_writeLCD
  5410  17FF  0008               	return
  5411  1800                     __end_of_textSelection4:	
  5412                           
  5413                           	psect	text11
  5414  173A                     __ptext11:	
  5415 ;; *************** function _textSelection3 *****************
  5416 ;; Defined at:
  5417 ;;		line 60 in file "auxiliar.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;		None
  5420 ;; Auto vars:     Size  Location     Type
  5421 ;;		None
  5422 ;; Return value:  Size  Location     Type
  5423 ;;                  1    wreg      void 
  5424 ;; Registers used:
  5425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5426 ;; Tracked objects:
  5427 ;;		On entry : 0/0
  5428 ;;		On exit  : 0/0
  5429 ;;		Unchanged: 0/0
  5430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5431 ;;      Params:         0       0       0       0       0
  5432 ;;      Locals:         0       0       0       0       0
  5433 ;;      Temps:          0       3       0       0       0
  5434 ;;      Totals:         0       3       0       0       0
  5435 ;;Total ram usage:        3 bytes
  5436 ;; Hardware stack levels used:    1
  5437 ;; Hardware stack levels required when called:    7
  5438 ;; This function calls:
  5439 ;;		___awdiv
  5440 ;;		_statusT0
  5441 ;;		_statusT0limite
  5442 ;;		_writeLCD
  5443 ;; This function is called by:
  5444 ;;		_main
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function _textSelection3
  5450  173A                     _textSelection3:	
  5451                           
  5452                           ;auxiliar.c: 62: writeLCD(2,1,"2");
  5453                           
  5454                           ;incstack = 0
  5455                           ; Regs used in _textSelection3: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5456  173A  1283               	bcf	3,5	;RP0=0, select bank0
  5457  173B  1303               	bcf	3,6	;RP1=0, select bank0
  5458  173C  01AC               	clrf	writeLCD@y
  5459  173D  0AAC               	incf	writeLCD@y,f
  5460  173E  30E7               	movlw	low (STR_14| (0+32768))
  5461  173F  00AD               	movwf	writeLCD@ptr
  5462  1740  3089               	movlw	high (STR_14| (0+32768))
  5463  1741  00AE               	movwf	writeLCD@ptr+1
  5464  1742  3002               	movlw	2
  5465  1743  160A  118A  2390  160A  118A  	fcall	_writeLCD
  5466                           
  5467                           ;auxiliar.c: 63: writeLCD(6,1,"4");;
  5468  1748  1283               	bcf	3,5	;RP0=0, select bank0
  5469  1749  1303               	bcf	3,6	;RP1=0, select bank0
  5470  174A  01AC               	clrf	writeLCD@y
  5471  174B  0AAC               	incf	writeLCD@y,f
  5472  174C  30E9               	movlw	low (STR_22| (0+32768))
  5473  174D  00AD               	movwf	writeLCD@ptr
  5474  174E  3089               	movlw	high (STR_22| (0+32768))
  5475  174F  00AE               	movwf	writeLCD@ptr+1
  5476  1750  3006               	movlw	6
  5477  1751  160A  118A  2390  160A  118A  	fcall	_writeLCD
  5478                           
  5479                           ;auxiliar.c: 64: if( statusT0() < ( statusT0limite()/2 ) )
  5480  1756  160A  118A  2087  160A  118A  	fcall	_statusT0
  5481  175B  1283               	bcf	3,5	;RP0=0, select bank0
  5482  175C  1303               	bcf	3,6	;RP1=0, select bank0
  5483  175D  0824               	movf	?_statusT0,w
  5484  175E  00B1               	movwf	??_textSelection3
  5485  175F  0825               	movf	?_statusT0+1,w
  5486  1760  00B2               	movwf	??_textSelection3+1
  5487  1761  3002               	movlw	2
  5488  1762  00A6               	movwf	___awdiv@divisor
  5489  1763  3000               	movlw	0
  5490  1764  00A7               	movwf	___awdiv@divisor+1
  5491  1765  160A  118A  208E  160A  118A  	fcall	_statusT0limite
  5492  176A  1283               	bcf	3,5	;RP0=0, select bank0
  5493  176B  1303               	bcf	3,6	;RP1=0, select bank0
  5494  176C  0825               	movf	?_statusT0limite+1,w
  5495  176D  00A9               	movwf	___awdiv@dividend+1
  5496  176E  0824               	movf	?_statusT0limite,w
  5497  176F  00A8               	movwf	___awdiv@dividend
  5498  1770  160A  118A  25B9  160A  118A  	fcall	___awdiv
  5499  1775  1283               	bcf	3,5	;RP0=0, select bank0
  5500  1776  1303               	bcf	3,6	;RP1=0, select bank0
  5501  1777  0832               	movf	??_textSelection3+1,w
  5502  1778  3A80               	xorlw	128
  5503  1779  00B3               	movwf	??_textSelection3+2
  5504  177A  0827               	movf	?___awdiv+1,w
  5505  177B  3A80               	xorlw	128
  5506  177C  0233               	subwf	??_textSelection3+2,w
  5507  177D  1D03               	skipz
  5508  177E  2F81               	goto	u2055
  5509  177F  0826               	movf	?___awdiv,w
  5510  1780  0231               	subwf	??_textSelection3,w
  5511  1781                     u2055:	
  5512  1781  1803               	skipnc
  5513  1782  2F90               	goto	l2983
  5514                           
  5515                           ;auxiliar.c: 65: writeLCD(4,1," ");
  5516  1783  1283               	bcf	3,5	;RP0=0, select bank0
  5517  1784  1303               	bcf	3,6	;RP1=0, select bank0
  5518  1785  01AC               	clrf	writeLCD@y
  5519  1786  0AAC               	incf	writeLCD@y,f
  5520  1787  300F               	movlw	low ((STR_68+15)| (0+32768))
  5521  1788  00AD               	movwf	writeLCD@ptr
  5522  1789  3088               	movlw	high ((STR_68+15)| (0+32768))
  5523  178A  00AE               	movwf	writeLCD@ptr+1
  5524  178B  3004               	movlw	4
  5525  178C  160A  118A  2390   	fcall	_writeLCD
  5526  178F  0008               	return
  5527  1790                     l2983:	
  5528                           
  5529                           ;auxiliar.c: 66: else
  5530                           ;auxiliar.c: 67: writeLCD(4,1,"3");
  5531  1790  1283               	bcf	3,5	;RP0=0, select bank0
  5532  1791  1303               	bcf	3,6	;RP1=0, select bank0
  5533  1792  01AC               	clrf	writeLCD@y
  5534  1793  0AAC               	incf	writeLCD@y,f
  5535  1794  30FD               	movlw	low ((STR_79+15)| (0+32768))
  5536  1795  00AD               	movwf	writeLCD@ptr
  5537  1796  3088               	movlw	high ((STR_79+15)| (0+32768))
  5538  1797  00AE               	movwf	writeLCD@ptr+1
  5539  1798  3004               	movlw	4
  5540  1799  160A  118A  2390   	fcall	_writeLCD
  5541  179C  0008               	return
  5542  179D                     __end_of_textSelection3:	
  5543                           
  5544                           	psect	text12
  5545  16D7                     __ptext12:	
  5546 ;; *************** function _textSelection2 *****************
  5547 ;; Defined at:
  5548 ;;		line 50 in file "auxiliar.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      void 
  5555 ;; Registers used:
  5556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5562 ;;      Params:         0       0       0       0       0
  5563 ;;      Locals:         0       0       0       0       0
  5564 ;;      Temps:          0       3       0       0       0
  5565 ;;      Totals:         0       3       0       0       0
  5566 ;;Total ram usage:        3 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; Hardware stack levels required when called:    7
  5569 ;; This function calls:
  5570 ;;		___awdiv
  5571 ;;		_statusT0
  5572 ;;		_statusT0limite
  5573 ;;		_writeLCD
  5574 ;; This function is called by:
  5575 ;;		_main
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           
  5580                           ;psect for function _textSelection2
  5581  16D7                     _textSelection2:	
  5582                           
  5583                           ;auxiliar.c: 52: writeLCD(0,1,"1");
  5584                           
  5585                           ;incstack = 0
  5586                           ; Regs used in _textSelection2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5587  16D7  1283               	bcf	3,5	;RP0=0, select bank0
  5588  16D8  1303               	bcf	3,6	;RP1=0, select bank0
  5589  16D9  01AC               	clrf	writeLCD@y
  5590  16DA  0AAC               	incf	writeLCD@y,f
  5591  16DB  30E5               	movlw	low (STR_16| (0+32768))
  5592  16DC  00AD               	movwf	writeLCD@ptr
  5593  16DD  3089               	movlw	high (STR_16| (0+32768))
  5594  16DE  00AE               	movwf	writeLCD@ptr+1
  5595  16DF  3000               	movlw	0
  5596  16E0  160A  118A  2390  160A  118A  	fcall	_writeLCD
  5597                           
  5598                           ;auxiliar.c: 53: writeLCD(4,1,"3");
  5599  16E5  1283               	bcf	3,5	;RP0=0, select bank0
  5600  16E6  1303               	bcf	3,6	;RP1=0, select bank0
  5601  16E7  01AC               	clrf	writeLCD@y
  5602  16E8  0AAC               	incf	writeLCD@y,f
  5603  16E9  30FD               	movlw	low ((STR_79+15)| (0+32768))
  5604  16EA  00AD               	movwf	writeLCD@ptr
  5605  16EB  3088               	movlw	high ((STR_79+15)| (0+32768))
  5606  16EC  00AE               	movwf	writeLCD@ptr+1
  5607  16ED  3004               	movlw	4
  5608  16EE  160A  118A  2390  160A  118A  	fcall	_writeLCD
  5609                           
  5610                           ;auxiliar.c: 54: if( statusT0() < ( statusT0limite()/2 ) )
  5611  16F3  160A  118A  2087  160A  118A  	fcall	_statusT0
  5612  16F8  1283               	bcf	3,5	;RP0=0, select bank0
  5613  16F9  1303               	bcf	3,6	;RP1=0, select bank0
  5614  16FA  0824               	movf	?_statusT0,w
  5615  16FB  00B1               	movwf	??_textSelection2
  5616  16FC  0825               	movf	?_statusT0+1,w
  5617  16FD  00B2               	movwf	??_textSelection2+1
  5618  16FE  3002               	movlw	2
  5619  16FF  00A6               	movwf	___awdiv@divisor
  5620  1700  3000               	movlw	0
  5621  1701  00A7               	movwf	___awdiv@divisor+1
  5622  1702  160A  118A  208E  160A  118A  	fcall	_statusT0limite
  5623  1707  1283               	bcf	3,5	;RP0=0, select bank0
  5624  1708  1303               	bcf	3,6	;RP1=0, select bank0
  5625  1709  0825               	movf	?_statusT0limite+1,w
  5626  170A  00A9               	movwf	___awdiv@dividend+1
  5627  170B  0824               	movf	?_statusT0limite,w
  5628  170C  00A8               	movwf	___awdiv@dividend
  5629  170D  160A  118A  25B9  160A  118A  	fcall	___awdiv
  5630  1712  1283               	bcf	3,5	;RP0=0, select bank0
  5631  1713  1303               	bcf	3,6	;RP1=0, select bank0
  5632  1714  0832               	movf	??_textSelection2+1,w
  5633  1715  3A80               	xorlw	128
  5634  1716  00B3               	movwf	??_textSelection2+2
  5635  1717  0827               	movf	?___awdiv+1,w
  5636  1718  3A80               	xorlw	128
  5637  1719  0233               	subwf	??_textSelection2+2,w
  5638  171A  1D03               	skipz
  5639  171B  2F1E               	goto	u2045
  5640  171C  0826               	movf	?___awdiv,w
  5641  171D  0231               	subwf	??_textSelection2,w
  5642  171E                     u2045:	
  5643  171E  1803               	skipnc
  5644  171F  2F2D               	goto	l2975
  5645                           
  5646                           ;auxiliar.c: 55: writeLCD(2,1," ");
  5647  1720  1283               	bcf	3,5	;RP0=0, select bank0
  5648  1721  1303               	bcf	3,6	;RP1=0, select bank0
  5649  1722  01AC               	clrf	writeLCD@y
  5650  1723  0AAC               	incf	writeLCD@y,f
  5651  1724  300F               	movlw	low ((STR_68+15)| (0+32768))
  5652  1725  00AD               	movwf	writeLCD@ptr
  5653  1726  3088               	movlw	high ((STR_68+15)| (0+32768))
  5654  1727  00AE               	movwf	writeLCD@ptr+1
  5655  1728  3002               	movlw	2
  5656  1729  160A  118A  2390   	fcall	_writeLCD
  5657  172C  0008               	return
  5658  172D                     l2975:	
  5659                           
  5660                           ;auxiliar.c: 56: else
  5661                           ;auxiliar.c: 57: writeLCD(2,1,"2");
  5662  172D  1283               	bcf	3,5	;RP0=0, select bank0
  5663  172E  1303               	bcf	3,6	;RP1=0, select bank0
  5664  172F  01AC               	clrf	writeLCD@y
  5665  1730  0AAC               	incf	writeLCD@y,f
  5666  1731  30E7               	movlw	low (STR_14| (0+32768))
  5667  1732  00AD               	movwf	writeLCD@ptr
  5668  1733  3089               	movlw	high (STR_14| (0+32768))
  5669  1734  00AE               	movwf	writeLCD@ptr+1
  5670  1735  3002               	movlw	2
  5671  1736  160A  118A  2390   	fcall	_writeLCD
  5672  1739  0008               	return
  5673  173A                     __end_of_textSelection2:	
  5674                           
  5675                           	psect	text13
  5676  1674                     __ptext13:	
  5677 ;; *************** function _textSelection1 *****************
  5678 ;; Defined at:
  5679 ;;		line 39 in file "auxiliar.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;		None
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;		None
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      void 
  5686 ;; Registers used:
  5687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5693 ;;      Params:         0       0       0       0       0
  5694 ;;      Locals:         0       0       0       0       0
  5695 ;;      Temps:          0       3       0       0       0
  5696 ;;      Totals:         0       3       0       0       0
  5697 ;;Total ram usage:        3 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    7
  5700 ;; This function calls:
  5701 ;;		___awdiv
  5702 ;;		_statusT0
  5703 ;;		_statusT0limite
  5704 ;;		_writeLCD
  5705 ;; This function is called by:
  5706 ;;		_main
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           
  5711                           ;psect for function _textSelection1
  5712  1674                     _textSelection1:	
  5713                           
  5714                           ;auxiliar.c: 41: writeLCD(15,1,"8");
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in _textSelection1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5718  1674  1283               	bcf	3,5	;RP0=0, select bank0
  5719  1675  1303               	bcf	3,6	;RP1=0, select bank0
  5720  1676  01AC               	clrf	writeLCD@y
  5721  1677  0AAC               	incf	writeLCD@y,f
  5722  1678  30BA               	movlw	low ((STR_123+15)| (0+32768))
  5723  1679  00AD               	movwf	writeLCD@ptr
  5724  167A  3087               	movlw	high ((STR_123+15)| (0+32768))
  5725  167B  00AE               	movwf	writeLCD@ptr+1
  5726  167C  300F               	movlw	15
  5727  167D  160A  118A  2390  160A  118A  	fcall	_writeLCD
  5728                           
  5729                           ;auxiliar.c: 42: writeLCD(2,1,"2");
  5730  1682  1283               	bcf	3,5	;RP0=0, select bank0
  5731  1683  1303               	bcf	3,6	;RP1=0, select bank0
  5732  1684  01AC               	clrf	writeLCD@y
  5733  1685  0AAC               	incf	writeLCD@y,f
  5734  1686  30E7               	movlw	low (STR_14| (0+32768))
  5735  1687  00AD               	movwf	writeLCD@ptr
  5736  1688  3089               	movlw	high (STR_14| (0+32768))
  5737  1689  00AE               	movwf	writeLCD@ptr+1
  5738  168A  3002               	movlw	2
  5739  168B  160A  118A  2390  160A  118A  	fcall	_writeLCD
  5740                           
  5741                           ;auxiliar.c: 43: if( statusT0() < ( statusT0limite()/2 ) )
  5742  1690  160A  118A  2087  160A  118A  	fcall	_statusT0
  5743  1695  1283               	bcf	3,5	;RP0=0, select bank0
  5744  1696  1303               	bcf	3,6	;RP1=0, select bank0
  5745  1697  0824               	movf	?_statusT0,w
  5746  1698  00B1               	movwf	??_textSelection1
  5747  1699  0825               	movf	?_statusT0+1,w
  5748  169A  00B2               	movwf	??_textSelection1+1
  5749  169B  3002               	movlw	2
  5750  169C  00A6               	movwf	___awdiv@divisor
  5751  169D  3000               	movlw	0
  5752  169E  00A7               	movwf	___awdiv@divisor+1
  5753  169F  160A  118A  208E  160A  118A  	fcall	_statusT0limite
  5754  16A4  1283               	bcf	3,5	;RP0=0, select bank0
  5755  16A5  1303               	bcf	3,6	;RP1=0, select bank0
  5756  16A6  0825               	movf	?_statusT0limite+1,w
  5757  16A7  00A9               	movwf	___awdiv@dividend+1
  5758  16A8  0824               	movf	?_statusT0limite,w
  5759  16A9  00A8               	movwf	___awdiv@dividend
  5760  16AA  160A  118A  25B9  160A  118A  	fcall	___awdiv
  5761  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  5762  16B0  1303               	bcf	3,6	;RP1=0, select bank0
  5763  16B1  0832               	movf	??_textSelection1+1,w
  5764  16B2  3A80               	xorlw	128
  5765  16B3  00B3               	movwf	??_textSelection1+2
  5766  16B4  0827               	movf	?___awdiv+1,w
  5767  16B5  3A80               	xorlw	128
  5768  16B6  0233               	subwf	??_textSelection1+2,w
  5769  16B7  1D03               	skipz
  5770  16B8  2EBB               	goto	u2035
  5771  16B9  0826               	movf	?___awdiv,w
  5772  16BA  0231               	subwf	??_textSelection1,w
  5773  16BB                     u2035:	
  5774  16BB  1803               	skipnc
  5775  16BC  2ECA               	goto	l2967
  5776                           
  5777                           ;auxiliar.c: 44: writeLCD(0,1," ");
  5778  16BD  1283               	bcf	3,5	;RP0=0, select bank0
  5779  16BE  1303               	bcf	3,6	;RP1=0, select bank0
  5780  16BF  01AC               	clrf	writeLCD@y
  5781  16C0  0AAC               	incf	writeLCD@y,f
  5782  16C1  300F               	movlw	low ((STR_68+15)| (0+32768))
  5783  16C2  00AD               	movwf	writeLCD@ptr
  5784  16C3  3088               	movlw	high ((STR_68+15)| (0+32768))
  5785  16C4  00AE               	movwf	writeLCD@ptr+1
  5786  16C5  3000               	movlw	0
  5787  16C6  160A  118A  2390   	fcall	_writeLCD
  5788  16C9  0008               	return
  5789  16CA                     l2967:	
  5790                           
  5791                           ;auxiliar.c: 45: else
  5792                           ;auxiliar.c: 46: writeLCD(0,1,"1");
  5793  16CA  1283               	bcf	3,5	;RP0=0, select bank0
  5794  16CB  1303               	bcf	3,6	;RP1=0, select bank0
  5795  16CC  01AC               	clrf	writeLCD@y
  5796  16CD  0AAC               	incf	writeLCD@y,f
  5797  16CE  30E5               	movlw	low (STR_16| (0+32768))
  5798  16CF  00AD               	movwf	writeLCD@ptr
  5799  16D0  3089               	movlw	high (STR_16| (0+32768))
  5800  16D1  00AE               	movwf	writeLCD@ptr+1
  5801  16D2  3000               	movlw	0
  5802  16D3  160A  118A  2390   	fcall	_writeLCD
  5803  16D6  0008               	return
  5804  16D7                     __end_of_textSelection1:	
  5805                           
  5806                           	psect	text14
  5807  108E                     __ptext14:	
  5808 ;; *************** function _statusT0limite *****************
  5809 ;; Defined at:
  5810 ;;		line 33 in file "timer0.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;		None
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;		None
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  2    4[BANK0 ] int 
  5817 ;; Registers used:
  5818 ;;		wreg
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5824 ;;      Params:         0       2       0       0       0
  5825 ;;      Locals:         0       0       0       0       0
  5826 ;;      Temps:          0       0       0       0       0
  5827 ;;      Totals:         0       2       0       0       0
  5828 ;;Total ram usage:        2 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    4
  5831 ;; This function calls:
  5832 ;;		Nothing
  5833 ;; This function is called by:
  5834 ;;		_textSelection1
  5835 ;;		_textSelection2
  5836 ;;		_textSelection3
  5837 ;;		_textSelection4
  5838 ;;		_textSelection5
  5839 ;;		_textSelection6
  5840 ;;		_textSelection7
  5841 ;;		_textSelection8
  5842 ;;		_textSelectionEST
  5843 ;;		_textSelectionCLP
  5844 ;;		_textSelectionPAR
  5845 ;;		_textSelectionDES
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           
  5850                           ;psect for function _statusT0limite
  5851  108E                     _statusT0limite:	
  5852                           
  5853                           ;timer0.c: 35: return( t0final );
  5854                           
  5855                           ;incstack = 0
  5856                           ; Regs used in _statusT0limite: [wreg]
  5857  108E  1283               	bcf	3,5	;RP0=0, select bank0
  5858  108F  1303               	bcf	3,6	;RP1=0, select bank0
  5859  1090  084C               	movf	_t0final+1,w
  5860  1091  00A5               	movwf	?_statusT0limite+1
  5861  1092  084B               	movf	_t0final,w
  5862  1093  00A4               	movwf	?_statusT0limite
  5863  1094  0008               	return
  5864  1095                     __end_of_statusT0limite:	
  5865                           
  5866                           	psect	text15
  5867  1087                     __ptext15:	
  5868 ;; *************** function _statusT0 *****************
  5869 ;; Defined at:
  5870 ;;		line 24 in file "timer0.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;		None
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;		None
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  2    4[BANK0 ] int 
  5877 ;; Registers used:
  5878 ;;		wreg
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5884 ;;      Params:         0       2       0       0       0
  5885 ;;      Locals:         0       0       0       0       0
  5886 ;;      Temps:          0       0       0       0       0
  5887 ;;      Totals:         0       2       0       0       0
  5888 ;;Total ram usage:        2 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:    4
  5891 ;; This function calls:
  5892 ;;		Nothing
  5893 ;; This function is called by:
  5894 ;;		_textSelection1
  5895 ;;		_textSelection2
  5896 ;;		_textSelection3
  5897 ;;		_textSelection4
  5898 ;;		_textSelection5
  5899 ;;		_textSelection6
  5900 ;;		_textSelection7
  5901 ;;		_textSelection8
  5902 ;;		_textSelectionEST
  5903 ;;		_textSelectionCLP
  5904 ;;		_textSelectionPAR
  5905 ;;		_textSelectionDES
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           
  5910                           ;psect for function _statusT0
  5911  1087                     _statusT0:	
  5912                           
  5913                           ;timer0.c: 26: return( t0cont );
  5914                           
  5915                           ;incstack = 0
  5916                           ; Regs used in _statusT0: [wreg]
  5917  1087  1283               	bcf	3,5	;RP0=0, select bank0
  5918  1088  1303               	bcf	3,6	;RP1=0, select bank0
  5919  1089  084A               	movf	_t0cont+1,w
  5920  108A  00A5               	movwf	?_statusT0+1
  5921  108B  0849               	movf	_t0cont,w
  5922  108C  00A4               	movwf	?_statusT0
  5923  108D  0008               	return
  5924  108E                     __end_of_statusT0:	
  5925                           
  5926                           	psect	text16
  5927  15B9                     __ptext16:	
  5928 ;; *************** function ___awdiv *****************
  5929 ;; Defined at:
  5930 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  5931 ;; Parameters:    Size  Location     Type
  5932 ;;  divisor         2    6[BANK0 ] int 
  5933 ;;  dividend        2    8[BANK0 ] int 
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;  quotient        2   13[BANK0 ] int 
  5936 ;;  sign            1   12[BANK0 ] unsigned char 
  5937 ;;  counter         1   11[BANK0 ] unsigned char 
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  2    6[BANK0 ] int 
  5940 ;; Registers used:
  5941 ;;		wreg, status,2, status,0
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5947 ;;      Params:         0       4       0       0       0
  5948 ;;      Locals:         0       4       0       0       0
  5949 ;;      Temps:          0       1       0       0       0
  5950 ;;      Totals:         0       9       0       0       0
  5951 ;;Total ram usage:        9 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; Hardware stack levels required when called:    4
  5954 ;; This function calls:
  5955 ;;		Nothing
  5956 ;; This function is called by:
  5957 ;;		_textSelection1
  5958 ;;		_textSelection2
  5959 ;;		_textSelection3
  5960 ;;		_textSelection4
  5961 ;;		_textSelection5
  5962 ;;		_textSelection6
  5963 ;;		_textSelection7
  5964 ;;		_textSelection8
  5965 ;;		_textSelectionEST
  5966 ;;		_textSelectionCLP
  5967 ;;		_textSelectionPAR
  5968 ;;		_textSelectionDES
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           
  5973                           ;psect for function ___awdiv
  5974  15B9                     ___awdiv:	
  5975                           
  5976                           ;incstack = 0
  5977                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5978  15B9  1283               	bcf	3,5	;RP0=0, select bank0
  5979  15BA  1303               	bcf	3,6	;RP1=0, select bank0
  5980  15BB  01AC               	clrf	___awdiv@sign
  5981  15BC  1FA7               	btfss	___awdiv@divisor+1,7
  5982  15BD  2DC5               	goto	l2805
  5983  15BE  09A6               	comf	___awdiv@divisor,f
  5984  15BF  09A7               	comf	___awdiv@divisor+1,f
  5985  15C0  0AA6               	incf	___awdiv@divisor,f
  5986  15C1  1903               	skipnz
  5987  15C2  0AA7               	incf	___awdiv@divisor+1,f
  5988  15C3  01AC               	clrf	___awdiv@sign
  5989  15C4  0AAC               	incf	___awdiv@sign,f
  5990  15C5                     l2805:	
  5991  15C5  1FA9               	btfss	___awdiv@dividend+1,7
  5992  15C6  2DD0               	goto	l2811
  5993  15C7  09A8               	comf	___awdiv@dividend,f
  5994  15C8  09A9               	comf	___awdiv@dividend+1,f
  5995  15C9  0AA8               	incf	___awdiv@dividend,f
  5996  15CA  1903               	skipnz
  5997  15CB  0AA9               	incf	___awdiv@dividend+1,f
  5998  15CC  3001               	movlw	1
  5999  15CD  00AA               	movwf	??___awdiv
  6000  15CE  082A               	movf	??___awdiv,w
  6001  15CF  06AC               	xorwf	___awdiv@sign,f
  6002  15D0                     l2811:	
  6003  15D0  01AD               	clrf	___awdiv@quotient
  6004  15D1  01AE               	clrf	___awdiv@quotient+1
  6005  15D2  0826               	movf	___awdiv@divisor,w
  6006  15D3  0427               	iorwf	___awdiv@divisor+1,w
  6007  15D4  1903               	btfsc	3,2
  6008  15D5  2E07               	goto	l2833
  6009  15D6  01AB               	clrf	___awdiv@counter
  6010  15D7  0AAB               	incf	___awdiv@counter,f
  6011  15D8                     l2821:	
  6012  15D8  1BA7               	btfsc	___awdiv@divisor+1,7
  6013  15D9  2DE6               	goto	l2823
  6014  15DA  3001               	movlw	1
  6015  15DB                     u1845:	
  6016  15DB  1003               	clrc
  6017  15DC  0DA6               	rlf	___awdiv@divisor,f
  6018  15DD  0DA7               	rlf	___awdiv@divisor+1,f
  6019  15DE  3EFF               	addlw	-1
  6020  15DF  1D03               	skipz
  6021  15E0  2DDB               	goto	u1845
  6022  15E1  3001               	movlw	1
  6023  15E2  00AA               	movwf	??___awdiv
  6024  15E3  082A               	movf	??___awdiv,w
  6025  15E4  07AB               	addwf	___awdiv@counter,f
  6026  15E5  2DD8               	goto	l2821
  6027  15E6                     l2823:	
  6028  15E6  3001               	movlw	1
  6029  15E7                     u1865:	
  6030  15E7  1003               	clrc
  6031  15E8  0DAD               	rlf	___awdiv@quotient,f
  6032  15E9  0DAE               	rlf	___awdiv@quotient+1,f
  6033  15EA  3EFF               	addlw	-1
  6034  15EB  1D03               	skipz
  6035  15EC  2DE7               	goto	u1865
  6036  15ED  0827               	movf	___awdiv@divisor+1,w
  6037  15EE  0229               	subwf	___awdiv@dividend+1,w
  6038  15EF  1D03               	skipz
  6039  15F0  2DF3               	goto	u1875
  6040  15F1  0826               	movf	___awdiv@divisor,w
  6041  15F2  0228               	subwf	___awdiv@dividend,w
  6042  15F3                     u1875:	
  6043  15F3  1C03               	skipc
  6044  15F4  2DFC               	goto	l2829
  6045  15F5  0826               	movf	___awdiv@divisor,w
  6046  15F6  02A8               	subwf	___awdiv@dividend,f
  6047  15F7  0827               	movf	___awdiv@divisor+1,w
  6048  15F8  1C03               	skipc
  6049  15F9  03A9               	decf	___awdiv@dividend+1,f
  6050  15FA  02A9               	subwf	___awdiv@dividend+1,f
  6051  15FB  142D               	bsf	___awdiv@quotient,0
  6052  15FC                     l2829:	
  6053  15FC  3001               	movlw	1
  6054  15FD                     u1885:	
  6055  15FD  1003               	clrc
  6056  15FE  0CA7               	rrf	___awdiv@divisor+1,f
  6057  15FF  0CA6               	rrf	___awdiv@divisor,f
  6058  1600  3EFF               	addlw	-1
  6059  1601  1D03               	skipz
  6060  1602  2DFD               	goto	u1885
  6061  1603  3001               	movlw	1
  6062  1604  02AB               	subwf	___awdiv@counter,f
  6063  1605  1D03               	btfss	3,2
  6064  1606  2DE6               	goto	l2823
  6065  1607                     l2833:	
  6066  1607  082C               	movf	___awdiv@sign,w
  6067  1608  1903               	btfsc	3,2
  6068  1609  2E0F               	goto	l2837
  6069  160A  09AD               	comf	___awdiv@quotient,f
  6070  160B  09AE               	comf	___awdiv@quotient+1,f
  6071  160C  0AAD               	incf	___awdiv@quotient,f
  6072  160D  1903               	skipnz
  6073  160E  0AAE               	incf	___awdiv@quotient+1,f
  6074  160F                     l2837:	
  6075  160F  082E               	movf	___awdiv@quotient+1,w
  6076  1610  00A7               	movwf	?___awdiv+1
  6077  1611  082D               	movf	___awdiv@quotient,w
  6078  1612  00A6               	movwf	?___awdiv
  6079  1613  0008               	return
  6080  1614                     __end_of___awdiv:	
  6081                           
  6082                           	psect	text17
  6083  0D30                     __ptext17:	
  6084 ;; *************** function _textLoading *****************
  6085 ;; Defined at:
  6086 ;;		line 156 in file "auxiliar.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;		None
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;		None
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      void 
  6093 ;; Registers used:
  6094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6100 ;;      Params:         0       0       0       0       0
  6101 ;;      Locals:         0       0       0       0       0
  6102 ;;      Temps:          0       3       0       0       0
  6103 ;;      Totals:         0       3       0       0       0
  6104 ;;Total ram usage:        3 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    7
  6107 ;; This function calls:
  6108 ;;		_writeLCD
  6109 ;; This function is called by:
  6110 ;;		_main
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           
  6115                           ;psect for function _textLoading
  6116  0D30                     _textLoading:	
  6117                           
  6118                           ;auxiliar.c: 158: writeLCD(9,0,".  ");
  6119                           
  6120                           ;incstack = 0
  6121                           ; Regs used in _textLoading: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6122  0D30  1283               	bcf	3,5	;RP0=0, select bank0
  6123  0D31  1303               	bcf	3,6	;RP1=0, select bank0
  6124  0D32  01AC               	clrf	writeLCD@y
  6125  0D33  30D1               	movlw	low (STR_57| (0+32768))
  6126  0D34  00AD               	movwf	writeLCD@ptr
  6127  0D35  3089               	movlw	high (STR_57| (0+32768))
  6128  0D36  00AE               	movwf	writeLCD@ptr+1
  6129  0D37  3009               	movlw	9
  6130  0D38  160A  118A  2390  120A  158A  	fcall	_writeLCD
  6131                           
  6132                           ;auxiliar.c: 159: _delay((unsigned long)((500)*(20000000/4000.0)));
  6133  0D3D  300D               	movlw	13
  6134  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  6135  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  6136  0D40  00B3               	movwf	??_textLoading+2
  6137  0D41  30AF               	movlw	175
  6138  0D42  00B2               	movwf	??_textLoading+1
  6139  0D43  30B5               	movlw	181
  6140  0D44  00B1               	movwf	??_textLoading
  6141  0D45                     u2887:	
  6142  0D45  0BB1               	decfsz	??_textLoading,f
  6143  0D46  2D45               	goto	u2887
  6144  0D47  0BB2               	decfsz	??_textLoading+1,f
  6145  0D48  2D45               	goto	u2887
  6146  0D49  0BB3               	decfsz	??_textLoading+2,f
  6147  0D4A  2D45               	goto	u2887
  6148  0D4B  2D4C               	nop2
  6149                           
  6150                           ;auxiliar.c: 160: writeLCD(9,0," . ");
  6151  0D4C  1283               	bcf	3,5	;RP0=0, select bank0
  6152  0D4D  1303               	bcf	3,6	;RP1=0, select bank0
  6153  0D4E  01AC               	clrf	writeLCD@y
  6154  0D4F  30D5               	movlw	low (STR_58| (0+32768))
  6155  0D50  00AD               	movwf	writeLCD@ptr
  6156  0D51  3089               	movlw	high (STR_58| (0+32768))
  6157  0D52  00AE               	movwf	writeLCD@ptr+1
  6158  0D53  3009               	movlw	9
  6159  0D54  160A  118A  2390  120A  158A  	fcall	_writeLCD
  6160                           
  6161                           ;auxiliar.c: 161: _delay((unsigned long)((500)*(20000000/4000.0)));
  6162  0D59  300D               	movlw	13
  6163  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  6164  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  6165  0D5C  00B3               	movwf	??_textLoading+2
  6166  0D5D  30AF               	movlw	175
  6167  0D5E  00B2               	movwf	??_textLoading+1
  6168  0D5F  30B5               	movlw	181
  6169  0D60  00B1               	movwf	??_textLoading
  6170  0D61                     u2897:	
  6171  0D61  0BB1               	decfsz	??_textLoading,f
  6172  0D62  2D61               	goto	u2897
  6173  0D63  0BB2               	decfsz	??_textLoading+1,f
  6174  0D64  2D61               	goto	u2897
  6175  0D65  0BB3               	decfsz	??_textLoading+2,f
  6176  0D66  2D61               	goto	u2897
  6177  0D67  2D68               	nop2
  6178                           
  6179                           ;auxiliar.c: 162: writeLCD(9,0,"  .");
  6180  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  6181  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  6182  0D6A  01AC               	clrf	writeLCD@y
  6183  0D6B  30DD               	movlw	low (STR_59| (0+32768))
  6184  0D6C  00AD               	movwf	writeLCD@ptr
  6185  0D6D  3089               	movlw	high (STR_59| (0+32768))
  6186  0D6E  00AE               	movwf	writeLCD@ptr+1
  6187  0D6F  3009               	movlw	9
  6188  0D70  160A  118A  2390  120A  158A  	fcall	_writeLCD
  6189                           
  6190                           ;auxiliar.c: 163: _delay((unsigned long)((500)*(20000000/4000.0)));
  6191  0D75  300D               	movlw	13
  6192  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  6193  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  6194  0D78  00B3               	movwf	??_textLoading+2
  6195  0D79  30AF               	movlw	175
  6196  0D7A  00B2               	movwf	??_textLoading+1
  6197  0D7B  30B5               	movlw	181
  6198  0D7C  00B1               	movwf	??_textLoading
  6199  0D7D                     u2907:	
  6200  0D7D  0BB1               	decfsz	??_textLoading,f
  6201  0D7E  2D7D               	goto	u2907
  6202  0D7F  0BB2               	decfsz	??_textLoading+1,f
  6203  0D80  2D7D               	goto	u2907
  6204  0D81  0BB3               	decfsz	??_textLoading+2,f
  6205  0D82  2D7D               	goto	u2907
  6206  0D83  2D84               	nop2
  6207                           
  6208                           ;auxiliar.c: 164: writeLCD(9,0,".  ");
  6209  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  6210  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  6211  0D86  01AC               	clrf	writeLCD@y
  6212  0D87  30D1               	movlw	low (STR_57| (0+32768))
  6213  0D88  00AD               	movwf	writeLCD@ptr
  6214  0D89  3089               	movlw	high (STR_57| (0+32768))
  6215  0D8A  00AE               	movwf	writeLCD@ptr+1
  6216  0D8B  3009               	movlw	9
  6217  0D8C  160A  118A  2390  120A  158A  	fcall	_writeLCD
  6218                           
  6219                           ;auxiliar.c: 165: _delay((unsigned long)((500)*(20000000/4000.0)));
  6220  0D91  300D               	movlw	13
  6221  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  6222  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  6223  0D94  00B3               	movwf	??_textLoading+2
  6224  0D95  30AF               	movlw	175
  6225  0D96  00B2               	movwf	??_textLoading+1
  6226  0D97  30B5               	movlw	181
  6227  0D98  00B1               	movwf	??_textLoading
  6228  0D99                     u2917:	
  6229  0D99  0BB1               	decfsz	??_textLoading,f
  6230  0D9A  2D99               	goto	u2917
  6231  0D9B  0BB2               	decfsz	??_textLoading+1,f
  6232  0D9C  2D99               	goto	u2917
  6233  0D9D  0BB3               	decfsz	??_textLoading+2,f
  6234  0D9E  2D99               	goto	u2917
  6235  0D9F  2DA0               	nop2
  6236                           
  6237                           ;auxiliar.c: 166: writeLCD(9,0," . ");
  6238  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  6239  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  6240  0DA2  01AC               	clrf	writeLCD@y
  6241  0DA3  30D5               	movlw	low (STR_58| (0+32768))
  6242  0DA4  00AD               	movwf	writeLCD@ptr
  6243  0DA5  3089               	movlw	high (STR_58| (0+32768))
  6244  0DA6  00AE               	movwf	writeLCD@ptr+1
  6245  0DA7  3009               	movlw	9
  6246  0DA8  160A  118A  2390  120A  158A  	fcall	_writeLCD
  6247                           
  6248                           ;auxiliar.c: 167: _delay((unsigned long)((500)*(20000000/4000.0)));
  6249  0DAD  300D               	movlw	13
  6250  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  6251  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  6252  0DB0  00B3               	movwf	??_textLoading+2
  6253  0DB1  30AF               	movlw	175
  6254  0DB2  00B2               	movwf	??_textLoading+1
  6255  0DB3  30B5               	movlw	181
  6256  0DB4  00B1               	movwf	??_textLoading
  6257  0DB5                     u2927:	
  6258  0DB5  0BB1               	decfsz	??_textLoading,f
  6259  0DB6  2DB5               	goto	u2927
  6260  0DB7  0BB2               	decfsz	??_textLoading+1,f
  6261  0DB8  2DB5               	goto	u2927
  6262  0DB9  0BB3               	decfsz	??_textLoading+2,f
  6263  0DBA  2DB5               	goto	u2927
  6264  0DBB  2DBC               	nop2
  6265                           
  6266                           ;auxiliar.c: 168: writeLCD(9,0,"  .");
  6267  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  6268  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  6269  0DBE  01AC               	clrf	writeLCD@y
  6270  0DBF  30DD               	movlw	low (STR_59| (0+32768))
  6271  0DC0  00AD               	movwf	writeLCD@ptr
  6272  0DC1  3089               	movlw	high (STR_59| (0+32768))
  6273  0DC2  00AE               	movwf	writeLCD@ptr+1
  6274  0DC3  3009               	movlw	9
  6275  0DC4  160A  118A  2390  120A  158A  	fcall	_writeLCD
  6276                           
  6277                           ;auxiliar.c: 169: _delay((unsigned long)((500)*(20000000/4000.0)));
  6278  0DC9  300D               	movlw	13
  6279  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  6280  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  6281  0DCC  00B3               	movwf	??_textLoading+2
  6282  0DCD  30AF               	movlw	175
  6283  0DCE  00B2               	movwf	??_textLoading+1
  6284  0DCF  30B5               	movlw	181
  6285  0DD0  00B1               	movwf	??_textLoading
  6286  0DD1                     u2937:	
  6287  0DD1  0BB1               	decfsz	??_textLoading,f
  6288  0DD2  2DD1               	goto	u2937
  6289  0DD3  0BB2               	decfsz	??_textLoading+1,f
  6290  0DD4  2DD1               	goto	u2937
  6291  0DD5  0BB3               	decfsz	??_textLoading+2,f
  6292  0DD6  2DD1               	goto	u2937
  6293  0DD7  2DD8               	nop2
  6294                           
  6295                           ;auxiliar.c: 171: writeLCD(9,0,".  ");
  6296  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  6297  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  6298  0DDA  01AC               	clrf	writeLCD@y
  6299  0DDB  30D1               	movlw	low (STR_57| (0+32768))
  6300  0DDC  00AD               	movwf	writeLCD@ptr
  6301  0DDD  3089               	movlw	high (STR_57| (0+32768))
  6302  0DDE  00AE               	movwf	writeLCD@ptr+1
  6303  0DDF  3009               	movlw	9
  6304  0DE0  160A  118A  2390  120A  158A  	fcall	_writeLCD
  6305                           
  6306                           ;auxiliar.c: 172: _delay((unsigned long)((500)*(20000000/4000.0)));
  6307  0DE5  300D               	movlw	13
  6308  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  6309  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  6310  0DE8  00B3               	movwf	??_textLoading+2
  6311  0DE9  30AF               	movlw	175
  6312  0DEA  00B2               	movwf	??_textLoading+1
  6313  0DEB  30B5               	movlw	181
  6314  0DEC  00B1               	movwf	??_textLoading
  6315  0DED                     u2947:	
  6316  0DED  0BB1               	decfsz	??_textLoading,f
  6317  0DEE  2DED               	goto	u2947
  6318  0DEF  0BB2               	decfsz	??_textLoading+1,f
  6319  0DF0  2DED               	goto	u2947
  6320  0DF1  0BB3               	decfsz	??_textLoading+2,f
  6321  0DF2  2DED               	goto	u2947
  6322  0DF3  2DF4               	nop2
  6323                           
  6324                           ;auxiliar.c: 173: writeLCD(9,0,".. ");
  6325  0DF4  1283               	bcf	3,5	;RP0=0, select bank0
  6326  0DF5  1303               	bcf	3,6	;RP1=0, select bank0
  6327  0DF6  01AC               	clrf	writeLCD@y
  6328  0DF7  30D9               	movlw	low (STR_64| (0+32768))
  6329  0DF8  00AD               	movwf	writeLCD@ptr
  6330  0DF9  3089               	movlw	high (STR_64| (0+32768))
  6331  0DFA  00AE               	movwf	writeLCD@ptr+1
  6332  0DFB  3009               	movlw	9
  6333  0DFC  160A  118A  2390  120A  158A  	fcall	_writeLCD
  6334                           
  6335                           ;auxiliar.c: 174: _delay((unsigned long)((500)*(20000000/4000.0)));
  6336  0E01  300D               	movlw	13
  6337  0E02  1283               	bcf	3,5	;RP0=0, select bank0
  6338  0E03  1303               	bcf	3,6	;RP1=0, select bank0
  6339  0E04  00B3               	movwf	??_textLoading+2
  6340  0E05  30AF               	movlw	175
  6341  0E06  00B2               	movwf	??_textLoading+1
  6342  0E07  30B5               	movlw	181
  6343  0E08  00B1               	movwf	??_textLoading
  6344  0E09                     u2957:	
  6345  0E09  0BB1               	decfsz	??_textLoading,f
  6346  0E0A  2E09               	goto	u2957
  6347  0E0B  0BB2               	decfsz	??_textLoading+1,f
  6348  0E0C  2E09               	goto	u2957
  6349  0E0D  0BB3               	decfsz	??_textLoading+2,f
  6350  0E0E  2E09               	goto	u2957
  6351  0E0F  2E10               	nop2
  6352                           
  6353                           ;auxiliar.c: 175: writeLCD(9,0,"...");
  6354  0E10  1283               	bcf	3,5	;RP0=0, select bank0
  6355  0E11  1303               	bcf	3,6	;RP1=0, select bank0
  6356  0E12  01AC               	clrf	writeLCD@y
  6357  0E13  30E1               	movlw	low (STR_65| (0+32768))
  6358  0E14  00AD               	movwf	writeLCD@ptr
  6359  0E15  3089               	movlw	high (STR_65| (0+32768))
  6360  0E16  00AE               	movwf	writeLCD@ptr+1
  6361  0E17  3009               	movlw	9
  6362  0E18  160A  118A  2390  120A  158A  	fcall	_writeLCD
  6363                           
  6364                           ;auxiliar.c: 176: _delay((unsigned long)((700)*(20000000/4000.0)));
  6365  0E1D  3012               	movlw	18
  6366  0E1E  1283               	bcf	3,5	;RP0=0, select bank0
  6367  0E1F  1303               	bcf	3,6	;RP1=0, select bank0
  6368  0E20  00B3               	movwf	??_textLoading+2
  6369  0E21  30C2               	movlw	194
  6370  0E22  00B2               	movwf	??_textLoading+1
  6371  0E23  3065               	movlw	101
  6372  0E24  00B1               	movwf	??_textLoading
  6373  0E25                     u2967:	
  6374  0E25  0BB1               	decfsz	??_textLoading,f
  6375  0E26  2E25               	goto	u2967
  6376  0E27  0BB2               	decfsz	??_textLoading+1,f
  6377  0E28  2E25               	goto	u2967
  6378  0E29  0BB3               	decfsz	??_textLoading+2,f
  6379  0E2A  2E25               	goto	u2967
  6380  0E2B  2E2C               	nop2
  6381  0E2C  0008               	return
  6382  0E2D                     __end_of_textLoading:	
  6383                           
  6384                           	psect	text18
  6385  121F                     __ptext18:	
  6386 ;; *************** function _textConfig *****************
  6387 ;; Defined at:
  6388 ;;		line 18 in file "auxiliar.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;		None
  6391 ;; Auto vars:     Size  Location     Type
  6392 ;;		None
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  1    wreg      void 
  6395 ;; Registers used:
  6396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6402 ;;      Params:         0       0       0       0       0
  6403 ;;      Locals:         0       0       0       0       0
  6404 ;;      Temps:          0       0       0       0       0
  6405 ;;      Totals:         0       0       0       0       0
  6406 ;;Total ram usage:        0 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    7
  6409 ;; This function calls:
  6410 ;;		_cmdLCD
  6411 ;;		_writeLCD
  6412 ;; This function is called by:
  6413 ;;		_main
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           
  6418                           ;psect for function _textConfig
  6419  121F                     _textConfig:	
  6420                           
  6421                           ;auxiliar.c: 20: cmdLCD(0x01);
  6422                           
  6423                           ;incstack = 0
  6424                           ; Regs used in _textConfig: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6425  121F  3001               	movlw	1
  6426  1220  160A  118A  2504  160A  118A  	fcall	_cmdLCD
  6427                           
  6428                           ;auxiliar.c: 21: writeLCD(0,0,"   Configurar   ");
  6429  1225  1283               	bcf	3,5	;RP0=0, select bank0
  6430  1226  1303               	bcf	3,6	;RP1=0, select bank0
  6431  1227  01AC               	clrf	writeLCD@y
  6432  1228  3099               	movlw	low (STR_7| (0+32768))
  6433  1229  00AD               	movwf	writeLCD@ptr
  6434  122A  3088               	movlw	high (STR_7| (0+32768))
  6435  122B  00AE               	movwf	writeLCD@ptr+1
  6436  122C  3000               	movlw	0
  6437  122D  160A  118A  2390  160A  118A  	fcall	_writeLCD
  6438                           
  6439                           ;auxiliar.c: 22: writeLCD(0,1,"   ----------   ");
  6440  1232  1283               	bcf	3,5	;RP0=0, select bank0
  6441  1233  1303               	bcf	3,6	;RP1=0, select bank0
  6442  1234  01AC               	clrf	writeLCD@y
  6443  1235  0AAC               	incf	writeLCD@y,f
  6444  1236  3055               	movlw	low (STR_8| (0+32768))
  6445  1237  00AD               	movwf	writeLCD@ptr
  6446  1238  3088               	movlw	high (STR_8| (0+32768))
  6447  1239  00AE               	movwf	writeLCD@ptr+1
  6448  123A  3000               	movlw	0
  6449  123B  160A  118A  2390   	fcall	_writeLCD
  6450  123E  0008               	return
  6451  123F                     __end_of_textConfig:	
  6452                           
  6453                           	psect	text19
  6454  11FF                     __ptext19:	
  6455 ;; *************** function _textCMpar *****************
  6456 ;; Defined at:
  6457 ;;		line 25 in file "auxiliar.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  1    wreg      void 
  6464 ;; Registers used:
  6465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6471 ;;      Params:         0       0       0       0       0
  6472 ;;      Locals:         0       0       0       0       0
  6473 ;;      Temps:          0       0       0       0       0
  6474 ;;      Totals:         0       0       0       0       0
  6475 ;;Total ram usage:        0 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:    7
  6478 ;; This function calls:
  6479 ;;		_cmdLCD
  6480 ;;		_writeLCD
  6481 ;; This function is called by:
  6482 ;;		_main
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           
  6487                           ;psect for function _textCMpar
  6488  11FF                     _textCMpar:	
  6489                           
  6490                           ;auxiliar.c: 27: cmdLCD(0x01);
  6491                           
  6492                           ;incstack = 0
  6493                           ; Regs used in _textCMpar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6494  11FF  3001               	movlw	1
  6495  1200  160A  118A  2504  160A  118A  	fcall	_cmdLCD
  6496                           
  6497                           ;auxiliar.c: 28: writeLCD(0,0,"   Pareamento   ");
  6498  1205  1283               	bcf	3,5	;RP0=0, select bank0
  6499  1206  1303               	bcf	3,6	;RP1=0, select bank0
  6500  1207  01AC               	clrf	writeLCD@y
  6501  1208  3088               	movlw	low (STR_9| (0+32768))
  6502  1209  00AD               	movwf	writeLCD@ptr
  6503  120A  3088               	movlw	high (STR_9| (0+32768))
  6504  120B  00AE               	movwf	writeLCD@ptr+1
  6505  120C  3000               	movlw	0
  6506  120D  160A  118A  2390  160A  118A  	fcall	_writeLCD
  6507                           
  6508                           ;auxiliar.c: 29: writeLCD(0,1,"   ----------   ");
  6509  1212  1283               	bcf	3,5	;RP0=0, select bank0
  6510  1213  1303               	bcf	3,6	;RP1=0, select bank0
  6511  1214  01AC               	clrf	writeLCD@y
  6512  1215  0AAC               	incf	writeLCD@y,f
  6513  1216  3055               	movlw	low (STR_8| (0+32768))
  6514  1217  00AD               	movwf	writeLCD@ptr
  6515  1218  3088               	movlw	high (STR_8| (0+32768))
  6516  1219  00AE               	movwf	writeLCD@ptr+1
  6517  121A  3000               	movlw	0
  6518  121B  160A  118A  2390   	fcall	_writeLCD
  6519  121E  0008               	return
  6520  121F                     __end_of_textCMpar:	
  6521                           
  6522                           	psect	text20
  6523  11DF                     __ptext20:	
  6524 ;; *************** function _textCMdat *****************
  6525 ;; Defined at:
  6526 ;;		line 32 in file "auxiliar.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6540 ;;      Params:         0       0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0
  6543 ;;      Totals:         0       0       0       0       0
  6544 ;;Total ram usage:        0 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    7
  6547 ;; This function calls:
  6548 ;;		_cmdLCD
  6549 ;;		_writeLCD
  6550 ;; This function is called by:
  6551 ;;		_main
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           
  6556                           ;psect for function _textCMdat
  6557  11DF                     _textCMdat:	
  6558                           
  6559                           ;auxiliar.c: 34: cmdLCD(0x01);
  6560                           
  6561                           ;incstack = 0
  6562                           ; Regs used in _textCMdat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6563  11DF  3001               	movlw	1
  6564  11E0  160A  118A  2504  160A  118A  	fcall	_cmdLCD
  6565                           
  6566                           ;auxiliar.c: 35: writeLCD(0,0," Envio de Dados ");
  6567  11E5  1283               	bcf	3,5	;RP0=0, select bank0
  6568  11E6  1303               	bcf	3,6	;RP1=0, select bank0
  6569  11E7  01AC               	clrf	writeLCD@y
  6570  11E8  30BB               	movlw	low (STR_11| (0+32768))
  6571  11E9  00AD               	movwf	writeLCD@ptr
  6572  11EA  3088               	movlw	high (STR_11| (0+32768))
  6573  11EB  00AE               	movwf	writeLCD@ptr+1
  6574  11EC  3000               	movlw	0
  6575  11ED  160A  118A  2390  160A  118A  	fcall	_writeLCD
  6576                           
  6577                           ;auxiliar.c: 36: writeLCD(0,1,"   ----------   ");
  6578  11F2  1283               	bcf	3,5	;RP0=0, select bank0
  6579  11F3  1303               	bcf	3,6	;RP1=0, select bank0
  6580  11F4  01AC               	clrf	writeLCD@y
  6581  11F5  0AAC               	incf	writeLCD@y,f
  6582  11F6  3055               	movlw	low (STR_8| (0+32768))
  6583  11F7  00AD               	movwf	writeLCD@ptr
  6584  11F8  3088               	movlw	high (STR_8| (0+32768))
  6585  11F9  00AE               	movwf	writeLCD@ptr+1
  6586  11FA  3000               	movlw	0
  6587  11FB  160A  118A  2390   	fcall	_writeLCD
  6588  11FE  0008               	return
  6589  11FF                     __end_of_textCMdat:	
  6590                           
  6591                           	psect	text21
  6592  11A3                     __ptext21:	
  6593 ;; *************** function _statusFIFO *****************
  6594 ;; Defined at:
  6595 ;;		line 35 in file "fifo.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;		None
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;		None
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  1    wreg      unsigned char 
  6602 ;; Registers used:
  6603 ;;		wreg, status,2, status,0, pclath, cstack
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6609 ;;      Params:         0       0       0       0       0
  6610 ;;      Locals:         0       0       0       0       0
  6611 ;;      Temps:          0       2       0       0       0
  6612 ;;      Totals:         0       2       0       0       0
  6613 ;;Total ram usage:        2 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    5
  6616 ;; This function calls:
  6617 ;;		___awmod
  6618 ;; This function is called by:
  6619 ;;		_main
  6620 ;;		_statusRxEUSART
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           
  6625                           ;psect for function _statusFIFO
  6626  11A3                     _statusFIFO:	
  6627                           
  6628                           ;fifo.c: 37: return( (fifoHead - fifoTail) % 30 );
  6629                           
  6630                           ;incstack = 0
  6631                           ; Regs used in _statusFIFO: [wreg+status,2+status,0+pclath+cstack]
  6632  11A3  301E               	movlw	30
  6633  11A4  1283               	bcf	3,5	;RP0=0, select bank0
  6634  11A5  1303               	bcf	3,6	;RP1=0, select bank0
  6635  11A6  00A4               	movwf	___awmod@divisor
  6636  11A7  3000               	movlw	0
  6637  11A8  00A5               	movwf	___awmod@divisor+1
  6638  11A9  084D               	movf	_fifoTail,w
  6639  11AA  00AB               	movwf	??_statusFIFO
  6640  11AB  01AC               	clrf	??_statusFIFO+1
  6641  11AC  09AB               	comf	??_statusFIFO,f
  6642  11AD  09AC               	comf	??_statusFIFO+1,f
  6643  11AE  0AAB               	incf	??_statusFIFO,f
  6644  11AF  1903               	skipnz
  6645  11B0  0AAC               	incf	??_statusFIFO+1,f
  6646  11B1  087C               	movf	_fifoHead,w
  6647  11B2  072B               	addwf	??_statusFIFO,w
  6648  11B3  00A6               	movwf	___awmod@dividend
  6649  11B4  082C               	movf	??_statusFIFO+1,w
  6650  11B5  1803               	skipnc
  6651  11B6  0A2C               	incf	??_statusFIFO+1,w
  6652  11B7  00A7               	movwf	___awmod@dividend+1
  6653  11B8  160A  118A  240D   	fcall	___awmod
  6654  11BB  1283               	bcf	3,5	;RP0=0, select bank0
  6655  11BC  1303               	bcf	3,6	;RP1=0, select bank0
  6656  11BD  0824               	movf	?___awmod,w
  6657  11BE  0008               	return
  6658  11BF                     __end_of_statusFIFO:	
  6659                           
  6660                           	psect	text22
  6661  0C76                     __ptext22:	
  6662 ;; *************** function _slave1 *****************
  6663 ;; Defined at:
  6664 ;;		line 22 in file "bluetooth.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;		None
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;		None
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  1    wreg      void 
  6671 ;; Registers used:
  6672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6678 ;;      Params:         0       0       0       0       0
  6679 ;;      Locals:         0       0       0       0       0
  6680 ;;      Temps:          0       3       0       0       0
  6681 ;;      Totals:         0       3       0       0       0
  6682 ;;Total ram usage:        3 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    6
  6685 ;; This function calls:
  6686 ;;		_initEUSART
  6687 ;;		_writeString
  6688 ;; This function is called by:
  6689 ;;		_main
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           
  6694                           ;psect for function _slave1
  6695  0C76                     _slave1:	
  6696                           
  6697                           ;bluetooth.c: 24: initEUSART(9600);
  6698                           
  6699                           ;incstack = 0
  6700                           ; Regs used in _slave1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6701  0C76  3000               	movlw	0
  6702  0C77  1283               	bcf	3,5	;RP0=0, select bank0
  6703  0C78  1303               	bcf	3,6	;RP1=0, select bank0
  6704  0C79  00B5               	movwf	initEUSART@baudRate+3
  6705  0C7A  3000               	movlw	0
  6706  0C7B  00B4               	movwf	initEUSART@baudRate+2
  6707  0C7C  3025               	movlw	37
  6708  0C7D  00B3               	movwf	initEUSART@baudRate+1
  6709  0C7E  3080               	movlw	128
  6710  0C7F  00B2               	movwf	initEUSART@baudRate
  6711  0C80  160A  118A  255E  120A  158A  	fcall	_initEUSART
  6712                           
  6713                           ;bluetooth.c: 25: writeString("AT+UART=9600,0,0\r\n");
  6714  0C85  30FE               	movlw	low (STR_83| (0+32768))
  6715  0C86  1283               	bcf	3,5	;RP0=0, select bank0
  6716  0C87  1303               	bcf	3,6	;RP1=0, select bank0
  6717  0C88  00A5               	movwf	writeString@str
  6718  0C89  3086               	movlw	high (STR_83| (0+32768))
  6719  0C8A  00A6               	movwf	writeString@str+1
  6720  0C8B  160A  118A  22B2  120A  158A  	fcall	_writeString
  6721                           
  6722                           ;bluetooth.c: 26: writeString("AT+RMAAD\r\n");
  6723  0C90  309B               	movlw	low (STR_91| (0+32768))
  6724  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  6725  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  6726  0C93  00A5               	movwf	writeString@str
  6727  0C94  3089               	movlw	high (STR_91| (0+32768))
  6728  0C95  00A6               	movwf	writeString@str+1
  6729  0C96  160A  118A  22B2  120A  158A  	fcall	_writeString
  6730                           
  6731                           ;bluetooth.c: 27: _delay((unsigned long)((100)*(20000000/4000.0)));
  6732  0C9B  3003               	movlw	3
  6733  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  6734  0C9D  1303               	bcf	3,6	;RP1=0, select bank0
  6735  0C9E  00BE               	movwf	??_slave1+2
  6736  0C9F  308A               	movlw	138
  6737  0CA0  00BD               	movwf	??_slave1+1
  6738  0CA1  3055               	movlw	85
  6739  0CA2  00BC               	movwf	??_slave1
  6740  0CA3                     u2977:	
  6741  0CA3  0BBC               	decfsz	??_slave1,f
  6742  0CA4  2CA3               	goto	u2977
  6743  0CA5  0BBD               	decfsz	??_slave1+1,f
  6744  0CA6  2CA3               	goto	u2977
  6745  0CA7  0BBE               	decfsz	??_slave1+2,f
  6746  0CA8  2CA3               	goto	u2977
  6747                           
  6748                           ;bluetooth.c: 28: writeString("AT+ROLE=0\r\n");
  6749  0CA9  3078               	movlw	low (STR_92| (0+32768))
  6750  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  6751  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  6752  0CAC  00A5               	movwf	writeString@str
  6753  0CAD  3089               	movlw	high (STR_92| (0+32768))
  6754  0CAE  00A6               	movwf	writeString@str+1
  6755  0CAF  160A  118A  22B2  120A  158A  	fcall	_writeString
  6756                           
  6757                           ;bluetooth.c: 29: _delay((unsigned long)((100)*(20000000/4000.0)));
  6758  0CB4  3003               	movlw	3
  6759  0CB5  1283               	bcf	3,5	;RP0=0, select bank0
  6760  0CB6  1303               	bcf	3,6	;RP1=0, select bank0
  6761  0CB7  00BE               	movwf	??_slave1+2
  6762  0CB8  308A               	movlw	138
  6763  0CB9  00BD               	movwf	??_slave1+1
  6764  0CBA  3055               	movlw	85
  6765  0CBB  00BC               	movwf	??_slave1
  6766  0CBC                     u2987:	
  6767  0CBC  0BBC               	decfsz	??_slave1,f
  6768  0CBD  2CBC               	goto	u2987
  6769  0CBE  0BBD               	decfsz	??_slave1+1,f
  6770  0CBF  2CBC               	goto	u2987
  6771  0CC0  0BBE               	decfsz	??_slave1+2,f
  6772  0CC1  2CBC               	goto	u2987
  6773                           
  6774                           ;bluetooth.c: 30: writeString("AT+CMODE=1\r\n");
  6775  0CC2  306B               	movlw	low (STR_85| (0+32768))
  6776  0CC3  1283               	bcf	3,5	;RP0=0, select bank0
  6777  0CC4  1303               	bcf	3,6	;RP1=0, select bank0
  6778  0CC5  00A5               	movwf	writeString@str
  6779  0CC6  3089               	movlw	high (STR_85| (0+32768))
  6780  0CC7  00A6               	movwf	writeString@str+1
  6781  0CC8  160A  118A  22B2  120A  158A  	fcall	_writeString
  6782                           
  6783                           ;bluetooth.c: 31: _delay((unsigned long)((100)*(20000000/4000.0)));
  6784  0CCD  3003               	movlw	3
  6785  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  6786  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  6787  0CD0  00BE               	movwf	??_slave1+2
  6788  0CD1  308A               	movlw	138
  6789  0CD2  00BD               	movwf	??_slave1+1
  6790  0CD3  3055               	movlw	85
  6791  0CD4  00BC               	movwf	??_slave1
  6792  0CD5                     u2997:	
  6793  0CD5  0BBC               	decfsz	??_slave1,f
  6794  0CD6  2CD5               	goto	u2997
  6795  0CD7  0BBD               	decfsz	??_slave1+1,f
  6796  0CD8  2CD5               	goto	u2997
  6797  0CD9  0BBE               	decfsz	??_slave1+2,f
  6798  0CDA  2CD5               	goto	u2997
  6799                           
  6800                           ;bluetooth.c: 32: writeString("AT+INQM=0,5,5\r\n");
  6801  0CDB  3032               	movlw	low (STR_86| (0+32768))
  6802  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  6803  0CDD  1303               	bcf	3,6	;RP1=0, select bank0
  6804  0CDE  00A5               	movwf	writeString@str
  6805  0CDF  3089               	movlw	high (STR_86| (0+32768))
  6806  0CE0  00A6               	movwf	writeString@str+1
  6807  0CE1  160A  118A  22B2  120A  158A  	fcall	_writeString
  6808                           
  6809                           ;bluetooth.c: 33: _delay((unsigned long)((100)*(20000000/4000.0)));
  6810  0CE6  3003               	movlw	3
  6811  0CE7  1283               	bcf	3,5	;RP0=0, select bank0
  6812  0CE8  1303               	bcf	3,6	;RP1=0, select bank0
  6813  0CE9  00BE               	movwf	??_slave1+2
  6814  0CEA  308A               	movlw	138
  6815  0CEB  00BD               	movwf	??_slave1+1
  6816  0CEC  3055               	movlw	85
  6817  0CED  00BC               	movwf	??_slave1
  6818  0CEE                     u3007:	
  6819  0CEE  0BBC               	decfsz	??_slave1,f
  6820  0CEF  2CEE               	goto	u3007
  6821  0CF0  0BBD               	decfsz	??_slave1+1,f
  6822  0CF1  2CEE               	goto	u3007
  6823  0CF2  0BBE               	decfsz	??_slave1+2,f
  6824  0CF3  2CEE               	goto	u3007
  6825                           
  6826                           ;bluetooth.c: 34: writeString("AT+INIT\r\n");
  6827  0CF4  30A6               	movlw	low (STR_87| (0+32768))
  6828  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  6829  0CF6  1303               	bcf	3,6	;RP1=0, select bank0
  6830  0CF7  00A5               	movwf	writeString@str
  6831  0CF8  3089               	movlw	high (STR_87| (0+32768))
  6832  0CF9  00A6               	movwf	writeString@str+1
  6833  0CFA  160A  118A  22B2  120A  158A  	fcall	_writeString
  6834                           
  6835                           ;bluetooth.c: 35: _delay((unsigned long)((100)*(20000000/4000.0)));
  6836  0CFF  3003               	movlw	3
  6837  0D00  1283               	bcf	3,5	;RP0=0, select bank0
  6838  0D01  1303               	bcf	3,6	;RP1=0, select bank0
  6839  0D02  00BE               	movwf	??_slave1+2
  6840  0D03  308A               	movlw	138
  6841  0D04  00BD               	movwf	??_slave1+1
  6842  0D05  3055               	movlw	85
  6843  0D06  00BC               	movwf	??_slave1
  6844  0D07                     u3017:	
  6845  0D07  0BBC               	decfsz	??_slave1,f
  6846  0D08  2D07               	goto	u3017
  6847  0D09  0BBD               	decfsz	??_slave1+1,f
  6848  0D0A  2D07               	goto	u3017
  6849  0D0B  0BBE               	decfsz	??_slave1+2,f
  6850  0D0C  2D07               	goto	u3017
  6851                           
  6852                           ;bluetooth.c: 36: writeString("AT+NAME=\"Escravo\"\r\n");
  6853  0D0D  30EA               	movlw	low (STR_96| (0+32768))
  6854  0D0E  1283               	bcf	3,5	;RP0=0, select bank0
  6855  0D0F  1303               	bcf	3,6	;RP1=0, select bank0
  6856  0D10  00A5               	movwf	writeString@str
  6857  0D11  3086               	movlw	high (STR_96| (0+32768))
  6858  0D12  00A6               	movwf	writeString@str+1
  6859  0D13  160A  118A  22B2  120A  158A  	fcall	_writeString
  6860                           
  6861                           ;bluetooth.c: 37: _delay((unsigned long)((100)*(20000000/4000.0)));
  6862  0D18  3003               	movlw	3
  6863  0D19  1283               	bcf	3,5	;RP0=0, select bank0
  6864  0D1A  1303               	bcf	3,6	;RP1=0, select bank0
  6865  0D1B  00BE               	movwf	??_slave1+2
  6866  0D1C  308A               	movlw	138
  6867  0D1D  00BD               	movwf	??_slave1+1
  6868  0D1E  3055               	movlw	85
  6869  0D1F  00BC               	movwf	??_slave1
  6870  0D20                     u3027:	
  6871  0D20  0BBC               	decfsz	??_slave1,f
  6872  0D21  2D20               	goto	u3027
  6873  0D22  0BBD               	decfsz	??_slave1+1,f
  6874  0D23  2D20               	goto	u3027
  6875  0D24  0BBE               	decfsz	??_slave1+2,f
  6876  0D25  2D20               	goto	u3027
  6877                           
  6878                           ;bluetooth.c: 38: writeString("AT+PSWD=\"0910\"\r\n");
  6879  0D26  30EF               	movlw	low (STR_89| (0+32768))
  6880  0D27  1283               	bcf	3,5	;RP0=0, select bank0
  6881  0D28  1303               	bcf	3,6	;RP1=0, select bank0
  6882  0D29  00A5               	movwf	writeString@str
  6883  0D2A  3087               	movlw	high (STR_89| (0+32768))
  6884  0D2B  00A6               	movwf	writeString@str+1
  6885  0D2C  160A  118A  22B2   	fcall	_writeString
  6886  0D2F  0008               	return
  6887  0D30                     __end_of_slave1:	
  6888                           
  6889                           	psect	text23
  6890  12DB                     __ptext23:	
  6891 ;; *************** function _resetErrorRxEUSART *****************
  6892 ;; Defined at:
  6893 ;;		line 88 in file "eusart.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;		None
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;  aux             1    0        unsigned char 
  6898 ;; Return value:  Size  Location     Type
  6899 ;;                  1    wreg      void 
  6900 ;; Registers used:
  6901 ;;		wreg
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/0
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6907 ;;      Params:         0       0       0       0       0
  6908 ;;      Locals:         0       0       0       0       0
  6909 ;;      Temps:          0       3       0       0       0
  6910 ;;      Totals:         0       3       0       0       0
  6911 ;;Total ram usage:        3 bytes
  6912 ;; Hardware stack levels used:    1
  6913 ;; Hardware stack levels required when called:    4
  6914 ;; This function calls:
  6915 ;;		Nothing
  6916 ;; This function is called by:
  6917 ;;		_main
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           
  6922                           ;psect for function _resetErrorRxEUSART
  6923  12DB                     _resetErrorRxEUSART:	
  6924                           
  6925                           ;eusart.c: 90: unsigned char aux;
  6926                           ;eusart.c: 92: if( RCSTAbits.FERR )
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _resetErrorRxEUSART: [wreg]
  6930  12DB  1283               	bcf	3,5	;RP0=0, select bank0
  6931  12DC  1303               	bcf	3,6	;RP1=0, select bank0
  6932  12DD  1D18               	btfss	24,2	;volatile
  6933  12DE  2AF1               	goto	l3283
  6934                           
  6935                           ;eusart.c: 93: {
  6936                           ;eusart.c: 94: RCSTAbits.SPEN = 0;
  6937  12DF  1398               	bcf	24,7	;volatile
  6938                           
  6939                           ;eusart.c: 95: _delay((unsigned long)((100)*(20000000/4000.0)));
  6940  12E0  3003               	movlw	3
  6941  12E1  1283               	bcf	3,5	;RP0=0, select bank0
  6942  12E2  1303               	bcf	3,6	;RP1=0, select bank0
  6943  12E3  00A6               	movwf	??_resetErrorRxEUSART+2
  6944  12E4  308A               	movlw	138
  6945  12E5  00A5               	movwf	??_resetErrorRxEUSART+1
  6946  12E6  3055               	movlw	85
  6947  12E7  00A4               	movwf	??_resetErrorRxEUSART
  6948  12E8                     u3037:	
  6949  12E8  0BA4               	decfsz	??_resetErrorRxEUSART,f
  6950  12E9  2AE8               	goto	u3037
  6951  12EA  0BA5               	decfsz	??_resetErrorRxEUSART+1,f
  6952  12EB  2AE8               	goto	u3037
  6953  12EC  0BA6               	decfsz	??_resetErrorRxEUSART+2,f
  6954  12ED  2AE8               	goto	u3037
  6955                           
  6956                           ;eusart.c: 96: RCSTAbits.SPEN = 1;
  6957  12EE  1283               	bcf	3,5	;RP0=0, select bank0
  6958  12EF  1303               	bcf	3,6	;RP1=0, select bank0
  6959  12F0  1798               	bsf	24,7	;volatile
  6960  12F1                     l3283:	
  6961                           
  6962                           ;eusart.c: 97: }
  6963                           ;eusart.c: 98: if( RCSTAbits.OERR )
  6964  12F1  1C98               	btfss	24,1	;volatile
  6965  12F2  0008               	return
  6966                           
  6967                           ;eusart.c: 99: {
  6968                           ;eusart.c: 100: RCSTAbits.CREN = 0;
  6969  12F3  1218               	bcf	24,4	;volatile
  6970                           
  6971                           ;eusart.c: 101: _delay((unsigned long)((100)*(20000000/4000.0)));
  6972  12F4  3003               	movlw	3
  6973  12F5  1283               	bcf	3,5	;RP0=0, select bank0
  6974  12F6  1303               	bcf	3,6	;RP1=0, select bank0
  6975  12F7  00A6               	movwf	??_resetErrorRxEUSART+2
  6976  12F8  308A               	movlw	138
  6977  12F9  00A5               	movwf	??_resetErrorRxEUSART+1
  6978  12FA  3055               	movlw	85
  6979  12FB  00A4               	movwf	??_resetErrorRxEUSART
  6980  12FC                     u3047:	
  6981  12FC  0BA4               	decfsz	??_resetErrorRxEUSART,f
  6982  12FD  2AFC               	goto	u3047
  6983  12FE  0BA5               	decfsz	??_resetErrorRxEUSART+1,f
  6984  12FF  2AFC               	goto	u3047
  6985  1300  0BA6               	decfsz	??_resetErrorRxEUSART+2,f
  6986  1301  2AFC               	goto	u3047
  6987                           
  6988                           ;eusart.c: 102: RCSTAbits.CREN = 1;
  6989  1302  1283               	bcf	3,5	;RP0=0, select bank0
  6990  1303  1303               	bcf	3,6	;RP1=0, select bank0
  6991  1304  1618               	bsf	24,4	;volatile
  6992  1305  0008               	return
  6993  1306                     __end_of_resetErrorRxEUSART:	
  6994                           
  6995                           	psect	text24
  6996  0557                     __ptext24:	
  6997 ;; *************** function _master1 *****************
  6998 ;; Defined at:
  6999 ;;		line 5 in file "bluetooth.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  1    wreg      void 
  7006 ;; Registers used:
  7007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7013 ;;      Params:         0       0       0       0       0
  7014 ;;      Locals:         0       0       0       0       0
  7015 ;;      Temps:          0       3       0       0       0
  7016 ;;      Totals:         0       3       0       0       0
  7017 ;;Total ram usage:        3 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    6
  7020 ;; This function calls:
  7021 ;;		_initEUSART
  7022 ;;		_writeString
  7023 ;; This function is called by:
  7024 ;;		_main
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           
  7029                           ;psect for function _master1
  7030  0557                     _master1:	
  7031                           
  7032                           ;bluetooth.c: 7: initEUSART(9600);
  7033                           
  7034                           ;incstack = 0
  7035                           ; Regs used in _master1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7036  0557  3000               	movlw	0
  7037  0558  1283               	bcf	3,5	;RP0=0, select bank0
  7038  0559  1303               	bcf	3,6	;RP1=0, select bank0
  7039  055A  00B5               	movwf	initEUSART@baudRate+3
  7040  055B  3000               	movlw	0
  7041  055C  00B4               	movwf	initEUSART@baudRate+2
  7042  055D  3025               	movlw	37
  7043  055E  00B3               	movwf	initEUSART@baudRate+1
  7044  055F  3080               	movlw	128
  7045  0560  00B2               	movwf	initEUSART@baudRate
  7046  0561  160A  118A  255E  120A  118A  	fcall	_initEUSART
  7047                           
  7048                           ;bluetooth.c: 8: writeString("AT+UART=9600,0,0\r\n");
  7049  0566  30FE               	movlw	low (STR_83| (0+32768))
  7050  0567  1283               	bcf	3,5	;RP0=0, select bank0
  7051  0568  1303               	bcf	3,6	;RP1=0, select bank0
  7052  0569  00A5               	movwf	writeString@str
  7053  056A  3086               	movlw	high (STR_83| (0+32768))
  7054  056B  00A6               	movwf	writeString@str+1
  7055  056C  160A  118A  22B2  120A  118A  	fcall	_writeString
  7056                           
  7057                           ;bluetooth.c: 9: writeString("AT+ROLE=1\r\n");
  7058  0571  3084               	movlw	low (STR_84| (0+32768))
  7059  0572  1283               	bcf	3,5	;RP0=0, select bank0
  7060  0573  1303               	bcf	3,6	;RP1=0, select bank0
  7061  0574  00A5               	movwf	writeString@str
  7062  0575  3089               	movlw	high (STR_84| (0+32768))
  7063  0576  00A6               	movwf	writeString@str+1
  7064  0577  160A  118A  22B2  120A  118A  	fcall	_writeString
  7065                           
  7066                           ;bluetooth.c: 10: _delay((unsigned long)((100)*(20000000/4000.0)));
  7067  057C  3003               	movlw	3
  7068  057D  1283               	bcf	3,5	;RP0=0, select bank0
  7069  057E  1303               	bcf	3,6	;RP1=0, select bank0
  7070  057F  00BE               	movwf	??_master1+2
  7071  0580  308A               	movlw	138
  7072  0581  00BD               	movwf	??_master1+1
  7073  0582  3055               	movlw	85
  7074  0583  00BC               	movwf	??_master1
  7075  0584                     u3057:	
  7076  0584  0BBC               	decfsz	??_master1,f
  7077  0585  2D84               	goto	u3057
  7078  0586  0BBD               	decfsz	??_master1+1,f
  7079  0587  2D84               	goto	u3057
  7080  0588  0BBE               	decfsz	??_master1+2,f
  7081  0589  2D84               	goto	u3057
  7082                           
  7083                           ;bluetooth.c: 11: writeString("AT+CMODE=1\r\n");
  7084  058A  306B               	movlw	low (STR_85| (0+32768))
  7085  058B  1283               	bcf	3,5	;RP0=0, select bank0
  7086  058C  1303               	bcf	3,6	;RP1=0, select bank0
  7087  058D  00A5               	movwf	writeString@str
  7088  058E  3089               	movlw	high (STR_85| (0+32768))
  7089  058F  00A6               	movwf	writeString@str+1
  7090  0590  160A  118A  22B2  120A  118A  	fcall	_writeString
  7091                           
  7092                           ;bluetooth.c: 12: _delay((unsigned long)((100)*(20000000/4000.0)));
  7093  0595  3003               	movlw	3
  7094  0596  1283               	bcf	3,5	;RP0=0, select bank0
  7095  0597  1303               	bcf	3,6	;RP1=0, select bank0
  7096  0598  00BE               	movwf	??_master1+2
  7097  0599  308A               	movlw	138
  7098  059A  00BD               	movwf	??_master1+1
  7099  059B  3055               	movlw	85
  7100  059C  00BC               	movwf	??_master1
  7101  059D                     u3067:	
  7102  059D  0BBC               	decfsz	??_master1,f
  7103  059E  2D9D               	goto	u3067
  7104  059F  0BBD               	decfsz	??_master1+1,f
  7105  05A0  2D9D               	goto	u3067
  7106  05A1  0BBE               	decfsz	??_master1+2,f
  7107  05A2  2D9D               	goto	u3067
  7108                           
  7109                           ;bluetooth.c: 13: writeString("AT+INQM=0,5,5\r\n");
  7110  05A3  3032               	movlw	low (STR_86| (0+32768))
  7111  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  7112  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  7113  05A6  00A5               	movwf	writeString@str
  7114  05A7  3089               	movlw	high (STR_86| (0+32768))
  7115  05A8  00A6               	movwf	writeString@str+1
  7116  05A9  160A  118A  22B2  120A  118A  	fcall	_writeString
  7117                           
  7118                           ;bluetooth.c: 14: _delay((unsigned long)((100)*(20000000/4000.0)));
  7119  05AE  3003               	movlw	3
  7120  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  7121  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  7122  05B1  00BE               	movwf	??_master1+2
  7123  05B2  308A               	movlw	138
  7124  05B3  00BD               	movwf	??_master1+1
  7125  05B4  3055               	movlw	85
  7126  05B5  00BC               	movwf	??_master1
  7127  05B6                     u3077:	
  7128  05B6  0BBC               	decfsz	??_master1,f
  7129  05B7  2DB6               	goto	u3077
  7130  05B8  0BBD               	decfsz	??_master1+1,f
  7131  05B9  2DB6               	goto	u3077
  7132  05BA  0BBE               	decfsz	??_master1+2,f
  7133  05BB  2DB6               	goto	u3077
  7134                           
  7135                           ;bluetooth.c: 15: writeString("AT+INIT\r\n");
  7136  05BC  30A6               	movlw	low (STR_87| (0+32768))
  7137  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  7138  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  7139  05BF  00A5               	movwf	writeString@str
  7140  05C0  3089               	movlw	high (STR_87| (0+32768))
  7141  05C1  00A6               	movwf	writeString@str+1
  7142  05C2  160A  118A  22B2  120A  118A  	fcall	_writeString
  7143                           
  7144                           ;bluetooth.c: 16: _delay((unsigned long)((100)*(20000000/4000.0)));
  7145  05C7  3003               	movlw	3
  7146  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  7147  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  7148  05CA  00BE               	movwf	??_master1+2
  7149  05CB  308A               	movlw	138
  7150  05CC  00BD               	movwf	??_master1+1
  7151  05CD  3055               	movlw	85
  7152  05CE  00BC               	movwf	??_master1
  7153  05CF                     u3087:	
  7154  05CF  0BBC               	decfsz	??_master1,f
  7155  05D0  2DCF               	goto	u3087
  7156  05D1  0BBD               	decfsz	??_master1+1,f
  7157  05D2  2DCF               	goto	u3087
  7158  05D3  0BBE               	decfsz	??_master1+2,f
  7159  05D4  2DCF               	goto	u3087
  7160                           
  7161                           ;bluetooth.c: 17: writeString("AT+INQ\r\n");
  7162  05D5  30B9               	movlw	low (STR_88| (0+32768))
  7163  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  7164  05D7  1303               	bcf	3,6	;RP1=0, select bank0
  7165  05D8  00A5               	movwf	writeString@str
  7166  05D9  3089               	movlw	high (STR_88| (0+32768))
  7167  05DA  00A6               	movwf	writeString@str+1
  7168  05DB  160A  118A  22B2  120A  118A  	fcall	_writeString
  7169                           
  7170                           ;bluetooth.c: 18: _delay((unsigned long)((100)*(20000000/4000.0)));
  7171  05E0  3003               	movlw	3
  7172  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  7173  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  7174  05E3  00BE               	movwf	??_master1+2
  7175  05E4  308A               	movlw	138
  7176  05E5  00BD               	movwf	??_master1+1
  7177  05E6  3055               	movlw	85
  7178  05E7  00BC               	movwf	??_master1
  7179  05E8                     u3097:	
  7180  05E8  0BBC               	decfsz	??_master1,f
  7181  05E9  2DE8               	goto	u3097
  7182  05EA  0BBD               	decfsz	??_master1+1,f
  7183  05EB  2DE8               	goto	u3097
  7184  05EC  0BBE               	decfsz	??_master1+2,f
  7185  05ED  2DE8               	goto	u3097
  7186                           
  7187                           ;bluetooth.c: 19: writeString("AT+PSWD=\"0910\"\r\n");
  7188  05EE  30EF               	movlw	low (STR_89| (0+32768))
  7189  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  7190  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  7191  05F1  00A5               	movwf	writeString@str
  7192  05F2  3087               	movlw	high (STR_89| (0+32768))
  7193  05F3  00A6               	movwf	writeString@str+1
  7194  05F4  160A  118A  22B2   	fcall	_writeString
  7195  05F7  0008               	return
  7196  05F8                     __end_of_master1:	
  7197                           
  7198                           	psect	text25
  7199  12B2                     __ptext25:	
  7200 ;; *************** function _writeString *****************
  7201 ;; Defined at:
  7202 ;;		line 136 in file "eusart.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;  str             2    5[BANK0 ] PTR const unsigned char 
  7205 ;;		 -> STR_106(25), STR_105(25), STR_104(28), STR_103(25), 
  7206 ;;		 -> STR_102(25), STR_101(28), STR_100(25), STR_99(25), 
  7207 ;;		 -> STR_98(28), STR_97(17), STR_96(20), STR_95(10), 
  7208 ;;		 -> STR_94(16), STR_93(13), STR_92(12), STR_91(11), 
  7209 ;;		 -> STR_90(19), STR_89(17), STR_88(9), STR_87(10), 
  7210 ;;		 -> STR_86(16), STR_85(13), STR_84(12), STR_83(19), 
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;		None
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  1    wreg      void 
  7215 ;; Registers used:
  7216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7222 ;;      Params:         0       2       0       0       0
  7223 ;;      Locals:         0       0       0       0       0
  7224 ;;      Temps:          0       0       0       0       0
  7225 ;;      Totals:         0       2       0       0       0
  7226 ;;Total ram usage:        2 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    5
  7229 ;; This function calls:
  7230 ;;		_writeEUSART
  7231 ;; This function is called by:
  7232 ;;		_master1
  7233 ;;		_slave1
  7234 ;;		_modulo1
  7235 ;;		_modulo2
  7236 ;;		_modulo3
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _writeString
  7242  12B2                     _writeString:	
  7243  12B2                     l2789:	
  7244                           ;eusart.c: 138: while( *str )
  7245                           
  7246                           ;incstack = 0
  7247                           ; Regs used in _writeString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7248                           
  7249  12B2  1283               	bcf	3,5	;RP0=0, select bank0
  7250  12B3  1303               	bcf	3,6	;RP1=0, select bank0
  7251  12B4  0826               	movf	writeString@str+1,w
  7252  12B5  00FF               	movwf	127
  7253  12B6  0825               	movf	writeString@str,w
  7254  12B7  0084               	movwf	4
  7255  12B8  160A  118A  2000  160A  118A  	fcall	stringtab
  7256  12BD  3A00               	xorlw	0
  7257  12BE  1903               	btfsc	3,2
  7258  12BF  0008               	return
  7259  12C0                     l561:	
  7260                           ;eusart.c: 141: ;
  7261                           
  7262                           ;eusart.c: 139: {
  7263                           ;eusart.c: 140: while( !TXSTAbits.TRMT )
  7264                           
  7265  12C0  1683               	bsf	3,5	;RP0=1, select bank1
  7266  12C1  1303               	bcf	3,6	;RP1=0, select bank1
  7267  12C2  1C98               	btfss	24,1	;volatile
  7268  12C3  2AC0               	goto	l561
  7269                           
  7270                           ;eusart.c: 142: writeEUSART( *str );
  7271  12C4  1283               	bcf	3,5	;RP0=0, select bank0
  7272  12C5  1303               	bcf	3,6	;RP1=0, select bank0
  7273  12C6  0826               	movf	writeString@str+1,w
  7274  12C7  00FF               	movwf	127
  7275  12C8  0825               	movf	writeString@str,w
  7276  12C9  0084               	movwf	4
  7277  12CA  160A  118A  2000  160A  118A  	fcall	stringtab
  7278  12CF  160A  118A  2073  160A  118A  	fcall	_writeEUSART
  7279                           
  7280                           ;eusart.c: 143: ++str;
  7281  12D4  3001               	movlw	1
  7282  12D5  1283               	bcf	3,5	;RP0=0, select bank0
  7283  12D6  1303               	bcf	3,6	;RP1=0, select bank0
  7284  12D7  07A5               	addwf	writeString@str,f
  7285  12D8  1803               	skipnc
  7286  12D9  0AA6               	incf	writeString@str+1,f
  7287  12DA  2AB2               	goto	l2789
  7288  12DB                     __end_of_writeString:	
  7289                           
  7290                           	psect	text26
  7291  1073                     __ptext26:	
  7292 ;; *************** function _writeEUSART *****************
  7293 ;; Defined at:
  7294 ;;		line 113 in file "eusart.c"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;  d               1    wreg     unsigned char 
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;  d               1    4[BANK0 ] unsigned char 
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  1    wreg      void 
  7301 ;; Registers used:
  7302 ;;		wreg
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7308 ;;      Params:         0       0       0       0       0
  7309 ;;      Locals:         0       1       0       0       0
  7310 ;;      Temps:          0       0       0       0       0
  7311 ;;      Totals:         0       1       0       0       0
  7312 ;;Total ram usage:        1 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    4
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		_transmite
  7319 ;;		_writeString
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function _writeEUSART
  7325  1073                     _writeEUSART:	
  7326                           
  7327                           ;incstack = 0
  7328                           ; Regs used in _writeEUSART: [wreg]
  7329                           ;writeEUSART@d stored from wreg
  7330  1073  1283               	bcf	3,5	;RP0=0, select bank0
  7331  1074  1303               	bcf	3,6	;RP1=0, select bank0
  7332  1075  00A4               	movwf	writeEUSART@d
  7333                           
  7334                           ;eusart.c: 115: TXREG = d;
  7335  1076  0824               	movf	writeEUSART@d,w
  7336  1077  0099               	movwf	25	;volatile
  7337  1078  0008               	return
  7338  1079                     __end_of_writeEUSART:	
  7339                           
  7340                           	psect	text27
  7341  155E                     __ptext27:	
  7342 ;; *************** function _initEUSART *****************
  7343 ;; Defined at:
  7344 ;;		line 155 in file "eusart.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;  baudRate        4   18[BANK0 ] unsigned long 
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;		None
  7349 ;; Return value:  Size  Location     Type
  7350 ;;                  1    wreg      void 
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, status,0, pclath, cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7358 ;;      Params:         0       4       0       0       0
  7359 ;;      Locals:         0       0       0       0       0
  7360 ;;      Temps:          0       6       0       0       0
  7361 ;;      Totals:         0      10       0       0       0
  7362 ;;Total ram usage:       10 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:    5
  7365 ;; This function calls:
  7366 ;;		___lldiv
  7367 ;; This function is called by:
  7368 ;;		_master1
  7369 ;;		_slave1
  7370 ;;		_main
  7371 ;;		_modulo1
  7372 ;;		_modulo2
  7373 ;;		_modulo3
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           
  7378                           ;psect for function _initEUSART
  7379  155E                     _initEUSART:	
  7380                           
  7381                           ;eusart.c: 159: SPBRbits.u16 = (unsigned int)( (20000000 / (baudRate<<2)) - 1);
  7382                           
  7383                           ;incstack = 0
  7384                           ; Regs used in _initEUSART: [wreg+status,2+status,0+pclath+cstack]
  7385  155E  1283               	bcf	3,5	;RP0=0, select bank0
  7386  155F  1303               	bcf	3,6	;RP1=0, select bank0
  7387  1560  0832               	movf	initEUSART@baudRate,w
  7388  1561  00B6               	movwf	??_initEUSART
  7389  1562  0833               	movf	initEUSART@baudRate+1,w
  7390  1563  00B7               	movwf	??_initEUSART+1
  7391  1564  0834               	movf	initEUSART@baudRate+2,w
  7392  1565  00B8               	movwf	??_initEUSART+2
  7393  1566  0835               	movf	initEUSART@baudRate+3,w
  7394  1567  00B9               	movwf	??_initEUSART+3
  7395  1568  3002               	movlw	2
  7396  1569                     u1785:	
  7397  1569  1003               	clrc
  7398  156A  0DB6               	rlf	??_initEUSART,f
  7399  156B  0DB7               	rlf	??_initEUSART+1,f
  7400  156C  0DB8               	rlf	??_initEUSART+2,f
  7401  156D  0DB9               	rlf	??_initEUSART+3,f
  7402  156E  3EFF               	addlw	-1
  7403  156F  1D03               	skipz
  7404  1570  2D69               	goto	u1785
  7405  1571  0839               	movf	??_initEUSART+3,w
  7406  1572  00A7               	movwf	___lldiv@divisor+3
  7407  1573  0838               	movf	??_initEUSART+2,w
  7408  1574  00A6               	movwf	___lldiv@divisor+2
  7409  1575  0837               	movf	??_initEUSART+1,w
  7410  1576  00A5               	movwf	___lldiv@divisor+1
  7411  1577  0836               	movf	??_initEUSART,w
  7412  1578  00A4               	movwf	___lldiv@divisor
  7413  1579  3001               	movlw	1
  7414  157A  00AB               	movwf	___lldiv@dividend+3
  7415  157B  3031               	movlw	49
  7416  157C  00AA               	movwf	___lldiv@dividend+2
  7417  157D  302D               	movlw	45
  7418  157E  00A9               	movwf	___lldiv@dividend+1
  7419  157F  3000               	movlw	0
  7420  1580  00A8               	movwf	___lldiv@dividend
  7421  1581  160A  118A  2614  160A  118A  	fcall	___lldiv
  7422  1586  1283               	bcf	3,5	;RP0=0, select bank0
  7423  1587  1303               	bcf	3,6	;RP1=0, select bank0
  7424  1588  0824               	movf	?___lldiv,w
  7425  1589  3EFF               	addlw	255
  7426  158A  00BA               	movwf	??_initEUSART+4
  7427  158B  0825               	movf	?___lldiv+1,w
  7428  158C  1803               	skipnc
  7429  158D  3E01               	addlw	1
  7430  158E  3EFF               	addlw	255
  7431  158F  00BB               	movwf	??_initEUSART+5
  7432  1590  083A               	movf	??_initEUSART+4,w
  7433  1591  1683               	bsf	3,5	;RP0=1, select bank1
  7434  1592  1303               	bcf	3,6	;RP1=0, select bank1
  7435  1593  0099               	movwf	25	;volatile
  7436  1594  1283               	bcf	3,5	;RP0=0, select bank0
  7437  1595  1303               	bcf	3,6	;RP1=0, select bank0
  7438  1596  083B               	movf	??_initEUSART+5,w
  7439  1597  1683               	bsf	3,5	;RP0=1, select bank1
  7440  1598  1303               	bcf	3,6	;RP1=0, select bank1
  7441  1599  009A               	movwf	26	;volatile
  7442                           
  7443                           ;eusart.c: 161: TXSTAbits.SYNC = 0;
  7444  159A  1218               	bcf	24,4	;volatile
  7445                           
  7446                           ;eusart.c: 162: BAUDCTLbits.BRG16 = 1;
  7447  159B  1683               	bsf	3,5	;RP0=1, select bank3
  7448  159C  1703               	bsf	3,6	;RP1=1, select bank3
  7449  159D  1587               	bsf	7,3	;volatile
  7450                           
  7451                           ;eusart.c: 163: TXSTAbits.BRGH = 1;
  7452  159E  1683               	bsf	3,5	;RP0=1, select bank1
  7453  159F  1303               	bcf	3,6	;RP1=0, select bank1
  7454  15A0  1518               	bsf	24,2	;volatile
  7455                           
  7456                           ;eusart.c: 165: RCSTAbits.SPEN = 1;
  7457  15A1  1283               	bcf	3,5	;RP0=0, select bank0
  7458  15A2  1303               	bcf	3,6	;RP1=0, select bank0
  7459  15A3  1798               	bsf	24,7	;volatile
  7460                           
  7461                           ;eusart.c: 166: TXSTAbits.TXEN = 1;
  7462  15A4  1683               	bsf	3,5	;RP0=1, select bank1
  7463  15A5  1303               	bcf	3,6	;RP1=0, select bank1
  7464  15A6  1698               	bsf	24,5	;volatile
  7465                           
  7466                           ;eusart.c: 167: RCSTAbits.CREN = 1;
  7467  15A7  1283               	bcf	3,5	;RP0=0, select bank0
  7468  15A8  1303               	bcf	3,6	;RP1=0, select bank0
  7469  15A9  1618               	bsf	24,4	;volatile
  7470                           
  7471                           ;eusart.c: 169: TXSTAbits.TX9 = 0;
  7472  15AA  1683               	bsf	3,5	;RP0=1, select bank1
  7473  15AB  1303               	bcf	3,6	;RP1=0, select bank1
  7474  15AC  1318               	bcf	24,6	;volatile
  7475                           
  7476                           ;eusart.c: 170: TXSTAbits.TX9D = 0;
  7477  15AD  1018               	bcf	24,0	;volatile
  7478                           
  7479                           ;eusart.c: 171: RCSTAbits.RX9 = 0;
  7480  15AE  1283               	bcf	3,5	;RP0=0, select bank0
  7481  15AF  1303               	bcf	3,6	;RP1=0, select bank0
  7482  15B0  1318               	bcf	24,6	;volatile
  7483                           
  7484                           ;eusart.c: 172: RCSTAbits.RX9D = 0;
  7485  15B1  1018               	bcf	24,0	;volatile
  7486                           
  7487                           ;eusart.c: 174: SSPSTATbits.P = 1;
  7488  15B2  1683               	bsf	3,5	;RP0=1, select bank1
  7489  15B3  1303               	bcf	3,6	;RP1=0, select bank1
  7490  15B4  1614               	bsf	20,4	;volatile
  7491                           
  7492                           ;eusart.c: 176: PIE1bits.RCIE = 1;
  7493  15B5  168C               	bsf	12,5	;volatile
  7494                           
  7495                           ;eusart.c: 177: INTCONbits.PEIE = 1;
  7496  15B6  170B               	bsf	11,6	;volatile
  7497                           
  7498                           ;eusart.c: 178: INTCONbits.GIE = 1;
  7499  15B7  178B               	bsf	11,7	;volatile
  7500  15B8  0008               	return
  7501  15B9                     __end_of_initEUSART:	
  7502                           
  7503                           	psect	text28
  7504  1614                     __ptext28:	
  7505 ;; *************** function ___lldiv *****************
  7506 ;; Defined at:
  7507 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;  divisor         4    4[BANK0 ] unsigned long 
  7510 ;;  dividend        4    8[BANK0 ] unsigned long 
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;  quotient        4   13[BANK0 ] unsigned long 
  7513 ;;  counter         1   17[BANK0 ] unsigned char 
  7514 ;; Return value:  Size  Location     Type
  7515 ;;                  4    4[BANK0 ] unsigned long 
  7516 ;; Registers used:
  7517 ;;		wreg, status,2, status,0
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7523 ;;      Params:         0       8       0       0       0
  7524 ;;      Locals:         0       5       0       0       0
  7525 ;;      Temps:          0       1       0       0       0
  7526 ;;      Totals:         0      14       0       0       0
  7527 ;;Total ram usage:       14 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    4
  7530 ;; This function calls:
  7531 ;;		Nothing
  7532 ;; This function is called by:
  7533 ;;		_initEUSART
  7534 ;; This function uses a non-reentrant model
  7535 ;;
  7536                           
  7537                           
  7538                           ;psect for function ___lldiv
  7539  1614                     ___lldiv:	
  7540                           
  7541                           ;incstack = 0
  7542                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7543  1614  3000               	movlw	0
  7544  1615  1283               	bcf	3,5	;RP0=0, select bank0
  7545  1616  1303               	bcf	3,6	;RP1=0, select bank0
  7546  1617  00B0               	movwf	___lldiv@quotient+3
  7547  1618  3000               	movlw	0
  7548  1619  00AF               	movwf	___lldiv@quotient+2
  7549  161A  3000               	movlw	0
  7550  161B  00AE               	movwf	___lldiv@quotient+1
  7551  161C  3000               	movlw	0
  7552  161D  00AD               	movwf	___lldiv@quotient
  7553  161E  0827               	movf	___lldiv@divisor+3,w
  7554  161F  0426               	iorwf	___lldiv@divisor+2,w
  7555  1620  0425               	iorwf	___lldiv@divisor+1,w
  7556  1621  0424               	iorwf	___lldiv@divisor,w
  7557  1622  1903               	skipnz
  7558  1623  2E6B               	goto	l2605
  7559  1624  01B1               	clrf	___lldiv@counter
  7560  1625  0AB1               	incf	___lldiv@counter,f
  7561  1626                     l2591:	
  7562  1626  1BA7               	btfsc	___lldiv@divisor+3,7
  7563  1627  2E36               	goto	l2593
  7564  1628  3001               	movlw	1
  7565  1629  00AC               	movwf	??___lldiv
  7566  162A                     u1525:	
  7567  162A  1003               	clrc
  7568  162B  0DA4               	rlf	___lldiv@divisor,f
  7569  162C  0DA5               	rlf	___lldiv@divisor+1,f
  7570  162D  0DA6               	rlf	___lldiv@divisor+2,f
  7571  162E  0DA7               	rlf	___lldiv@divisor+3,f
  7572  162F  0BAC               	decfsz	??___lldiv,f
  7573  1630  2E2A               	goto	u1525
  7574  1631  3001               	movlw	1
  7575  1632  00AC               	movwf	??___lldiv
  7576  1633  082C               	movf	??___lldiv,w
  7577  1634  07B1               	addwf	___lldiv@counter,f
  7578  1635  2E26               	goto	l2591
  7579  1636                     l2593:	
  7580  1636  3001               	movlw	1
  7581  1637  00AC               	movwf	??___lldiv
  7582  1638                     u1545:	
  7583  1638  1003               	clrc
  7584  1639  0DAD               	rlf	___lldiv@quotient,f
  7585  163A  0DAE               	rlf	___lldiv@quotient+1,f
  7586  163B  0DAF               	rlf	___lldiv@quotient+2,f
  7587  163C  0DB0               	rlf	___lldiv@quotient+3,f
  7588  163D  0BAC               	decfsz	??___lldiv,f
  7589  163E  2E38               	goto	u1545
  7590  163F  0827               	movf	___lldiv@divisor+3,w
  7591  1640  022B               	subwf	___lldiv@dividend+3,w
  7592  1641  1D03               	skipz
  7593  1642  2E4D               	goto	u1555
  7594  1643  0826               	movf	___lldiv@divisor+2,w
  7595  1644  022A               	subwf	___lldiv@dividend+2,w
  7596  1645  1D03               	skipz
  7597  1646  2E4D               	goto	u1555
  7598  1647  0825               	movf	___lldiv@divisor+1,w
  7599  1648  0229               	subwf	___lldiv@dividend+1,w
  7600  1649  1D03               	skipz
  7601  164A  2E4D               	goto	u1555
  7602  164B  0824               	movf	___lldiv@divisor,w
  7603  164C  0228               	subwf	___lldiv@dividend,w
  7604  164D                     u1555:	
  7605  164D  1C03               	skipc
  7606  164E  2E5E               	goto	l2601
  7607  164F  0824               	movf	___lldiv@divisor,w
  7608  1650  02A8               	subwf	___lldiv@dividend,f
  7609  1651  0825               	movf	___lldiv@divisor+1,w
  7610  1652  1C03               	skipc
  7611  1653  0F25               	incfsz	___lldiv@divisor+1,w
  7612  1654  02A9               	subwf	___lldiv@dividend+1,f
  7613  1655  0826               	movf	___lldiv@divisor+2,w
  7614  1656  1C03               	skipc
  7615  1657  0F26               	incfsz	___lldiv@divisor+2,w
  7616  1658  02AA               	subwf	___lldiv@dividend+2,f
  7617  1659  0827               	movf	___lldiv@divisor+3,w
  7618  165A  1C03               	skipc
  7619  165B  0F27               	incfsz	___lldiv@divisor+3,w
  7620  165C  02AB               	subwf	___lldiv@dividend+3,f
  7621  165D  142D               	bsf	___lldiv@quotient,0
  7622  165E                     l2601:	
  7623  165E  3001               	movlw	1
  7624  165F                     u1565:	
  7625  165F  1003               	clrc
  7626  1660  0CA7               	rrf	___lldiv@divisor+3,f
  7627  1661  0CA6               	rrf	___lldiv@divisor+2,f
  7628  1662  0CA5               	rrf	___lldiv@divisor+1,f
  7629  1663  0CA4               	rrf	___lldiv@divisor,f
  7630  1664  3EFF               	addlw	-1
  7631  1665  1D03               	skipz
  7632  1666  2E5F               	goto	u1565
  7633  1667  3001               	movlw	1
  7634  1668  02B1               	subwf	___lldiv@counter,f
  7635  1669  1D03               	btfss	3,2
  7636  166A  2E36               	goto	l2593
  7637  166B                     l2605:	
  7638  166B  0830               	movf	___lldiv@quotient+3,w
  7639  166C  00A7               	movwf	?___lldiv+3
  7640  166D  082F               	movf	___lldiv@quotient+2,w
  7641  166E  00A6               	movwf	?___lldiv+2
  7642  166F  082E               	movf	___lldiv@quotient+1,w
  7643  1670  00A5               	movwf	?___lldiv+1
  7644  1671  082D               	movf	___lldiv@quotient,w
  7645  1672  00A4               	movwf	?___lldiv
  7646  1673  0008               	return
  7647  1674                     __end_of___lldiv:	
  7648                           
  7649                           	psect	text29
  7650  0BCC                     __ptext29:	
  7651 ;; *************** function _logo *****************
  7652 ;; Defined at:
  7653 ;;		line 8 in file "auxiliar.c"
  7654 ;; Parameters:    Size  Location     Type
  7655 ;;		None
  7656 ;; Auto vars:     Size  Location     Type
  7657 ;;		None
  7658 ;; Return value:  Size  Location     Type
  7659 ;;                  1    wreg      void 
  7660 ;; Registers used:
  7661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7662 ;; Tracked objects:
  7663 ;;		On entry : 0/0
  7664 ;;		On exit  : 0/0
  7665 ;;		Unchanged: 0/0
  7666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7667 ;;      Params:         0       0       0       0       0
  7668 ;;      Locals:         0       0       0       0       0
  7669 ;;      Temps:          0       3       0       0       0
  7670 ;;      Totals:         0       3       0       0       0
  7671 ;;Total ram usage:        3 bytes
  7672 ;; Hardware stack levels used:    1
  7673 ;; Hardware stack levels required when called:    7
  7674 ;; This function calls:
  7675 ;;		_cmdLCD
  7676 ;;		_writeLCD
  7677 ;; This function is called by:
  7678 ;;		_main
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           
  7683                           ;psect for function _logo
  7684  0BCC                     _logo:	
  7685                           
  7686                           ;auxiliar.c: 10: cmdLCD(0x01);
  7687                           
  7688                           ;incstack = 0
  7689                           ; Regs used in _logo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7690  0BCC  3001               	movlw	1
  7691  0BCD  160A  118A  2504  120A  158A  	fcall	_cmdLCD
  7692                           
  7693                           ;auxiliar.c: 11: writeLCD(0,0,"__            __"); _delay((unsigned long)((200)*(2000000
      +                          0/4000.0)));
  7694  0BD2  1283               	bcf	3,5	;RP0=0, select bank0
  7695  0BD3  1303               	bcf	3,6	;RP1=0, select bank0
  7696  0BD4  01AC               	clrf	writeLCD@y
  7697  0BD5  3021               	movlw	low (STR_1| (0+32768))
  7698  0BD6  00AD               	movwf	writeLCD@ptr
  7699  0BD7  3089               	movlw	high (STR_1| (0+32768))
  7700  0BD8  00AE               	movwf	writeLCD@ptr+1
  7701  0BD9  3000               	movlw	0
  7702  0BDA  160A  118A  2390  120A  158A  	fcall	_writeLCD
  7703  0BDF  3006               	movlw	6
  7704  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  7705  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  7706  0BE2  00B3               	movwf	??_logo+2
  7707  0BE3  3013               	movlw	19
  7708  0BE4  00B2               	movwf	??_logo+1
  7709  0BE5  30AD               	movlw	173
  7710  0BE6  00B1               	movwf	??_logo
  7711  0BE7                     u3107:	
  7712  0BE7  0BB1               	decfsz	??_logo,f
  7713  0BE8  2BE7               	goto	u3107
  7714  0BE9  0BB2               	decfsz	??_logo+1,f
  7715  0BEA  2BE7               	goto	u3107
  7716  0BEB  0BB3               	decfsz	??_logo+2,f
  7717  0BEC  2BE7               	goto	u3107
  7718                           
  7719                           ;auxiliar.c: 12: writeLCD(6,0,"B"); _delay((unsigned long)((600)*(20000000/4000.0)));
  7720  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  7721  0BEE  1303               	bcf	3,6	;RP1=0, select bank0
  7722  0BEF  01AC               	clrf	writeLCD@y
  7723  0BF0  30F1               	movlw	low (STR_2| (0+32768))
  7724  0BF1  00AD               	movwf	writeLCD@ptr
  7725  0BF2  3089               	movlw	high (STR_2| (0+32768))
  7726  0BF3  00AE               	movwf	writeLCD@ptr+1
  7727  0BF4  3006               	movlw	6
  7728  0BF5  160A  118A  2390  120A  158A  	fcall	_writeLCD
  7729  0BFA  3010               	movlw	16
  7730  0BFB  1283               	bcf	3,5	;RP0=0, select bank0
  7731  0BFC  1303               	bcf	3,6	;RP1=0, select bank0
  7732  0BFD  00B3               	movwf	??_logo+2
  7733  0BFE  3039               	movlw	57
  7734  0BFF  00B2               	movwf	??_logo+1
  7735  0C00  300D               	movlw	13
  7736  0C01  00B1               	movwf	??_logo
  7737  0C02                     u3117:	
  7738  0C02  0BB1               	decfsz	??_logo,f
  7739  0C03  2C02               	goto	u3117
  7740  0C04  0BB2               	decfsz	??_logo+1,f
  7741  0C05  2C02               	goto	u3117
  7742  0C06  0BB3               	decfsz	??_logo+2,f
  7743  0C07  2C02               	goto	u3117
  7744                           
  7745                           ;auxiliar.c: 13: writeLCD(7,0,"l"); _delay((unsigned long)((600)*(20000000/4000.0)));
  7746  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  7747  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  7748  0C0A  01AC               	clrf	writeLCD@y
  7749  0C0B  30F5               	movlw	low (STR_3| (0+32768))
  7750  0C0C  00AD               	movwf	writeLCD@ptr
  7751  0C0D  3089               	movlw	high (STR_3| (0+32768))
  7752  0C0E  00AE               	movwf	writeLCD@ptr+1
  7753  0C0F  3007               	movlw	7
  7754  0C10  160A  118A  2390  120A  158A  	fcall	_writeLCD
  7755  0C15  3010               	movlw	16
  7756  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  7757  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  7758  0C18  00B3               	movwf	??_logo+2
  7759  0C19  3039               	movlw	57
  7760  0C1A  00B2               	movwf	??_logo+1
  7761  0C1B  300D               	movlw	13
  7762  0C1C  00B1               	movwf	??_logo
  7763  0C1D                     u3127:	
  7764  0C1D  0BB1               	decfsz	??_logo,f
  7765  0C1E  2C1D               	goto	u3127
  7766  0C1F  0BB2               	decfsz	??_logo+1,f
  7767  0C20  2C1D               	goto	u3127
  7768  0C21  0BB3               	decfsz	??_logo+2,f
  7769  0C22  2C1D               	goto	u3127
  7770                           
  7771                           ;auxiliar.c: 14: writeLCD(8,0,"u"); _delay((unsigned long)((600)*(20000000/4000.0)));
  7772  0C23  1283               	bcf	3,5	;RP0=0, select bank0
  7773  0C24  1303               	bcf	3,6	;RP1=0, select bank0
  7774  0C25  01AC               	clrf	writeLCD@y
  7775  0C26  30F7               	movlw	low (STR_4| (0+32768))
  7776  0C27  00AD               	movwf	writeLCD@ptr
  7777  0C28  3089               	movlw	high (STR_4| (0+32768))
  7778  0C29  00AE               	movwf	writeLCD@ptr+1
  7779  0C2A  3008               	movlw	8
  7780  0C2B  160A  118A  2390  120A  158A  	fcall	_writeLCD
  7781  0C30  3010               	movlw	16
  7782  0C31  1283               	bcf	3,5	;RP0=0, select bank0
  7783  0C32  1303               	bcf	3,6	;RP1=0, select bank0
  7784  0C33  00B3               	movwf	??_logo+2
  7785  0C34  3039               	movlw	57
  7786  0C35  00B2               	movwf	??_logo+1
  7787  0C36  300D               	movlw	13
  7788  0C37  00B1               	movwf	??_logo
  7789  0C38                     u3137:	
  7790  0C38  0BB1               	decfsz	??_logo,f
  7791  0C39  2C38               	goto	u3137
  7792  0C3A  0BB2               	decfsz	??_logo+1,f
  7793  0C3B  2C38               	goto	u3137
  7794  0C3C  0BB3               	decfsz	??_logo+2,f
  7795  0C3D  2C38               	goto	u3137
  7796                           
  7797                           ;auxiliar.c: 15: writeLCD(9,0,"e"); _delay((unsigned long)((600)*(20000000/4000.0)));
  7798  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  7799  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  7800  0C40  01AC               	clrf	writeLCD@y
  7801  0C41  30F3               	movlw	low (STR_5| (0+32768))
  7802  0C42  00AD               	movwf	writeLCD@ptr
  7803  0C43  3089               	movlw	high (STR_5| (0+32768))
  7804  0C44  00AE               	movwf	writeLCD@ptr+1
  7805  0C45  3009               	movlw	9
  7806  0C46  160A  118A  2390  120A  158A  	fcall	_writeLCD
  7807  0C4B  3010               	movlw	16
  7808  0C4C  1283               	bcf	3,5	;RP0=0, select bank0
  7809  0C4D  1303               	bcf	3,6	;RP1=0, select bank0
  7810  0C4E  00B3               	movwf	??_logo+2
  7811  0C4F  3039               	movlw	57
  7812  0C50  00B2               	movwf	??_logo+1
  7813  0C51  300D               	movlw	13
  7814  0C52  00B1               	movwf	??_logo
  7815  0C53                     u3147:	
  7816  0C53  0BB1               	decfsz	??_logo,f
  7817  0C54  2C53               	goto	u3147
  7818  0C55  0BB2               	decfsz	??_logo+1,f
  7819  0C56  2C53               	goto	u3147
  7820  0C57  0BB3               	decfsz	??_logo+2,f
  7821  0C58  2C53               	goto	u3147
  7822                           
  7823                           ;auxiliar.c: 16: writeLCD(0,1,"    Tecnolog    "); _delay((unsigned long)((2500)*(200000
      +                          00/4000.0)));
  7824  0C59  1283               	bcf	3,5	;RP0=0, select bank0
  7825  0C5A  1303               	bcf	3,6	;RP1=0, select bank0
  7826  0C5B  01AC               	clrf	writeLCD@y
  7827  0C5C  0AAC               	incf	writeLCD@y,f
  7828  0C5D  3044               	movlw	low (STR_6| (0+32768))
  7829  0C5E  00AD               	movwf	writeLCD@ptr
  7830  0C5F  3088               	movlw	high (STR_6| (0+32768))
  7831  0C60  00AE               	movwf	writeLCD@ptr+1
  7832  0C61  3000               	movlw	0
  7833  0C62  160A  118A  2390  120A  158A  	fcall	_writeLCD
  7834  0C67  3040               	movlw	64
  7835  0C68  1283               	bcf	3,5	;RP0=0, select bank0
  7836  0C69  1303               	bcf	3,6	;RP1=0, select bank0
  7837  0C6A  00B3               	movwf	??_logo+2
  7838  0C6B  306A               	movlw	106
  7839  0C6C  00B2               	movwf	??_logo+1
  7840  0C6D  3097               	movlw	151
  7841  0C6E  00B1               	movwf	??_logo
  7842  0C6F                     u3157:	
  7843  0C6F  0BB1               	decfsz	??_logo,f
  7844  0C70  2C6F               	goto	u3157
  7845  0C71  0BB2               	decfsz	??_logo+1,f
  7846  0C72  2C6F               	goto	u3157
  7847  0C73  0BB3               	decfsz	??_logo+2,f
  7848  0C74  2C6F               	goto	u3157
  7849  0C75  0008               	return
  7850  0C76                     __end_of_logo:	
  7851                           
  7852                           	psect	text30
  7853  1188                     __ptext30:	
  7854 ;; *************** function _initTimer0 *****************
  7855 ;; Defined at:
  7856 ;;		line 38 in file "timer0.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;		None
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      void 
  7863 ;; Registers used:
  7864 ;;		wreg, status,2, status,0, pclath, cstack
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7870 ;;      Params:         0       0       0       0       0
  7871 ;;      Locals:         0       0       0       0       0
  7872 ;;      Temps:          0       0       0       0       0
  7873 ;;      Totals:         0       0       0       0       0
  7874 ;;Total ram usage:        0 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    5
  7877 ;; This function calls:
  7878 ;;		_setT0limite
  7879 ;; This function is called by:
  7880 ;;		_main
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           
  7885                           ;psect for function _initTimer0
  7886  1188                     _initTimer0:	
  7887                           
  7888                           ;timer0.c: 41: INTCONbits.GIE = 0;
  7889                           
  7890                           ;incstack = 0
  7891                           ; Regs used in _initTimer0: [wreg+status,2+status,0+pclath+cstack]
  7892  1188  138B               	bcf	11,7	;volatile
  7893                           
  7894                           ;timer0.c: 43: ANSEL = 0x00;
  7895  1189  1683               	bsf	3,5	;RP0=1, select bank3
  7896  118A  1703               	bsf	3,6	;RP1=1, select bank3
  7897  118B  0188               	clrf	8	;volatile
  7898                           
  7899                           ;timer0.c: 44: TRISAbits.TRISA4 = 1;
  7900  118C  1683               	bsf	3,5	;RP0=1, select bank1
  7901  118D  1303               	bcf	3,6	;RP1=0, select bank1
  7902  118E  1605               	bsf	5,4	;volatile
  7903                           
  7904                           ;timer0.c: 46: OPTION_REGbits.T0CS = 0;
  7905  118F  1281               	bcf	1,5	;volatile
  7906                           
  7907                           ;timer0.c: 48: OPTION_REGbits.PSA = 0;
  7908  1190  1181               	bcf	1,3	;volatile
  7909                           
  7910                           ;timer0.c: 49: OPTION_REGbits.PS2 = 1;
  7911  1191  1501               	bsf	1,2	;volatile
  7912                           
  7913                           ;timer0.c: 50: OPTION_REGbits.PS1 = 0;
  7914  1192  1081               	bcf	1,1	;volatile
  7915                           
  7916                           ;timer0.c: 51: OPTION_REGbits.PS0 = 0;
  7917  1193  1001               	bcf	1,0	;volatile
  7918                           
  7919                           ;timer0.c: 53: OPTION_REGbits.T0SE = 1;
  7920  1194  1601               	bsf	1,4	;volatile
  7921                           
  7922                           ;timer0.c: 55: TMR0 = 100;
  7923  1195  3064               	movlw	100
  7924  1196  1283               	bcf	3,5	;RP0=0, select bank0
  7925  1197  1303               	bcf	3,6	;RP1=0, select bank0
  7926  1198  0081               	movwf	1	;volatile
  7927                           
  7928                           ;timer0.c: 57: setT0limite( 700 );
  7929  1199  30BC               	movlw	188
  7930  119A  00A4               	movwf	setT0limite@c
  7931  119B  3002               	movlw	2
  7932  119C  00A5               	movwf	setT0limite@c+1
  7933  119D  160A  118A  2080   	fcall	_setT0limite
  7934                           
  7935                           ;timer0.c: 59: INTCONbits.T0IE = 1;
  7936  11A0  168B               	bsf	11,5	;volatile
  7937                           
  7938                           ;timer0.c: 60: INTCONbits.GIE = 1;
  7939  11A1  178B               	bsf	11,7	;volatile
  7940  11A2  0008               	return
  7941  11A3                     __end_of_initTimer0:	
  7942                           
  7943                           	psect	text31
  7944  1080                     __ptext31:	
  7945 ;; *************** function _setT0limite *****************
  7946 ;; Defined at:
  7947 ;;		line 29 in file "timer0.c"
  7948 ;; Parameters:    Size  Location     Type
  7949 ;;  c               2    4[BANK0 ] int 
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;		None
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  1    wreg      void 
  7954 ;; Registers used:
  7955 ;;		wreg
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7961 ;;      Params:         0       2       0       0       0
  7962 ;;      Locals:         0       0       0       0       0
  7963 ;;      Temps:          0       0       0       0       0
  7964 ;;      Totals:         0       2       0       0       0
  7965 ;;Total ram usage:        2 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:    4
  7968 ;; This function calls:
  7969 ;;		Nothing
  7970 ;; This function is called by:
  7971 ;;		_initTimer0
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           
  7976                           ;psect for function _setT0limite
  7977  1080                     _setT0limite:	
  7978                           
  7979                           ;timer0.c: 31: t0final = c;
  7980                           
  7981                           ;incstack = 0
  7982                           ; Regs used in _setT0limite: [wreg]
  7983  1080  1283               	bcf	3,5	;RP0=0, select bank0
  7984  1081  1303               	bcf	3,6	;RP1=0, select bank0
  7985  1082  0825               	movf	setT0limite@c+1,w
  7986  1083  00CC               	movwf	_t0final+1
  7987  1084  0824               	movf	setT0limite@c,w
  7988  1085  00CB               	movwf	_t0final
  7989  1086  0008               	return
  7990  1087                     __end_of_setT0limite:	
  7991                           
  7992                           	psect	text32
  7993  10BF                     __ptext32:	
  7994 ;; *************** function _initSerial *****************
  7995 ;; Defined at:
  7996 ;;		line 11 in file "Serial.c"
  7997 ;; Parameters:    Size  Location     Type
  7998 ;;		None
  7999 ;; Auto vars:     Size  Location     Type
  8000 ;;		None
  8001 ;; Return value:  Size  Location     Type
  8002 ;;                  1    wreg      void 
  8003 ;; Registers used:
  8004 ;;		wreg, status,2, status,0, pclath, cstack
  8005 ;; Tracked objects:
  8006 ;;		On entry : 0/0
  8007 ;;		On exit  : 0/0
  8008 ;;		Unchanged: 0/0
  8009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8010 ;;      Params:         0       0       0       0       0
  8011 ;;      Locals:         0       0       0       0       0
  8012 ;;      Temps:          0       1       0       0       0
  8013 ;;      Totals:         0       1       0       0       0
  8014 ;;Total ram usage:        1 bytes
  8015 ;; Hardware stack levels used:    1
  8016 ;; Hardware stack levels required when called:    5
  8017 ;; This function calls:
  8018 ;;		_serialOut
  8019 ;; This function is called by:
  8020 ;;		_main
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           
  8025                           ;psect for function _initSerial
  8026  10BF                     _initSerial:	
  8027                           
  8028                           ;Serial.c: 13: PORTB = 0x00;
  8029                           
  8030                           ;incstack = 0
  8031                           ; Regs used in _initSerial: [wreg+status,2+status,0+pclath+cstack]
  8032  10BF  1283               	bcf	3,5	;RP0=0, select bank0
  8033  10C0  1303               	bcf	3,6	;RP1=0, select bank0
  8034  10C1  0186               	clrf	6	;volatile
  8035                           
  8036                           ;Serial.c: 14: CCP1CON &= 0xF0;
  8037  10C2  30F0               	movlw	240
  8038  10C3  00A7               	movwf	??_initSerial
  8039  10C4  0827               	movf	??_initSerial,w
  8040  10C5  0597               	andwf	23,f	;volatile
  8041                           
  8042                           ;Serial.c: 15: ANSELH = 0x00;
  8043  10C6  1683               	bsf	3,5	;RP0=1, select bank3
  8044  10C7  1703               	bsf	3,6	;RP1=1, select bank3
  8045  10C8  0189               	clrf	9	;volatile
  8046                           
  8047                           ;Serial.c: 16: TRISB = 0b00000010;
  8048  10C9  3002               	movlw	2
  8049  10CA  1683               	bsf	3,5	;RP0=1, select bank1
  8050  10CB  1303               	bcf	3,6	;RP1=0, select bank1
  8051  10CC  0086               	movwf	6	;volatile
  8052                           
  8053                           ;Serial.c: 18: PORTBbits.RB4 = 1;
  8054  10CD  1283               	bcf	3,5	;RP0=0, select bank0
  8055  10CE  1303               	bcf	3,6	;RP1=0, select bank0
  8056  10CF  1606               	bsf	6,4	;volatile
  8057                           
  8058                           ;Serial.c: 19: serialOut(0x00);
  8059  10D0  3000               	movlw	0
  8060  10D1  160A  118A  20ED   	fcall	_serialOut
  8061  10D4  0008               	return
  8062  10D5                     __end_of_initSerial:	
  8063                           
  8064                           	psect	text33
  8065  10ED                     __ptext33:	
  8066 ;; *************** function _serialOut *****************
  8067 ;; Defined at:
  8068 ;;		line 22 in file "Serial.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;  d               1    wreg     unsigned char 
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;  d               1    5[BANK0 ] unsigned char 
  8073 ;;  i               1    6[BANK0 ] unsigned char 
  8074 ;; Return value:  Size  Location     Type
  8075 ;;                  1    wreg      void 
  8076 ;; Registers used:
  8077 ;;		wreg, status,2, status,0
  8078 ;; Tracked objects:
  8079 ;;		On entry : 0/0
  8080 ;;		On exit  : 0/0
  8081 ;;		Unchanged: 0/0
  8082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8083 ;;      Params:         0       0       0       0       0
  8084 ;;      Locals:         0       2       0       0       0
  8085 ;;      Temps:          0       1       0       0       0
  8086 ;;      Totals:         0       3       0       0       0
  8087 ;;Total ram usage:        3 bytes
  8088 ;; Hardware stack levels used:    1
  8089 ;; Hardware stack levels required when called:    4
  8090 ;; This function calls:
  8091 ;;		Nothing
  8092 ;; This function is called by:
  8093 ;;		_initSerial
  8094 ;;		_main
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           
  8099                           ;psect for function _serialOut
  8100  10ED                     _serialOut:	
  8101                           
  8102                           ;incstack = 0
  8103                           ; Regs used in _serialOut: [wreg+status,2+status,0]
  8104                           ;serialOut@d stored from wreg
  8105  10ED  1283               	bcf	3,5	;RP0=0, select bank0
  8106  10EE  1303               	bcf	3,6	;RP1=0, select bank0
  8107  10EF  00A5               	movwf	serialOut@d
  8108                           
  8109                           ;Serial.c: 24: unsigned char i = 0x80;
  8110  10F0  3080               	movlw	128
  8111  10F1  00A4               	movwf	??_serialOut
  8112  10F2  0824               	movf	??_serialOut,w
  8113  10F3  00A6               	movwf	serialOut@i
  8114                           
  8115                           ;Serial.c: 25: PORTBbits.RB3 = 0;
  8116  10F4  1186               	bcf	6,3	;volatile
  8117  10F5                     l2659:	
  8118                           ;Serial.c: 26: while (i)
  8119                           
  8120  10F5  0826               	movf	serialOut@i,w
  8121  10F6  1903               	btfsc	3,2
  8122  10F7  2904               	goto	l30
  8123                           
  8124                           ;Serial.c: 27: {
  8125                           ;Serial.c: 28: PORTBbits.RB2 = 0;
  8126  10F8  1106               	bcf	6,2	;volatile
  8127                           
  8128                           ;Serial.c: 29: if(d & i )
  8129  10F9  0825               	movf	serialOut@d,w
  8130  10FA  0526               	andwf	serialOut@i,w
  8131  10FB  1903               	btfsc	3,2
  8132  10FC  28FF               	goto	l28
  8133                           
  8134                           ;Serial.c: 30: PORTBbits.RB0 = 1;
  8135  10FD  1406               	bsf	6,0	;volatile
  8136  10FE  2900               	goto	l2655
  8137  10FF                     l28:	
  8138                           
  8139                           ;Serial.c: 31: else
  8140                           ;Serial.c: 32: PORTBbits.RB0 = 0;
  8141  10FF  1006               	bcf	6,0	;volatile
  8142  1100                     l2655:	
  8143                           
  8144                           ;Serial.c: 33: i >>= 1;
  8145  1100  1003               	clrc
  8146  1101  0CA6               	rrf	serialOut@i,f
  8147                           
  8148                           ;Serial.c: 34: PORTBbits.RB2 = 1;
  8149  1102  1506               	bsf	6,2	;volatile
  8150  1103  28F5               	goto	l2659
  8151  1104                     l30:	
  8152                           
  8153                           ;Serial.c: 35: }
  8154                           ;Serial.c: 36: PORTBbits.RB3 = 1;
  8155  1104  1586               	bsf	6,3	;volatile
  8156  1105  0008               	return
  8157  1106                     __end_of_serialOut:	
  8158                           
  8159                           	psect	text34
  8160  0A0C                     __ptext34:	
  8161 ;; *************** function _initLCD *****************
  8162 ;; Defined at:
  8163 ;;		line 71 in file "lcd.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;		None
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;		None
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  1    wreg      void 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0, pclath, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8177 ;;      Params:         0       0       0       0       0
  8178 ;;      Locals:         0       0       0       0       0
  8179 ;;      Temps:          0       3       0       0       0
  8180 ;;      Totals:         0       3       0       0       0
  8181 ;;Total ram usage:        3 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    5
  8184 ;; This function calls:
  8185 ;;		_cmdLCD
  8186 ;; This function is called by:
  8187 ;;		_main
  8188 ;; This function uses a non-reentrant model
  8189 ;;
  8190                           
  8191                           
  8192                           ;psect for function _initLCD
  8193  0A0C                     _initLCD:	
  8194                           
  8195                           ;lcd.c: 73: LCD.BUS = 0;
  8196                           
  8197                           ;incstack = 0
  8198                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  8199  0A0C  30F0               	movlw	-16
  8200  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  8201  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  8202  0A0F  0588               	andwf	8,f	;volatile
  8203                           
  8204                           ;lcd.c: 74: LCD.RS = 0;
  8205  0A10  1208               	bcf	8,4	;volatile
  8206                           
  8207                           ;lcd.c: 75: LCD.EN = 1;
  8208  0A11  1688               	bsf	8,5	;volatile
  8209                           
  8210                           ;lcd.c: 76: TRISD = 0x00;
  8211  0A12  1683               	bsf	3,5	;RP0=1, select bank1
  8212  0A13  1303               	bcf	3,6	;RP1=0, select bank1
  8213  0A14  0188               	clrf	8	;volatile
  8214                           
  8215                           ;lcd.c: 78: _delay((unsigned long)((100)*(20000000/4000.0)));
  8216  0A15  3003               	movlw	3
  8217  0A16  1283               	bcf	3,5	;RP0=0, select bank0
  8218  0A17  1303               	bcf	3,6	;RP1=0, select bank0
  8219  0A18  00AA               	movwf	??_initLCD+2
  8220  0A19  308A               	movlw	138
  8221  0A1A  00A9               	movwf	??_initLCD+1
  8222  0A1B  3055               	movlw	85
  8223  0A1C  00A8               	movwf	??_initLCD
  8224  0A1D                     u3167:	
  8225  0A1D  0BA8               	decfsz	??_initLCD,f
  8226  0A1E  2A1D               	goto	u3167
  8227  0A1F  0BA9               	decfsz	??_initLCD+1,f
  8228  0A20  2A1D               	goto	u3167
  8229  0A21  0BAA               	decfsz	??_initLCD+2,f
  8230  0A22  2A1D               	goto	u3167
  8231                           
  8232                           ;lcd.c: 79: cmdLCD ( 0x20 );
  8233  0A23  3020               	movlw	32
  8234  0A24  160A  118A  2504  120A  158A  	fcall	_cmdLCD
  8235                           
  8236                           ;lcd.c: 80: cmdLCD ( 0x28 );
  8237  0A29  3028               	movlw	40
  8238  0A2A  160A  118A  2504  120A  158A  	fcall	_cmdLCD
  8239                           
  8240                           ;lcd.c: 81: cmdLCD ( 0x0C );
  8241  0A2F  300C               	movlw	12
  8242  0A30  160A  118A  2504  120A  158A  	fcall	_cmdLCD
  8243                           
  8244                           ;lcd.c: 82: cmdLCD ( 0x01 );
  8245  0A35  3001               	movlw	1
  8246  0A36  160A  118A  2504  120A  158A  	fcall	_cmdLCD
  8247                           
  8248                           ;lcd.c: 83: cmdLCD ( 0x02 );
  8249  0A3B  3002               	movlw	2
  8250  0A3C  160A  118A  2504   	fcall	_cmdLCD
  8251  0A3F  0008               	return
  8252  0A40                     __end_of_initLCD:	
  8253                           
  8254                           	psect	text35
  8255  1095                     __ptext35:	
  8256 ;; *************** function _initBT *****************
  8257 ;; Defined at:
  8258 ;;		line 4 in file "bds.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;		None
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;		None
  8263 ;; Return value:  Size  Location     Type
  8264 ;;                  1    wreg      void 
  8265 ;; Registers used:
  8266 ;;		None
  8267 ;; Tracked objects:
  8268 ;;		On entry : 0/0
  8269 ;;		On exit  : 0/0
  8270 ;;		Unchanged: 0/0
  8271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8272 ;;      Params:         0       0       0       0       0
  8273 ;;      Locals:         0       0       0       0       0
  8274 ;;      Temps:          0       0       0       0       0
  8275 ;;      Totals:         0       0       0       0       0
  8276 ;;Total ram usage:        0 bytes
  8277 ;; Hardware stack levels used:    1
  8278 ;; Hardware stack levels required when called:    4
  8279 ;; This function calls:
  8280 ;;		Nothing
  8281 ;; This function is called by:
  8282 ;;		_main
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           
  8287                           ;psect for function _initBT
  8288  1095                     _initBT:	
  8289                           
  8290                           ;bds.c: 7: TRISCbits.TRISC0 = 1;
  8291                           
  8292                           ;incstack = 0
  8293                           ; Regs used in _initBT: []
  8294  1095  1683               	bsf	3,5	;RP0=1, select bank1
  8295  1096  1303               	bcf	3,6	;RP1=0, select bank1
  8296  1097  1407               	bsf	7,0	;volatile
  8297                           
  8298                           ;bds.c: 8: TRISCbits.TRISC1 = 1;
  8299  1098  1487               	bsf	7,1	;volatile
  8300                           
  8301                           ;bds.c: 9: TRISCbits.TRISC2 = 1;
  8302  1099  1507               	bsf	7,2	;volatile
  8303                           
  8304                           ;bds.c: 11: PORTCbits.RC0 = 0;
  8305  109A  1283               	bcf	3,5	;RP0=0, select bank0
  8306  109B  1303               	bcf	3,6	;RP1=0, select bank0
  8307  109C  1007               	bcf	7,0	;volatile
  8308                           
  8309                           ;bds.c: 12: PORTCbits.RC1 = 0;
  8310  109D  1087               	bcf	7,1	;volatile
  8311                           
  8312                           ;bds.c: 13: PORTCbits.RC2 = 0;
  8313  109E  1107               	bcf	7,2	;volatile
  8314  109F  0008               	return
  8315  10A0                     __end_of_initBT:	
  8316                           
  8317                           	psect	text36
  8318  1289                     __ptext36:	
  8319 ;; *************** function _getFIFO *****************
  8320 ;; Defined at:
  8321 ;;		line 23 in file "fifo.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;		None
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  aux             1   15[BANK0 ] unsigned char 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;                  1    wreg      unsigned char 
  8328 ;; Registers used:
  8329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8335 ;;      Params:         0       0       0       0       0
  8336 ;;      Locals:         0       1       0       0       0
  8337 ;;      Temps:          0       4       0       0       0
  8338 ;;      Totals:         0       5       0       0       0
  8339 ;;Total ram usage:        5 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    5
  8342 ;; This function calls:
  8343 ;;		___awmod
  8344 ;; This function is called by:
  8345 ;;		_main
  8346 ;;		_readEUSART
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           
  8351                           ;psect for function _getFIFO
  8352  1289                     _getFIFO:	
  8353                           
  8354                           ;fifo.c: 25: unsigned char aux = 0;
  8355                           
  8356                           ;incstack = 0
  8357                           ; Regs used in _getFIFO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8358  1289  1283               	bcf	3,5	;RP0=0, select bank0
  8359  128A  1303               	bcf	3,6	;RP1=0, select bank0
  8360  128B  01AF               	clrf	getFIFO@aux
  8361                           
  8362                           ;fifo.c: 27: if( fifoTail != fifoHead )
  8363  128C  084D               	movf	_fifoTail,w
  8364  128D  067C               	xorwf	_fifoHead,w
  8365  128E  1903               	skipnz
  8366  128F  2AB0               	goto	l3303
  8367                           
  8368                           ;fifo.c: 28: {
  8369                           ;fifo.c: 29: aux = fifo[ fifoTail ];
  8370  1290  084D               	movf	_fifoTail,w
  8371  1291  3EA0               	addlw	(low (_fifo| 0))& (0+255)
  8372  1292  0084               	movwf	4
  8373  1293  1383               	bcf	3,7	;select IRP bank1
  8374  1294  0800               	movf	0,w
  8375  1295  00AB               	movwf	??_getFIFO
  8376  1296  082B               	movf	??_getFIFO,w
  8377  1297  00AF               	movwf	getFIFO@aux
  8378                           
  8379                           ;fifo.c: 30: fifoTail = ++fifoTail % 30;
  8380  1298  301E               	movlw	30
  8381  1299  00A4               	movwf	___awmod@divisor
  8382  129A  3000               	movlw	0
  8383  129B  00A5               	movwf	___awmod@divisor+1
  8384  129C  3001               	movlw	1
  8385  129D  00AB               	movwf	??_getFIFO
  8386  129E  082B               	movf	??_getFIFO,w
  8387  129F  07CD               	addwf	_fifoTail,f
  8388  12A0  084D               	movf	_fifoTail,w
  8389  12A1  00AC               	movwf	??_getFIFO+1
  8390  12A2  01AD               	clrf	??_getFIFO+2
  8391  12A3  082C               	movf	??_getFIFO+1,w
  8392  12A4  00A6               	movwf	___awmod@dividend
  8393  12A5  082D               	movf	??_getFIFO+2,w
  8394  12A6  00A7               	movwf	___awmod@dividend+1
  8395  12A7  160A  118A  240D   	fcall	___awmod
  8396  12AA  1283               	bcf	3,5	;RP0=0, select bank0
  8397  12AB  1303               	bcf	3,6	;RP1=0, select bank0
  8398  12AC  0824               	movf	?___awmod,w
  8399  12AD  00AE               	movwf	??_getFIFO+3
  8400  12AE  082E               	movf	??_getFIFO+3,w
  8401  12AF  00CD               	movwf	_fifoTail
  8402  12B0                     l3303:	
  8403                           
  8404                           ;fifo.c: 31: }
  8405                           ;fifo.c: 32: return( aux );
  8406  12B0  082F               	movf	getFIFO@aux,w
  8407  12B1  0008               	return
  8408  12B2                     __end_of_getFIFO:	
  8409                           
  8410                           	psect	text37
  8411  140D                     __ptext37:	
  8412 ;; *************** function ___awmod *****************
  8413 ;; Defined at:
  8414 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  8415 ;; Parameters:    Size  Location     Type
  8416 ;;  divisor         2    4[BANK0 ] int 
  8417 ;;  dividend        2    6[BANK0 ] int 
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;  sign            1   10[BANK0 ] unsigned char 
  8420 ;;  counter         1    9[BANK0 ] unsigned char 
  8421 ;; Return value:  Size  Location     Type
  8422 ;;                  2    4[BANK0 ] int 
  8423 ;; Registers used:
  8424 ;;		wreg, status,2, status,0
  8425 ;; Tracked objects:
  8426 ;;		On entry : 0/0
  8427 ;;		On exit  : 0/0
  8428 ;;		Unchanged: 0/0
  8429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8430 ;;      Params:         0       4       0       0       0
  8431 ;;      Locals:         0       2       0       0       0
  8432 ;;      Temps:          0       1       0       0       0
  8433 ;;      Totals:         0       7       0       0       0
  8434 ;;Total ram usage:        7 bytes
  8435 ;; Hardware stack levels used:    1
  8436 ;; Hardware stack levels required when called:    4
  8437 ;; This function calls:
  8438 ;;		Nothing
  8439 ;; This function is called by:
  8440 ;;		_getFIFO
  8441 ;;		_statusFIFO
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           
  8446                           ;psect for function ___awmod
  8447  140D                     ___awmod:	
  8448                           
  8449                           ;incstack = 0
  8450                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8451  140D  1283               	bcf	3,5	;RP0=0, select bank0
  8452  140E  1303               	bcf	3,6	;RP1=0, select bank0
  8453  140F  01AA               	clrf	___awmod@sign
  8454  1410  1FA7               	btfss	___awmod@dividend+1,7
  8455  1411  2C19               	goto	l2849
  8456  1412  09A6               	comf	___awmod@dividend,f
  8457  1413  09A7               	comf	___awmod@dividend+1,f
  8458  1414  0AA6               	incf	___awmod@dividend,f
  8459  1415  1903               	skipnz
  8460  1416  0AA7               	incf	___awmod@dividend+1,f
  8461  1417  01AA               	clrf	___awmod@sign
  8462  1418  0AAA               	incf	___awmod@sign,f
  8463  1419                     l2849:	
  8464  1419  1FA5               	btfss	___awmod@divisor+1,7
  8465  141A  2C20               	goto	l2853
  8466  141B  09A4               	comf	___awmod@divisor,f
  8467  141C  09A5               	comf	___awmod@divisor+1,f
  8468  141D  0AA4               	incf	___awmod@divisor,f
  8469  141E  1903               	skipnz
  8470  141F  0AA5               	incf	___awmod@divisor+1,f
  8471  1420                     l2853:	
  8472  1420  0824               	movf	___awmod@divisor,w
  8473  1421  0425               	iorwf	___awmod@divisor+1,w
  8474  1422  1903               	btfsc	3,2
  8475  1423  2C4D               	goto	l2871
  8476  1424  01A9               	clrf	___awmod@counter
  8477  1425  0AA9               	incf	___awmod@counter,f
  8478  1426                     l2861:	
  8479  1426  1BA5               	btfsc	___awmod@divisor+1,7
  8480  1427  2C34               	goto	l2863
  8481  1428  3001               	movlw	1
  8482  1429                     u1945:	
  8483  1429  1003               	clrc
  8484  142A  0DA4               	rlf	___awmod@divisor,f
  8485  142B  0DA5               	rlf	___awmod@divisor+1,f
  8486  142C  3EFF               	addlw	-1
  8487  142D  1D03               	skipz
  8488  142E  2C29               	goto	u1945
  8489  142F  3001               	movlw	1
  8490  1430  00A8               	movwf	??___awmod
  8491  1431  0828               	movf	??___awmod,w
  8492  1432  07A9               	addwf	___awmod@counter,f
  8493  1433  2C26               	goto	l2861
  8494  1434                     l2863:	
  8495  1434  0825               	movf	___awmod@divisor+1,w
  8496  1435  0227               	subwf	___awmod@dividend+1,w
  8497  1436  1D03               	skipz
  8498  1437  2C3A               	goto	u1965
  8499  1438  0824               	movf	___awmod@divisor,w
  8500  1439  0226               	subwf	___awmod@dividend,w
  8501  143A                     u1965:	
  8502  143A  1C03               	skipc
  8503  143B  2C42               	goto	l2867
  8504  143C  0824               	movf	___awmod@divisor,w
  8505  143D  02A6               	subwf	___awmod@dividend,f
  8506  143E  0825               	movf	___awmod@divisor+1,w
  8507  143F  1C03               	skipc
  8508  1440  03A7               	decf	___awmod@dividend+1,f
  8509  1441  02A7               	subwf	___awmod@dividend+1,f
  8510  1442                     l2867:	
  8511  1442  3001               	movlw	1
  8512  1443                     u1975:	
  8513  1443  1003               	clrc
  8514  1444  0CA5               	rrf	___awmod@divisor+1,f
  8515  1445  0CA4               	rrf	___awmod@divisor,f
  8516  1446  3EFF               	addlw	-1
  8517  1447  1D03               	skipz
  8518  1448  2C43               	goto	u1975
  8519  1449  3001               	movlw	1
  8520  144A  02A9               	subwf	___awmod@counter,f
  8521  144B  1D03               	btfss	3,2
  8522  144C  2C34               	goto	l2863
  8523  144D                     l2871:	
  8524  144D  082A               	movf	___awmod@sign,w
  8525  144E  1903               	btfsc	3,2
  8526  144F  2C55               	goto	l2875
  8527  1450  09A6               	comf	___awmod@dividend,f
  8528  1451  09A7               	comf	___awmod@dividend+1,f
  8529  1452  0AA6               	incf	___awmod@dividend,f
  8530  1453  1903               	skipnz
  8531  1454  0AA7               	incf	___awmod@dividend+1,f
  8532  1455                     l2875:	
  8533  1455  0827               	movf	___awmod@dividend+1,w
  8534  1456  00A5               	movwf	?___awmod+1
  8535  1457  0826               	movf	___awmod@dividend,w
  8536  1458  00A4               	movwf	?___awmod
  8537  1459  0008               	return
  8538  145A                     __end_of___awmod:	
  8539                           
  8540                           	psect	text38
  8541  10A0                     __ptext38:	
  8542 ;; *************** function _errorRxEUSART *****************
  8543 ;; Defined at:
  8544 ;;		line 72 in file "eusart.c"
  8545 ;; Parameters:    Size  Location     Type
  8546 ;;		None
  8547 ;; Auto vars:     Size  Location     Type
  8548 ;;		None
  8549 ;; Return value:  Size  Location     Type
  8550 ;;                  1    wreg      unsigned char 
  8551 ;; Registers used:
  8552 ;;		wreg
  8553 ;; Tracked objects:
  8554 ;;		On entry : 0/0
  8555 ;;		On exit  : 0/0
  8556 ;;		Unchanged: 0/0
  8557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8558 ;;      Params:         0       0       0       0       0
  8559 ;;      Locals:         0       0       0       0       0
  8560 ;;      Temps:          0       0       0       0       0
  8561 ;;      Totals:         0       0       0       0       0
  8562 ;;Total ram usage:        0 bytes
  8563 ;; Hardware stack levels used:    1
  8564 ;; Hardware stack levels required when called:    4
  8565 ;; This function calls:
  8566 ;;		Nothing
  8567 ;; This function is called by:
  8568 ;;		_main
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           
  8573                           ;psect for function _errorRxEUSART
  8574  10A0                     _errorRxEUSART:	
  8575                           
  8576                           ;eusart.c: 74: if( RCSTAbits.FERR )
  8577                           
  8578                           ;incstack = 0
  8579                           ; Regs used in _errorRxEUSART: [wreg]
  8580  10A0  1283               	bcf	3,5	;RP0=0, select bank0
  8581  10A1  1303               	bcf	3,6	;RP1=0, select bank0
  8582  10A2  1D18               	btfss	24,2	;volatile
  8583  10A3  28A6               	goto	l541
  8584                           
  8585                           ;eusart.c: 75: return( 1 );
  8586  10A4  3001               	movlw	1
  8587  10A5  0008               	return
  8588  10A6                     l541:	
  8589                           
  8590                           ;eusart.c: 76: else if( RCSTAbits.OERR )
  8591  10A6  1C98               	btfss	24,1	;volatile
  8592  10A7  28AA               	goto	l3321
  8593                           
  8594                           ;eusart.c: 77: return( 2 );
  8595  10A8  3002               	movlw	2
  8596  10A9  0008               	return
  8597  10AA                     l3321:	
  8598                           
  8599                           ;eusart.c: 78: else
  8600                           ;eusart.c: 79: return( 0 );
  8601  10AA  3000               	movlw	0
  8602  10AB  0008               	return
  8603  10AC                     __end_of_errorRxEUSART:	
  8604                           
  8605                           	psect	text39
  8606  0E2D                     __ptext39:	
  8607 ;; *************** function _easterEgg *****************
  8608 ;; Defined at:
  8609 ;;		line 179 in file "auxiliar.c"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;		None
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;		None
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      void 
  8616 ;; Registers used:
  8617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8623 ;;      Params:         0       0       0       0       0
  8624 ;;      Locals:         0       0       0       0       0
  8625 ;;      Temps:          0       3       0       0       0
  8626 ;;      Totals:         0       3       0       0       0
  8627 ;;Total ram usage:        3 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    7
  8630 ;; This function calls:
  8631 ;;		_bordaSubidaB2
  8632 ;;		_bordaSubidaB3
  8633 ;;		_cmdLCD
  8634 ;;		_writeLCD
  8635 ;; This function is called by:
  8636 ;;		_main
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           
  8641                           ;psect for function _easterEgg
  8642  0E2D                     _easterEgg:	
  8643                           
  8644                           ;auxiliar.c: 182: cmdLCD(0x01);
  8645                           
  8646                           ;incstack = 0
  8647                           ; Regs used in _easterEgg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8648  0E2D  3001               	movlw	1
  8649  0E2E  160A  118A  2504  120A  158A  	fcall	_cmdLCD
  8650                           
  8651                           ;auxiliar.c: 184: writeLCD(0,0,"WALLACE PIRES   ");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8652  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  8653  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  8654  0E35  01AC               	clrf	writeLCD@y
  8655  0E36  3066               	movlw	low (STR_66| (0+32768))
  8656  0E37  00AD               	movwf	writeLCD@ptr
  8657  0E38  3088               	movlw	high (STR_66| (0+32768))
  8658  0E39  00AE               	movwf	writeLCD@ptr+1
  8659  0E3A  3000               	movlw	0
  8660  0E3B  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8661  0E40  301A               	movlw	26
  8662  0E41  1283               	bcf	3,5	;RP0=0, select bank0
  8663  0E42  1303               	bcf	3,6	;RP1=0, select bank0
  8664  0E43  00B3               	movwf	??_easterEgg+2
  8665  0E44  305E               	movlw	94
  8666  0E45  00B2               	movwf	??_easterEgg+1
  8667  0E46  306D               	movlw	109
  8668  0E47  00B1               	movwf	??_easterEgg
  8669  0E48                     u3177:	
  8670  0E48  0BB1               	decfsz	??_easterEgg,f
  8671  0E49  2E48               	goto	u3177
  8672  0E4A  0BB2               	decfsz	??_easterEgg+1,f
  8673  0E4B  2E48               	goto	u3177
  8674  0E4C  0BB3               	decfsz	??_easterEgg+2,f
  8675  0E4D  2E48               	goto	u3177
  8676  0E4E  2E4F               	nop2
  8677                           
  8678                           ;auxiliar.c: 185: writeLCD(0,1,"MATEUS PINHEIRO ");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8679  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  8680  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  8681  0E51  01AC               	clrf	writeLCD@y
  8682  0E52  0AAC               	incf	writeLCD@y,f
  8683  0E53  30AA               	movlw	low (STR_67| (0+32768))
  8684  0E54  00AD               	movwf	writeLCD@ptr
  8685  0E55  3088               	movlw	high (STR_67| (0+32768))
  8686  0E56  00AE               	movwf	writeLCD@ptr+1
  8687  0E57  3000               	movlw	0
  8688  0E58  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8689  0E5D  301A               	movlw	26
  8690  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  8691  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
  8692  0E60  00B3               	movwf	??_easterEgg+2
  8693  0E61  305E               	movlw	94
  8694  0E62  00B2               	movwf	??_easterEgg+1
  8695  0E63  306D               	movlw	109
  8696  0E64  00B1               	movwf	??_easterEgg
  8697  0E65                     u3187:	
  8698  0E65  0BB1               	decfsz	??_easterEgg,f
  8699  0E66  2E65               	goto	u3187
  8700  0E67  0BB2               	decfsz	??_easterEgg+1,f
  8701  0E68  2E65               	goto	u3187
  8702  0E69  0BB3               	decfsz	??_easterEgg+2,f
  8703  0E6A  2E65               	goto	u3187
  8704  0E6B  2E6C               	nop2
  8705                           
  8706                           ;auxiliar.c: 186: writeLCD(0,0,"                ");
  8707  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  8708  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  8709  0E6E  01AC               	clrf	writeLCD@y
  8710  0E6F  3000               	movlw	low (STR_68| (0+32768))
  8711  0E70  00AD               	movwf	writeLCD@ptr
  8712  0E71  3088               	movlw	high (STR_68| (0+32768))
  8713  0E72  00AE               	movwf	writeLCD@ptr+1
  8714  0E73  3000               	movlw	0
  8715  0E74  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8716                           
  8717                           ;auxiliar.c: 187: writeLCD(0,0,"GUI. RIBEIRO    ");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8718  0E79  1283               	bcf	3,5	;RP0=0, select bank0
  8719  0E7A  1303               	bcf	3,6	;RP1=0, select bank0
  8720  0E7B  01AC               	clrf	writeLCD@y
  8721  0E7C  3033               	movlw	low (STR_69| (0+32768))
  8722  0E7D  00AD               	movwf	writeLCD@ptr
  8723  0E7E  3088               	movlw	high (STR_69| (0+32768))
  8724  0E7F  00AE               	movwf	writeLCD@ptr+1
  8725  0E80  3000               	movlw	0
  8726  0E81  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8727  0E86  301A               	movlw	26
  8728  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  8729  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  8730  0E89  00B3               	movwf	??_easterEgg+2
  8731  0E8A  305E               	movlw	94
  8732  0E8B  00B2               	movwf	??_easterEgg+1
  8733  0E8C  306D               	movlw	109
  8734  0E8D  00B1               	movwf	??_easterEgg
  8735  0E8E                     u3197:	
  8736  0E8E  0BB1               	decfsz	??_easterEgg,f
  8737  0E8F  2E8E               	goto	u3197
  8738  0E90  0BB2               	decfsz	??_easterEgg+1,f
  8739  0E91  2E8E               	goto	u3197
  8740  0E92  0BB3               	decfsz	??_easterEgg+2,f
  8741  0E93  2E8E               	goto	u3197
  8742  0E94  2E95               	nop2
  8743                           
  8744                           ;auxiliar.c: 188: writeLCD(0,1,"                ");
  8745  0E95  1283               	bcf	3,5	;RP0=0, select bank0
  8746  0E96  1303               	bcf	3,6	;RP1=0, select bank0
  8747  0E97  01AC               	clrf	writeLCD@y
  8748  0E98  0AAC               	incf	writeLCD@y,f
  8749  0E99  3000               	movlw	low (STR_68| (0+32768))
  8750  0E9A  00AD               	movwf	writeLCD@ptr
  8751  0E9B  3088               	movlw	high (STR_68| (0+32768))
  8752  0E9C  00AE               	movwf	writeLCD@ptr+1
  8753  0E9D  3000               	movlw	0
  8754  0E9E  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8755                           
  8756                           ;auxiliar.c: 189: writeLCD(0,1,"GABRIEL GENU     ");_delay((unsigned long)((1000)*(20000
      +                          000/4000.0)));
  8757  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  8758  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  8759  0EA5  01AC               	clrf	writeLCD@y
  8760  0EA6  0AAC               	incf	writeLCD@y,f
  8761  0EA7  3011               	movlw	low (STR_71| (0+32768))
  8762  0EA8  00AD               	movwf	writeLCD@ptr
  8763  0EA9  3087               	movlw	high (STR_71| (0+32768))
  8764  0EAA  00AE               	movwf	writeLCD@ptr+1
  8765  0EAB  3000               	movlw	0
  8766  0EAC  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8767  0EB1  301A               	movlw	26
  8768  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  8769  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  8770  0EB4  00B3               	movwf	??_easterEgg+2
  8771  0EB5  305E               	movlw	94
  8772  0EB6  00B2               	movwf	??_easterEgg+1
  8773  0EB7  306D               	movlw	109
  8774  0EB8  00B1               	movwf	??_easterEgg
  8775  0EB9                     u3207:	
  8776  0EB9  0BB1               	decfsz	??_easterEgg,f
  8777  0EBA  2EB9               	goto	u3207
  8778  0EBB  0BB2               	decfsz	??_easterEgg+1,f
  8779  0EBC  2EB9               	goto	u3207
  8780  0EBD  0BB3               	decfsz	??_easterEgg+2,f
  8781  0EBE  2EB9               	goto	u3207
  8782  0EBF  2EC0               	nop2
  8783                           
  8784                           ;auxiliar.c: 190: writeLCD(0,0,"                ");
  8785  0EC0  1283               	bcf	3,5	;RP0=0, select bank0
  8786  0EC1  1303               	bcf	3,6	;RP1=0, select bank0
  8787  0EC2  01AC               	clrf	writeLCD@y
  8788  0EC3  3000               	movlw	low (STR_68| (0+32768))
  8789  0EC4  00AD               	movwf	writeLCD@ptr
  8790  0EC5  3088               	movlw	high (STR_68| (0+32768))
  8791  0EC6  00AE               	movwf	writeLCD@ptr+1
  8792  0EC7  3000               	movlw	0
  8793  0EC8  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8794                           
  8795                           ;auxiliar.c: 191: writeLCD(0,0,"LINCON NOVAIS   ");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8796  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  8797  0ECE  1303               	bcf	3,6	;RP1=0, select bank0
  8798  0ECF  01AC               	clrf	writeLCD@y
  8799  0ED0  3077               	movlw	low (STR_73| (0+32768))
  8800  0ED1  00AD               	movwf	writeLCD@ptr
  8801  0ED2  3088               	movlw	high (STR_73| (0+32768))
  8802  0ED3  00AE               	movwf	writeLCD@ptr+1
  8803  0ED4  3000               	movlw	0
  8804  0ED5  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8805  0EDA  301A               	movlw	26
  8806  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  8807  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  8808  0EDD  00B3               	movwf	??_easterEgg+2
  8809  0EDE  305E               	movlw	94
  8810  0EDF  00B2               	movwf	??_easterEgg+1
  8811  0EE0  306D               	movlw	109
  8812  0EE1  00B1               	movwf	??_easterEgg
  8813  0EE2                     u3217:	
  8814  0EE2  0BB1               	decfsz	??_easterEgg,f
  8815  0EE3  2EE2               	goto	u3217
  8816  0EE4  0BB2               	decfsz	??_easterEgg+1,f
  8817  0EE5  2EE2               	goto	u3217
  8818  0EE6  0BB3               	decfsz	??_easterEgg+2,f
  8819  0EE7  2EE2               	goto	u3217
  8820  0EE8  2EE9               	nop2
  8821                           
  8822                           ;auxiliar.c: 192: writeLCD(0,1,"                ");_delay((unsigned long)((300)*(2000000
      +                          0/4000.0)));
  8823  0EE9  1283               	bcf	3,5	;RP0=0, select bank0
  8824  0EEA  1303               	bcf	3,6	;RP1=0, select bank0
  8825  0EEB  01AC               	clrf	writeLCD@y
  8826  0EEC  0AAC               	incf	writeLCD@y,f
  8827  0EED  3000               	movlw	low (STR_68| (0+32768))
  8828  0EEE  00AD               	movwf	writeLCD@ptr
  8829  0EEF  3088               	movlw	high (STR_68| (0+32768))
  8830  0EF0  00AE               	movwf	writeLCD@ptr+1
  8831  0EF1  3000               	movlw	0
  8832  0EF2  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8833  0EF7  3008               	movlw	8
  8834  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  8835  0EF9  1303               	bcf	3,6	;RP1=0, select bank0
  8836  0EFA  00B3               	movwf	??_easterEgg+2
  8837  0EFB  309D               	movlw	157
  8838  0EFC  00B2               	movwf	??_easterEgg+1
  8839  0EFD  3005               	movlw	5
  8840  0EFE  00B1               	movwf	??_easterEgg
  8841  0EFF                     u3227:	
  8842  0EFF  0BB1               	decfsz	??_easterEgg,f
  8843  0F00  2EFF               	goto	u3227
  8844  0F01  0BB2               	decfsz	??_easterEgg+1,f
  8845  0F02  2EFF               	goto	u3227
  8846  0F03  0BB3               	decfsz	??_easterEgg+2,f
  8847  0F04  2EFF               	goto	u3227
  8848                           
  8849                           ;auxiliar.c: 194: cmdLCD(0x01);_delay((unsigned long)((200)*(20000000/4000.0)));
  8850  0F05  3001               	movlw	1
  8851  0F06  160A  118A  2504  120A  158A  	fcall	_cmdLCD
  8852  0F0B  3006               	movlw	6
  8853  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  8854  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  8855  0F0E  00B3               	movwf	??_easterEgg+2
  8856  0F0F  3013               	movlw	19
  8857  0F10  00B2               	movwf	??_easterEgg+1
  8858  0F11  30AD               	movlw	173
  8859  0F12  00B1               	movwf	??_easterEgg
  8860  0F13                     u3237:	
  8861  0F13  0BB1               	decfsz	??_easterEgg,f
  8862  0F14  2F13               	goto	u3237
  8863  0F15  0BB2               	decfsz	??_easterEgg+1,f
  8864  0F16  2F13               	goto	u3237
  8865  0F17  0BB3               	decfsz	??_easterEgg+2,f
  8866  0F18  2F13               	goto	u3237
  8867                           
  8868                           ;auxiliar.c: 195: writeLCD(0,0,"      ARRI      ");_delay((unsigned long)((500)*(2000000
      +                          0/4000.0)));
  8869  0F19  1283               	bcf	3,5	;RP0=0, select bank0
  8870  0F1A  1303               	bcf	3,6	;RP1=0, select bank0
  8871  0F1B  01AC               	clrf	writeLCD@y
  8872  0F1C  3011               	movlw	low (STR_75| (0+32768))
  8873  0F1D  00AD               	movwf	writeLCD@ptr
  8874  0F1E  3088               	movlw	high (STR_75| (0+32768))
  8875  0F1F  00AE               	movwf	writeLCD@ptr+1
  8876  0F20  3000               	movlw	0
  8877  0F21  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8878  0F26  300D               	movlw	13
  8879  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  8880  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  8881  0F29  00B3               	movwf	??_easterEgg+2
  8882  0F2A  30AF               	movlw	175
  8883  0F2B  00B2               	movwf	??_easterEgg+1
  8884  0F2C  30B5               	movlw	181
  8885  0F2D  00B1               	movwf	??_easterEgg
  8886  0F2E                     u3247:	
  8887  0F2E  0BB1               	decfsz	??_easterEgg,f
  8888  0F2F  2F2E               	goto	u3247
  8889  0F30  0BB2               	decfsz	??_easterEgg+1,f
  8890  0F31  2F2E               	goto	u3247
  8891  0F32  0BB3               	decfsz	??_easterEgg+2,f
  8892  0F33  2F2E               	goto	u3247
  8893  0F34  2F35               	nop2
  8894                           
  8895                           ;auxiliar.c: 196: writeLCD(0,1,"     EGUAAA     ");_delay((unsigned long)((2500)*(200000
      +                          00/4000.0)));
  8896  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  8897  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  8898  0F37  01AC               	clrf	writeLCD@y
  8899  0F38  0AAC               	incf	writeLCD@y,f
  8900  0F39  3022               	movlw	low (STR_76| (0+32768))
  8901  0F3A  00AD               	movwf	writeLCD@ptr
  8902  0F3B  3088               	movlw	high (STR_76| (0+32768))
  8903  0F3C  00AE               	movwf	writeLCD@ptr+1
  8904  0F3D  3000               	movlw	0
  8905  0F3E  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8906  0F43  3040               	movlw	64
  8907  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  8908  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  8909  0F46  00B3               	movwf	??_easterEgg+2
  8910  0F47  306A               	movlw	106
  8911  0F48  00B2               	movwf	??_easterEgg+1
  8912  0F49  3097               	movlw	151
  8913  0F4A  00B1               	movwf	??_easterEgg
  8914  0F4B                     u3257:	
  8915  0F4B  0BB1               	decfsz	??_easterEgg,f
  8916  0F4C  2F4B               	goto	u3257
  8917  0F4D  0BB2               	decfsz	??_easterEgg+1,f
  8918  0F4E  2F4B               	goto	u3257
  8919  0F4F  0BB3               	decfsz	??_easterEgg+2,f
  8920  0F50  2F4B               	goto	u3257
  8921                           
  8922                           ;auxiliar.c: 197: cmdLCD(0x01);_delay((unsigned long)((200)*(20000000/4000.0)));
  8923  0F51  3001               	movlw	1
  8924  0F52  160A  118A  2504  120A  158A  	fcall	_cmdLCD
  8925  0F57  3006               	movlw	6
  8926  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  8927  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  8928  0F5A  00B3               	movwf	??_easterEgg+2
  8929  0F5B  3013               	movlw	19
  8930  0F5C  00B2               	movwf	??_easterEgg+1
  8931  0F5D  30AD               	movlw	173
  8932  0F5E  00B1               	movwf	??_easterEgg
  8933  0F5F                     u3267:	
  8934  0F5F  0BB1               	decfsz	??_easterEgg,f
  8935  0F60  2F5F               	goto	u3267
  8936  0F61  0BB2               	decfsz	??_easterEgg+1,f
  8937  0F62  2F5F               	goto	u3267
  8938  0F63  0BB3               	decfsz	??_easterEgg+2,f
  8939  0F64  2F5F               	goto	u3267
  8940                           
  8941                           ;auxiliar.c: 198: writeLCD(0,0,"XD *-*ARRI*-* XD");
  8942  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  8943  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  8944  0F67  01AC               	clrf	writeLCD@y
  8945  0F68  3010               	movlw	low (STR_77| (0+32768))
  8946  0F69  00AD               	movwf	writeLCD@ptr
  8947  0F6A  3089               	movlw	high (STR_77| (0+32768))
  8948  0F6B  00AE               	movwf	writeLCD@ptr+1
  8949  0F6C  3000               	movlw	0
  8950  0F6D  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8951                           
  8952                           ;auxiliar.c: 199: writeLCD(0,1,"!*-* EGUAAA *-*!");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  8953  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  8954  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  8955  0F74  01AC               	clrf	writeLCD@y
  8956  0F75  0AAC               	incf	writeLCD@y,f
  8957  0F76  30CC               	movlw	low (STR_78| (0+32768))
  8958  0F77  00AD               	movwf	writeLCD@ptr
  8959  0F78  3088               	movlw	high (STR_78| (0+32768))
  8960  0F79  00AE               	movwf	writeLCD@ptr+1
  8961  0F7A  3000               	movlw	0
  8962  0F7B  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8963  0F80  301A               	movlw	26
  8964  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  8965  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  8966  0F83  00B3               	movwf	??_easterEgg+2
  8967  0F84  305E               	movlw	94
  8968  0F85  00B2               	movwf	??_easterEgg+1
  8969  0F86  306D               	movlw	109
  8970  0F87  00B1               	movwf	??_easterEgg
  8971  0F88                     u3277:	
  8972  0F88  0BB1               	decfsz	??_easterEgg,f
  8973  0F89  2F88               	goto	u3277
  8974  0F8A  0BB2               	decfsz	??_easterEgg+1,f
  8975  0F8B  2F88               	goto	u3277
  8976  0F8C  0BB3               	decfsz	??_easterEgg+2,f
  8977  0F8D  2F88               	goto	u3277
  8978  0F8E  2F8F               	nop2
  8979                           
  8980                           ;auxiliar.c: 200: writeLCD(0,0,"50    ARRI    13");
  8981  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  8982  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  8983  0F91  01AC               	clrf	writeLCD@y
  8984  0F92  30EE               	movlw	low (STR_79| (0+32768))
  8985  0F93  00AD               	movwf	writeLCD@ptr
  8986  0F94  3088               	movlw	high (STR_79| (0+32768))
  8987  0F95  00AE               	movwf	writeLCD@ptr+1
  8988  0F96  3000               	movlw	0
  8989  0F97  160A  118A  2390  120A  158A  	fcall	_writeLCD
  8990                           
  8991                           ;auxiliar.c: 201: writeLCD(0,1,"13   EGUAAA   50");_delay((unsigned long)((700)*(2000000
      +                          0/4000.0)));
  8992  0F9C  1283               	bcf	3,5	;RP0=0, select bank0
  8993  0F9D  1303               	bcf	3,6	;RP1=0, select bank0
  8994  0F9E  01AC               	clrf	writeLCD@y
  8995  0F9F  0AAC               	incf	writeLCD@y,f
  8996  0FA0  30DD               	movlw	low (STR_80| (0+32768))
  8997  0FA1  00AD               	movwf	writeLCD@ptr
  8998  0FA2  3088               	movlw	high (STR_80| (0+32768))
  8999  0FA3  00AE               	movwf	writeLCD@ptr+1
  9000  0FA4  3000               	movlw	0
  9001  0FA5  160A  118A  2390  120A  158A  	fcall	_writeLCD
  9002  0FAA  3012               	movlw	18
  9003  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  9004  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  9005  0FAD  00B3               	movwf	??_easterEgg+2
  9006  0FAE  30C2               	movlw	194
  9007  0FAF  00B2               	movwf	??_easterEgg+1
  9008  0FB0  3065               	movlw	101
  9009  0FB1  00B1               	movwf	??_easterEgg
  9010  0FB2                     u3287:	
  9011  0FB2  0BB1               	decfsz	??_easterEgg,f
  9012  0FB3  2FB2               	goto	u3287
  9013  0FB4  0BB2               	decfsz	??_easterEgg+1,f
  9014  0FB5  2FB2               	goto	u3287
  9015  0FB6  0BB3               	decfsz	??_easterEgg+2,f
  9016  0FB7  2FB2               	goto	u3287
  9017  0FB8  2FB9               	nop2
  9018                           
  9019                           ;auxiliar.c: 202: writeLCD(0,0,":3 *-*ARRI*-* XD");
  9020  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  9021  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  9022  0FBB  01AC               	clrf	writeLCD@y
  9023  0FBC  30FF               	movlw	low (STR_81| (0+32768))
  9024  0FBD  00AD               	movwf	writeLCD@ptr
  9025  0FBE  3088               	movlw	high (STR_81| (0+32768))
  9026  0FBF  00AE               	movwf	writeLCD@ptr+1
  9027  0FC0  3000               	movlw	0
  9028  0FC1  160A  118A  2390  120A  158A  	fcall	_writeLCD
  9029                           
  9030                           ;auxiliar.c: 203: writeLCD(0,1,"!*-* EGUAAA *-*!");_delay((unsigned long)((1000)*(200000
      +                          00/4000.0)));
  9031  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  9032  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  9033  0FC8  01AC               	clrf	writeLCD@y
  9034  0FC9  0AAC               	incf	writeLCD@y,f
  9035  0FCA  30CC               	movlw	low (STR_78| (0+32768))
  9036  0FCB  00AD               	movwf	writeLCD@ptr
  9037  0FCC  3088               	movlw	high (STR_78| (0+32768))
  9038  0FCD  00AE               	movwf	writeLCD@ptr+1
  9039  0FCE  3000               	movlw	0
  9040  0FCF  160A  118A  2390  120A  158A  	fcall	_writeLCD
  9041  0FD4  301A               	movlw	26
  9042  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  9043  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  9044  0FD7  00B3               	movwf	??_easterEgg+2
  9045  0FD8  305E               	movlw	94
  9046  0FD9  00B2               	movwf	??_easterEgg+1
  9047  0FDA  306D               	movlw	109
  9048  0FDB  00B1               	movwf	??_easterEgg
  9049  0FDC                     u3297:	
  9050  0FDC  0BB1               	decfsz	??_easterEgg,f
  9051  0FDD  2FDC               	goto	u3297
  9052  0FDE  0BB2               	decfsz	??_easterEgg+1,f
  9053  0FDF  2FDC               	goto	u3297
  9054  0FE0  0BB3               	decfsz	??_easterEgg+2,f
  9055  0FE1  2FDC               	goto	u3297
  9056  0FE2  2FE3               	nop2
  9057                           
  9058                           ;auxiliar.c: 204: cmdLCD(0x01);_delay((unsigned long)((200)*(20000000/4000.0)));
  9059  0FE3  3001               	movlw	1
  9060  0FE4  160A  118A  2504  120A  158A  	fcall	_cmdLCD
  9061  0FE9  3006               	movlw	6
  9062  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  9063  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  9064  0FEC  00B3               	movwf	??_easterEgg+2
  9065  0FED  3013               	movlw	19
  9066  0FEE  00B2               	movwf	??_easterEgg+1
  9067  0FEF  30AD               	movlw	173
  9068  0FF0  00B1               	movwf	??_easterEgg
  9069  0FF1                     u3307:	
  9070  0FF1  0BB1               	decfsz	??_easterEgg,f
  9071  0FF2  2FF1               	goto	u3307
  9072  0FF3  0BB2               	decfsz	??_easterEgg+1,f
  9073  0FF4  2FF1               	goto	u3307
  9074  0FF5  0BB3               	decfsz	??_easterEgg+2,f
  9075  0FF6  2FF1               	goto	u3307
  9076                           
  9077                           ;auxiliar.c: 206: bordaSubidaB2();
  9078  0FF7  160A  118A  2139  120A  158A  	fcall	_bordaSubidaB2
  9079                           
  9080                           ;auxiliar.c: 207: bordaSubidaB3();
  9081  0FFC  160A  118A  2153   	fcall	_bordaSubidaB3
  9082  0FFF  0008               	return
  9083  1000                     __end_of_easterEgg:	
  9084                           
  9085                           	psect	text40
  9086  1390                     __ptext40:	
  9087 ;; *************** function _writeLCD *****************
  9088 ;; Defined at:
  9089 ;;		line 64 in file "lcd.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;  x               1    wreg     unsigned char 
  9092 ;;  y               1   12[BANK0 ] unsigned char 
  9093 ;;  ptr             2   13[BANK0 ] PTR const unsigned char 
  9094 ;;		 -> STR_132(11), STR_131(11), STR_130(11), STR_129(11), 
  9095 ;;		 -> STR_128(11), STR_127(11), STR_126(11), STR_125(11), 
  9096 ;;		 -> STR_124(17), STR_123(17), STR_122(17), STR_121(17), 
  9097 ;;		 -> STR_120(17), STR_119(17), STR_118(14), STR_117(14), 
  9098 ;;		 -> STR_116(17), STR_115(17), STR_114(17), STR_113(17), 
  9099 ;;		 -> STR_112(9), STR_111(11), STR_110(13), STR_109(11), 
  9100 ;;		 -> STR_108(17), STR_107(17), STR_82(17), STR_81(17), 
  9101 ;;		 -> STR_80(17), STR_79(17), STR_78(17), STR_77(17), 
  9102 ;;		 -> STR_76(17), STR_75(17), STR_74(17), STR_73(17), 
  9103 ;;		 -> STR_72(17), STR_71(18), STR_70(17), STR_69(17), 
  9104 ;;		 -> STR_68(17), STR_67(17), STR_66(17), STR_65(4), 
  9105 ;;		 -> STR_64(4), STR_63(4), STR_62(4), STR_61(4), 
  9106 ;;		 -> STR_60(4), STR_59(4), STR_58(4), STR_57(4), 
  9107 ;;		 -> STR_56(4), STR_55(4), STR_54(8), STR_53(1), 
  9108 ;;		 -> STR_52(4), STR_51(7), STR_50(4), STR_49(4), 
  9109 ;;		 -> STR_48(8), STR_47(8), STR_46(8), STR_45(4), 
  9110 ;;		 -> STR_44(2), STR_43(2), STR_42(2), STR_41(2), 
  9111 ;;		 -> STR_40(2), STR_39(2), STR_38(2), STR_37(2), 
  9112 ;;		 -> STR_36(2), STR_35(2), STR_34(2), STR_33(2), 
  9113 ;;		 -> STR_32(2), STR_31(2), STR_30(2), STR_29(2), 
  9114 ;;		 -> STR_28(2), STR_27(2), STR_26(2), STR_25(2), 
  9115 ;;		 -> STR_24(2), STR_23(2), STR_22(2), STR_21(2), 
  9116 ;;		 -> STR_20(2), STR_19(2), STR_18(2), STR_17(2), 
  9117 ;;		 -> STR_16(2), STR_15(2), STR_14(2), STR_13(2), 
  9118 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  9119 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(2), 
  9120 ;;		 -> STR_4(2), STR_3(2), STR_2(2), STR_1(17), 
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  x               1   16[BANK0 ] unsigned char 
  9123 ;; Return value:  Size  Location     Type
  9124 ;;                  1    wreg      void 
  9125 ;; Registers used:
  9126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9132 ;;      Params:         0       3       0       0       0
  9133 ;;      Locals:         0       1       0       0       0
  9134 ;;      Temps:          0       1       0       0       0
  9135 ;;      Totals:         0       5       0       0       0
  9136 ;;Total ram usage:        5 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    6
  9139 ;; This function calls:
  9140 ;;		_gotoxy
  9141 ;;		_putLCD
  9142 ;; This function is called by:
  9143 ;;		_logo
  9144 ;;		_textConfig
  9145 ;;		_textCMpar
  9146 ;;		_textCMdat
  9147 ;;		_textSelection1
  9148 ;;		_textSelection2
  9149 ;;		_textSelection3
  9150 ;;		_textSelection4
  9151 ;;		_textSelection5
  9152 ;;		_textSelection6
  9153 ;;		_textSelection7
  9154 ;;		_textSelection8
  9155 ;;		_textSelectionEST
  9156 ;;		_textSelectionCLP
  9157 ;;		_textLoading
  9158 ;;		_easterEgg
  9159 ;;		_main
  9160 ;;		_textSelectionPAR
  9161 ;;		_textSelectionDES
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           
  9166                           ;psect for function _writeLCD
  9167  1390                     _writeLCD:	
  9168                           
  9169                           ;incstack = 0
  9170                           ; Regs used in _writeLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9171                           ;writeLCD@x stored from wreg
  9172  1390  1283               	bcf	3,5	;RP0=0, select bank0
  9173  1391  1303               	bcf	3,6	;RP1=0, select bank0
  9174  1392  00B0               	movwf	writeLCD@x
  9175                           
  9176                           ;lcd.c: 66: gotoxy(x,y);
  9177  1393  082C               	movf	writeLCD@y,w
  9178  1394  00AF               	movwf	??_writeLCD
  9179  1395  082F               	movf	??_writeLCD,w
  9180  1396  00A8               	movwf	gotoxy@y
  9181  1397  0830               	movf	writeLCD@x,w
  9182  1398  160A  118A  20D5  160A  118A  	fcall	_gotoxy
  9183  139D                     l2707:	
  9184                           ;lcd.c: 67: while( *ptr )
  9185                           
  9186  139D  1283               	bcf	3,5	;RP0=0, select bank0
  9187  139E  1303               	bcf	3,6	;RP1=0, select bank0
  9188  139F  082E               	movf	writeLCD@ptr+1,w
  9189  13A0  00FF               	movwf	127
  9190  13A1  082D               	movf	writeLCD@ptr,w
  9191  13A2  0084               	movwf	4
  9192  13A3  160A  118A  2000  160A  118A  	fcall	stringtab
  9193  13A8  3A00               	xorlw	0
  9194  13A9  1903               	btfsc	3,2
  9195  13AA  0008               	return
  9196                           
  9197                           ;lcd.c: 68: putLCD(*ptr++);
  9198  13AB  1283               	bcf	3,5	;RP0=0, select bank0
  9199  13AC  1303               	bcf	3,6	;RP1=0, select bank0
  9200  13AD  082E               	movf	writeLCD@ptr+1,w
  9201  13AE  00FF               	movwf	127
  9202  13AF  082D               	movf	writeLCD@ptr,w
  9203  13B0  0084               	movwf	4
  9204  13B1  160A  118A  2000  160A  118A  	fcall	stringtab
  9205  13B6  160A  118A  2360  160A  118A  	fcall	_putLCD
  9206  13BB  3001               	movlw	1
  9207  13BC  1283               	bcf	3,5	;RP0=0, select bank0
  9208  13BD  1303               	bcf	3,6	;RP1=0, select bank0
  9209  13BE  07AD               	addwf	writeLCD@ptr,f
  9210  13BF  1803               	skipnc
  9211  13C0  0AAE               	incf	writeLCD@ptr+1,f
  9212  13C1  2B9D               	goto	l2707
  9213  13C2                     __end_of_writeLCD:	
  9214                           
  9215                           	psect	text41
  9216  1360                     __ptext41:	
  9217 ;; *************** function _putLCD *****************
  9218 ;; Defined at:
  9219 ;;		line 39 in file "lcd.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;  c               1    wreg     unsigned char 
  9222 ;; Auto vars:     Size  Location     Type
  9223 ;;  c               1    5[BANK0 ] unsigned char 
  9224 ;;  nibble          1    6[BANK0 ] volatile struct .
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  1    wreg      void 
  9227 ;; Registers used:
  9228 ;;		wreg, status,2, status,0
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9234 ;;      Params:         0       0       0       0       0
  9235 ;;      Locals:         0       2       0       0       0
  9236 ;;      Temps:          0       1       0       0       0
  9237 ;;      Totals:         0       3       0       0       0
  9238 ;;Total ram usage:        3 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    4
  9241 ;; This function calls:
  9242 ;;		Nothing
  9243 ;; This function is called by:
  9244 ;;		_writeLCD
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           
  9249                           ;psect for function _putLCD
  9250  1360                     _putLCD:	
  9251                           
  9252                           ;incstack = 0
  9253                           ; Regs used in _putLCD: [wreg+status,2+status,0]
  9254                           ;putLCD@c stored from wreg
  9255  1360  1283               	bcf	3,5	;RP0=0, select bank0
  9256  1361  1303               	bcf	3,6	;RP1=0, select bank0
  9257  1362  00A5               	movwf	putLCD@c
  9258                           
  9259                           ;lcd.c: 41: volatile REGnibble_t nibble;
  9260                           ;lcd.c: 42: nibble.HILO = c;
  9261  1363  0825               	movf	putLCD@c,w
  9262  1364  00A4               	movwf	??_putLCD
  9263  1365  0824               	movf	??_putLCD,w
  9264  1366  00A6               	movwf	putLCD@nibble	;volatile
  9265                           
  9266                           ;lcd.c: 44: LCD.RS = 1;
  9267  1367  1608               	bsf	8,4	;volatile
  9268                           
  9269                           ;lcd.c: 45: LCD.BUS = nibble.HI;
  9270  1368  0E26               	swapf	putLCD@nibble,w	;volatile
  9271  1369  390F               	andlw	15
  9272  136A  00A4               	movwf	??_putLCD
  9273  136B  0808               	movf	8,w	;volatile
  9274  136C  0624               	xorwf	??_putLCD,w
  9275  136D  39F0               	andlw	-16
  9276  136E  0624               	xorwf	??_putLCD,w
  9277  136F  0088               	movwf	8	;volatile
  9278                           
  9279                           ;lcd.c: 46: LCD.EN = 0;
  9280  1370  1288               	bcf	8,5	;volatile
  9281                           
  9282                           ;lcd.c: 47: _delay((unsigned long)((40)*(20000000/4000000.0)));
  9283  1371  3041               	movlw	65
  9284  1372  1283               	bcf	3,5	;RP0=0, select bank0
  9285  1373  1303               	bcf	3,6	;RP1=0, select bank0
  9286  1374  00A4               	movwf	??_putLCD
  9287  1375                     u3317:	
  9288  1375  0BA4               	decfsz	??_putLCD,f
  9289  1376  2B75               	goto	u3317
  9290  1377  2B78               	nop2
  9291                           
  9292                           ;lcd.c: 48: LCD.EN = 1;
  9293  1378  1283               	bcf	3,5	;RP0=0, select bank0
  9294  1379  1303               	bcf	3,6	;RP1=0, select bank0
  9295  137A  1688               	bsf	8,5	;volatile
  9296                           
  9297                           ;lcd.c: 51: LCD.RS = 1;
  9298  137B  1608               	bsf	8,4	;volatile
  9299                           
  9300                           ;lcd.c: 52: LCD.BUS = nibble.LO;
  9301  137C  0826               	movf	putLCD@nibble,w	;volatile
  9302  137D  390F               	andlw	15
  9303  137E  00A4               	movwf	??_putLCD
  9304  137F  0808               	movf	8,w	;volatile
  9305  1380  0624               	xorwf	??_putLCD,w
  9306  1381  39F0               	andlw	-16
  9307  1382  0624               	xorwf	??_putLCD,w
  9308  1383  0088               	movwf	8	;volatile
  9309                           
  9310                           ;lcd.c: 53: LCD.EN = 0;
  9311  1384  1288               	bcf	8,5	;volatile
  9312                           
  9313                           ;lcd.c: 54: _delay((unsigned long)((40)*(20000000/4000000.0)));
  9314  1385  3041               	movlw	65
  9315  1386  1283               	bcf	3,5	;RP0=0, select bank0
  9316  1387  1303               	bcf	3,6	;RP1=0, select bank0
  9317  1388  00A4               	movwf	??_putLCD
  9318  1389                     u3327:	
  9319  1389  0BA4               	decfsz	??_putLCD,f
  9320  138A  2B89               	goto	u3327
  9321  138B  2B8C               	nop2
  9322                           
  9323                           ;lcd.c: 55: LCD.EN = 1;
  9324  138C  1283               	bcf	3,5	;RP0=0, select bank0
  9325  138D  1303               	bcf	3,6	;RP1=0, select bank0
  9326  138E  1688               	bsf	8,5	;volatile
  9327  138F  0008               	return
  9328  1390                     __end_of_putLCD:	
  9329                           
  9330                           	psect	text42
  9331  10D5                     __ptext42:	
  9332 ;; *************** function _gotoxy *****************
  9333 ;; Defined at:
  9334 ;;		line 59 in file "lcd.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;  x               1    wreg     unsigned char 
  9337 ;;  y               1    8[BANK0 ] unsigned char 
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;  x               1   11[BANK0 ] unsigned char 
  9340 ;; Return value:  Size  Location     Type
  9341 ;;                  1    wreg      void 
  9342 ;; Registers used:
  9343 ;;		wreg, status,2, status,0, pclath, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9349 ;;      Params:         0       1       0       0       0
  9350 ;;      Locals:         0       1       0       0       0
  9351 ;;      Temps:          0       2       0       0       0
  9352 ;;      Totals:         0       4       0       0       0
  9353 ;;Total ram usage:        4 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    5
  9356 ;; This function calls:
  9357 ;;		___bmul
  9358 ;;		_cmdLCD
  9359 ;; This function is called by:
  9360 ;;		_writeLCD
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           
  9365                           ;psect for function _gotoxy
  9366  10D5                     _gotoxy:	
  9367                           
  9368                           ;incstack = 0
  9369                           ; Regs used in _gotoxy: [wreg+status,2+status,0+pclath+cstack]
  9370                           ;gotoxy@x stored from wreg
  9371  10D5  1283               	bcf	3,5	;RP0=0, select bank0
  9372  10D6  1303               	bcf	3,6	;RP1=0, select bank0
  9373  10D7  00AB               	movwf	gotoxy@x
  9374                           
  9375                           ;lcd.c: 61: cmdLCD (( 0x80 | (0xC0 * y ) + ( x & 0x3f )));
  9376  10D8  303F               	movlw	63
  9377  10D9  052B               	andwf	gotoxy@x,w
  9378  10DA  00A9               	movwf	??_gotoxy
  9379  10DB  30C0               	movlw	192
  9380  10DC  00AA               	movwf	??_gotoxy+1
  9381  10DD  082A               	movf	??_gotoxy+1,w
  9382  10DE  00A4               	movwf	___bmul@multiplicand
  9383  10DF  0828               	movf	gotoxy@y,w
  9384  10E0  120A  158A  21F9  160A  118A  	fcall	___bmul
  9385  10E5  1283               	bcf	3,5	;RP0=0, select bank0
  9386  10E6  1303               	bcf	3,6	;RP1=0, select bank0
  9387  10E7  0729               	addwf	??_gotoxy,w
  9388  10E8  3880               	iorlw	128
  9389  10E9  160A  118A  2504   	fcall	_cmdLCD
  9390  10EC  0008               	return
  9391  10ED                     __end_of_gotoxy:	
  9392                           
  9393                           	psect	text43
  9394  1504                     __ptext43:	
  9395 ;; *************** function _cmdLCD *****************
  9396 ;; Defined at:
  9397 ;;		line 7 in file "lcd.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;  cmd             1    wreg     unsigned char 
  9400 ;; Auto vars:     Size  Location     Type
  9401 ;;  cmd             1    6[BANK0 ] unsigned char 
  9402 ;;  nibble          1    7[BANK0 ] volatile struct .
  9403 ;; Return value:  Size  Location     Type
  9404 ;;                  1    wreg      void 
  9405 ;; Registers used:
  9406 ;;		wreg, status,2, status,0
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9412 ;;      Params:         0       0       0       0       0
  9413 ;;      Locals:         0       2       0       0       0
  9414 ;;      Temps:          0       2       0       0       0
  9415 ;;      Totals:         0       4       0       0       0
  9416 ;;Total ram usage:        4 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    4
  9419 ;; This function calls:
  9420 ;;		Nothing
  9421 ;; This function is called by:
  9422 ;;		_logo
  9423 ;;		_textConfig
  9424 ;;		_textCMpar
  9425 ;;		_textCMdat
  9426 ;;		_easterEgg
  9427 ;;		_gotoxy
  9428 ;;		_initLCD
  9429 ;;		_main
  9430 ;; This function uses a non-reentrant model
  9431 ;;
  9432                           
  9433                           
  9434                           ;psect for function _cmdLCD
  9435  1504                     _cmdLCD:	
  9436                           
  9437                           ;incstack = 0
  9438                           ; Regs used in _cmdLCD: [wreg+status,2+status,0]
  9439                           ;cmdLCD@cmd stored from wreg
  9440  1504  1283               	bcf	3,5	;RP0=0, select bank0
  9441  1505  1303               	bcf	3,6	;RP1=0, select bank0
  9442  1506  00A6               	movwf	cmdLCD@cmd
  9443                           
  9444                           ;lcd.c: 9: volatile REGnibble_t nibble;
  9445                           ;lcd.c: 11: nibble.HILO = cmd;
  9446  1507  0826               	movf	cmdLCD@cmd,w
  9447  1508  00A4               	movwf	??_cmdLCD
  9448  1509  0824               	movf	??_cmdLCD,w
  9449  150A  00A7               	movwf	cmdLCD@nibble	;volatile
  9450                           
  9451                           ;lcd.c: 12: LCD.RS = 0;
  9452  150B  1208               	bcf	8,4	;volatile
  9453                           
  9454                           ;lcd.c: 13: LCD.BUS = nibble.HI;
  9455  150C  0E27               	swapf	cmdLCD@nibble,w	;volatile
  9456  150D  390F               	andlw	15
  9457  150E  00A4               	movwf	??_cmdLCD
  9458  150F  0808               	movf	8,w	;volatile
  9459  1510  0624               	xorwf	??_cmdLCD,w
  9460  1511  39F0               	andlw	-16
  9461  1512  0624               	xorwf	??_cmdLCD,w
  9462  1513  0088               	movwf	8	;volatile
  9463                           
  9464                           ;lcd.c: 14: LCD.EN = 0;
  9465  1514  1288               	bcf	8,5	;volatile
  9466                           
  9467                           ;lcd.c: 16: if ( cmd == 0x01 || cmd == 0x02 )
  9468  1515  0326               	decf	cmdLCD@cmd,w
  9469  1516  1903               	btfsc	3,2
  9470  1517  2D1C               	goto	l2517
  9471  1518  3002               	movlw	2
  9472  1519  0626               	xorwf	cmdLCD@cmd,w
  9473  151A  1D03               	btfss	3,2
  9474  151B  2D28               	goto	l2519
  9475  151C                     l2517:	
  9476                           
  9477                           ;lcd.c: 17: _delay((unsigned long)((5)*(20000000/4000.0)));
  9478  151C  3021               	movlw	33
  9479  151D  1283               	bcf	3,5	;RP0=0, select bank0
  9480  151E  1303               	bcf	3,6	;RP1=0, select bank0
  9481  151F  00A5               	movwf	??_cmdLCD+1
  9482  1520  3075               	movlw	117
  9483  1521  00A4               	movwf	??_cmdLCD
  9484  1522                     u3337:	
  9485  1522  0BA4               	decfsz	??_cmdLCD,f
  9486  1523  2D22               	goto	u3337
  9487  1524  0BA5               	decfsz	??_cmdLCD+1,f
  9488  1525  2D22               	goto	u3337
  9489  1526  2D27               	nop2
  9490  1527  2D2F               	goto	l2521
  9491  1528                     l2519:	
  9492                           
  9493                           ;lcd.c: 18: else
  9494                           ;lcd.c: 19: _delay((unsigned long)((40)*(20000000/4000000.0)));
  9495  1528  3041               	movlw	65
  9496  1529  1283               	bcf	3,5	;RP0=0, select bank0
  9497  152A  1303               	bcf	3,6	;RP1=0, select bank0
  9498  152B  00A4               	movwf	??_cmdLCD
  9499  152C                     u3347:	
  9500  152C  0BA4               	decfsz	??_cmdLCD,f
  9501  152D  2D2C               	goto	u3347
  9502  152E  2D2F               	nop2
  9503  152F                     l2521:	
  9504                           
  9505                           ;lcd.c: 21: LCD.EN = 1;
  9506  152F  1283               	bcf	3,5	;RP0=0, select bank0
  9507  1530  1303               	bcf	3,6	;RP1=0, select bank0
  9508  1531  1688               	bsf	8,5	;volatile
  9509                           
  9510                           ;lcd.c: 24: if ( cmd != (0x20) )
  9511  1532  3020               	movlw	32
  9512  1533  0626               	xorwf	cmdLCD@cmd,w
  9513  1534  1903               	btfsc	3,2
  9514  1535  0008               	return
  9515                           
  9516                           ;lcd.c: 25: {
  9517                           ;lcd.c: 26: LCD.RS = 0;
  9518  1536  1208               	bcf	8,4	;volatile
  9519                           
  9520                           ;lcd.c: 27: LCD.BUS = nibble.LO;
  9521  1537  0827               	movf	cmdLCD@nibble,w	;volatile
  9522  1538  390F               	andlw	15
  9523  1539  00A4               	movwf	??_cmdLCD
  9524  153A  0808               	movf	8,w	;volatile
  9525  153B  0624               	xorwf	??_cmdLCD,w
  9526  153C  39F0               	andlw	-16
  9527  153D  0624               	xorwf	??_cmdLCD,w
  9528  153E  0088               	movwf	8	;volatile
  9529                           
  9530                           ;lcd.c: 28: LCD.EN = 0;
  9531  153F  1288               	bcf	8,5	;volatile
  9532                           
  9533                           ;lcd.c: 30: if ( cmd == 0x01 || cmd == 0x02 )
  9534  1540  0326               	decf	cmdLCD@cmd,w
  9535  1541  1903               	btfsc	3,2
  9536  1542  2D47               	goto	l2533
  9537  1543  3002               	movlw	2
  9538  1544  0626               	xorwf	cmdLCD@cmd,w
  9539  1545  1D03               	btfss	3,2
  9540  1546  2D53               	goto	l2535
  9541  1547                     l2533:	
  9542                           
  9543                           ;lcd.c: 31: _delay((unsigned long)((5)*(20000000/4000.0)));
  9544  1547  3021               	movlw	33
  9545  1548  1283               	bcf	3,5	;RP0=0, select bank0
  9546  1549  1303               	bcf	3,6	;RP1=0, select bank0
  9547  154A  00A5               	movwf	??_cmdLCD+1
  9548  154B  3075               	movlw	117
  9549  154C  00A4               	movwf	??_cmdLCD
  9550  154D                     u3357:	
  9551  154D  0BA4               	decfsz	??_cmdLCD,f
  9552  154E  2D4D               	goto	u3357
  9553  154F  0BA5               	decfsz	??_cmdLCD+1,f
  9554  1550  2D4D               	goto	u3357
  9555  1551  2D52               	nop2
  9556  1552  2D5A               	goto	l2537
  9557  1553                     l2535:	
  9558                           
  9559                           ;lcd.c: 32: else
  9560                           ;lcd.c: 33: _delay((unsigned long)((40)*(20000000/4000000.0)));
  9561  1553  3041               	movlw	65
  9562  1554  1283               	bcf	3,5	;RP0=0, select bank0
  9563  1555  1303               	bcf	3,6	;RP1=0, select bank0
  9564  1556  00A4               	movwf	??_cmdLCD
  9565  1557                     u3367:	
  9566  1557  0BA4               	decfsz	??_cmdLCD,f
  9567  1558  2D57               	goto	u3367
  9568  1559  2D5A               	nop2
  9569  155A                     l2537:	
  9570                           
  9571                           ;lcd.c: 35: LCD.EN = 1;
  9572  155A  1283               	bcf	3,5	;RP0=0, select bank0
  9573  155B  1303               	bcf	3,6	;RP1=0, select bank0
  9574  155C  1688               	bsf	8,5	;volatile
  9575  155D  0008               	return
  9576  155E                     __end_of_cmdLCD:	
  9577                           
  9578                           	psect	text44
  9579  09F9                     __ptext44:	
  9580 ;; *************** function ___bmul *****************
  9581 ;; Defined at:
  9582 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;  multiplier      1    wreg     unsigned char 
  9585 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;  multiplier      1    7[BANK0 ] unsigned char 
  9588 ;;  product         1    6[BANK0 ] unsigned char 
  9589 ;; Return value:  Size  Location     Type
  9590 ;;                  1    wreg      unsigned char 
  9591 ;; Registers used:
  9592 ;;		wreg, status,2, status,0
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9598 ;;      Params:         0       1       0       0       0
  9599 ;;      Locals:         0       2       0       0       0
  9600 ;;      Temps:          0       1       0       0       0
  9601 ;;      Totals:         0       4       0       0       0
  9602 ;;Total ram usage:        4 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:    4
  9605 ;; This function calls:
  9606 ;;		Nothing
  9607 ;; This function is called by:
  9608 ;;		_gotoxy
  9609 ;; This function uses a non-reentrant model
  9610 ;;
  9611                           
  9612                           
  9613                           ;psect for function ___bmul
  9614  09F9                     ___bmul:	
  9615                           
  9616                           ;incstack = 0
  9617                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9618                           ;___bmul@multiplier stored from wreg
  9619  09F9  1283               	bcf	3,5	;RP0=0, select bank0
  9620  09FA  1303               	bcf	3,6	;RP1=0, select bank0
  9621  09FB  00A7               	movwf	___bmul@multiplier
  9622  09FC  01A6               	clrf	___bmul@product
  9623  09FD                     l2541:	
  9624  09FD  1C27               	btfss	___bmul@multiplier,0
  9625  09FE  2A03               	goto	l2545
  9626  09FF  0824               	movf	___bmul@multiplicand,w
  9627  0A00  00A5               	movwf	??___bmul
  9628  0A01  0825               	movf	??___bmul,w
  9629  0A02  07A6               	addwf	___bmul@product,f
  9630  0A03                     l2545:	
  9631  0A03  1003               	clrc
  9632  0A04  0DA4               	rlf	___bmul@multiplicand,f
  9633  0A05  1003               	clrc
  9634  0A06  0CA7               	rrf	___bmul@multiplier,f
  9635  0A07  0827               	movf	___bmul@multiplier,w
  9636  0A08  1D03               	btfss	3,2
  9637  0A09  29FD               	goto	l2541
  9638  0A0A  0826               	movf	___bmul@product,w
  9639  0A0B  0008               	return
  9640  0A0C                     __end_of___bmul:	
  9641                           
  9642                           	psect	text45
  9643  1153                     __ptext45:	
  9644 ;; *************** function _bordaSubidaB3 *****************
  9645 ;; Defined at:
  9646 ;;		line 68 in file "bds.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;		None
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;  estadoAtualB    1    6[BANK0 ] unsigned char 
  9651 ;;  resp2           1    5[BANK0 ] unsigned char 
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      unsigned char 
  9654 ;; Registers used:
  9655 ;;		wreg, status,2, status,0, pclath, cstack
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9661 ;;      Params:         0       0       0       0       0
  9662 ;;      Locals:         0       2       0       0       0
  9663 ;;      Temps:          0       1       0       0       0
  9664 ;;      Totals:         0       3       0       0       0
  9665 ;;Total ram usage:        3 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    5
  9668 ;; This function calls:
  9669 ;;		_B3
  9670 ;; This function is called by:
  9671 ;;		_easterEgg
  9672 ;;		_main
  9673 ;; This function uses a non-reentrant model
  9674 ;;
  9675                           
  9676                           
  9677                           ;psect for function _bordaSubidaB3
  9678  1153                     _bordaSubidaB3:	
  9679                           
  9680                           ;bds.c: 70: char estadoAtualB3;
  9681                           ;bds.c: 71: char resp2;
  9682                           ;bds.c: 73: estadoAtualB3 = B3();
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _bordaSubidaB3: [wreg+status,2+status,0+pclath+cstack]
  9686  1153  160A  118A  206E  160A  118A  	fcall	_B3
  9687  1158  1283               	bcf	3,5	;RP0=0, select bank0
  9688  1159  1303               	bcf	3,6	;RP1=0, select bank0
  9689  115A  00A4               	movwf	??_bordaSubidaB3
  9690  115B  0824               	movf	??_bordaSubidaB3,w
  9691  115C  00A6               	movwf	bordaSubidaB3@estadoAtualB3
  9692                           
  9693                           ;bds.c: 75: if( (estadoAtualB3 == 0) && (estadoAnteriorB3 == 1) )
  9694  115D  0826               	movf	bordaSubidaB3@estadoAtualB3,w
  9695  115E  1D03               	btfss	3,2
  9696  115F  2966               	goto	l2741
  9697  1160  034E               	decf	_estadoAnteriorB3,w
  9698  1161  1D03               	btfss	3,2
  9699  1162  2966               	goto	l2741
  9700                           
  9701                           ;bds.c: 76: resp2 = 1;
  9702  1163  01A5               	clrf	bordaSubidaB3@resp2
  9703  1164  0AA5               	incf	bordaSubidaB3@resp2,f
  9704  1165  2967               	goto	l2743
  9705  1166                     l2741:	
  9706                           
  9707                           ;bds.c: 77: else
  9708                           ;bds.c: 78: resp2 = 0;
  9709  1166  01A5               	clrf	bordaSubidaB3@resp2
  9710  1167                     l2743:	
  9711                           
  9712                           ;bds.c: 79: estadoAnteriorB3 = estadoAtualB3;
  9713  1167  0826               	movf	bordaSubidaB3@estadoAtualB3,w
  9714  1168  00A4               	movwf	??_bordaSubidaB3
  9715  1169  0824               	movf	??_bordaSubidaB3,w
  9716  116A  00CE               	movwf	_estadoAnteriorB3
  9717                           
  9718                           ;bds.c: 80: return ( resp2 );
  9719  116B  0825               	movf	bordaSubidaB3@resp2,w
  9720  116C  0008               	return
  9721  116D                     __end_of_bordaSubidaB3:	
  9722                           
  9723                           	psect	text46
  9724  106E                     __ptext46:	
  9725 ;; *************** function _B3 *****************
  9726 ;; Defined at:
  9727 ;;		line 25 in file "bds.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;		None
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;		None
  9732 ;; Return value:  Size  Location     Type
  9733 ;;                  1    wreg      unsigned char 
  9734 ;; Registers used:
  9735 ;;		wreg, status,2, status,0
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : 0/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9741 ;;      Params:         0       0       0       0       0
  9742 ;;      Locals:         0       0       0       0       0
  9743 ;;      Temps:          0       0       0       0       0
  9744 ;;      Totals:         0       0       0       0       0
  9745 ;;Total ram usage:        0 bytes
  9746 ;; Hardware stack levels used:    1
  9747 ;; Hardware stack levels required when called:    4
  9748 ;; This function calls:
  9749 ;;		Nothing
  9750 ;; This function is called by:
  9751 ;;		_bordaSubidaB3
  9752 ;;		_main
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           
  9757                           ;psect for function _B3
  9758  106E                     _B3:	
  9759                           
  9760                           ;bds.c: 27: return ( PORTCbits.RC0 );
  9761                           
  9762                           ;incstack = 0
  9763                           ; Regs used in _B3: [wreg+status,2+status,0]
  9764  106E  1283               	bcf	3,5	;RP0=0, select bank0
  9765  106F  1303               	bcf	3,6	;RP1=0, select bank0
  9766  1070  0807               	movf	7,w	;volatile
  9767  1071  3901               	andlw	1
  9768  1072  0008               	return
  9769  1073                     __end_of_B3:	
  9770                           
  9771                           	psect	text47
  9772  1139                     __ptext47:	
  9773 ;; *************** function _bordaSubidaB2 *****************
  9774 ;; Defined at:
  9775 ;;		line 51 in file "bds.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;		None
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;  estadoAtualB    1    7[BANK0 ] unsigned char 
  9780 ;;  resp1           1    6[BANK0 ] unsigned char 
  9781 ;; Return value:  Size  Location     Type
  9782 ;;                  1    wreg      unsigned char 
  9783 ;; Registers used:
  9784 ;;		wreg, status,2, status,0, pclath, cstack
  9785 ;; Tracked objects:
  9786 ;;		On entry : 0/0
  9787 ;;		On exit  : 0/0
  9788 ;;		Unchanged: 0/0
  9789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9790 ;;      Params:         0       0       0       0       0
  9791 ;;      Locals:         0       2       0       0       0
  9792 ;;      Temps:          0       1       0       0       0
  9793 ;;      Totals:         0       3       0       0       0
  9794 ;;Total ram usage:        3 bytes
  9795 ;; Hardware stack levels used:    1
  9796 ;; Hardware stack levels required when called:    5
  9797 ;; This function calls:
  9798 ;;		_B2
  9799 ;; This function is called by:
  9800 ;;		_easterEgg
  9801 ;;		_main
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           
  9806                           ;psect for function _bordaSubidaB2
  9807  1139                     _bordaSubidaB2:	
  9808                           
  9809                           ;bds.c: 53: char estadoAtualB2;
  9810                           ;bds.c: 54: char resp1;
  9811                           ;bds.c: 56: estadoAtualB2 = B2();
  9812                           
  9813                           ;incstack = 0
  9814                           ; Regs used in _bordaSubidaB2: [wreg+status,2+status,0+pclath+cstack]
  9815  1139  160A  118A  2079  160A  118A  	fcall	_B2
  9816  113E  1283               	bcf	3,5	;RP0=0, select bank0
  9817  113F  1303               	bcf	3,6	;RP1=0, select bank0
  9818  1140  00A5               	movwf	??_bordaSubidaB2
  9819  1141  0825               	movf	??_bordaSubidaB2,w
  9820  1142  00A7               	movwf	bordaSubidaB2@estadoAtualB2
  9821                           
  9822                           ;bds.c: 58: if( (estadoAtualB2 == 0) && (estadoAnteriorB2 == 1) )
  9823  1143  0827               	movf	bordaSubidaB2@estadoAtualB2,w
  9824  1144  1D03               	btfss	3,2
  9825  1145  294C               	goto	l2725
  9826  1146  034F               	decf	_estadoAnteriorB2,w
  9827  1147  1D03               	btfss	3,2
  9828  1148  294C               	goto	l2725
  9829                           
  9830                           ;bds.c: 59: resp1 = 1;
  9831  1149  01A6               	clrf	bordaSubidaB2@resp1
  9832  114A  0AA6               	incf	bordaSubidaB2@resp1,f
  9833  114B  294D               	goto	l2727
  9834  114C                     l2725:	
  9835                           
  9836                           ;bds.c: 60: else
  9837                           ;bds.c: 61: resp1 = 0;
  9838  114C  01A6               	clrf	bordaSubidaB2@resp1
  9839  114D                     l2727:	
  9840                           
  9841                           ;bds.c: 62: estadoAnteriorB2 = estadoAtualB2;
  9842  114D  0827               	movf	bordaSubidaB2@estadoAtualB2,w
  9843  114E  00A5               	movwf	??_bordaSubidaB2
  9844  114F  0825               	movf	??_bordaSubidaB2,w
  9845  1150  00CF               	movwf	_estadoAnteriorB2
  9846                           
  9847                           ;bds.c: 63: return ( resp1 );
  9848  1151  0826               	movf	bordaSubidaB2@resp1,w
  9849  1152  0008               	return
  9850  1153                     __end_of_bordaSubidaB2:	
  9851                           
  9852                           	psect	text48
  9853  1079                     __ptext48:	
  9854 ;; *************** function _B2 *****************
  9855 ;; Defined at:
  9856 ;;		line 21 in file "bds.c"
  9857 ;; Parameters:    Size  Location     Type
  9858 ;;		None
  9859 ;; Auto vars:     Size  Location     Type
  9860 ;;		None
  9861 ;; Return value:  Size  Location     Type
  9862 ;;                  1    wreg      unsigned char 
  9863 ;; Registers used:
  9864 ;;		wreg, status,2, status,0
  9865 ;; Tracked objects:
  9866 ;;		On entry : 0/0
  9867 ;;		On exit  : 0/0
  9868 ;;		Unchanged: 0/0
  9869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9870 ;;      Params:         0       0       0       0       0
  9871 ;;      Locals:         0       0       0       0       0
  9872 ;;      Temps:          0       1       0       0       0
  9873 ;;      Totals:         0       1       0       0       0
  9874 ;;Total ram usage:        1 bytes
  9875 ;; Hardware stack levels used:    1
  9876 ;; Hardware stack levels required when called:    4
  9877 ;; This function calls:
  9878 ;;		Nothing
  9879 ;; This function is called by:
  9880 ;;		_bordaSubidaB2
  9881 ;;		_main
  9882 ;; This function uses a non-reentrant model
  9883 ;;
  9884                           
  9885                           
  9886                           ;psect for function _B2
  9887  1079                     _B2:	
  9888                           
  9889                           ;bds.c: 23: return ( PORTCbits.RC2 );
  9890                           
  9891                           ;incstack = 0
  9892                           ; Regs used in _B2: [wreg+status,2+status,0]
  9893  1079  1283               	bcf	3,5	;RP0=0, select bank0
  9894  107A  1303               	bcf	3,6	;RP1=0, select bank0
  9895  107B  0C07               	rrf	7,w	;volatile
  9896  107C  00A4               	movwf	??_B2
  9897  107D  0C24               	rrf	??_B2,w
  9898  107E  3901               	andlw	1
  9899  107F  0008               	return
  9900  1080                     __end_of_B2:	
  9901                           
  9902                           	psect	text49
  9903  111F                     __ptext49:	
  9904 ;; *************** function _bordaSubidaB1 *****************
  9905 ;; Defined at:
  9906 ;;		line 34 in file "bds.c"
  9907 ;; Parameters:    Size  Location     Type
  9908 ;;		None
  9909 ;; Auto vars:     Size  Location     Type
  9910 ;;  estadoAtualB    1    6[BANK0 ] unsigned char 
  9911 ;;  resp            1    5[BANK0 ] unsigned char 
  9912 ;; Return value:  Size  Location     Type
  9913 ;;                  1    wreg      unsigned char 
  9914 ;; Registers used:
  9915 ;;		wreg, status,2, status,0, pclath, cstack
  9916 ;; Tracked objects:
  9917 ;;		On entry : 0/0
  9918 ;;		On exit  : 0/0
  9919 ;;		Unchanged: 0/0
  9920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9921 ;;      Params:         0       0       0       0       0
  9922 ;;      Locals:         0       2       0       0       0
  9923 ;;      Temps:          0       1       0       0       0
  9924 ;;      Totals:         0       3       0       0       0
  9925 ;;Total ram usage:        3 bytes
  9926 ;; Hardware stack levels used:    1
  9927 ;; Hardware stack levels required when called:    5
  9928 ;; This function calls:
  9929 ;;		_B1
  9930 ;; This function is called by:
  9931 ;;		_main
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           
  9936                           ;psect for function _bordaSubidaB1
  9937  111F                     _bordaSubidaB1:	
  9938                           
  9939                           ;bds.c: 36: char estadoAtualB1;
  9940                           ;bds.c: 37: char resp;
  9941                           ;bds.c: 39: estadoAtualB1 = B1();
  9942                           
  9943                           ;incstack = 0
  9944                           ; Regs used in _bordaSubidaB1: [wreg+status,2+status,0+pclath+cstack]
  9945  111F  160A  118A  2069  160A  118A  	fcall	_B1
  9946  1124  1283               	bcf	3,5	;RP0=0, select bank0
  9947  1125  1303               	bcf	3,6	;RP1=0, select bank0
  9948  1126  00A4               	movwf	??_bordaSubidaB1
  9949  1127  0824               	movf	??_bordaSubidaB1,w
  9950  1128  00A6               	movwf	bordaSubidaB1@estadoAtualB1
  9951                           
  9952                           ;bds.c: 41: if( (estadoAtualB1 == 0) && (estadoAnteriorB1 == 1) )
  9953  1129  0826               	movf	bordaSubidaB1@estadoAtualB1,w
  9954  112A  1D03               	btfss	3,2
  9955  112B  2932               	goto	l3149
  9956  112C  0350               	decf	_estadoAnteriorB1,w
  9957  112D  1D03               	btfss	3,2
  9958  112E  2932               	goto	l3149
  9959                           
  9960                           ;bds.c: 42: resp = 1;
  9961  112F  01A5               	clrf	bordaSubidaB1@resp
  9962  1130  0AA5               	incf	bordaSubidaB1@resp,f
  9963  1131  2933               	goto	l3151
  9964  1132                     l3149:	
  9965                           
  9966                           ;bds.c: 43: else
  9967                           ;bds.c: 44: resp = 0;
  9968  1132  01A5               	clrf	bordaSubidaB1@resp
  9969  1133                     l3151:	
  9970                           
  9971                           ;bds.c: 45: estadoAnteriorB1 = estadoAtualB1;
  9972  1133  0826               	movf	bordaSubidaB1@estadoAtualB1,w
  9973  1134  00A4               	movwf	??_bordaSubidaB1
  9974  1135  0824               	movf	??_bordaSubidaB1,w
  9975  1136  00D0               	movwf	_estadoAnteriorB1
  9976                           
  9977                           ;bds.c: 46: return ( resp );
  9978  1137  0825               	movf	bordaSubidaB1@resp,w
  9979  1138  0008               	return
  9980  1139                     __end_of_bordaSubidaB1:	
  9981                           
  9982                           	psect	text50
  9983  1069                     __ptext50:	
  9984 ;; *************** function _B1 *****************
  9985 ;; Defined at:
  9986 ;;		line 17 in file "bds.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;		None
  9991 ;; Return value:  Size  Location     Type
  9992 ;;                  1    wreg      unsigned char 
  9993 ;; Registers used:
  9994 ;;		wreg, status,2, status,0
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/0
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10000 ;;      Params:         0       0       0       0       0
 10001 ;;      Locals:         0       0       0       0       0
 10002 ;;      Temps:          0       0       0       0       0
 10003 ;;      Totals:         0       0       0       0       0
 10004 ;;Total ram usage:        0 bytes
 10005 ;; Hardware stack levels used:    1
 10006 ;; Hardware stack levels required when called:    4
 10007 ;; This function calls:
 10008 ;;		Nothing
 10009 ;; This function is called by:
 10010 ;;		_bordaSubidaB1
 10011 ;;		_main
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           
 10016                           ;psect for function _B1
 10017  1069                     _B1:	
 10018                           
 10019                           ;bds.c: 19: return ( PORTCbits.RC1 );
 10020                           
 10021                           ;incstack = 0
 10022                           ; Regs used in _B1: [wreg+status,2+status,0]
 10023  1069  1283               	bcf	3,5	;RP0=0, select bank0
 10024  106A  1303               	bcf	3,6	;RP1=0, select bank0
 10025  106B  0C07               	rrf	7,w	;volatile
 10026  106C  3901               	andlw	1
 10027  106D  0008               	return
 10028  106E                     __end_of_B1:	
 10029                           
 10030                           	psect	text51
 10031  1264                     __ptext51:	
 10032 ;; *************** function _asciiToHex *****************
 10033 ;; Defined at:
 10034 ;;		line 98 in file "Serial.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;  a1              1    wreg     unsigned char 
 10037 ;;  a2              1    4[BANK0 ] unsigned char 
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;  a1              1    6[BANK0 ] unsigned char 
 10040 ;;  dez             1    8[BANK0 ] unsigned char 
 10041 ;;  uni             1    7[BANK0 ] unsigned char 
 10042 ;; Return value:  Size  Location     Type
 10043 ;;                  1    wreg      unsigned char 
 10044 ;; Registers used:
 10045 ;;		wreg, status,2, status,0
 10046 ;; Tracked objects:
 10047 ;;		On entry : 0/0
 10048 ;;		On exit  : 0/0
 10049 ;;		Unchanged: 0/0
 10050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10051 ;;      Params:         0       1       0       0       0
 10052 ;;      Locals:         0       3       0       0       0
 10053 ;;      Temps:          0       1       0       0       0
 10054 ;;      Totals:         0       5       0       0       0
 10055 ;;Total ram usage:        5 bytes
 10056 ;; Hardware stack levels used:    1
 10057 ;; Hardware stack levels required when called:    4
 10058 ;; This function calls:
 10059 ;;		Nothing
 10060 ;; This function is called by:
 10061 ;;		_main
 10062 ;; This function uses a non-reentrant model
 10063 ;;
 10064                           
 10065                           
 10066                           ;psect for function _asciiToHex
 10067  1264                     _asciiToHex:	
 10068                           
 10069                           ;incstack = 0
 10070                           ; Regs used in _asciiToHex: [wreg+status,2+status,0]
 10071                           ;asciiToHex@a1 stored from wreg
 10072  1264  1283               	bcf	3,5	;RP0=0, select bank0
 10073  1265  1303               	bcf	3,6	;RP1=0, select bank0
 10074  1266  00A6               	movwf	asciiToHex@a1
 10075                           
 10076                           ;Serial.c: 100: char dez;
 10077                           ;Serial.c: 101: char uni;
 10078                           ;Serial.c: 103: dez = a1;
 10079  1267  0826               	movf	asciiToHex@a1,w
 10080  1268  00A5               	movwf	??_asciiToHex
 10081  1269  0825               	movf	??_asciiToHex,w
 10082  126A  00A8               	movwf	asciiToHex@dez
 10083                           
 10084                           ;Serial.c: 104: uni = a2;
 10085  126B  0824               	movf	asciiToHex@a2,w
 10086  126C  00A5               	movwf	??_asciiToHex
 10087  126D  0825               	movf	??_asciiToHex,w
 10088  126E  00A7               	movwf	asciiToHex@uni
 10089                           
 10090                           ;Serial.c: 106: if(dez > 0x40)
 10091  126F  3041               	movlw	65
 10092  1270  0228               	subwf	asciiToHex@dez,w
 10093  1271  1C03               	skipc
 10094  1272  2A75               	goto	l2903
 10095                           
 10096                           ;Serial.c: 107: dez -= 0x37;
 10097  1273  3037               	movlw	55
 10098  1274  2A76               	goto	L54
 10099  1275                     l2903:	
 10100                           
 10101                           ;Serial.c: 108: else
 10102                           ;Serial.c: 109: dez -= 0x30;
 10103  1275  3030               	movlw	48
 10104  1276                     L54:	
 10105  1276  02A8               	subwf	asciiToHex@dez,f
 10106                           
 10107                           ;Serial.c: 111: if(uni > 0x40)
 10108  1277  3041               	movlw	65
 10109  1278  0227               	subwf	asciiToHex@uni,w
 10110  1279  1C03               	skipc
 10111  127A  2A7D               	goto	l2909
 10112                           
 10113                           ;Serial.c: 112: uni -= 0x37;
 10114  127B  3037               	movlw	55
 10115  127C  2A7E               	goto	L55
 10116  127D                     l2909:	
 10117                           
 10118                           ;Serial.c: 113: else
 10119                           ;Serial.c: 114: uni -= 0x30;
 10120  127D  3030               	movlw	48
 10121  127E                     L55:	
 10122  127E  02A7               	subwf	asciiToHex@uni,f
 10123                           
 10124                           ;Serial.c: 116: dez<<=4;
 10125  127F  0EA8               	swapf	asciiToHex@dez,f
 10126  1280  30F0               	movlw	240
 10127  1281  05A8               	andwf	asciiToHex@dez,f
 10128                           
 10129                           ;Serial.c: 118: rhex = dez | uni;
 10130  1282  0828               	movf	asciiToHex@dez,w
 10131  1283  0427               	iorwf	asciiToHex@uni,w
 10132  1284  00A5               	movwf	??_asciiToHex
 10133  1285  0825               	movf	??_asciiToHex,w
 10134  1286  00D5               	movwf	_rhex
 10135                           
 10136                           ;Serial.c: 120: return (rhex);
 10137  1287  0855               	movf	_rhex,w
 10138  1288  0008               	return
 10139  1289                     __end_of_asciiToHex:	
 10140                           
 10141                           	psect	text52
 10142  123F                     __ptext52:	
 10143 ;; *************** function _geral *****************
 10144 ;; Defined at:
 10145 ;;		line 12 in file "main.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;		None
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;		None
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  1    wreg      void 
 10152 ;; Registers used:
 10153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10154 ;; Tracked objects:
 10155 ;;		On entry : 0/0
 10156 ;;		On exit  : 0/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10159 ;;      Params:         0       0       0       0       0
 10160 ;;      Locals:         0       0       0       0       0
 10161 ;;      Temps:          0       4       0       0       0
 10162 ;;      Totals:         0       4       0       0       0
 10163 ;;Total ram usage:        4 bytes
 10164 ;; Hardware stack levels used:    1
 10165 ;; Hardware stack levels required when called:    3
 10166 ;; This function calls:
 10167 ;;		_interrupt_EUSART_RX
 10168 ;;		_intt0_1ms
 10169 ;; This function is called by:
 10170 ;;		Interrupt level 1
 10171 ;; This function uses a non-reentrant model
 10172 ;;
 10173                           
 10174                           
 10175                           ;psect for function _geral
 10176  123F                     _geral:	
 10177                           
 10178                           ;main.c: 14: INTCONbits.GIE = 0;
 10179  123F  138B               	bcf	11,7	;volatile
 10180                           
 10181                           ;main.c: 16: if( PIE1bits.RCIE && PIR1bits.RCIF )
 10182  1240  1683               	bsf	3,5	;RP0=1, select bank1
 10183  1241  1303               	bcf	3,6	;RP1=0, select bank1
 10184  1242  1E8C               	btfss	12,5	;volatile
 10185  1243  2A4D               	goto	i1l3389
 10186  1244  1283               	bcf	3,5	;RP0=0, select bank0
 10187  1245  1303               	bcf	3,6	;RP1=0, select bank0
 10188  1246  1E8C               	btfss	12,5	;volatile
 10189  1247  2A4D               	goto	i1l3389
 10190                           
 10191                           ;main.c: 17: {
 10192                           ;main.c: 18: interrupt_EUSART_RX();
 10193  1248  160A  118A  20AC  160A  118A  	fcall	_interrupt_EUSART_RX
 10194  124D                     i1l3389:	
 10195                           
 10196                           ;main.c: 19: }
 10197                           ;main.c: 21: if( INTCONbits.T0IE && INTCONbits.T0IF )
 10198  124D  1A8B               	btfsc	11,5	;volatile
 10199  124E  1D0B               	btfss	11,2	;volatile
 10200  124F  2A56               	goto	i1l3397
 10201                           
 10202                           ;main.c: 22: {
 10203                           ;main.c: 23: INTCONbits.T0IF = 0;
 10204  1250  110B               	bcf	11,2	;volatile
 10205                           
 10206                           ;main.c: 24: intt0_1ms();
 10207  1251  160A  118A  216D  160A  118A  	fcall	_intt0_1ms
 10208  1256                     i1l3397:	
 10209                           
 10210                           ;main.c: 25: }
 10211                           ;main.c: 27: INTCONbits.GIE = 1;
 10212  1256  178B               	bsf	11,7	;volatile
 10213  1257  1283               	bcf	3,5	;RP0=0, select bank0
 10214  1258  1303               	bcf	3,6	;RP1=0, select bank0
 10215  1259  0823               	movf	??_geral+3,w
 10216  125A  00FF               	movwf	127
 10217  125B  0822               	movf	??_geral+2,w
 10218  125C  008A               	movwf	10
 10219  125D  0821               	movf	??_geral+1,w
 10220  125E  0084               	movwf	4
 10221  125F  0E20               	swapf	??_geral^0,w
 10222  1260  0083               	movwf	3
 10223  1261  0EFE               	swapf	126,f
 10224  1262  0E7E               	swapf	126,w
 10225  1263  0009               	retfie
 10226  1264                     __end_of_geral:	
 10227                           
 10228                           	psect	intentry
 10229  0004                     __pintentry:	
 10230                           ;incstack = 0
 10231                           ; Regs used in _geral: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10232                           
 10233  0004                     interrupt_function:	
 10234  007E                     saved_w	set	btemp
 10235  0004  00FE               	movwf	btemp
 10236  0005  0E03               	swapf	3,w
 10237  0006  1283               	bcf	3,5	;RP0=0, select bank0
 10238  0007  1303               	bcf	3,6	;RP1=0, select bank0
 10239  0008  00A0               	movwf	??_geral
 10240  0009  0804               	movf	4,w
 10241  000A  00A1               	movwf	??_geral+1
 10242  000B  080A               	movf	10,w
 10243  000C  00A2               	movwf	??_geral+2
 10244  000D  087F               	movf	btemp+1,w
 10245  000E  00A3               	movwf	??_geral+3
 10246  000F  160A  118A  2A3F   	ljmp	_geral
 10247                           
 10248                           	psect	text53
 10249  116D                     __ptext53:	
 10250 ;; *************** function _intt0_1ms *****************
 10251 ;; Defined at:
 10252 ;;		line 9 in file "timer0.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;		None
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;		None
 10257 ;; Return value:  Size  Location     Type
 10258 ;;                  1    wreg      void 
 10259 ;; Registers used:
 10260 ;;		wreg, status,2
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10266 ;;      Params:         0       0       0       0       0
 10267 ;;      Locals:         0       0       0       0       0
 10268 ;;      Temps:          1       0       0       0       0
 10269 ;;      Totals:         1       0       0       0       0
 10270 ;;Total ram usage:        1 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; This function calls:
 10273 ;;		Nothing
 10274 ;; This function is called by:
 10275 ;;		_geral
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           
 10280                           ;psect for function _intt0_1ms
 10281  116D                     _intt0_1ms:	
 10282                           
 10283                           ;timer0.c: 11: TMR0 = 100;
 10284                           
 10285                           ;incstack = 0
 10286                           ; Regs used in _intt0_1ms: [wreg+status,2]
 10287  116D  3064               	movlw	100
 10288  116E  1283               	bcf	3,5	;RP0=0, select bank0
 10289  116F  1303               	bcf	3,6	;RP1=0, select bank0
 10290  1170  0081               	movwf	1	;volatile
 10291                           
 10292                           ;timer0.c: 13: if( ++t0cont >= t0final )
 10293  1171  3001               	movlw	1
 10294  1172  07C9               	addwf	_t0cont,f
 10295  1173  1803               	skipnc
 10296  1174  0ACA               	incf	_t0cont+1,f
 10297  1175  3000               	movlw	0
 10298  1176  07CA               	addwf	_t0cont+1,f
 10299  1177  084A               	movf	_t0cont+1,w
 10300  1178  3A80               	xorlw	128
 10301  1179  00F0               	movwf	??_intt0_1ms
 10302  117A  084C               	movf	_t0final+1,w
 10303  117B  3A80               	xorlw	128
 10304  117C  0270               	subwf	??_intt0_1ms,w
 10305  117D  1D03               	skipz
 10306  117E  2981               	goto	u217_25
 10307  117F  084B               	movf	_t0final,w
 10308  1180  0249               	subwf	_t0cont,w
 10309  1181                     u217_25:	
 10310  1181  1C03               	skipc
 10311  1182  0008               	return
 10312                           
 10313                           ;timer0.c: 14: {
 10314                           ;timer0.c: 15: t0cont = 0;
 10315  1183  1283               	bcf	3,5	;RP0=0, select bank0
 10316  1184  1303               	bcf	3,6	;RP1=0, select bank0
 10317  1185  01C9               	clrf	_t0cont
 10318  1186  01CA               	clrf	_t0cont+1
 10319  1187  0008               	return
 10320  1188                     __end_of_intt0_1ms:	
 10321                           
 10322                           	psect	text54
 10323  10AC                     __ptext54:	
 10324 ;; *************** function _interrupt_EUSART_RX *****************
 10325 ;; Defined at:
 10326 ;;		line 183 in file "eusart.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;		None
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;		None
 10331 ;; Return value:  Size  Location     Type
 10332 ;;                  1    wreg      void 
 10333 ;; Registers used:
 10334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10340 ;;      Params:         0       0       0       0       0
 10341 ;;      Locals:         0       0       0       0       0
 10342 ;;      Temps:          0       0       0       0       0
 10343 ;;      Totals:         0       0       0       0       0
 10344 ;;Total ram usage:        0 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    2
 10347 ;; This function calls:
 10348 ;;		_putFIFO
 10349 ;; This function is called by:
 10350 ;;		_geral
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           
 10355                           ;psect for function _interrupt_EUSART_RX
 10356  10AC                     _interrupt_EUSART_RX:	
 10357                           
 10358                           ;eusart.c: 185: if( RCSTAbits.FERR )
 10359                           
 10360                           ;incstack = 0
 10361                           ; Regs used in _interrupt_EUSART_RX: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10362  10AC  1283               	bcf	3,5	;RP0=0, select bank0
 10363  10AD  1303               	bcf	3,6	;RP1=0, select bank0
 10364  10AE  1D18               	btfss	24,2	;volatile
 10365  10AF  28B2               	goto	i1l571
 10366                           
 10367                           ;eusart.c: 186: {
 10368                           ;eusart.c: 187: RCSTAbits.SPEN = 0;
 10369  10B0  1398               	bcf	24,7	;volatile
 10370                           
 10371                           ;eusart.c: 188: }
 10372  10B1  28BA               	goto	i1l3241
 10373  10B2                     i1l571:	
 10374                           
 10375                           ;eusart.c: 189: else if( RCSTAbits.OERR )
 10376  10B2  1C98               	btfss	24,1	;volatile
 10377  10B3  28B6               	goto	i1l3239
 10378                           
 10379                           ;eusart.c: 190: {
 10380                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 10381  10B4  1218               	bcf	24,4	;volatile
 10382                           
 10383                           ;eusart.c: 192: }
 10384  10B5  28BA               	goto	i1l3241
 10385  10B6                     i1l3239:	
 10386                           
 10387                           ;eusart.c: 193: else
 10388                           ;eusart.c: 194: putFIFO( RCREG );
 10389  10B6  081A               	movf	26,w	;volatile
 10390  10B7  160A  118A  21BF   	fcall	_putFIFO
 10391  10BA                     i1l3241:	
 10392                           
 10393                           ;eusart.c: 196: RCSTAbits.SPEN = 1;
 10394  10BA  1283               	bcf	3,5	;RP0=0, select bank0
 10395  10BB  1303               	bcf	3,6	;RP1=0, select bank0
 10396  10BC  1798               	bsf	24,7	;volatile
 10397                           
 10398                           ;eusart.c: 197: RCSTAbits.CREN = 1;
 10399  10BD  1618               	bsf	24,4	;volatile
 10400  10BE  0008               	return
 10401  10BF                     __end_of_interrupt_EUSART_RX:	
 10402                           
 10403                           	psect	text55
 10404  11BF                     __ptext55:	
 10405 ;; *************** function _putFIFO *****************
 10406 ;; Defined at:
 10407 ;;		line 17 in file "fifo.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;  c               1    wreg     unsigned char 
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;  c               1   11[COMMON] unsigned char 
 10412 ;; Return value:  Size  Location     Type
 10413 ;;                  1    wreg      void 
 10414 ;; Registers used:
 10415 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10416 ;; Tracked objects:
 10417 ;;		On entry : 0/0
 10418 ;;		On exit  : 0/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10421 ;;      Params:         0       0       0       0       0
 10422 ;;      Locals:         1       0       0       0       0
 10423 ;;      Temps:          4       0       0       0       0
 10424 ;;      Totals:         5       0       0       0       0
 10425 ;;Total ram usage:        5 bytes
 10426 ;; Hardware stack levels used:    1
 10427 ;; Hardware stack levels required when called:    1
 10428 ;; This function calls:
 10429 ;;		i1___awmod
 10430 ;; This function is called by:
 10431 ;;		_interrupt_EUSART_RX
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           
 10436                           ;psect for function _putFIFO
 10437  11BF                     _putFIFO:	
 10438                           
 10439                           ;incstack = 0
 10440                           ; Regs used in _putFIFO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10441                           ;putFIFO@c stored from wreg
 10442  11BF  00FB               	movwf	putFIFO@c
 10443                           
 10444                           ;fifo.c: 19: fifo[ fifoHead ] = c;
 10445  11C0  087B               	movf	putFIFO@c,w
 10446  11C1  00F7               	movwf	??_putFIFO
 10447  11C2  087C               	movf	_fifoHead,w
 10448  11C3  3EA0               	addlw	(low (_fifo| 0))& (0+255)
 10449  11C4  0084               	movwf	4
 10450  11C5  0877               	movf	??_putFIFO,w
 10451  11C6  1383               	bcf	3,7	;select IRP bank1
 10452  11C7  0080               	movwf	0
 10453                           
 10454                           ;fifo.c: 20: fifoHead = ++fifoHead % 30;
 10455  11C8  301E               	movlw	30
 10456  11C9  00F0               	movwf	i1___awmod@divisor
 10457  11CA  3000               	movlw	0
 10458  11CB  00F1               	movwf	i1___awmod@divisor+1
 10459  11CC  3001               	movlw	1
 10460  11CD  00F7               	movwf	??_putFIFO
 10461  11CE  0877               	movf	??_putFIFO,w
 10462  11CF  07FC               	addwf	_fifoHead,f
 10463  11D0  087C               	movf	_fifoHead,w
 10464  11D1  00F8               	movwf	??_putFIFO+1
 10465  11D2  01F9               	clrf	??_putFIFO+2
 10466  11D3  0878               	movf	??_putFIFO+1,w
 10467  11D4  00F2               	movwf	i1___awmod@dividend
 10468  11D5  0879               	movf	??_putFIFO+2,w
 10469  11D6  00F3               	movwf	i1___awmod@dividend+1
 10470  11D7  160A  118A  23C2   	fcall	i1___awmod
 10471  11DA  0870               	movf	?i1___awmod,w
 10472  11DB  00FA               	movwf	??_putFIFO+3
 10473  11DC  087A               	movf	??_putFIFO+3,w
 10474  11DD  00FC               	movwf	_fifoHead
 10475  11DE  0008               	return
 10476  11DF                     __end_of_putFIFO:	
 10477                           
 10478                           	psect	text56
 10479  13C2                     __ptext56:	
 10480 ;; *************** function i1___awmod *****************
 10481 ;; Defined at:
 10482 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;  divisor         2    0[COMMON] int 
 10485 ;;  dividend        2    2[COMMON] int 
 10486 ;; Auto vars:     Size  Location     Type
 10487 ;;  __awmod         1    6[COMMON] unsigned char 
 10488 ;;  __awmod         1    5[COMMON] unsigned char 
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  2    0[COMMON] int 
 10491 ;; Registers used:
 10492 ;;		wreg, status,2, status,0
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10498 ;;      Params:         4       0       0       0       0
 10499 ;;      Locals:         2       0       0       0       0
 10500 ;;      Temps:          1       0       0       0       0
 10501 ;;      Totals:         7       0       0       0       0
 10502 ;;Total ram usage:        7 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; This function calls:
 10505 ;;		Nothing
 10506 ;; This function is called by:
 10507 ;;		_putFIFO
 10508 ;; This function uses a non-reentrant model
 10509 ;;
 10510                           
 10511                           
 10512                           ;psect for function i1___awmod
 10513  13C2                     i1___awmod:	
 10514                           
 10515                           ;incstack = 0
 10516                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 10517  13C2  01F6               	clrf	i1___awmod@sign
 10518  13C3  1FF3               	btfss	i1___awmod@dividend+1,7
 10519  13C4  2BCC               	goto	i1l2617
 10520  13C5  09F2               	comf	i1___awmod@dividend,f
 10521  13C6  09F3               	comf	i1___awmod@dividend+1,f
 10522  13C7  0AF2               	incf	i1___awmod@dividend,f
 10523  13C8  1903               	skipnz
 10524  13C9  0AF3               	incf	i1___awmod@dividend+1,f
 10525  13CA  01F6               	clrf	i1___awmod@sign
 10526  13CB  0AF6               	incf	i1___awmod@sign,f
 10527  13CC                     i1l2617:	
 10528  13CC  1FF1               	btfss	i1___awmod@divisor+1,7
 10529  13CD  2BD3               	goto	i1l2621
 10530  13CE  09F0               	comf	i1___awmod@divisor,f
 10531  13CF  09F1               	comf	i1___awmod@divisor+1,f
 10532  13D0  0AF0               	incf	i1___awmod@divisor,f
 10533  13D1  1903               	skipnz
 10534  13D2  0AF1               	incf	i1___awmod@divisor+1,f
 10535  13D3                     i1l2621:	
 10536  13D3  0870               	movf	i1___awmod@divisor,w
 10537  13D4  0471               	iorwf	i1___awmod@divisor+1,w
 10538  13D5  1903               	btfsc	3,2
 10539  13D6  2C00               	goto	i1l2639
 10540  13D7  01F5               	clrf	i1___awmod@counter
 10541  13D8  0AF5               	incf	i1___awmod@counter,f
 10542  13D9                     i1l2629:	
 10543  13D9  1BF1               	btfsc	i1___awmod@divisor+1,7
 10544  13DA  2BE7               	goto	i1l2631
 10545  13DB  3001               	movlw	1
 10546  13DC                     u161_25:	
 10547  13DC  1003               	clrc
 10548  13DD  0DF0               	rlf	i1___awmod@divisor,f
 10549  13DE  0DF1               	rlf	i1___awmod@divisor+1,f
 10550  13DF  3EFF               	addlw	-1
 10551  13E0  1D03               	skipz
 10552  13E1  2BDC               	goto	u161_25
 10553  13E2  3001               	movlw	1
 10554  13E3  00F4               	movwf	??i1___awmod
 10555  13E4  0874               	movf	??i1___awmod,w
 10556  13E5  07F5               	addwf	i1___awmod@counter,f
 10557  13E6  2BD9               	goto	i1l2629
 10558  13E7                     i1l2631:	
 10559  13E7  0871               	movf	i1___awmod@divisor+1,w
 10560  13E8  0273               	subwf	i1___awmod@dividend+1,w
 10561  13E9  1D03               	skipz
 10562  13EA  2BED               	goto	u163_25
 10563  13EB  0870               	movf	i1___awmod@divisor,w
 10564  13EC  0272               	subwf	i1___awmod@dividend,w
 10565  13ED                     u163_25:	
 10566  13ED  1C03               	skipc
 10567  13EE  2BF5               	goto	i1l2635
 10568  13EF  0870               	movf	i1___awmod@divisor,w
 10569  13F0  02F2               	subwf	i1___awmod@dividend,f
 10570  13F1  0871               	movf	i1___awmod@divisor+1,w
 10571  13F2  1C03               	skipc
 10572  13F3  03F3               	decf	i1___awmod@dividend+1,f
 10573  13F4  02F3               	subwf	i1___awmod@dividend+1,f
 10574  13F5                     i1l2635:	
 10575  13F5  3001               	movlw	1
 10576  13F6                     u164_25:	
 10577  13F6  1003               	clrc
 10578  13F7  0CF1               	rrf	i1___awmod@divisor+1,f
 10579  13F8  0CF0               	rrf	i1___awmod@divisor,f
 10580  13F9  3EFF               	addlw	-1
 10581  13FA  1D03               	skipz
 10582  13FB  2BF6               	goto	u164_25
 10583  13FC  3001               	movlw	1
 10584  13FD  02F5               	subwf	i1___awmod@counter,f
 10585  13FE  1D03               	btfss	3,2
 10586  13FF  2BE7               	goto	i1l2631
 10587  1400                     i1l2639:	
 10588  1400  0876               	movf	i1___awmod@sign,w
 10589  1401  1903               	btfsc	3,2
 10590  1402  2C08               	goto	i1l2643
 10591  1403  09F2               	comf	i1___awmod@dividend,f
 10592  1404  09F3               	comf	i1___awmod@dividend+1,f
 10593  1405  0AF2               	incf	i1___awmod@dividend,f
 10594  1406  1903               	skipnz
 10595  1407  0AF3               	incf	i1___awmod@dividend+1,f
 10596  1408                     i1l2643:	
 10597  1408  0873               	movf	i1___awmod@dividend+1,w
 10598  1409  00F1               	movwf	?i1___awmod+1
 10599  140A  0872               	movf	i1___awmod@dividend,w
 10600  140B  00F0               	movwf	?i1___awmod
 10601  140C  0008               	return
 10602  140D                     __end_ofi1___awmod:	
 10603  007E                     btemp	set	126	;btemp
 10604  007E                     wtemp0	set	126


Data Sizes:
    Strings     1017
    Constant    0
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     41      54
    BANK1            80      0      30
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    writeString@str	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_106(CODE[25]), STR_105(CODE[25]), STR_104(CODE[28]), STR_103(CODE[25]), 
		 -> STR_102(CODE[25]), STR_101(CODE[28]), STR_100(CODE[25]), STR_99(CODE[25]), 
		 -> STR_98(CODE[28]), STR_97(CODE[17]), STR_96(CODE[20]), STR_95(CODE[10]), 
		 -> STR_94(CODE[16]), STR_93(CODE[13]), STR_92(CODE[12]), STR_91(CODE[11]), 
		 -> STR_90(CODE[19]), STR_89(CODE[17]), STR_88(CODE[9]), STR_87(CODE[10]), 
		 -> STR_86(CODE[16]), STR_85(CODE[13]), STR_84(CODE[12]), STR_83(CODE[19]), 

    writeLCD@ptr	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_132(CODE[11]), STR_131(CODE[11]), STR_130(CODE[11]), STR_129(CODE[11]), 
		 -> STR_128(CODE[11]), STR_127(CODE[11]), STR_126(CODE[11]), STR_125(CODE[11]), 
		 -> STR_124(CODE[17]), STR_123(CODE[17]), STR_122(CODE[17]), STR_121(CODE[17]), 
		 -> STR_120(CODE[17]), STR_119(CODE[17]), STR_118(CODE[14]), STR_117(CODE[14]), 
		 -> STR_116(CODE[17]), STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[17]), 
		 -> STR_112(CODE[9]), STR_111(CODE[11]), STR_110(CODE[13]), STR_109(CODE[11]), 
		 -> STR_108(CODE[17]), STR_107(CODE[17]), STR_82(CODE[17]), STR_81(CODE[17]), 
		 -> STR_80(CODE[17]), STR_79(CODE[17]), STR_78(CODE[17]), STR_77(CODE[17]), 
		 -> STR_76(CODE[17]), STR_75(CODE[17]), STR_74(CODE[17]), STR_73(CODE[17]), 
		 -> STR_72(CODE[17]), STR_71(CODE[18]), STR_70(CODE[17]), STR_69(CODE[17]), 
		 -> STR_68(CODE[17]), STR_67(CODE[17]), STR_66(CODE[17]), STR_65(CODE[4]), 
		 -> STR_64(CODE[4]), STR_63(CODE[4]), STR_62(CODE[4]), STR_61(CODE[4]), 
		 -> STR_60(CODE[4]), STR_59(CODE[4]), STR_58(CODE[4]), STR_57(CODE[4]), 
		 -> STR_56(CODE[4]), STR_55(CODE[4]), STR_54(CODE[8]), STR_53(CODE[1]), 
		 -> STR_52(CODE[4]), STR_51(CODE[7]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[8]), STR_47(CODE[8]), STR_46(CODE[8]), STR_45(CODE[4]), 
		 -> STR_44(CODE[2]), STR_43(CODE[2]), STR_42(CODE[2]), STR_41(CODE[2]), 
		 -> STR_40(CODE[2]), STR_39(CODE[2]), STR_38(CODE[2]), STR_37(CODE[2]), 
		 -> STR_36(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), STR_27(CODE[2]), STR_26(CODE[2]), STR_25(CODE[2]), 
		 -> STR_24(CODE[2]), STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[2]), 
		 -> STR_20(CODE[2]), STR_19(CODE[2]), STR_18(CODE[2]), STR_17(CODE[2]), 
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[2]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _geral in COMMON

    _interrupt_EUSART_RX->_putFIFO
    _putFIFO->i1___awmod

Critical Paths under _main in BANK0

    _main->_master1
    _main->_slave1
    _transmite->_hexToAscii
    _textSelectionEST->_writeLCD
    _textSelectionCLP->_writeLCD
    _textSelection8->_writeLCD
    _textSelection7->_writeLCD
    _textSelection6->_writeLCD
    _textSelection5->_writeLCD
    _textSelection4->_writeLCD
    _textSelection3->_writeLCD
    _textSelection2->_writeLCD
    _textSelection1->_writeLCD
    ___awdiv->_statusT0limite
    _textLoading->_writeLCD
    _textConfig->_writeLCD
    _textCMpar->_writeLCD
    _textCMdat->_writeLCD
    _statusFIFO->___awmod
    _slave1->_initEUSART
    _master1->_initEUSART
    _writeString->_writeEUSART
    _initEUSART->___lldiv
    _logo->_writeLCD
    _initTimer0->_setT0limite
    _initSerial->_serialOut
    _initLCD->_cmdLCD
    _getFIFO->___awmod
    _easterEgg->_writeLCD
    _writeLCD->_gotoxy
    _gotoxy->___bmul
    _gotoxy->_cmdLCD
    _bordaSubidaB2->_B2

Critical Paths under _geral in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _geral in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _geral in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _geral in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  272544
                                             31 BANK0     10    10      0
                                 _B1
                                 _B2
                                 _B3
                         _asciiToHex
                      _bordaSubidaB1
                      _bordaSubidaB2
                      _bordaSubidaB3
                             _cmdLCD
                          _easterEgg
                      _errorRxEUSART
                            _getFIFO
                             _initBT
                         _initEUSART
                            _initLCD
                         _initSerial
                         _initTimer0
                               _logo
                            _master1
                 _resetErrorRxEUSART
                          _serialOut
                             _slave1
                         _statusFIFO
                          _textCMdat
                          _textCMpar
                         _textConfig
                        _textLoading
                     _textSelection1
                     _textSelection2
                     _textSelection3
                     _textSelection4
                     _textSelection5
                     _textSelection6
                     _textSelection7
                     _textSelection8
                   _textSelectionCLP
                   _textSelectionEST
                          _transmite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _transmite                                            1     1      0     231
                                              8 BANK0      1     1      0
                         _hexToAscii
                           _serialIn
                        _writeEUSART
 ---------------------------------------------------------------------------------
 (2) _serialIn                                             3     3      0      70
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _hexToAscii                                           4     4      0     139
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _textSelectionEST                                     3     3      0   16257
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelectionCLP                                     3     3      0   16257
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection8                                       3     3      0   16257
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection7                                       3     3      0   16257
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection6                                       3     3      0   16257
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection5                                       3     3      0   16257
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection4                                       3     3      0   16257
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection3                                       3     3      0   16257
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection2                                       3     3      0   16257
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textSelection1                                       3     3      0   16257
                                             17 BANK0      3     3      0
                            ___awdiv
                           _statusT0
                     _statusT0limite
                           _writeLCD
 ---------------------------------------------------------------------------------
 (2) _statusT0limite                                       2     0      2       0
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _statusT0                                             2     0      2       0
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1836
                                              6 BANK0      9     5      4
                     _statusT0limite (ARG)
 ---------------------------------------------------------------------------------
 (1) _textLoading                                          3     3      0   14421
                                             17 BANK0      3     3      0
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textConfig                                           0     0      0   14598
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textCMpar                                            0     0      0   14598
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _textCMdat                                            0     0      0   14598
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _statusFIFO                                           2     2      0     628
                                             11 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _slave1                                               3     3      0    2299
                                             28 BANK0      3     3      0
                         _initEUSART
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _resetErrorRxEUSART                                   4     4      0       0
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _master1                                              3     3      0    2299
                                             28 BANK0      3     3      0
                         _initEUSART
                        _writeString
 ---------------------------------------------------------------------------------
 (2) _writeString                                          2     0      2    1603
                                              5 BANK0      2     0      2
                        _writeEUSART
 ---------------------------------------------------------------------------------
 (2) _writeEUSART                                          1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _initEUSART                                          10     6      4     696
                                             18 BANK0     10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              4 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _logo                                                 3     3      0   14598
                                             17 BANK0      3     3      0
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _initTimer0                                           0     0      0      86
                        _setT0limite
 ---------------------------------------------------------------------------------
 (2) _setT0limite                                          2     0      2      86
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           1     1      0      68
                                              7 BANK0      1     1      0
                          _serialOut
 ---------------------------------------------------------------------------------
 (1) _serialOut                                            3     3      0      68
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              3     3      0     177
                                              8 BANK0      3     3      0
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (1) _initBT                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getFIFO                                              5     5      0     652
                                             11 BANK0      5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     628
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _errorRxEUSART                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _easterEgg                                            3     3      0   14736
                                             17 BANK0      3     3      0
                      _bordaSubidaB2
                      _bordaSubidaB3
                             _cmdLCD
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             5     2      3   14421
                                             12 BANK0      5     2      3
                             _gotoxy
                             _putLCD
 ---------------------------------------------------------------------------------
 (2) _putLCD                                               3     3      0      67
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _gotoxy                                               4     3      1     441
                                              8 BANK0      4     3      1
                             ___bmul
                             _cmdLCD
 ---------------------------------------------------------------------------------
 (3) _cmdLCD                                               4     4      0     177
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     156
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _bordaSubidaB3                                        3     3      0      69
                                              4 BANK0      3     3      0
                                 _B3
 ---------------------------------------------------------------------------------
 (3) _B3                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _bordaSubidaB2                                        3     3      0      69
                                              5 BANK0      3     3      0
                                 _B2
 ---------------------------------------------------------------------------------
 (3) _B2                                                   1     1      0       0
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bordaSubidaB1                                        3     3      0      69
                                              4 BANK0      3     3      0
                                 _B1
 ---------------------------------------------------------------------------------
 (2) _B1                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _asciiToHex                                           5     4      1     203
                                              4 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _geral                                                4     4      0     370
                                              0 BANK0      4     4      0
                _interrupt_EUSART_RX
                          _intt0_1ms
 ---------------------------------------------------------------------------------
 (6) _intt0_1ms                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _interrupt_EUSART_RX                                  0     0      0     370
                            _putFIFO
 ---------------------------------------------------------------------------------
 (7) _putFIFO                                              5     5      0     370
                                              7 COMMON     5     5      0
                          i1___awmod
 ---------------------------------------------------------------------------------
 (8) i1___awmod                                            7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _B1
   _B2
   _B3
   _asciiToHex
   _bordaSubidaB1
     _B1
   _bordaSubidaB2
     _B2
   _bordaSubidaB3
     _B3
   _cmdLCD
   _easterEgg
     _bordaSubidaB2
       _B2
     _bordaSubidaB3
       _B3
     _cmdLCD
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _errorRxEUSART
   _getFIFO
     ___awmod
   _initBT
   _initEUSART
     ___lldiv
   _initLCD
     _cmdLCD
   _initSerial
     _serialOut
   _initTimer0
     _setT0limite
   _logo
     _cmdLCD
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _master1
     _initEUSART
       ___lldiv
     _writeString
       _writeEUSART
   _resetErrorRxEUSART
   _serialOut
   _slave1
     _initEUSART
       ___lldiv
     _writeString
       _writeEUSART
   _statusFIFO
     ___awmod
   _textCMdat
     _cmdLCD
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textCMpar
     _cmdLCD
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textConfig
     _cmdLCD
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textLoading
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection1
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection2
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection3
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection4
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection5
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection6
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection7
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelection8
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelectionCLP
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _textSelectionEST
     ___awdiv
       _statusT0limite (ARG)
     _statusT0
     _statusT0limite
     _writeLCD
       _gotoxy
         ___bmul
         _cmdLCD
       _putLCD
   _transmite
     _hexToAscii
     _serialIn
     _writeEUSART
   _writeLCD
     _gotoxy
       ___bmul
       _cmdLCD
     _putLCD

 _geral (ROOT)
   _interrupt_EUSART_RX
     _putFIFO
       i1___awmod
   _intt0_1ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      61       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     29      36       5       67.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      1E       7       37.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      61      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Oct 23 16:19:39 2019

             ?_textSelection1 0070               ?_textSelection2 0070               ?_textSelection3 0070  
             ?_textSelection4 0070               ?_textSelection5 0070               ?_textSelection6 0070  
             ?_textSelection7 0070               ?_textSelection8 0070                             pc 0002  
              ___bmul@product 0026                   __CFG_CP$OFF 0000                   _SSPSTATbits 0094  
                          _B1 1069                            _B2 1079                            _B3 106E  
                          l30 1104                            l28 10FF                  ___awdiv@sign 002C  
                          fsr 0004                           ?_B1 0070                           ?_B2 0070  
                         ?_B3 0070             ?_textSelectionCLP 0070                           l403 028C  
           ?_textSelectionEST 0070                           l541 10A6                           l561 12C0  
                         _LCD 0008                  __CFG_CPD$OFF 0000       __size_of_statusT0limite 0007  
                         fsr0 0004                           indf 0000                  ___awmod@sign 002A  
          ??_textSelectionCLP 0031            ??_textSelectionEST 0031                  __CFG_IESO$ON 0000  
                __CFG_FOSC$HS 0000                          ??_B1 0024                          ??_B2 0024  
                        ??_B3 0024               ??_bordaSubidaB1 0024               ??_bordaSubidaB2 0025  
             ??_bordaSubidaB3 0024                  __CFG_LVP$OFF 0000                          l3007 0AF9  
                        l3015 0B5C                          l3023 0BBF                          l3031 14F7  
                        l3151 1133                          l3303 12B0                          l3039 14A2  
                        l2521 152F                          l3321 10AA                          l2601 165E  
                        l3149 1132                          l2541 09FD                          l2533 1547  
                        l2517 151C                          l2605 166B                          l2535 1553  
                        l2519 1528                          l3511 0175                          l3503 0158  
                        l3431 0070                          l3423 0062                          l3415 0055  
                        l2545 0A03                          l2537 155A                          l2707 139D  
                        l3283 12F1                          l2811 15D0                          l3523 019C  
                        l3451 00B2                          l3443 0096                          l3435 007E  
                        l3427 0069                          l3419 005B                          l2725 114C  
                        l2741 1166                          l2821 15D8                          l2805 15C5  
                        l3605 02EC                          l3509 016C                          l2903 1275  
                        l2727 114D                          l2743 1167                          l2655 1100  
                        l2591 1626                          l2823 15E6                          l2671 1119  
                        l3703 03EB                          l3631 0346                          l3623 0323  
                        l3615 02FC                          l3607 02F2                          l3543 01EC  
                        l3535 01C9                          l3471 00FC                          l3463 00D8  
                        l3455 00BC                          l3447 00A4                          l3439 008C  
                        l2593 1636                          l2833 1607                          l3721 0416  
                        l3713 040C                          l3641 0365                          l3561 023B  
                        l3553 0213                          l2659 10F5                          l2675 110F  
                        l3811 04C7                          l3803 04C7                          l3731 0437  
                        l3571 026A                          l3467 00E6                          l3459 00CA  
                        l2909 127D                          l2861 1426                          l2853 1420  
                        l2837 160F                          l2829 15FC                          l2677 111D  
                        l3709 03FE                          l3637 0359                          l3557 0227  
                        l3573 0277                          l3493 013A                          l3485 0130  
                        l2863 1434                          l2871 144D                          l2695 1326  
                        l3727 0429                          l3655 037F                          l3591 02C6  
                        l3583 02A4                          l3479 011F                          l2849 1419  
                        l2689 131C                          l3745 0454                          l3673 03A8  
                        l3649 036F                          l3577 028F                          l2875 1455  
                        l2867 1442                          l3843 04E6                          l3835 04C7  
                        l3827 04C7                          l3819 04C7                          l3771 0498  
                        l3763 047F                          l3739 0441                          l3691 03D3  
                        l3667 0397                          l3659 038D                          l3499 014A  
                        l2789 12B2                          l3933 04FC                          l3757 046C  
                        l3749 0462                          l3685 03C0                          l3677 03B6  
                        l3589 02C0                          l2967 16CA                          l2975 172D  
                        l2983 1790                          l2991 17F3                          l3935 0525  
                        l3767 048A                          l3695 03E1                          l3599 02D0  
                        l3937 0551                          l3777 04AC                          l3849 04EF  
                        l3795 04C7                          l3787 04C7                          l3779 04C7  
                        l2999 0A96                          STR_1 0921                          STR_2 09F1  
                        STR_3 09F5                          STR_4 09F7                          STR_5 09F3  
                        STR_6 0844                          STR_7 0899                          STR_8 0855  
                        STR_9 0888                          u2105 0BB0                          u2035 16BB  
                        u2115 14E8                          u2045 171E                          u2125 1493  
                        u3007 0CEE                          u2055 1781                          u3017 0D07  
                        u2065 17E4                          u3107 0BE7                          u3027 0D20  
                        u2075 0A87                          u3117 0C02                          u1525 162A  
                        u3037 12E8                          u2085 0AEA                          u3207 0EB9  
                        u3127 0C1D                          u3047 12FC                          u2095 0B4D  
                        u3217 0EE2                          u3137 0C38                          u1545 1638  
                        u3057 0584                          u3307 0FF1                          u3227 0EFF  
                        u3147 0C53                          u1555 164D                          u3067 059D  
                        u3317 1375                          u3237 0F13                          u3157 0C6F  
                        u1565 165F                          u3077 05B6                          u3327 1389  
                        u3247 0F2E                          u3167 0A1D                          u3087 05CF  
                        u3337 1522                          u3257 0F4B                          u3177 0E48  
                        u3097 05E8                          u3347 152C                          u3267 0F5F  
                        u3187 0E65                          u3357 154D                          u3277 0F88  
                        u3197 0E8E                          u1845 15DB                          u3367 1557  
                        u3287 0FB2                          u3297 0FDC                          u1945 1429  
                        u1785 1569                          u1865 15E7                          u2907 0D7D  
                        u1875 15F3                          u1965 143A                          u2917 0D99  
                        u1885 15FD                          u1975 1443                          u2927 0DB5  
                        u2937 0DD1                          u2947 0DED                          u2957 0E09  
                        u2877 033E                          u2967 0E25                          u2887 0D45  
                        u2977 0CA3                          u2897 0D61                          u2987 0CBC  
                        u2997 0CD5                          _TMR0 0001                  __CFG_WRT$OFF 0000  
               __CFG_FCMEN$ON 0000                          _fifo 00A0                          _comp 0052  
                        _main 0029                          _logo 0BCC                          _rhex 0055  
                        _tdez 0053                          btemp 007E                          _tuni 0054  
               __CFG_BOREN$ON 0000                          start 0012             ___bmul@multiplier 0027  
               __CFG_MCLRE$ON 0000                writeString@str 0025                   _writeEUSART 1073  
               hexToAscii@dez 0027                 hexToAscii@uni 0026                         ?_main 0070  
                       ?_logo 0070               __end_of___awdiv 1614                         STR_10 0855  
                       STR_11 08BB                         STR_12 0855                         STR_20 09E7  
                       STR_21 09E7                         STR_13 07BA                         STR_30 09ED  
                       STR_22 09E9                         STR_14 09E7                         STR_31 080F  
                       STR_23 080F                         STR_15 080F                         STR_24 08FD  
                       STR_32 09EB                         STR_40 09EF                         STR_16 09E5  
                       STR_17 09E5                         STR_25 08FD                         STR_33 09EB  
                       STR_41 09EF                 __CFG_WDTE$OFF 0000                         STR_42 09E5  
                       STR_18 08FD                         STR_50 07EB                         STR_34 09EF  
                       STR_26 09EB                         STR_43 080F                         STR_35 080F  
                       STR_27 080F                         STR_19 080F                         STR_51 09CA  
                       STR_60 09D1                         STR_28 09E9                         STR_36 09ED  
                       STR_44 07BA               __end_of___awmod 145A                         STR_61 09D5  
                       STR_29 09E9                         STR_37 09ED                         STR_45 07EB  
                       STR_46 0809                         STR_70 0800                         STR_62 09DD  
                       STR_38 07BA                         STR_39 080F                         STR_63 09D1  
                       STR_47 09C2                         STR_71 0711                         STR_72 0800  
                       STR_48 09C2                         STR_64 09D9                         STR_80 08DD  
                       STR_49 080D                         STR_65 09E1                         STR_57 09D1  
                       STR_81 08FF                         STR_73 0877                         STR_90 06FE  
                       STR_74 0800                         STR_82 08CC                         STR_58 09D5  
                       STR_66 0866                         STR_59 09DD                         STR_91 099B  
                       STR_67 08AA                         STR_75 0811                         STR_83 06FE  
                       STR_84 0984                         STR_92 0978                         STR_76 0822  
                       STR_68 0800                         STR_93 096B                         STR_85 096B  
                       STR_77 0910                         STR_69 0833                         STR_94 0932  
                       STR_86 0932                         STR_78 08CC                         STR_95 09A6  
                       STR_87 09A6                         STR_79 08EE                         STR_88 09B9  
                       STR_96 06EA                         STR_97 07EF                         STR_89 07EF  
                       STR_98 0600                         STR_99 066D                         _ANSEL 0188  
             __end_of___lldiv 1674               ___awdiv@divisor 0026                         i1l571 10B2  
             ___awdiv@counter 002B                         _RCREG 001A                         _PORTB 0006  
             __end_of_getFIFO 12B2                         _TRISB 0086                         _TRISD 0088  
                       _TXREG 0019                   _writeString 12B2                 __CFG_PWRTE$ON 0000  
              i1___awmod@sign 0076               __end_of_initLCD 0A40                         _geral 123F  
             __end_of_master1 05F8                         main@a 0046   __size_of_resetErrorRxEUSART 002B  
                       main@i 0045                         main@t 0042               __end_of_putFIFO 11DF  
                       pclath 000A                  ?_setT0limite 0024                         status 0003  
                       wtemp0 007E            __size_ofi1___awmod 004B               __initialization 0015  
                __end_of_main 0557                  __end_of_logo 0C76    bordaSubidaB3@estadoAtualB3 0026  
              hexToAscii@dado 0025                        ??_main 003F                        ??_logo 0031  
                      ?_geral 0070                        STR_100 0654                        STR_101 0638  
                      STR_110 095E                        STR_102 06D1                        STR_111 0990  
                      STR_103 06B8                        STR_112 09B0                        STR_120 0778  
                      STR_104 061C                        STR_113 079A                        STR_121 0789  
                      STR_105 069F                        STR_130 0990                        STR_122 0767  
                      STR_114 0734                        STR_106 0686                        STR_131 0990  
                      STR_107 07CD                        STR_123 07AB                        STR_115 0723  
                      STR_132 0990                        STR_108 07DE                        STR_124 0756  
                      STR_116 0745                        STR_125 0990                        STR_109 0990  
                      STR_117 0950                        STR_126 0990                        STR_118 0942  
                      STR_127 0990                        STR_119 07BC                        STR_128 0990  
                      STR_129 0990              ___awdiv@dividend 0028                        _ANSELH 0189  
                      i1l3241 10BA                        i1l2621 13D3                        i1l2631 13E7  
                      i1l3239 10B6                        i1l2617 13CC                        i1l2643 1408  
                      i1l2635 13F5                        i1l2629 13D9                        i1l2639 1400  
                      i1l3397 1256                        i1l3389 124D                        u161_25 13DC  
                      u217_25 1181                        u163_25 13ED                        u164_25 13F6  
      __size_of_errorRxEUSART 000C                        _t0cont 0049                        ___bmul 09F9  
                      _cmdLCD 1504                     ??___awdiv 002A                     ??___awmod 0028  
                   ??___lldiv 002C                        _initBT 1095                     ??_getFIFO 002B  
                      _gotoxy 10D5              ___awdiv@quotient 002D               ___awmod@divisor 0024  
                      _putLCD 1360                        _slave1 0C76                        _serial 0051  
             ___awmod@counter 0029                        main@a1 0043                        main@a2 0044  
                   ??_initLCD 0028             __end_ofi1___awmod 140D                _statusT0limite 108E  
                   ??_master1 003C              __end_of_serialIn 111F                        saved_w 007E  
                   ??_putFIFO 0077              __end_of_statusT0 108E              __end_of_writeLCD 13C2  
                ?_textLoading 0070       __end_of__initialization 0025              ??_textSelection1 0031  
            ??_textSelection2 0031              ??_textSelection3 0031              ??_textSelection4 0031  
            ??_textSelection5 0031              ??_textSelection6 0031              ??_textSelection7 0031  
            ??_textSelection8 0031           ___bmul@multiplicand 0024                __pcstackCOMMON 0070  
               __end_of_geral 1264                    __end_of_B1 106E                    __end_of_B2 1080  
                  __end_of_B3 1073        __end_of_statusT0limite 1095            __size_of_easterEgg 01D3  
__size_of_interrupt_EUSART_RX 0013                _OPTION_REGbits 0081                 _errorRxEUSART 10A0  
                     ??_geral 0020                    __pbssBANK0 0049                    __pbssBANK1 00A0  
   __size_of_textSelectionCLP 0055     __size_of_textSelectionEST 0055            __size_of_intt0_1ms 001B  
        __size_of_setT0limite 0007                    __pmaintext 0029                       ?___bmul 0024  
                cmdLCD@nibble 0027                  ?_writeEUSART 0070                       ?_cmdLCD 0070  
                  _asciiToHex 1264                    __pintentry 0004                       _CCP1CON 0017  
                     ?_initBT 0070                       ?_gotoxy 0028                       ?_putLCD 0070  
                     ?_slave1 0070               ?_statusT0limite 0024            __size_of_serialOut 0019  
          __size_of_textCMdat 0020            __size_of_textCMpar 0020                ?_errorRxEUSART 0070  
                ?_writeString 0025                    _hexToAscii 1306            __size_of_transmite 002D  
                  __stringtab 1000         __end_of_bordaSubidaB1 1139         __end_of_bordaSubidaB2 1153  
       __end_of_bordaSubidaB3 116D                    _initEUSART 155E             __end_of_easterEgg 1000  
                  getFIFO@aux 002F                     ?_serialIn 0070                       _t0final 004B  
             __size_of___bmul 0013                    _initSerial 10BF                    _initTimer0 1188  
                     ___awdiv 15B9               __size_of_cmdLCD 005A                       ___awmod 140D  
                     ___lldiv 1614                     ?_statusT0 0024                       _getFIFO 1289  
             __size_of_initBT 000B               __size_of_gotoxy 0018                     ?_writeLCD 002C  
             __size_of_putLCD 0030               __size_of_slave1 00BA                       __ptext0 0000  
                     __ptext1 1333                       __ptext2 1106                       __ptext3 1306  
                     __ptext4 14AF                       __ptext5 145A                       __ptext6 0B69  
                     __ptext7 0B06                       __ptext8 0AA3                       __ptext9 0A40  
           __end_of_intt0_1ms 1188                  writeEUSART@d 0024                       _initLCD 0A0C  
                     _master1 0557              ___awmod@dividend 0026                       _putFIFO 11BF  
  __end_of_resetErrorRxEUSART 1306                       main@aux 0047                       clrloop0 05F9  
        end_of_initialization 0025             __end_of_serialOut 1106          __size_of_textLoading 00FD  
                     gotoxy@x 002B                       gotoxy@y 0028             __end_of_textCMdat 11FF  
           __end_of_textCMpar 121F                       putLCD@c 0025               ___lldiv@divisor 0024  
             ___lldiv@counter 0031             bordaSubidaB1@resp 0025                    ??_serialIn 0024  
                   _RCSTAbits 0018                   ?_asciiToHex 0024                  __pstringtext 0600  
           __end_of_transmite 1360                    ??_statusT0 0026                    ??_writeLCD 002F  
             ??_errorRxEUSART 0024                     _PORTBbits 0006                     _PORTCbits 0007  
                  _textConfig 121F                   ?_hexToAscii 0070                     _TRISAbits 0085  
                   _TRISCbits 0087                     i1___awmod 13C2                    _statusFIFO 11A3  
            _textSelectionCLP 145A              _textSelectionEST 14AF                   ?_initEUSART 0032  
                   _TXSTAbits 0098           _interrupt_EUSART_RX 10AC                  setT0limite@c 0024  
                 ?_initSerial 0070                   ?_initTimer0 0070                __end_of___bmul 0A0C  
              __end_of_cmdLCD 155E          __size_of_writeEUSART 0006                   _BAUDCTLbits 0187  
              __end_of_initBT 10A0                __end_of_gotoxy 10ED                __end_of_putLCD 1390  
              __end_of_slave1 0D30          ?_interrupt_EUSART_RX 0070           start_initialization 0015  
                  ?i1___awmod 0070          __size_of_writeString 0029           __size_of_asciiToHex 0025  
         __size_of_hexToAscii 002D    bordaSubidaB1@estadoAtualB1 0026              ??_statusT0limite 0026  
                    ??___bmul 0025                      ??_cmdLCD 0024                      ??_initBT 0024  
          i1___awmod@dividend 0072                      ??_gotoxy 0029                      ??_putLCD 0024  
                    ??_slave1 003C                   ?_textConfig 0070         ??_interrupt_EUSART_RX 007C  
         __size_of_initEUSART 005B                   __pbssCOMMON 007C                     ___latbits 0002  
               __pcstackBANK0 0020           __size_of_initSerial 0016           __size_of_initTimer0 001B  
                 ?_statusFIFO 0070                 ??_setT0limite 0026                     cmdLCD@cmd 0026  
                   _easterEgg 0E2D                      ?___awdiv 0026                      ?___awmod 0024  
                    ?___lldiv 0024             __size_of_serialIn 0019                      ?_getFIFO 0070  
     __size_of_textSelection1 0063       __size_of_textSelection2 0063       __size_of_textSelection3 0063  
     __size_of_textSelection4 0063       __size_of_textSelection5 0063       __size_of_textSelection6 0063  
     __size_of_textSelection7 0063       __size_of_textSelection8 0063                     __pstrings 1000  
           __size_of_statusT0 0007                      ?_initLCD 0070                      ?_master1 0070  
           __size_of_writeLCD 0032                      ?_putFIFO 0070                     _intt0_1ms 116D  
                 ??i1___awmod 0074                __size_of_geral 0025                   writeLCD@ptr 002D  
                 __size_of_B1 0005                   __size_of_B2 0007                   __size_of_B3 0005  
               asciiToHex@dez 0028                 asciiToHex@uni 0027                    serialOut@d 0025  
                  serialOut@i 0026             interrupt_function 0004                     clear_ram0 05F8  
         __size_of_textConfig 0020                      _PIE1bits 008C            _resetErrorRxEUSART 12DB  
                    _PIR1bits 000C           __end_of_setT0limite 1087                     _serialOut 10ED  
                   _textCMdat 11DF                     _textCMpar 11FF                  ??_asciiToHex 0025  
                  ?_easterEgg 0070           ?_resetErrorRxEUSART 0070                      _SPBRbits 0099  
         __size_of_statusFIFO 001C        __size_of_bordaSubidaB1 001A        __size_of_bordaSubidaB2 001A  
      __size_of_bordaSubidaB3 001A      __end_of_textSelectionCLP 14AF      __end_of_textSelectionEST 1504  
                 __stringbase 1012            initEUSART@baudRate 0032                     _transmite 1333  
                putLCD@nibble 0026                  ??_hexToAscii 0024                    ?_intt0_1ms 0070  
        ??_resetErrorRxEUSART 0024                 ??_textLoading 0031            __end_of_asciiToHex 1289  
                ??_initEUSART 0036                    ?_serialOut 0070              _estadoAnteriorB1 0050  
            _estadoAnteriorB2 004F              _estadoAnteriorB3 004E            __end_of_hexToAscii 1333  
                  ?_textCMdat 0070                  ??_initSerial 0027                  ??_initTimer0 0026  
                  ?_textCMpar 0070             i1___awmod@divisor 0070             i1___awmod@counter 0075  
            __size_of___awdiv 005B              __size_of___awmod 004D              __size_of___lldiv 0060  
            __size_of_getFIFO 0029            __end_of__stringtab 1012                    ?_transmite 0070  
       __end_of_errorRxEUSART 10AC              __size_of_initLCD 0034            __end_of_initEUSART 15B9  
            __size_of_master1 00A1                      _fifoHead 007C              __size_of_putFIFO 0020  
                    _fifoTail 004D                      __ptext10 179D                      __ptext11 173A  
                    __ptext20 11DF                      __ptext12 16D7                      __ptext21 11A3  
                    __ptext13 1674                      __ptext30 1188                      __ptext22 0C76  
                    __ptext14 108E                      __ptext31 1080                      __ptext23 12DB  
                    __ptext15 1087                      __ptext40 1390                      __ptext32 10BF  
                    __ptext24 0557                      __ptext16 15B9                      __ptext41 1360  
                    __ptext33 10ED                      __ptext25 12B2                      __ptext17 0D30  
                    __ptext50 1069                      __ptext42 10D5                      __ptext34 0A0C  
                    __ptext26 1073                      __ptext18 121F                      __ptext51 1264  
                    __ptext43 1504                      __ptext35 1095                      __ptext27 155E  
                    __ptext19 11FF                      __ptext52 123F                      __ptext44 09F9  
                    __ptext36 1289                      __ptext28 1614                      __ptext53 116D  
                    __ptext45 1153                      __ptext37 140D                      __ptext29 0BCC  
                    __ptext54 10AC                      __ptext46 106E                      __ptext38 10A0  
                    __ptext55 11BF                      __ptext47 1139                      __ptext39 0E2D  
                    __ptext56 13C2                      __ptext48 1079                      __ptext49 111F  
           __CFG_BOR4V$BOR40V 0000                  serialIn@dado 0025            __end_of_initSerial 10D5  
          __end_of_initTimer0 11A3                 _bordaSubidaB1 111F                 _bordaSubidaB2 1139  
               _bordaSubidaB3 1153                   _setT0limite 1080                 __size_of_main 052E  
               __size_of_logo 00AA                     serialIn@i 0026                  asciiToHex@a1 0026  
                asciiToHex@a2 0024           __end_of_textLoading 0E2D                      _serialIn 1106  
               ??_writeEUSART 0024                   ??_easterEgg 0031    bordaSubidaB2@estadoAtualB2 0027  
                    _statusT0 1087                _textSelection1 1674                _textSelection2 16D7  
              _textSelection3 173A                _textSelection4 179D                _textSelection5 0A40  
              _textSelection6 0AA3                _textSelection7 0B06                _textSelection8 0B69  
                    _writeLCD 1390                  ??_textConfig 0031                 ??_writeString 0027  
                  _INTCONbits 000B                   ??_intt0_1ms 0070                  ??_statusFIFO 002B  
              ?_bordaSubidaB1 0070                ?_bordaSubidaB2 0070                ?_bordaSubidaB3 0070  
                    intlevel1 0000              ___lldiv@dividend 0028                      putFIFO@c 007B  
                   writeLCD@x 0030                     writeLCD@y 002C            bordaSubidaB2@resp1 0026  
          __end_of_textConfig 123F            bordaSubidaB3@resp2 0025                     stringcode 100A  
                 ??_serialOut 0024                   ??_textCMdat 0031        __end_of_textSelection1 16D7  
      __end_of_textSelection2 173A        __end_of_textSelection3 179D        __end_of_textSelection4 1800  
      __end_of_textSelection5 0AA3        __end_of_textSelection6 0B06        __end_of_textSelection7 0B69  
      __end_of_textSelection8 0BCC                   ??_textCMpar 0031   __end_of_interrupt_EUSART_RX 10BF  
          __end_of_statusFIFO 11BF           __end_of_writeEUSART 1079                   ??_transmite 0028  
            ___lldiv@quotient 002D                      stringtab 1000           __end_of_writeString 12DB  
                 _textLoading 0D30  
